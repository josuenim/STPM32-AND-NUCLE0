
SPI_V_I_W.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bcc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08009c88  08009c88  00019c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a21c  0800a21c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a224  0800a224  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a224  0800a224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a22c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001dc  0800a408  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800a408  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de67  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd9  00000000  00000000  0002e0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f4  00000000  00000000  00030c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c947  00000000  00000000  00031514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb55  00000000  00000000  0004de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b570a  00000000  00000000  0005c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a94  00000000  00000000  001120bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00115b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009c70 	.word	0x08009c70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	08009c70 	.word	0x08009c70

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f873 	bl	8001524 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffc3 	bl	80013d4 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f865 	bl	8001524 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f85b 	bl	8001524 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffeb 	bl	8001458 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffe1 	bl	8001458 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f81c 	bl	8000510 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_l2d>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0006      	movs	r6, r0
 80004e8:	0008      	movs	r0, r1
 80004ea:	f001 ff17 	bl	800231c <__aeabi_i2d>
 80004ee:	2200      	movs	r2, #0
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_l2d+0x28>)
 80004f2:	f001 f87b 	bl	80015ec <__aeabi_dmul>
 80004f6:	000d      	movs	r5, r1
 80004f8:	0004      	movs	r4, r0
 80004fa:	0030      	movs	r0, r6
 80004fc:	f001 ff3e 	bl	800237c <__aeabi_ui2d>
 8000500:	002b      	movs	r3, r5
 8000502:	0022      	movs	r2, r4
 8000504:	f000 f918 	bl	8000738 <__aeabi_dadd>
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41f00000 	.word	0x41f00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0004      	movs	r4, r0
 800051e:	000d      	movs	r5, r1
 8000520:	4692      	mov	sl, r2
 8000522:	4699      	mov	r9, r3
 8000524:	b083      	sub	sp, #12
 8000526:	428b      	cmp	r3, r1
 8000528:	d830      	bhi.n	800058c <__udivmoddi4+0x7c>
 800052a:	d02d      	beq.n	8000588 <__udivmoddi4+0x78>
 800052c:	4649      	mov	r1, r9
 800052e:	4650      	mov	r0, sl
 8000530:	f002 f836 	bl	80025a0 <__clzdi2>
 8000534:	0029      	movs	r1, r5
 8000536:	0006      	movs	r6, r0
 8000538:	0020      	movs	r0, r4
 800053a:	f002 f831 	bl	80025a0 <__clzdi2>
 800053e:	1a33      	subs	r3, r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	3b20      	subs	r3, #32
 8000544:	d434      	bmi.n	80005b0 <__udivmoddi4+0xa0>
 8000546:	469b      	mov	fp, r3
 8000548:	4653      	mov	r3, sl
 800054a:	465a      	mov	r2, fp
 800054c:	4093      	lsls	r3, r2
 800054e:	4642      	mov	r2, r8
 8000550:	001f      	movs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d83b      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800055c:	42af      	cmp	r7, r5
 800055e:	d100      	bne.n	8000562 <__udivmoddi4+0x52>
 8000560:	e079      	b.n	8000656 <__udivmoddi4+0x146>
 8000562:	465b      	mov	r3, fp
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5e>
 800056c:	e076      	b.n	800065c <__udivmoddi4+0x14c>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	465a      	mov	r2, fp
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4642      	mov	r2, r8
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e029      	b.n	80005dc <__udivmoddi4+0xcc>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9cf      	bls.n	800052c <__udivmoddi4+0x1c>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8e>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b003      	add	sp, #12
 80005a4:	bcf0      	pop	{r4, r5, r6, r7}
 80005a6:	46bb      	mov	fp, r7
 80005a8:	46b2      	mov	sl, r6
 80005aa:	46a9      	mov	r9, r5
 80005ac:	46a0      	mov	r8, r4
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	4642      	mov	r2, r8
 80005b2:	469b      	mov	fp, r3
 80005b4:	2320      	movs	r3, #32
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	4652      	mov	r2, sl
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	4641      	mov	r1, r8
 80005be:	0013      	movs	r3, r2
 80005c0:	464a      	mov	r2, r9
 80005c2:	408a      	lsls	r2, r1
 80005c4:	0017      	movs	r7, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	431f      	orrs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d9c3      	bls.n	800055c <__udivmoddi4+0x4c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	4643      	mov	r3, r8
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0d8      	beq.n	8000594 <__udivmoddi4+0x84>
 80005e2:	07fb      	lsls	r3, r7, #31
 80005e4:	0872      	lsrs	r2, r6, #1
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4646      	mov	r6, r8
 80005ea:	087b      	lsrs	r3, r7, #1
 80005ec:	e00e      	b.n	800060c <__udivmoddi4+0xfc>
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d101      	bne.n	80005f6 <__udivmoddi4+0xe6>
 80005f2:	42a2      	cmp	r2, r4
 80005f4:	d80c      	bhi.n	8000610 <__udivmoddi4+0x100>
 80005f6:	1aa4      	subs	r4, r4, r2
 80005f8:	419d      	sbcs	r5, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	1924      	adds	r4, r4, r4
 80005fe:	416d      	adcs	r5, r5
 8000600:	2100      	movs	r1, #0
 8000602:	3e01      	subs	r6, #1
 8000604:	1824      	adds	r4, r4, r0
 8000606:	414d      	adcs	r5, r1
 8000608:	2e00      	cmp	r6, #0
 800060a:	d006      	beq.n	800061a <__udivmoddi4+0x10a>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d9ee      	bls.n	80005ee <__udivmoddi4+0xde>
 8000610:	3e01      	subs	r6, #1
 8000612:	1924      	adds	r4, r4, r4
 8000614:	416d      	adcs	r5, r5
 8000616:	2e00      	cmp	r6, #0
 8000618:	d1f8      	bne.n	800060c <__udivmoddi4+0xfc>
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	465b      	mov	r3, fp
 8000620:	1900      	adds	r0, r0, r4
 8000622:	4169      	adcs	r1, r5
 8000624:	2b00      	cmp	r3, #0
 8000626:	db24      	blt.n	8000672 <__udivmoddi4+0x162>
 8000628:	002b      	movs	r3, r5
 800062a:	465a      	mov	r2, fp
 800062c:	4644      	mov	r4, r8
 800062e:	40d3      	lsrs	r3, r2
 8000630:	002a      	movs	r2, r5
 8000632:	40e2      	lsrs	r2, r4
 8000634:	001c      	movs	r4, r3
 8000636:	465b      	mov	r3, fp
 8000638:	0015      	movs	r5, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	db2a      	blt.n	8000694 <__udivmoddi4+0x184>
 800063e:	0026      	movs	r6, r4
 8000640:	409e      	lsls	r6, r3
 8000642:	0033      	movs	r3, r6
 8000644:	0026      	movs	r6, r4
 8000646:	4647      	mov	r7, r8
 8000648:	40be      	lsls	r6, r7
 800064a:	0032      	movs	r2, r6
 800064c:	1a80      	subs	r0, r0, r2
 800064e:	4199      	sbcs	r1, r3
 8000650:	9000      	str	r0, [sp, #0]
 8000652:	9101      	str	r1, [sp, #4]
 8000654:	e79e      	b.n	8000594 <__udivmoddi4+0x84>
 8000656:	42a3      	cmp	r3, r4
 8000658:	d8bc      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800065a:	e782      	b.n	8000562 <__udivmoddi4+0x52>
 800065c:	4642      	mov	r2, r8
 800065e:	2320      	movs	r3, #32
 8000660:	2100      	movs	r1, #0
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	2201      	movs	r2, #1
 800066c:	40da      	lsrs	r2, r3
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	e785      	b.n	800057e <__udivmoddi4+0x6e>
 8000672:	4642      	mov	r2, r8
 8000674:	2320      	movs	r3, #32
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	4646      	mov	r6, r8
 800067c:	409a      	lsls	r2, r3
 800067e:	0023      	movs	r3, r4
 8000680:	40f3      	lsrs	r3, r6
 8000682:	4644      	mov	r4, r8
 8000684:	4313      	orrs	r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	40e2      	lsrs	r2, r4
 800068a:	001c      	movs	r4, r3
 800068c:	465b      	mov	r3, fp
 800068e:	0015      	movs	r5, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	dad4      	bge.n	800063e <__udivmoddi4+0x12e>
 8000694:	4642      	mov	r2, r8
 8000696:	002f      	movs	r7, r5
 8000698:	2320      	movs	r3, #32
 800069a:	0026      	movs	r6, r4
 800069c:	4097      	lsls	r7, r2
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	40de      	lsrs	r6, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	4333      	orrs	r3, r6
 80006a6:	e7cd      	b.n	8000644 <__udivmoddi4+0x134>

080006a8 <__aeabi_ui2f>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	1e04      	subs	r4, r0, #0
 80006ac:	d00e      	beq.n	80006cc <__aeabi_ui2f+0x24>
 80006ae:	f001 ff59 	bl	8002564 <__clzsi2>
 80006b2:	239e      	movs	r3, #158	; 0x9e
 80006b4:	0001      	movs	r1, r0
 80006b6:	1a1b      	subs	r3, r3, r0
 80006b8:	2b96      	cmp	r3, #150	; 0x96
 80006ba:	dc0c      	bgt.n	80006d6 <__aeabi_ui2f+0x2e>
 80006bc:	2808      	cmp	r0, #8
 80006be:	d02c      	beq.n	800071a <__aeabi_ui2f+0x72>
 80006c0:	3908      	subs	r1, #8
 80006c2:	408c      	lsls	r4, r1
 80006c4:	0264      	lsls	r4, r4, #9
 80006c6:	0a64      	lsrs	r4, r4, #9
 80006c8:	b2d8      	uxtb	r0, r3
 80006ca:	e001      	b.n	80006d0 <__aeabi_ui2f+0x28>
 80006cc:	2000      	movs	r0, #0
 80006ce:	2400      	movs	r4, #0
 80006d0:	05c0      	lsls	r0, r0, #23
 80006d2:	4320      	orrs	r0, r4
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	2b99      	cmp	r3, #153	; 0x99
 80006d8:	dd0a      	ble.n	80006f0 <__aeabi_ui2f+0x48>
 80006da:	0002      	movs	r2, r0
 80006dc:	0020      	movs	r0, r4
 80006de:	321b      	adds	r2, #27
 80006e0:	4090      	lsls	r0, r2
 80006e2:	0002      	movs	r2, r0
 80006e4:	1e50      	subs	r0, r2, #1
 80006e6:	4182      	sbcs	r2, r0
 80006e8:	2005      	movs	r0, #5
 80006ea:	1a40      	subs	r0, r0, r1
 80006ec:	40c4      	lsrs	r4, r0
 80006ee:	4314      	orrs	r4, r2
 80006f0:	2905      	cmp	r1, #5
 80006f2:	dc16      	bgt.n	8000722 <__aeabi_ui2f+0x7a>
 80006f4:	0022      	movs	r2, r4
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <__aeabi_ui2f+0x8c>)
 80006f8:	4002      	ands	r2, r0
 80006fa:	0765      	lsls	r5, r4, #29
 80006fc:	d009      	beq.n	8000712 <__aeabi_ui2f+0x6a>
 80006fe:	250f      	movs	r5, #15
 8000700:	402c      	ands	r4, r5
 8000702:	2c04      	cmp	r4, #4
 8000704:	d005      	beq.n	8000712 <__aeabi_ui2f+0x6a>
 8000706:	3204      	adds	r2, #4
 8000708:	0154      	lsls	r4, r2, #5
 800070a:	d502      	bpl.n	8000712 <__aeabi_ui2f+0x6a>
 800070c:	239f      	movs	r3, #159	; 0x9f
 800070e:	4002      	ands	r2, r0
 8000710:	1a5b      	subs	r3, r3, r1
 8000712:	0192      	lsls	r2, r2, #6
 8000714:	0a54      	lsrs	r4, r2, #9
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	e7da      	b.n	80006d0 <__aeabi_ui2f+0x28>
 800071a:	0264      	lsls	r4, r4, #9
 800071c:	2096      	movs	r0, #150	; 0x96
 800071e:	0a64      	lsrs	r4, r4, #9
 8000720:	e7d6      	b.n	80006d0 <__aeabi_ui2f+0x28>
 8000722:	1f4a      	subs	r2, r1, #5
 8000724:	4094      	lsls	r4, r2
 8000726:	0022      	movs	r2, r4
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <__aeabi_ui2f+0x8c>)
 800072a:	4002      	ands	r2, r0
 800072c:	0765      	lsls	r5, r4, #29
 800072e:	d0f0      	beq.n	8000712 <__aeabi_ui2f+0x6a>
 8000730:	e7e5      	b.n	80006fe <__aeabi_ui2f+0x56>
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	fbffffff 	.word	0xfbffffff

08000738 <__aeabi_dadd>:
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073a:	464f      	mov	r7, r9
 800073c:	4646      	mov	r6, r8
 800073e:	46d6      	mov	lr, sl
 8000740:	0004      	movs	r4, r0
 8000742:	b5c0      	push	{r6, r7, lr}
 8000744:	001f      	movs	r7, r3
 8000746:	030b      	lsls	r3, r1, #12
 8000748:	0010      	movs	r0, r2
 800074a:	004e      	lsls	r6, r1, #1
 800074c:	0a5b      	lsrs	r3, r3, #9
 800074e:	0fcd      	lsrs	r5, r1, #31
 8000750:	0f61      	lsrs	r1, r4, #29
 8000752:	007a      	lsls	r2, r7, #1
 8000754:	4319      	orrs	r1, r3
 8000756:	00e3      	lsls	r3, r4, #3
 8000758:	033c      	lsls	r4, r7, #12
 800075a:	0fff      	lsrs	r7, r7, #31
 800075c:	46bc      	mov	ip, r7
 800075e:	0a64      	lsrs	r4, r4, #9
 8000760:	0f47      	lsrs	r7, r0, #29
 8000762:	4327      	orrs	r7, r4
 8000764:	0d76      	lsrs	r6, r6, #21
 8000766:	0d52      	lsrs	r2, r2, #21
 8000768:	00c0      	lsls	r0, r0, #3
 800076a:	46b9      	mov	r9, r7
 800076c:	4680      	mov	r8, r0
 800076e:	1ab7      	subs	r7, r6, r2
 8000770:	4565      	cmp	r5, ip
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x3e>
 8000774:	e09b      	b.n	80008ae <__aeabi_dadd+0x176>
 8000776:	2f00      	cmp	r7, #0
 8000778:	dc00      	bgt.n	800077c <__aeabi_dadd+0x44>
 800077a:	e084      	b.n	8000886 <__aeabi_dadd+0x14e>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x4a>
 8000780:	e0be      	b.n	8000900 <__aeabi_dadd+0x1c8>
 8000782:	4ac8      	ldr	r2, [pc, #800]	; (8000aa4 <__aeabi_dadd+0x36c>)
 8000784:	4296      	cmp	r6, r2
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x52>
 8000788:	e124      	b.n	80009d4 <__aeabi_dadd+0x29c>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	464c      	mov	r4, r9
 800078e:	0412      	lsls	r2, r2, #16
 8000790:	4314      	orrs	r4, r2
 8000792:	46a1      	mov	r9, r4
 8000794:	2f38      	cmp	r7, #56	; 0x38
 8000796:	dd00      	ble.n	800079a <__aeabi_dadd+0x62>
 8000798:	e167      	b.n	8000a6a <__aeabi_dadd+0x332>
 800079a:	2f1f      	cmp	r7, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x68>
 800079e:	e1d6      	b.n	8000b4e <__aeabi_dadd+0x416>
 80007a0:	2220      	movs	r2, #32
 80007a2:	464c      	mov	r4, r9
 80007a4:	1bd2      	subs	r2, r2, r7
 80007a6:	4094      	lsls	r4, r2
 80007a8:	46a2      	mov	sl, r4
 80007aa:	4644      	mov	r4, r8
 80007ac:	40fc      	lsrs	r4, r7
 80007ae:	0020      	movs	r0, r4
 80007b0:	4654      	mov	r4, sl
 80007b2:	4304      	orrs	r4, r0
 80007b4:	4640      	mov	r0, r8
 80007b6:	4090      	lsls	r0, r2
 80007b8:	1e42      	subs	r2, r0, #1
 80007ba:	4190      	sbcs	r0, r2
 80007bc:	464a      	mov	r2, r9
 80007be:	40fa      	lsrs	r2, r7
 80007c0:	4304      	orrs	r4, r0
 80007c2:	1a89      	subs	r1, r1, r2
 80007c4:	1b1c      	subs	r4, r3, r4
 80007c6:	42a3      	cmp	r3, r4
 80007c8:	4192      	sbcs	r2, r2
 80007ca:	4252      	negs	r2, r2
 80007cc:	1a8b      	subs	r3, r1, r2
 80007ce:	469a      	mov	sl, r3
 80007d0:	4653      	mov	r3, sl
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	d400      	bmi.n	80007d8 <__aeabi_dadd+0xa0>
 80007d6:	e0d4      	b.n	8000982 <__aeabi_dadd+0x24a>
 80007d8:	4653      	mov	r3, sl
 80007da:	025a      	lsls	r2, r3, #9
 80007dc:	0a53      	lsrs	r3, r2, #9
 80007de:	469a      	mov	sl, r3
 80007e0:	4653      	mov	r3, sl
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_dadd+0xb0>
 80007e6:	e104      	b.n	80009f2 <__aeabi_dadd+0x2ba>
 80007e8:	4650      	mov	r0, sl
 80007ea:	f001 febb 	bl	8002564 <__clzsi2>
 80007ee:	0003      	movs	r3, r0
 80007f0:	3b08      	subs	r3, #8
 80007f2:	2220      	movs	r2, #32
 80007f4:	0020      	movs	r0, r4
 80007f6:	1ad2      	subs	r2, r2, r3
 80007f8:	4651      	mov	r1, sl
 80007fa:	40d0      	lsrs	r0, r2
 80007fc:	4099      	lsls	r1, r3
 80007fe:	0002      	movs	r2, r0
 8000800:	409c      	lsls	r4, r3
 8000802:	430a      	orrs	r2, r1
 8000804:	42b3      	cmp	r3, r6
 8000806:	da00      	bge.n	800080a <__aeabi_dadd+0xd2>
 8000808:	e102      	b.n	8000a10 <__aeabi_dadd+0x2d8>
 800080a:	1b9b      	subs	r3, r3, r6
 800080c:	1c59      	adds	r1, r3, #1
 800080e:	291f      	cmp	r1, #31
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0xdc>
 8000812:	e0a7      	b.n	8000964 <__aeabi_dadd+0x22c>
 8000814:	2320      	movs	r3, #32
 8000816:	0010      	movs	r0, r2
 8000818:	0026      	movs	r6, r4
 800081a:	1a5b      	subs	r3, r3, r1
 800081c:	409c      	lsls	r4, r3
 800081e:	4098      	lsls	r0, r3
 8000820:	40ce      	lsrs	r6, r1
 8000822:	40ca      	lsrs	r2, r1
 8000824:	1e63      	subs	r3, r4, #1
 8000826:	419c      	sbcs	r4, r3
 8000828:	4330      	orrs	r0, r6
 800082a:	4692      	mov	sl, r2
 800082c:	2600      	movs	r6, #0
 800082e:	4304      	orrs	r4, r0
 8000830:	0763      	lsls	r3, r4, #29
 8000832:	d009      	beq.n	8000848 <__aeabi_dadd+0x110>
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d005      	beq.n	8000848 <__aeabi_dadd+0x110>
 800083c:	1d23      	adds	r3, r4, #4
 800083e:	42a3      	cmp	r3, r4
 8000840:	41a4      	sbcs	r4, r4
 8000842:	4264      	negs	r4, r4
 8000844:	44a2      	add	sl, r4
 8000846:	001c      	movs	r4, r3
 8000848:	4653      	mov	r3, sl
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	d400      	bmi.n	8000850 <__aeabi_dadd+0x118>
 800084e:	e09b      	b.n	8000988 <__aeabi_dadd+0x250>
 8000850:	4b94      	ldr	r3, [pc, #592]	; (8000aa4 <__aeabi_dadd+0x36c>)
 8000852:	3601      	adds	r6, #1
 8000854:	429e      	cmp	r6, r3
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x122>
 8000858:	e0b8      	b.n	80009cc <__aeabi_dadd+0x294>
 800085a:	4653      	mov	r3, sl
 800085c:	4992      	ldr	r1, [pc, #584]	; (8000aa8 <__aeabi_dadd+0x370>)
 800085e:	08e4      	lsrs	r4, r4, #3
 8000860:	400b      	ands	r3, r1
 8000862:	0019      	movs	r1, r3
 8000864:	075b      	lsls	r3, r3, #29
 8000866:	4323      	orrs	r3, r4
 8000868:	0572      	lsls	r2, r6, #21
 800086a:	024c      	lsls	r4, r1, #9
 800086c:	0b24      	lsrs	r4, r4, #12
 800086e:	0d52      	lsrs	r2, r2, #21
 8000870:	0512      	lsls	r2, r2, #20
 8000872:	07ed      	lsls	r5, r5, #31
 8000874:	4322      	orrs	r2, r4
 8000876:	432a      	orrs	r2, r5
 8000878:	0018      	movs	r0, r3
 800087a:	0011      	movs	r1, r2
 800087c:	bce0      	pop	{r5, r6, r7}
 800087e:	46ba      	mov	sl, r7
 8000880:	46b1      	mov	r9, r6
 8000882:	46a8      	mov	r8, r5
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000886:	2f00      	cmp	r7, #0
 8000888:	d048      	beq.n	800091c <__aeabi_dadd+0x1e4>
 800088a:	1b97      	subs	r7, r2, r6
 800088c:	2e00      	cmp	r6, #0
 800088e:	d000      	beq.n	8000892 <__aeabi_dadd+0x15a>
 8000890:	e10e      	b.n	8000ab0 <__aeabi_dadd+0x378>
 8000892:	000c      	movs	r4, r1
 8000894:	431c      	orrs	r4, r3
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x162>
 8000898:	e1b7      	b.n	8000c0a <__aeabi_dadd+0x4d2>
 800089a:	1e7c      	subs	r4, r7, #1
 800089c:	2f01      	cmp	r7, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x16a>
 80008a0:	e226      	b.n	8000cf0 <__aeabi_dadd+0x5b8>
 80008a2:	4d80      	ldr	r5, [pc, #512]	; (8000aa4 <__aeabi_dadd+0x36c>)
 80008a4:	42af      	cmp	r7, r5
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x172>
 80008a8:	e1d5      	b.n	8000c56 <__aeabi_dadd+0x51e>
 80008aa:	0027      	movs	r7, r4
 80008ac:	e107      	b.n	8000abe <__aeabi_dadd+0x386>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x17c>
 80008b2:	e0b2      	b.n	8000a1a <__aeabi_dadd+0x2e2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d047      	beq.n	8000948 <__aeabi_dadd+0x210>
 80008b8:	4a7a      	ldr	r2, [pc, #488]	; (8000aa4 <__aeabi_dadd+0x36c>)
 80008ba:	4296      	cmp	r6, r2
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x188>
 80008be:	e089      	b.n	80009d4 <__aeabi_dadd+0x29c>
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	464c      	mov	r4, r9
 80008c4:	0412      	lsls	r2, r2, #16
 80008c6:	4314      	orrs	r4, r2
 80008c8:	46a1      	mov	r9, r4
 80008ca:	2f38      	cmp	r7, #56	; 0x38
 80008cc:	dc6b      	bgt.n	80009a6 <__aeabi_dadd+0x26e>
 80008ce:	2f1f      	cmp	r7, #31
 80008d0:	dc00      	bgt.n	80008d4 <__aeabi_dadd+0x19c>
 80008d2:	e16e      	b.n	8000bb2 <__aeabi_dadd+0x47a>
 80008d4:	003a      	movs	r2, r7
 80008d6:	4648      	mov	r0, r9
 80008d8:	3a20      	subs	r2, #32
 80008da:	40d0      	lsrs	r0, r2
 80008dc:	4684      	mov	ip, r0
 80008de:	2f20      	cmp	r7, #32
 80008e0:	d007      	beq.n	80008f2 <__aeabi_dadd+0x1ba>
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	4648      	mov	r0, r9
 80008e6:	1bd2      	subs	r2, r2, r7
 80008e8:	4090      	lsls	r0, r2
 80008ea:	0002      	movs	r2, r0
 80008ec:	4640      	mov	r0, r8
 80008ee:	4310      	orrs	r0, r2
 80008f0:	4680      	mov	r8, r0
 80008f2:	4640      	mov	r0, r8
 80008f4:	1e42      	subs	r2, r0, #1
 80008f6:	4190      	sbcs	r0, r2
 80008f8:	4662      	mov	r2, ip
 80008fa:	0004      	movs	r4, r0
 80008fc:	4314      	orrs	r4, r2
 80008fe:	e057      	b.n	80009b0 <__aeabi_dadd+0x278>
 8000900:	464a      	mov	r2, r9
 8000902:	4302      	orrs	r2, r0
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x1d0>
 8000906:	e103      	b.n	8000b10 <__aeabi_dadd+0x3d8>
 8000908:	1e7a      	subs	r2, r7, #1
 800090a:	2f01      	cmp	r7, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x1d8>
 800090e:	e193      	b.n	8000c38 <__aeabi_dadd+0x500>
 8000910:	4c64      	ldr	r4, [pc, #400]	; (8000aa4 <__aeabi_dadd+0x36c>)
 8000912:	42a7      	cmp	r7, r4
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x1e0>
 8000916:	e18a      	b.n	8000c2e <__aeabi_dadd+0x4f6>
 8000918:	0017      	movs	r7, r2
 800091a:	e73b      	b.n	8000794 <__aeabi_dadd+0x5c>
 800091c:	4c63      	ldr	r4, [pc, #396]	; (8000aac <__aeabi_dadd+0x374>)
 800091e:	1c72      	adds	r2, r6, #1
 8000920:	4222      	tst	r2, r4
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x1ee>
 8000924:	e0e0      	b.n	8000ae8 <__aeabi_dadd+0x3b0>
 8000926:	000a      	movs	r2, r1
 8000928:	431a      	orrs	r2, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d000      	beq.n	8000930 <__aeabi_dadd+0x1f8>
 800092e:	e174      	b.n	8000c1a <__aeabi_dadd+0x4e2>
 8000930:	2a00      	cmp	r2, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x1fe>
 8000934:	e1d0      	b.n	8000cd8 <__aeabi_dadd+0x5a0>
 8000936:	464a      	mov	r2, r9
 8000938:	4302      	orrs	r2, r0
 800093a:	d000      	beq.n	800093e <__aeabi_dadd+0x206>
 800093c:	e1e3      	b.n	8000d06 <__aeabi_dadd+0x5ce>
 800093e:	074a      	lsls	r2, r1, #29
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	4313      	orrs	r3, r2
 8000944:	08c9      	lsrs	r1, r1, #3
 8000946:	e029      	b.n	800099c <__aeabi_dadd+0x264>
 8000948:	464a      	mov	r2, r9
 800094a:	4302      	orrs	r2, r0
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x218>
 800094e:	e17d      	b.n	8000c4c <__aeabi_dadd+0x514>
 8000950:	1e7a      	subs	r2, r7, #1
 8000952:	2f01      	cmp	r7, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x220>
 8000956:	e0e0      	b.n	8000b1a <__aeabi_dadd+0x3e2>
 8000958:	4c52      	ldr	r4, [pc, #328]	; (8000aa4 <__aeabi_dadd+0x36c>)
 800095a:	42a7      	cmp	r7, r4
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x228>
 800095e:	e166      	b.n	8000c2e <__aeabi_dadd+0x4f6>
 8000960:	0017      	movs	r7, r2
 8000962:	e7b2      	b.n	80008ca <__aeabi_dadd+0x192>
 8000964:	0010      	movs	r0, r2
 8000966:	3b1f      	subs	r3, #31
 8000968:	40d8      	lsrs	r0, r3
 800096a:	2920      	cmp	r1, #32
 800096c:	d003      	beq.n	8000976 <__aeabi_dadd+0x23e>
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	409a      	lsls	r2, r3
 8000974:	4314      	orrs	r4, r2
 8000976:	1e63      	subs	r3, r4, #1
 8000978:	419c      	sbcs	r4, r3
 800097a:	2300      	movs	r3, #0
 800097c:	2600      	movs	r6, #0
 800097e:	469a      	mov	sl, r3
 8000980:	4304      	orrs	r4, r0
 8000982:	0763      	lsls	r3, r4, #29
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x250>
 8000986:	e755      	b.n	8000834 <__aeabi_dadd+0xfc>
 8000988:	4652      	mov	r2, sl
 800098a:	08e3      	lsrs	r3, r4, #3
 800098c:	0752      	lsls	r2, r2, #29
 800098e:	4313      	orrs	r3, r2
 8000990:	4652      	mov	r2, sl
 8000992:	0037      	movs	r7, r6
 8000994:	08d1      	lsrs	r1, r2, #3
 8000996:	4a43      	ldr	r2, [pc, #268]	; (8000aa4 <__aeabi_dadd+0x36c>)
 8000998:	4297      	cmp	r7, r2
 800099a:	d01f      	beq.n	80009dc <__aeabi_dadd+0x2a4>
 800099c:	0309      	lsls	r1, r1, #12
 800099e:	057a      	lsls	r2, r7, #21
 80009a0:	0b0c      	lsrs	r4, r1, #12
 80009a2:	0d52      	lsrs	r2, r2, #21
 80009a4:	e764      	b.n	8000870 <__aeabi_dadd+0x138>
 80009a6:	4642      	mov	r2, r8
 80009a8:	464c      	mov	r4, r9
 80009aa:	4314      	orrs	r4, r2
 80009ac:	1e62      	subs	r2, r4, #1
 80009ae:	4194      	sbcs	r4, r2
 80009b0:	18e4      	adds	r4, r4, r3
 80009b2:	429c      	cmp	r4, r3
 80009b4:	4192      	sbcs	r2, r2
 80009b6:	4252      	negs	r2, r2
 80009b8:	4692      	mov	sl, r2
 80009ba:	448a      	add	sl, r1
 80009bc:	4653      	mov	r3, sl
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	d5df      	bpl.n	8000982 <__aeabi_dadd+0x24a>
 80009c2:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <__aeabi_dadd+0x36c>)
 80009c4:	3601      	adds	r6, #1
 80009c6:	429e      	cmp	r6, r3
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x294>
 80009ca:	e0b3      	b.n	8000b34 <__aeabi_dadd+0x3fc>
 80009cc:	0032      	movs	r2, r6
 80009ce:	2400      	movs	r4, #0
 80009d0:	2300      	movs	r3, #0
 80009d2:	e74d      	b.n	8000870 <__aeabi_dadd+0x138>
 80009d4:	074a      	lsls	r2, r1, #29
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	4313      	orrs	r3, r2
 80009da:	08c9      	lsrs	r1, r1, #3
 80009dc:	001a      	movs	r2, r3
 80009de:	430a      	orrs	r2, r1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x2ac>
 80009e2:	e200      	b.n	8000de6 <__aeabi_dadd+0x6ae>
 80009e4:	2480      	movs	r4, #128	; 0x80
 80009e6:	0324      	lsls	r4, r4, #12
 80009e8:	430c      	orrs	r4, r1
 80009ea:	0324      	lsls	r4, r4, #12
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <__aeabi_dadd+0x36c>)
 80009ee:	0b24      	lsrs	r4, r4, #12
 80009f0:	e73e      	b.n	8000870 <__aeabi_dadd+0x138>
 80009f2:	0020      	movs	r0, r4
 80009f4:	f001 fdb6 	bl	8002564 <__clzsi2>
 80009f8:	0003      	movs	r3, r0
 80009fa:	3318      	adds	r3, #24
 80009fc:	2b1f      	cmp	r3, #31
 80009fe:	dc00      	bgt.n	8000a02 <__aeabi_dadd+0x2ca>
 8000a00:	e6f7      	b.n	80007f2 <__aeabi_dadd+0xba>
 8000a02:	0022      	movs	r2, r4
 8000a04:	3808      	subs	r0, #8
 8000a06:	4082      	lsls	r2, r0
 8000a08:	2400      	movs	r4, #0
 8000a0a:	42b3      	cmp	r3, r6
 8000a0c:	db00      	blt.n	8000a10 <__aeabi_dadd+0x2d8>
 8000a0e:	e6fc      	b.n	800080a <__aeabi_dadd+0xd2>
 8000a10:	1af6      	subs	r6, r6, r3
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <__aeabi_dadd+0x370>)
 8000a14:	401a      	ands	r2, r3
 8000a16:	4692      	mov	sl, r2
 8000a18:	e70a      	b.n	8000830 <__aeabi_dadd+0xf8>
 8000a1a:	2f00      	cmp	r7, #0
 8000a1c:	d02b      	beq.n	8000a76 <__aeabi_dadd+0x33e>
 8000a1e:	1b97      	subs	r7, r2, r6
 8000a20:	2e00      	cmp	r6, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x2ee>
 8000a24:	e0b8      	b.n	8000b98 <__aeabi_dadd+0x460>
 8000a26:	4c1f      	ldr	r4, [pc, #124]	; (8000aa4 <__aeabi_dadd+0x36c>)
 8000a28:	42a2      	cmp	r2, r4
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x2f6>
 8000a2c:	e11c      	b.n	8000c68 <__aeabi_dadd+0x530>
 8000a2e:	2480      	movs	r4, #128	; 0x80
 8000a30:	0424      	lsls	r4, r4, #16
 8000a32:	4321      	orrs	r1, r4
 8000a34:	2f38      	cmp	r7, #56	; 0x38
 8000a36:	dd00      	ble.n	8000a3a <__aeabi_dadd+0x302>
 8000a38:	e11e      	b.n	8000c78 <__aeabi_dadd+0x540>
 8000a3a:	2f1f      	cmp	r7, #31
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_dadd+0x308>
 8000a3e:	e19e      	b.n	8000d7e <__aeabi_dadd+0x646>
 8000a40:	2620      	movs	r6, #32
 8000a42:	000c      	movs	r4, r1
 8000a44:	1bf6      	subs	r6, r6, r7
 8000a46:	0018      	movs	r0, r3
 8000a48:	40b3      	lsls	r3, r6
 8000a4a:	40b4      	lsls	r4, r6
 8000a4c:	40f8      	lsrs	r0, r7
 8000a4e:	1e5e      	subs	r6, r3, #1
 8000a50:	41b3      	sbcs	r3, r6
 8000a52:	40f9      	lsrs	r1, r7
 8000a54:	4304      	orrs	r4, r0
 8000a56:	431c      	orrs	r4, r3
 8000a58:	4489      	add	r9, r1
 8000a5a:	4444      	add	r4, r8
 8000a5c:	4544      	cmp	r4, r8
 8000a5e:	419b      	sbcs	r3, r3
 8000a60:	425b      	negs	r3, r3
 8000a62:	444b      	add	r3, r9
 8000a64:	469a      	mov	sl, r3
 8000a66:	0016      	movs	r6, r2
 8000a68:	e7a8      	b.n	80009bc <__aeabi_dadd+0x284>
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	464c      	mov	r4, r9
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	1e62      	subs	r2, r4, #1
 8000a72:	4194      	sbcs	r4, r2
 8000a74:	e6a6      	b.n	80007c4 <__aeabi_dadd+0x8c>
 8000a76:	4c0d      	ldr	r4, [pc, #52]	; (8000aac <__aeabi_dadd+0x374>)
 8000a78:	1c72      	adds	r2, r6, #1
 8000a7a:	4222      	tst	r2, r4
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_dadd+0x348>
 8000a7e:	e0a8      	b.n	8000bd2 <__aeabi_dadd+0x49a>
 8000a80:	000a      	movs	r2, r1
 8000a82:	431a      	orrs	r2, r3
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x352>
 8000a88:	e10a      	b.n	8000ca0 <__aeabi_dadd+0x568>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x358>
 8000a8e:	e15e      	b.n	8000d4e <__aeabi_dadd+0x616>
 8000a90:	464a      	mov	r2, r9
 8000a92:	4302      	orrs	r2, r0
 8000a94:	d000      	beq.n	8000a98 <__aeabi_dadd+0x360>
 8000a96:	e161      	b.n	8000d5c <__aeabi_dadd+0x624>
 8000a98:	074a      	lsls	r2, r1, #29
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	e77c      	b.n	800099c <__aeabi_dadd+0x264>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	000007ff 	.word	0x000007ff
 8000aa8:	ff7fffff 	.word	0xff7fffff
 8000aac:	000007fe 	.word	0x000007fe
 8000ab0:	4ccf      	ldr	r4, [pc, #828]	; (8000df0 <__aeabi_dadd+0x6b8>)
 8000ab2:	42a2      	cmp	r2, r4
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dadd+0x380>
 8000ab6:	e0ce      	b.n	8000c56 <__aeabi_dadd+0x51e>
 8000ab8:	2480      	movs	r4, #128	; 0x80
 8000aba:	0424      	lsls	r4, r4, #16
 8000abc:	4321      	orrs	r1, r4
 8000abe:	2f38      	cmp	r7, #56	; 0x38
 8000ac0:	dc5b      	bgt.n	8000b7a <__aeabi_dadd+0x442>
 8000ac2:	2f1f      	cmp	r7, #31
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_dadd+0x390>
 8000ac6:	e0dc      	b.n	8000c82 <__aeabi_dadd+0x54a>
 8000ac8:	2520      	movs	r5, #32
 8000aca:	000c      	movs	r4, r1
 8000acc:	1bed      	subs	r5, r5, r7
 8000ace:	001e      	movs	r6, r3
 8000ad0:	40ab      	lsls	r3, r5
 8000ad2:	40ac      	lsls	r4, r5
 8000ad4:	40fe      	lsrs	r6, r7
 8000ad6:	1e5d      	subs	r5, r3, #1
 8000ad8:	41ab      	sbcs	r3, r5
 8000ada:	4334      	orrs	r4, r6
 8000adc:	40f9      	lsrs	r1, r7
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	1a5b      	subs	r3, r3, r1
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	e04c      	b.n	8000b82 <__aeabi_dadd+0x44a>
 8000ae8:	464a      	mov	r2, r9
 8000aea:	1a1c      	subs	r4, r3, r0
 8000aec:	1a88      	subs	r0, r1, r2
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	4192      	sbcs	r2, r2
 8000af2:	4252      	negs	r2, r2
 8000af4:	4692      	mov	sl, r2
 8000af6:	0002      	movs	r2, r0
 8000af8:	4650      	mov	r0, sl
 8000afa:	1a12      	subs	r2, r2, r0
 8000afc:	4692      	mov	sl, r2
 8000afe:	0212      	lsls	r2, r2, #8
 8000b00:	d478      	bmi.n	8000bf4 <__aeabi_dadd+0x4bc>
 8000b02:	4653      	mov	r3, sl
 8000b04:	4323      	orrs	r3, r4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x3d2>
 8000b08:	e66a      	b.n	80007e0 <__aeabi_dadd+0xa8>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	e745      	b.n	800099c <__aeabi_dadd+0x264>
 8000b10:	074a      	lsls	r2, r1, #29
 8000b12:	08db      	lsrs	r3, r3, #3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	08c9      	lsrs	r1, r1, #3
 8000b18:	e73d      	b.n	8000996 <__aeabi_dadd+0x25e>
 8000b1a:	181c      	adds	r4, r3, r0
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	419b      	sbcs	r3, r3
 8000b20:	4449      	add	r1, r9
 8000b22:	468a      	mov	sl, r1
 8000b24:	425b      	negs	r3, r3
 8000b26:	449a      	add	sl, r3
 8000b28:	4653      	mov	r3, sl
 8000b2a:	2601      	movs	r6, #1
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d400      	bmi.n	8000b32 <__aeabi_dadd+0x3fa>
 8000b30:	e727      	b.n	8000982 <__aeabi_dadd+0x24a>
 8000b32:	2602      	movs	r6, #2
 8000b34:	4652      	mov	r2, sl
 8000b36:	4baf      	ldr	r3, [pc, #700]	; (8000df4 <__aeabi_dadd+0x6bc>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	4021      	ands	r1, r4
 8000b40:	0862      	lsrs	r2, r4, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	07dc      	lsls	r4, r3, #31
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4314      	orrs	r4, r2
 8000b4c:	e670      	b.n	8000830 <__aeabi_dadd+0xf8>
 8000b4e:	003a      	movs	r2, r7
 8000b50:	464c      	mov	r4, r9
 8000b52:	3a20      	subs	r2, #32
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	46a4      	mov	ip, r4
 8000b58:	2f20      	cmp	r7, #32
 8000b5a:	d007      	beq.n	8000b6c <__aeabi_dadd+0x434>
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	4648      	mov	r0, r9
 8000b60:	1bd2      	subs	r2, r2, r7
 8000b62:	4090      	lsls	r0, r2
 8000b64:	0002      	movs	r2, r0
 8000b66:	4640      	mov	r0, r8
 8000b68:	4310      	orrs	r0, r2
 8000b6a:	4680      	mov	r8, r0
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	1e42      	subs	r2, r0, #1
 8000b70:	4190      	sbcs	r0, r2
 8000b72:	4662      	mov	r2, ip
 8000b74:	0004      	movs	r4, r0
 8000b76:	4314      	orrs	r4, r2
 8000b78:	e624      	b.n	80007c4 <__aeabi_dadd+0x8c>
 8000b7a:	4319      	orrs	r1, r3
 8000b7c:	000c      	movs	r4, r1
 8000b7e:	1e63      	subs	r3, r4, #1
 8000b80:	419c      	sbcs	r4, r3
 8000b82:	4643      	mov	r3, r8
 8000b84:	1b1c      	subs	r4, r3, r4
 8000b86:	45a0      	cmp	r8, r4
 8000b88:	419b      	sbcs	r3, r3
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	1acb      	subs	r3, r1, r3
 8000b90:	469a      	mov	sl, r3
 8000b92:	4665      	mov	r5, ip
 8000b94:	0016      	movs	r6, r2
 8000b96:	e61b      	b.n	80007d0 <__aeabi_dadd+0x98>
 8000b98:	000c      	movs	r4, r1
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x468>
 8000b9e:	e0c7      	b.n	8000d30 <__aeabi_dadd+0x5f8>
 8000ba0:	1e7c      	subs	r4, r7, #1
 8000ba2:	2f01      	cmp	r7, #1
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x470>
 8000ba6:	e0f9      	b.n	8000d9c <__aeabi_dadd+0x664>
 8000ba8:	4e91      	ldr	r6, [pc, #580]	; (8000df0 <__aeabi_dadd+0x6b8>)
 8000baa:	42b7      	cmp	r7, r6
 8000bac:	d05c      	beq.n	8000c68 <__aeabi_dadd+0x530>
 8000bae:	0027      	movs	r7, r4
 8000bb0:	e740      	b.n	8000a34 <__aeabi_dadd+0x2fc>
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	464c      	mov	r4, r9
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	1bd2      	subs	r2, r2, r7
 8000bba:	4094      	lsls	r4, r2
 8000bbc:	40f8      	lsrs	r0, r7
 8000bbe:	4304      	orrs	r4, r0
 8000bc0:	4640      	mov	r0, r8
 8000bc2:	4090      	lsls	r0, r2
 8000bc4:	1e42      	subs	r2, r0, #1
 8000bc6:	4190      	sbcs	r0, r2
 8000bc8:	464a      	mov	r2, r9
 8000bca:	40fa      	lsrs	r2, r7
 8000bcc:	4304      	orrs	r4, r0
 8000bce:	1889      	adds	r1, r1, r2
 8000bd0:	e6ee      	b.n	80009b0 <__aeabi_dadd+0x278>
 8000bd2:	4c87      	ldr	r4, [pc, #540]	; (8000df0 <__aeabi_dadd+0x6b8>)
 8000bd4:	42a2      	cmp	r2, r4
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x4a2>
 8000bd8:	e6f9      	b.n	80009ce <__aeabi_dadd+0x296>
 8000bda:	1818      	adds	r0, r3, r0
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	4449      	add	r1, r9
 8000be2:	425b      	negs	r3, r3
 8000be4:	18cb      	adds	r3, r1, r3
 8000be6:	07dc      	lsls	r4, r3, #31
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	085b      	lsrs	r3, r3, #1
 8000bec:	469a      	mov	sl, r3
 8000bee:	0016      	movs	r6, r2
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	e6c6      	b.n	8000982 <__aeabi_dadd+0x24a>
 8000bf4:	4642      	mov	r2, r8
 8000bf6:	1ad4      	subs	r4, r2, r3
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	4180      	sbcs	r0, r0
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	4240      	negs	r0, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	1a0b      	subs	r3, r1, r0
 8000c04:	469a      	mov	sl, r3
 8000c06:	4665      	mov	r5, ip
 8000c08:	e5ea      	b.n	80007e0 <__aeabi_dadd+0xa8>
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	08c0      	lsrs	r0, r0, #3
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	4665      	mov	r5, ip
 8000c14:	4303      	orrs	r3, r0
 8000c16:	08d1      	lsrs	r1, r2, #3
 8000c18:	e6bd      	b.n	8000996 <__aeabi_dadd+0x25e>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x4e8>
 8000c1e:	e08e      	b.n	8000d3e <__aeabi_dadd+0x606>
 8000c20:	464b      	mov	r3, r9
 8000c22:	4303      	orrs	r3, r0
 8000c24:	d117      	bne.n	8000c56 <__aeabi_dadd+0x51e>
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	2500      	movs	r5, #0
 8000c2a:	0309      	lsls	r1, r1, #12
 8000c2c:	e6da      	b.n	80009e4 <__aeabi_dadd+0x2ac>
 8000c2e:	074a      	lsls	r2, r1, #29
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	08c9      	lsrs	r1, r1, #3
 8000c36:	e6d1      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	419b      	sbcs	r3, r3
 8000c40:	1a89      	subs	r1, r1, r2
 8000c42:	425b      	negs	r3, r3
 8000c44:	1acb      	subs	r3, r1, r3
 8000c46:	469a      	mov	sl, r3
 8000c48:	2601      	movs	r6, #1
 8000c4a:	e5c1      	b.n	80007d0 <__aeabi_dadd+0x98>
 8000c4c:	074a      	lsls	r2, r1, #29
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	08c9      	lsrs	r1, r1, #3
 8000c54:	e69f      	b.n	8000996 <__aeabi_dadd+0x25e>
 8000c56:	4643      	mov	r3, r8
 8000c58:	08d8      	lsrs	r0, r3, #3
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	075b      	lsls	r3, r3, #29
 8000c60:	4665      	mov	r5, ip
 8000c62:	4303      	orrs	r3, r0
 8000c64:	08d1      	lsrs	r1, r2, #3
 8000c66:	e6b9      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000c68:	4643      	mov	r3, r8
 8000c6a:	08d8      	lsrs	r0, r3, #3
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	464a      	mov	r2, r9
 8000c70:	075b      	lsls	r3, r3, #29
 8000c72:	4303      	orrs	r3, r0
 8000c74:	08d1      	lsrs	r1, r2, #3
 8000c76:	e6b1      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	1e63      	subs	r3, r4, #1
 8000c7e:	419c      	sbcs	r4, r3
 8000c80:	e6eb      	b.n	8000a5a <__aeabi_dadd+0x322>
 8000c82:	003c      	movs	r4, r7
 8000c84:	000d      	movs	r5, r1
 8000c86:	3c20      	subs	r4, #32
 8000c88:	40e5      	lsrs	r5, r4
 8000c8a:	2f20      	cmp	r7, #32
 8000c8c:	d003      	beq.n	8000c96 <__aeabi_dadd+0x55e>
 8000c8e:	2440      	movs	r4, #64	; 0x40
 8000c90:	1be4      	subs	r4, r4, r7
 8000c92:	40a1      	lsls	r1, r4
 8000c94:	430b      	orrs	r3, r1
 8000c96:	001c      	movs	r4, r3
 8000c98:	1e63      	subs	r3, r4, #1
 8000c9a:	419c      	sbcs	r4, r3
 8000c9c:	432c      	orrs	r4, r5
 8000c9e:	e770      	b.n	8000b82 <__aeabi_dadd+0x44a>
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d0e1      	beq.n	8000c68 <__aeabi_dadd+0x530>
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	4302      	orrs	r2, r0
 8000ca8:	d0c1      	beq.n	8000c2e <__aeabi_dadd+0x4f6>
 8000caa:	074a      	lsls	r2, r1, #29
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	08c9      	lsrs	r1, r1, #3
 8000cb4:	0312      	lsls	r2, r2, #12
 8000cb6:	4211      	tst	r1, r2
 8000cb8:	d008      	beq.n	8000ccc <__aeabi_dadd+0x594>
 8000cba:	4648      	mov	r0, r9
 8000cbc:	08c4      	lsrs	r4, r0, #3
 8000cbe:	4214      	tst	r4, r2
 8000cc0:	d104      	bne.n	8000ccc <__aeabi_dadd+0x594>
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	08db      	lsrs	r3, r3, #3
 8000cc8:	0742      	lsls	r2, r0, #29
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	0f5a      	lsrs	r2, r3, #29
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	0752      	lsls	r2, r2, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	e681      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000cd8:	464b      	mov	r3, r9
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x5a8>
 8000cde:	e714      	b.n	8000b0a <__aeabi_dadd+0x3d2>
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	464a      	mov	r2, r9
 8000ce4:	08c0      	lsrs	r0, r0, #3
 8000ce6:	075b      	lsls	r3, r3, #29
 8000ce8:	4665      	mov	r5, ip
 8000cea:	4303      	orrs	r3, r0
 8000cec:	08d1      	lsrs	r1, r2, #3
 8000cee:	e655      	b.n	800099c <__aeabi_dadd+0x264>
 8000cf0:	1ac4      	subs	r4, r0, r3
 8000cf2:	45a0      	cmp	r8, r4
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	1a59      	subs	r1, r3, r1
 8000cfc:	1a0b      	subs	r3, r1, r0
 8000cfe:	469a      	mov	sl, r3
 8000d00:	4665      	mov	r5, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	e564      	b.n	80007d0 <__aeabi_dadd+0x98>
 8000d06:	1a1c      	subs	r4, r3, r0
 8000d08:	464a      	mov	r2, r9
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	4180      	sbcs	r0, r0
 8000d0e:	1a8a      	subs	r2, r1, r2
 8000d10:	4240      	negs	r0, r0
 8000d12:	1a12      	subs	r2, r2, r0
 8000d14:	4692      	mov	sl, r2
 8000d16:	0212      	lsls	r2, r2, #8
 8000d18:	d549      	bpl.n	8000dae <__aeabi_dadd+0x676>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	1ad4      	subs	r4, r2, r3
 8000d1e:	45a0      	cmp	r8, r4
 8000d20:	4180      	sbcs	r0, r0
 8000d22:	464b      	mov	r3, r9
 8000d24:	4240      	negs	r0, r0
 8000d26:	1a59      	subs	r1, r3, r1
 8000d28:	1a0b      	subs	r3, r1, r0
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	4665      	mov	r5, ip
 8000d2e:	e57f      	b.n	8000830 <__aeabi_dadd+0xf8>
 8000d30:	464b      	mov	r3, r9
 8000d32:	464a      	mov	r2, r9
 8000d34:	08c0      	lsrs	r0, r0, #3
 8000d36:	075b      	lsls	r3, r3, #29
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	08d1      	lsrs	r1, r2, #3
 8000d3c:	e62b      	b.n	8000996 <__aeabi_dadd+0x25e>
 8000d3e:	464a      	mov	r2, r9
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	4302      	orrs	r2, r0
 8000d44:	d138      	bne.n	8000db8 <__aeabi_dadd+0x680>
 8000d46:	074a      	lsls	r2, r1, #29
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	08c9      	lsrs	r1, r1, #3
 8000d4c:	e646      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	464a      	mov	r2, r9
 8000d52:	08c0      	lsrs	r0, r0, #3
 8000d54:	075b      	lsls	r3, r3, #29
 8000d56:	4303      	orrs	r3, r0
 8000d58:	08d1      	lsrs	r1, r2, #3
 8000d5a:	e61f      	b.n	800099c <__aeabi_dadd+0x264>
 8000d5c:	181c      	adds	r4, r3, r0
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	419b      	sbcs	r3, r3
 8000d62:	4449      	add	r1, r9
 8000d64:	468a      	mov	sl, r1
 8000d66:	425b      	negs	r3, r3
 8000d68:	449a      	add	sl, r3
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	d400      	bmi.n	8000d72 <__aeabi_dadd+0x63a>
 8000d70:	e607      	b.n	8000982 <__aeabi_dadd+0x24a>
 8000d72:	4652      	mov	r2, sl
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <__aeabi_dadd+0x6bc>)
 8000d76:	2601      	movs	r6, #1
 8000d78:	401a      	ands	r2, r3
 8000d7a:	4692      	mov	sl, r2
 8000d7c:	e601      	b.n	8000982 <__aeabi_dadd+0x24a>
 8000d7e:	003c      	movs	r4, r7
 8000d80:	000e      	movs	r6, r1
 8000d82:	3c20      	subs	r4, #32
 8000d84:	40e6      	lsrs	r6, r4
 8000d86:	2f20      	cmp	r7, #32
 8000d88:	d003      	beq.n	8000d92 <__aeabi_dadd+0x65a>
 8000d8a:	2440      	movs	r4, #64	; 0x40
 8000d8c:	1be4      	subs	r4, r4, r7
 8000d8e:	40a1      	lsls	r1, r4
 8000d90:	430b      	orrs	r3, r1
 8000d92:	001c      	movs	r4, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4334      	orrs	r4, r6
 8000d9a:	e65e      	b.n	8000a5a <__aeabi_dadd+0x322>
 8000d9c:	4443      	add	r3, r8
 8000d9e:	4283      	cmp	r3, r0
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	4449      	add	r1, r9
 8000da4:	468a      	mov	sl, r1
 8000da6:	4240      	negs	r0, r0
 8000da8:	001c      	movs	r4, r3
 8000daa:	4482      	add	sl, r0
 8000dac:	e6bc      	b.n	8000b28 <__aeabi_dadd+0x3f0>
 8000dae:	4653      	mov	r3, sl
 8000db0:	4323      	orrs	r3, r4
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x67e>
 8000db4:	e6a9      	b.n	8000b0a <__aeabi_dadd+0x3d2>
 8000db6:	e5e4      	b.n	8000982 <__aeabi_dadd+0x24a>
 8000db8:	074a      	lsls	r2, r1, #29
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	08c9      	lsrs	r1, r1, #3
 8000dc0:	0312      	lsls	r2, r2, #12
 8000dc2:	4211      	tst	r1, r2
 8000dc4:	d009      	beq.n	8000dda <__aeabi_dadd+0x6a2>
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	08c4      	lsrs	r4, r0, #3
 8000dca:	4214      	tst	r4, r2
 8000dcc:	d105      	bne.n	8000dda <__aeabi_dadd+0x6a2>
 8000dce:	4643      	mov	r3, r8
 8000dd0:	4665      	mov	r5, ip
 8000dd2:	0021      	movs	r1, r4
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	0742      	lsls	r2, r0, #29
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	0f5a      	lsrs	r2, r3, #29
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	08db      	lsrs	r3, r3, #3
 8000de0:	0752      	lsls	r2, r2, #29
 8000de2:	4313      	orrs	r3, r2
 8000de4:	e5fa      	b.n	80009dc <__aeabi_dadd+0x2a4>
 8000de6:	2300      	movs	r3, #0
 8000de8:	4a01      	ldr	r2, [pc, #4]	; (8000df0 <__aeabi_dadd+0x6b8>)
 8000dea:	001c      	movs	r4, r3
 8000dec:	e540      	b.n	8000870 <__aeabi_dadd+0x138>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	000007ff 	.word	0x000007ff
 8000df4:	ff7fffff 	.word	0xff7fffff

08000df8 <__aeabi_ddiv>:
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	4657      	mov	r7, sl
 8000dfc:	464e      	mov	r6, r9
 8000dfe:	4645      	mov	r5, r8
 8000e00:	46de      	mov	lr, fp
 8000e02:	b5e0      	push	{r5, r6, r7, lr}
 8000e04:	030c      	lsls	r4, r1, #12
 8000e06:	001f      	movs	r7, r3
 8000e08:	004b      	lsls	r3, r1, #1
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	4692      	mov	sl, r2
 8000e0e:	0005      	movs	r5, r0
 8000e10:	b085      	sub	sp, #20
 8000e12:	0b24      	lsrs	r4, r4, #12
 8000e14:	0d5b      	lsrs	r3, r3, #21
 8000e16:	0fce      	lsrs	r6, r1, #31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_ddiv+0x26>
 8000e1c:	e152      	b.n	80010c4 <__aeabi_ddiv+0x2cc>
 8000e1e:	4ad2      	ldr	r2, [pc, #840]	; (8001168 <__aeabi_ddiv+0x370>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x2e>
 8000e24:	e16e      	b.n	8001104 <__aeabi_ddiv+0x30c>
 8000e26:	0f42      	lsrs	r2, r0, #29
 8000e28:	00e4      	lsls	r4, r4, #3
 8000e2a:	4314      	orrs	r4, r2
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0412      	lsls	r2, r2, #16
 8000e30:	4322      	orrs	r2, r4
 8000e32:	4690      	mov	r8, r2
 8000e34:	4acd      	ldr	r2, [pc, #820]	; (800116c <__aeabi_ddiv+0x374>)
 8000e36:	00c5      	lsls	r5, r0, #3
 8000e38:	4693      	mov	fp, r2
 8000e3a:	449b      	add	fp, r3
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4699      	mov	r9, r3
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	033c      	lsls	r4, r7, #12
 8000e44:	007b      	lsls	r3, r7, #1
 8000e46:	4650      	mov	r0, sl
 8000e48:	0b24      	lsrs	r4, r4, #12
 8000e4a:	0d5b      	lsrs	r3, r3, #21
 8000e4c:	0fff      	lsrs	r7, r7, #31
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_ddiv+0x5c>
 8000e52:	e11a      	b.n	800108a <__aeabi_ddiv+0x292>
 8000e54:	4ac4      	ldr	r2, [pc, #784]	; (8001168 <__aeabi_ddiv+0x370>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x64>
 8000e5a:	e15e      	b.n	800111a <__aeabi_ddiv+0x322>
 8000e5c:	0f42      	lsrs	r2, r0, #29
 8000e5e:	00e4      	lsls	r4, r4, #3
 8000e60:	4322      	orrs	r2, r4
 8000e62:	2480      	movs	r4, #128	; 0x80
 8000e64:	0424      	lsls	r4, r4, #16
 8000e66:	4314      	orrs	r4, r2
 8000e68:	4ac0      	ldr	r2, [pc, #768]	; (800116c <__aeabi_ddiv+0x374>)
 8000e6a:	00c1      	lsls	r1, r0, #3
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	465a      	mov	r2, fp
 8000e70:	4463      	add	r3, ip
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	469b      	mov	fp, r3
 8000e76:	2000      	movs	r0, #0
 8000e78:	0033      	movs	r3, r6
 8000e7a:	407b      	eors	r3, r7
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	464b      	mov	r3, r9
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d827      	bhi.n	8000ed4 <__aeabi_ddiv+0xdc>
 8000e84:	4aba      	ldr	r2, [pc, #744]	; (8001170 <__aeabi_ddiv+0x378>)
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	58d3      	ldr	r3, [r2, r3]
 8000e8a:	469f      	mov	pc, r3
 8000e8c:	46b2      	mov	sl, r6
 8000e8e:	9b00      	ldr	r3, [sp, #0]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d016      	beq.n	8000ec2 <__aeabi_ddiv+0xca>
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d100      	bne.n	8000e9a <__aeabi_ddiv+0xa2>
 8000e98:	e287      	b.n	80013aa <__aeabi_ddiv+0x5b2>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_ddiv+0xa8>
 8000e9e:	e0d5      	b.n	800104c <__aeabi_ddiv+0x254>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	051b      	lsls	r3, r3, #20
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	4652      	mov	r2, sl
 8000eac:	07d2      	lsls	r2, r2, #31
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	0028      	movs	r0, r5
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	b005      	add	sp, #20
 8000eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb8:	46bb      	mov	fp, r7
 8000eba:	46b2      	mov	sl, r6
 8000ebc:	46a9      	mov	r9, r5
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	4ba8      	ldr	r3, [pc, #672]	; (8001168 <__aeabi_ddiv+0x370>)
 8000ec8:	e7ed      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 8000eca:	46ba      	mov	sl, r7
 8000ecc:	46a0      	mov	r8, r4
 8000ece:	000d      	movs	r5, r1
 8000ed0:	9000      	str	r0, [sp, #0]
 8000ed2:	e7dc      	b.n	8000e8e <__aeabi_ddiv+0x96>
 8000ed4:	4544      	cmp	r4, r8
 8000ed6:	d200      	bcs.n	8000eda <__aeabi_ddiv+0xe2>
 8000ed8:	e1c4      	b.n	8001264 <__aeabi_ddiv+0x46c>
 8000eda:	d100      	bne.n	8000ede <__aeabi_ddiv+0xe6>
 8000edc:	e1bf      	b.n	800125e <__aeabi_ddiv+0x466>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	002e      	movs	r6, r5
 8000ee6:	4640      	mov	r0, r8
 8000ee8:	2500      	movs	r5, #0
 8000eea:	44e3      	add	fp, ip
 8000eec:	0223      	lsls	r3, r4, #8
 8000eee:	0e0c      	lsrs	r4, r1, #24
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	0423      	lsls	r3, r4, #16
 8000ef8:	020a      	lsls	r2, r1, #8
 8000efa:	0c1f      	lsrs	r7, r3, #16
 8000efc:	4649      	mov	r1, r9
 8000efe:	9200      	str	r2, [sp, #0]
 8000f00:	9701      	str	r7, [sp, #4]
 8000f02:	f7ff f9a1 	bl	8000248 <__aeabi_uidivmod>
 8000f06:	0002      	movs	r2, r0
 8000f08:	437a      	muls	r2, r7
 8000f0a:	040b      	lsls	r3, r1, #16
 8000f0c:	0c31      	lsrs	r1, r6, #16
 8000f0e:	4680      	mov	r8, r0
 8000f10:	4319      	orrs	r1, r3
 8000f12:	428a      	cmp	r2, r1
 8000f14:	d907      	bls.n	8000f26 <__aeabi_ddiv+0x12e>
 8000f16:	2301      	movs	r3, #1
 8000f18:	425b      	negs	r3, r3
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	44e0      	add	r8, ip
 8000f20:	428c      	cmp	r4, r1
 8000f22:	d800      	bhi.n	8000f26 <__aeabi_ddiv+0x12e>
 8000f24:	e201      	b.n	800132a <__aeabi_ddiv+0x532>
 8000f26:	1a88      	subs	r0, r1, r2
 8000f28:	4649      	mov	r1, r9
 8000f2a:	f7ff f98d 	bl	8000248 <__aeabi_uidivmod>
 8000f2e:	9a01      	ldr	r2, [sp, #4]
 8000f30:	0436      	lsls	r6, r6, #16
 8000f32:	4342      	muls	r2, r0
 8000f34:	0409      	lsls	r1, r1, #16
 8000f36:	0c36      	lsrs	r6, r6, #16
 8000f38:	0003      	movs	r3, r0
 8000f3a:	430e      	orrs	r6, r1
 8000f3c:	42b2      	cmp	r2, r6
 8000f3e:	d904      	bls.n	8000f4a <__aeabi_ddiv+0x152>
 8000f40:	1936      	adds	r6, r6, r4
 8000f42:	3b01      	subs	r3, #1
 8000f44:	42b4      	cmp	r4, r6
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x152>
 8000f48:	e1e9      	b.n	800131e <__aeabi_ddiv+0x526>
 8000f4a:	1ab0      	subs	r0, r6, r2
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	9e00      	ldr	r6, [sp, #0]
 8000f50:	0412      	lsls	r2, r2, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	0c33      	lsrs	r3, r6, #16
 8000f56:	001f      	movs	r7, r3
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	4690      	mov	r8, r2
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	0413      	lsls	r3, r2, #16
 8000f60:	0432      	lsls	r2, r6, #16
 8000f62:	0c16      	lsrs	r6, r2, #16
 8000f64:	0032      	movs	r2, r6
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	435a      	muls	r2, r3
 8000f6a:	9603      	str	r6, [sp, #12]
 8000f6c:	437b      	muls	r3, r7
 8000f6e:	434e      	muls	r6, r1
 8000f70:	4379      	muls	r1, r7
 8000f72:	0c17      	lsrs	r7, r2, #16
 8000f74:	46bc      	mov	ip, r7
 8000f76:	199b      	adds	r3, r3, r6
 8000f78:	4463      	add	r3, ip
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	d903      	bls.n	8000f86 <__aeabi_ddiv+0x18e>
 8000f7e:	2680      	movs	r6, #128	; 0x80
 8000f80:	0276      	lsls	r6, r6, #9
 8000f82:	46b4      	mov	ip, r6
 8000f84:	4461      	add	r1, ip
 8000f86:	0c1e      	lsrs	r6, r3, #16
 8000f88:	1871      	adds	r1, r6, r1
 8000f8a:	0416      	lsls	r6, r2, #16
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	0c36      	lsrs	r6, r6, #16
 8000f90:	199e      	adds	r6, r3, r6
 8000f92:	4288      	cmp	r0, r1
 8000f94:	d302      	bcc.n	8000f9c <__aeabi_ddiv+0x1a4>
 8000f96:	d112      	bne.n	8000fbe <__aeabi_ddiv+0x1c6>
 8000f98:	42b5      	cmp	r5, r6
 8000f9a:	d210      	bcs.n	8000fbe <__aeabi_ddiv+0x1c6>
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	9b00      	ldr	r3, [sp, #0]
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	4465      	add	r5, ip
 8000fa6:	001f      	movs	r7, r3
 8000fa8:	429d      	cmp	r5, r3
 8000faa:	419b      	sbcs	r3, r3
 8000fac:	425b      	negs	r3, r3
 8000fae:	191b      	adds	r3, r3, r4
 8000fb0:	18c0      	adds	r0, r0, r3
 8000fb2:	4284      	cmp	r4, r0
 8000fb4:	d200      	bcs.n	8000fb8 <__aeabi_ddiv+0x1c0>
 8000fb6:	e19e      	b.n	80012f6 <__aeabi_ddiv+0x4fe>
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1c4>
 8000fba:	e199      	b.n	80012f0 <__aeabi_ddiv+0x4f8>
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	1bae      	subs	r6, r5, r6
 8000fc0:	42b5      	cmp	r5, r6
 8000fc2:	41ad      	sbcs	r5, r5
 8000fc4:	1a40      	subs	r0, r0, r1
 8000fc6:	426d      	negs	r5, r5
 8000fc8:	1b40      	subs	r0, r0, r5
 8000fca:	4284      	cmp	r4, r0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x1d8>
 8000fce:	e1d2      	b.n	8001376 <__aeabi_ddiv+0x57e>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	f7ff f939 	bl	8000248 <__aeabi_uidivmod>
 8000fd6:	9a01      	ldr	r2, [sp, #4]
 8000fd8:	040b      	lsls	r3, r1, #16
 8000fda:	4342      	muls	r2, r0
 8000fdc:	0c31      	lsrs	r1, r6, #16
 8000fde:	0005      	movs	r5, r0
 8000fe0:	4319      	orrs	r1, r3
 8000fe2:	428a      	cmp	r2, r1
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x1f0>
 8000fe6:	e16c      	b.n	80012c2 <__aeabi_ddiv+0x4ca>
 8000fe8:	1a88      	subs	r0, r1, r2
 8000fea:	4649      	mov	r1, r9
 8000fec:	f7ff f92c 	bl	8000248 <__aeabi_uidivmod>
 8000ff0:	9a01      	ldr	r2, [sp, #4]
 8000ff2:	0436      	lsls	r6, r6, #16
 8000ff4:	4342      	muls	r2, r0
 8000ff6:	0409      	lsls	r1, r1, #16
 8000ff8:	0c36      	lsrs	r6, r6, #16
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	430e      	orrs	r6, r1
 8000ffe:	42b2      	cmp	r2, r6
 8001000:	d900      	bls.n	8001004 <__aeabi_ddiv+0x20c>
 8001002:	e153      	b.n	80012ac <__aeabi_ddiv+0x4b4>
 8001004:	9803      	ldr	r0, [sp, #12]
 8001006:	1ab6      	subs	r6, r6, r2
 8001008:	0002      	movs	r2, r0
 800100a:	042d      	lsls	r5, r5, #16
 800100c:	431d      	orrs	r5, r3
 800100e:	9f02      	ldr	r7, [sp, #8]
 8001010:	042b      	lsls	r3, r5, #16
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	435a      	muls	r2, r3
 8001016:	437b      	muls	r3, r7
 8001018:	469c      	mov	ip, r3
 800101a:	0c29      	lsrs	r1, r5, #16
 800101c:	4348      	muls	r0, r1
 800101e:	0c13      	lsrs	r3, r2, #16
 8001020:	4484      	add	ip, r0
 8001022:	4463      	add	r3, ip
 8001024:	4379      	muls	r1, r7
 8001026:	4298      	cmp	r0, r3
 8001028:	d903      	bls.n	8001032 <__aeabi_ddiv+0x23a>
 800102a:	2080      	movs	r0, #128	; 0x80
 800102c:	0240      	lsls	r0, r0, #9
 800102e:	4684      	mov	ip, r0
 8001030:	4461      	add	r1, ip
 8001032:	0c18      	lsrs	r0, r3, #16
 8001034:	0412      	lsls	r2, r2, #16
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	0c12      	lsrs	r2, r2, #16
 800103a:	1840      	adds	r0, r0, r1
 800103c:	189b      	adds	r3, r3, r2
 800103e:	4286      	cmp	r6, r0
 8001040:	d200      	bcs.n	8001044 <__aeabi_ddiv+0x24c>
 8001042:	e100      	b.n	8001246 <__aeabi_ddiv+0x44e>
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x250>
 8001046:	e0fb      	b.n	8001240 <__aeabi_ddiv+0x448>
 8001048:	2301      	movs	r3, #1
 800104a:	431d      	orrs	r5, r3
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <__aeabi_ddiv+0x37c>)
 800104e:	445b      	add	r3, fp
 8001050:	2b00      	cmp	r3, #0
 8001052:	dc00      	bgt.n	8001056 <__aeabi_ddiv+0x25e>
 8001054:	e0aa      	b.n	80011ac <__aeabi_ddiv+0x3b4>
 8001056:	076a      	lsls	r2, r5, #29
 8001058:	d000      	beq.n	800105c <__aeabi_ddiv+0x264>
 800105a:	e13d      	b.n	80012d8 <__aeabi_ddiv+0x4e0>
 800105c:	08e9      	lsrs	r1, r5, #3
 800105e:	4642      	mov	r2, r8
 8001060:	01d2      	lsls	r2, r2, #7
 8001062:	d506      	bpl.n	8001072 <__aeabi_ddiv+0x27a>
 8001064:	4642      	mov	r2, r8
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <__aeabi_ddiv+0x380>)
 8001068:	401a      	ands	r2, r3
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	4690      	mov	r8, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	445b      	add	r3, fp
 8001072:	4a42      	ldr	r2, [pc, #264]	; (800117c <__aeabi_ddiv+0x384>)
 8001074:	4293      	cmp	r3, r2
 8001076:	dd00      	ble.n	800107a <__aeabi_ddiv+0x282>
 8001078:	e723      	b.n	8000ec2 <__aeabi_ddiv+0xca>
 800107a:	4642      	mov	r2, r8
 800107c:	055b      	lsls	r3, r3, #21
 800107e:	0755      	lsls	r5, r2, #29
 8001080:	0252      	lsls	r2, r2, #9
 8001082:	430d      	orrs	r5, r1
 8001084:	0b12      	lsrs	r2, r2, #12
 8001086:	0d5b      	lsrs	r3, r3, #21
 8001088:	e70d      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 800108a:	4651      	mov	r1, sl
 800108c:	4321      	orrs	r1, r4
 800108e:	d100      	bne.n	8001092 <__aeabi_ddiv+0x29a>
 8001090:	e07c      	b.n	800118c <__aeabi_ddiv+0x394>
 8001092:	2c00      	cmp	r4, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_ddiv+0x2a0>
 8001096:	e0fb      	b.n	8001290 <__aeabi_ddiv+0x498>
 8001098:	0020      	movs	r0, r4
 800109a:	f001 fa63 	bl	8002564 <__clzsi2>
 800109e:	0002      	movs	r2, r0
 80010a0:	3a0b      	subs	r2, #11
 80010a2:	231d      	movs	r3, #29
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	4652      	mov	r2, sl
 80010a8:	0001      	movs	r1, r0
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	4653      	mov	r3, sl
 80010ae:	3908      	subs	r1, #8
 80010b0:	408b      	lsls	r3, r1
 80010b2:	408c      	lsls	r4, r1
 80010b4:	0019      	movs	r1, r3
 80010b6:	4314      	orrs	r4, r2
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <__aeabi_ddiv+0x388>)
 80010ba:	4458      	add	r0, fp
 80010bc:	469b      	mov	fp, r3
 80010be:	4483      	add	fp, r0
 80010c0:	2000      	movs	r0, #0
 80010c2:	e6d9      	b.n	8000e78 <__aeabi_ddiv+0x80>
 80010c4:	0003      	movs	r3, r0
 80010c6:	4323      	orrs	r3, r4
 80010c8:	4698      	mov	r8, r3
 80010ca:	d044      	beq.n	8001156 <__aeabi_ddiv+0x35e>
 80010cc:	2c00      	cmp	r4, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_ddiv+0x2da>
 80010d0:	e0cf      	b.n	8001272 <__aeabi_ddiv+0x47a>
 80010d2:	0020      	movs	r0, r4
 80010d4:	f001 fa46 	bl	8002564 <__clzsi2>
 80010d8:	0001      	movs	r1, r0
 80010da:	0002      	movs	r2, r0
 80010dc:	390b      	subs	r1, #11
 80010de:	231d      	movs	r3, #29
 80010e0:	1a5b      	subs	r3, r3, r1
 80010e2:	4649      	mov	r1, r9
 80010e4:	0010      	movs	r0, r2
 80010e6:	40d9      	lsrs	r1, r3
 80010e8:	3808      	subs	r0, #8
 80010ea:	4084      	lsls	r4, r0
 80010ec:	000b      	movs	r3, r1
 80010ee:	464d      	mov	r5, r9
 80010f0:	4323      	orrs	r3, r4
 80010f2:	4698      	mov	r8, r3
 80010f4:	4085      	lsls	r5, r0
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <__aeabi_ddiv+0x38c>)
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	469b      	mov	fp, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	4699      	mov	r9, r3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	e69e      	b.n	8000e42 <__aeabi_ddiv+0x4a>
 8001104:	0002      	movs	r2, r0
 8001106:	4322      	orrs	r2, r4
 8001108:	4690      	mov	r8, r2
 800110a:	d11d      	bne.n	8001148 <__aeabi_ddiv+0x350>
 800110c:	2208      	movs	r2, #8
 800110e:	469b      	mov	fp, r3
 8001110:	2302      	movs	r3, #2
 8001112:	2500      	movs	r5, #0
 8001114:	4691      	mov	r9, r2
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	e693      	b.n	8000e42 <__aeabi_ddiv+0x4a>
 800111a:	4651      	mov	r1, sl
 800111c:	4321      	orrs	r1, r4
 800111e:	d109      	bne.n	8001134 <__aeabi_ddiv+0x33c>
 8001120:	2302      	movs	r3, #2
 8001122:	464a      	mov	r2, r9
 8001124:	431a      	orrs	r2, r3
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <__aeabi_ddiv+0x390>)
 8001128:	4691      	mov	r9, r2
 800112a:	469c      	mov	ip, r3
 800112c:	2400      	movs	r4, #0
 800112e:	2002      	movs	r0, #2
 8001130:	44e3      	add	fp, ip
 8001132:	e6a1      	b.n	8000e78 <__aeabi_ddiv+0x80>
 8001134:	2303      	movs	r3, #3
 8001136:	464a      	mov	r2, r9
 8001138:	431a      	orrs	r2, r3
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <__aeabi_ddiv+0x390>)
 800113c:	4691      	mov	r9, r2
 800113e:	469c      	mov	ip, r3
 8001140:	4651      	mov	r1, sl
 8001142:	2003      	movs	r0, #3
 8001144:	44e3      	add	fp, ip
 8001146:	e697      	b.n	8000e78 <__aeabi_ddiv+0x80>
 8001148:	220c      	movs	r2, #12
 800114a:	469b      	mov	fp, r3
 800114c:	2303      	movs	r3, #3
 800114e:	46a0      	mov	r8, r4
 8001150:	4691      	mov	r9, r2
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	e675      	b.n	8000e42 <__aeabi_ddiv+0x4a>
 8001156:	2304      	movs	r3, #4
 8001158:	4699      	mov	r9, r3
 800115a:	2300      	movs	r3, #0
 800115c:	469b      	mov	fp, r3
 800115e:	3301      	adds	r3, #1
 8001160:	2500      	movs	r5, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	e66d      	b.n	8000e42 <__aeabi_ddiv+0x4a>
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	000007ff 	.word	0x000007ff
 800116c:	fffffc01 	.word	0xfffffc01
 8001170:	08009de4 	.word	0x08009de4
 8001174:	000003ff 	.word	0x000003ff
 8001178:	feffffff 	.word	0xfeffffff
 800117c:	000007fe 	.word	0x000007fe
 8001180:	000003f3 	.word	0x000003f3
 8001184:	fffffc0d 	.word	0xfffffc0d
 8001188:	fffff801 	.word	0xfffff801
 800118c:	464a      	mov	r2, r9
 800118e:	2301      	movs	r3, #1
 8001190:	431a      	orrs	r2, r3
 8001192:	4691      	mov	r9, r2
 8001194:	2400      	movs	r4, #0
 8001196:	2001      	movs	r0, #1
 8001198:	e66e      	b.n	8000e78 <__aeabi_ddiv+0x80>
 800119a:	2300      	movs	r3, #0
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	469a      	mov	sl, r3
 80011a0:	2500      	movs	r5, #0
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <__aeabi_ddiv+0x5cc>)
 80011a4:	0312      	lsls	r2, r2, #12
 80011a6:	e67e      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 80011a8:	2501      	movs	r5, #1
 80011aa:	426d      	negs	r5, r5
 80011ac:	2201      	movs	r2, #1
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	2a38      	cmp	r2, #56	; 0x38
 80011b2:	dd00      	ble.n	80011b6 <__aeabi_ddiv+0x3be>
 80011b4:	e674      	b.n	8000ea0 <__aeabi_ddiv+0xa8>
 80011b6:	2a1f      	cmp	r2, #31
 80011b8:	dc00      	bgt.n	80011bc <__aeabi_ddiv+0x3c4>
 80011ba:	e0bd      	b.n	8001338 <__aeabi_ddiv+0x540>
 80011bc:	211f      	movs	r1, #31
 80011be:	4249      	negs	r1, r1
 80011c0:	1acb      	subs	r3, r1, r3
 80011c2:	4641      	mov	r1, r8
 80011c4:	40d9      	lsrs	r1, r3
 80011c6:	000b      	movs	r3, r1
 80011c8:	2a20      	cmp	r2, #32
 80011ca:	d004      	beq.n	80011d6 <__aeabi_ddiv+0x3de>
 80011cc:	4641      	mov	r1, r8
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <__aeabi_ddiv+0x5d0>)
 80011d0:	445a      	add	r2, fp
 80011d2:	4091      	lsls	r1, r2
 80011d4:	430d      	orrs	r5, r1
 80011d6:	0029      	movs	r1, r5
 80011d8:	1e4a      	subs	r2, r1, #1
 80011da:	4191      	sbcs	r1, r2
 80011dc:	4319      	orrs	r1, r3
 80011de:	2307      	movs	r3, #7
 80011e0:	001d      	movs	r5, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	400d      	ands	r5, r1
 80011e6:	420b      	tst	r3, r1
 80011e8:	d100      	bne.n	80011ec <__aeabi_ddiv+0x3f4>
 80011ea:	e0d0      	b.n	800138e <__aeabi_ddiv+0x596>
 80011ec:	220f      	movs	r2, #15
 80011ee:	2300      	movs	r3, #0
 80011f0:	400a      	ands	r2, r1
 80011f2:	2a04      	cmp	r2, #4
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x400>
 80011f6:	e0c7      	b.n	8001388 <__aeabi_ddiv+0x590>
 80011f8:	1d0a      	adds	r2, r1, #4
 80011fa:	428a      	cmp	r2, r1
 80011fc:	4189      	sbcs	r1, r1
 80011fe:	4249      	negs	r1, r1
 8001200:	185b      	adds	r3, r3, r1
 8001202:	0011      	movs	r1, r2
 8001204:	021a      	lsls	r2, r3, #8
 8001206:	d400      	bmi.n	800120a <__aeabi_ddiv+0x412>
 8001208:	e0be      	b.n	8001388 <__aeabi_ddiv+0x590>
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	2500      	movs	r5, #0
 8001210:	e649      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	4643      	mov	r3, r8
 8001216:	0312      	lsls	r2, r2, #12
 8001218:	4213      	tst	r3, r2
 800121a:	d008      	beq.n	800122e <__aeabi_ddiv+0x436>
 800121c:	4214      	tst	r4, r2
 800121e:	d106      	bne.n	800122e <__aeabi_ddiv+0x436>
 8001220:	4322      	orrs	r2, r4
 8001222:	0312      	lsls	r2, r2, #12
 8001224:	46ba      	mov	sl, r7
 8001226:	000d      	movs	r5, r1
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <__aeabi_ddiv+0x5cc>)
 800122a:	0b12      	lsrs	r2, r2, #12
 800122c:	e63b      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	4643      	mov	r3, r8
 8001232:	0312      	lsls	r2, r2, #12
 8001234:	431a      	orrs	r2, r3
 8001236:	0312      	lsls	r2, r2, #12
 8001238:	46b2      	mov	sl, r6
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <__aeabi_ddiv+0x5cc>)
 800123c:	0b12      	lsrs	r2, r2, #12
 800123e:	e632      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x44e>
 8001244:	e702      	b.n	800104c <__aeabi_ddiv+0x254>
 8001246:	19a6      	adds	r6, r4, r6
 8001248:	1e6a      	subs	r2, r5, #1
 800124a:	42a6      	cmp	r6, r4
 800124c:	d200      	bcs.n	8001250 <__aeabi_ddiv+0x458>
 800124e:	e089      	b.n	8001364 <__aeabi_ddiv+0x56c>
 8001250:	4286      	cmp	r6, r0
 8001252:	d200      	bcs.n	8001256 <__aeabi_ddiv+0x45e>
 8001254:	e09f      	b.n	8001396 <__aeabi_ddiv+0x59e>
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x462>
 8001258:	e0af      	b.n	80013ba <__aeabi_ddiv+0x5c2>
 800125a:	0015      	movs	r5, r2
 800125c:	e6f4      	b.n	8001048 <__aeabi_ddiv+0x250>
 800125e:	42a9      	cmp	r1, r5
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x46c>
 8001262:	e63c      	b.n	8000ede <__aeabi_ddiv+0xe6>
 8001264:	4643      	mov	r3, r8
 8001266:	07de      	lsls	r6, r3, #31
 8001268:	0858      	lsrs	r0, r3, #1
 800126a:	086b      	lsrs	r3, r5, #1
 800126c:	431e      	orrs	r6, r3
 800126e:	07ed      	lsls	r5, r5, #31
 8001270:	e63c      	b.n	8000eec <__aeabi_ddiv+0xf4>
 8001272:	f001 f977 	bl	8002564 <__clzsi2>
 8001276:	0001      	movs	r1, r0
 8001278:	0002      	movs	r2, r0
 800127a:	3115      	adds	r1, #21
 800127c:	3220      	adds	r2, #32
 800127e:	291c      	cmp	r1, #28
 8001280:	dc00      	bgt.n	8001284 <__aeabi_ddiv+0x48c>
 8001282:	e72c      	b.n	80010de <__aeabi_ddiv+0x2e6>
 8001284:	464b      	mov	r3, r9
 8001286:	3808      	subs	r0, #8
 8001288:	4083      	lsls	r3, r0
 800128a:	2500      	movs	r5, #0
 800128c:	4698      	mov	r8, r3
 800128e:	e732      	b.n	80010f6 <__aeabi_ddiv+0x2fe>
 8001290:	f001 f968 	bl	8002564 <__clzsi2>
 8001294:	0003      	movs	r3, r0
 8001296:	001a      	movs	r2, r3
 8001298:	3215      	adds	r2, #21
 800129a:	3020      	adds	r0, #32
 800129c:	2a1c      	cmp	r2, #28
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_ddiv+0x4aa>
 80012a0:	e6ff      	b.n	80010a2 <__aeabi_ddiv+0x2aa>
 80012a2:	4654      	mov	r4, sl
 80012a4:	3b08      	subs	r3, #8
 80012a6:	2100      	movs	r1, #0
 80012a8:	409c      	lsls	r4, r3
 80012aa:	e705      	b.n	80010b8 <__aeabi_ddiv+0x2c0>
 80012ac:	1936      	adds	r6, r6, r4
 80012ae:	3b01      	subs	r3, #1
 80012b0:	42b4      	cmp	r4, r6
 80012b2:	d900      	bls.n	80012b6 <__aeabi_ddiv+0x4be>
 80012b4:	e6a6      	b.n	8001004 <__aeabi_ddiv+0x20c>
 80012b6:	42b2      	cmp	r2, r6
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x4c4>
 80012ba:	e6a3      	b.n	8001004 <__aeabi_ddiv+0x20c>
 80012bc:	1e83      	subs	r3, r0, #2
 80012be:	1936      	adds	r6, r6, r4
 80012c0:	e6a0      	b.n	8001004 <__aeabi_ddiv+0x20c>
 80012c2:	1909      	adds	r1, r1, r4
 80012c4:	3d01      	subs	r5, #1
 80012c6:	428c      	cmp	r4, r1
 80012c8:	d900      	bls.n	80012cc <__aeabi_ddiv+0x4d4>
 80012ca:	e68d      	b.n	8000fe8 <__aeabi_ddiv+0x1f0>
 80012cc:	428a      	cmp	r2, r1
 80012ce:	d800      	bhi.n	80012d2 <__aeabi_ddiv+0x4da>
 80012d0:	e68a      	b.n	8000fe8 <__aeabi_ddiv+0x1f0>
 80012d2:	1e85      	subs	r5, r0, #2
 80012d4:	1909      	adds	r1, r1, r4
 80012d6:	e687      	b.n	8000fe8 <__aeabi_ddiv+0x1f0>
 80012d8:	220f      	movs	r2, #15
 80012da:	402a      	ands	r2, r5
 80012dc:	2a04      	cmp	r2, #4
 80012de:	d100      	bne.n	80012e2 <__aeabi_ddiv+0x4ea>
 80012e0:	e6bc      	b.n	800105c <__aeabi_ddiv+0x264>
 80012e2:	1d29      	adds	r1, r5, #4
 80012e4:	42a9      	cmp	r1, r5
 80012e6:	41ad      	sbcs	r5, r5
 80012e8:	426d      	negs	r5, r5
 80012ea:	08c9      	lsrs	r1, r1, #3
 80012ec:	44a8      	add	r8, r5
 80012ee:	e6b6      	b.n	800105e <__aeabi_ddiv+0x266>
 80012f0:	42af      	cmp	r7, r5
 80012f2:	d900      	bls.n	80012f6 <__aeabi_ddiv+0x4fe>
 80012f4:	e662      	b.n	8000fbc <__aeabi_ddiv+0x1c4>
 80012f6:	4281      	cmp	r1, r0
 80012f8:	d804      	bhi.n	8001304 <__aeabi_ddiv+0x50c>
 80012fa:	d000      	beq.n	80012fe <__aeabi_ddiv+0x506>
 80012fc:	e65e      	b.n	8000fbc <__aeabi_ddiv+0x1c4>
 80012fe:	42ae      	cmp	r6, r5
 8001300:	d800      	bhi.n	8001304 <__aeabi_ddiv+0x50c>
 8001302:	e65b      	b.n	8000fbc <__aeabi_ddiv+0x1c4>
 8001304:	2302      	movs	r3, #2
 8001306:	425b      	negs	r3, r3
 8001308:	469c      	mov	ip, r3
 800130a:	9b00      	ldr	r3, [sp, #0]
 800130c:	44e0      	add	r8, ip
 800130e:	469c      	mov	ip, r3
 8001310:	4465      	add	r5, ip
 8001312:	429d      	cmp	r5, r3
 8001314:	419b      	sbcs	r3, r3
 8001316:	425b      	negs	r3, r3
 8001318:	191b      	adds	r3, r3, r4
 800131a:	18c0      	adds	r0, r0, r3
 800131c:	e64f      	b.n	8000fbe <__aeabi_ddiv+0x1c6>
 800131e:	42b2      	cmp	r2, r6
 8001320:	d800      	bhi.n	8001324 <__aeabi_ddiv+0x52c>
 8001322:	e612      	b.n	8000f4a <__aeabi_ddiv+0x152>
 8001324:	1e83      	subs	r3, r0, #2
 8001326:	1936      	adds	r6, r6, r4
 8001328:	e60f      	b.n	8000f4a <__aeabi_ddiv+0x152>
 800132a:	428a      	cmp	r2, r1
 800132c:	d800      	bhi.n	8001330 <__aeabi_ddiv+0x538>
 800132e:	e5fa      	b.n	8000f26 <__aeabi_ddiv+0x12e>
 8001330:	1e83      	subs	r3, r0, #2
 8001332:	4698      	mov	r8, r3
 8001334:	1909      	adds	r1, r1, r4
 8001336:	e5f6      	b.n	8000f26 <__aeabi_ddiv+0x12e>
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <__aeabi_ddiv+0x5d4>)
 800133a:	0028      	movs	r0, r5
 800133c:	445b      	add	r3, fp
 800133e:	4641      	mov	r1, r8
 8001340:	409d      	lsls	r5, r3
 8001342:	4099      	lsls	r1, r3
 8001344:	40d0      	lsrs	r0, r2
 8001346:	1e6b      	subs	r3, r5, #1
 8001348:	419d      	sbcs	r5, r3
 800134a:	4643      	mov	r3, r8
 800134c:	4301      	orrs	r1, r0
 800134e:	4329      	orrs	r1, r5
 8001350:	40d3      	lsrs	r3, r2
 8001352:	074a      	lsls	r2, r1, #29
 8001354:	d100      	bne.n	8001358 <__aeabi_ddiv+0x560>
 8001356:	e755      	b.n	8001204 <__aeabi_ddiv+0x40c>
 8001358:	220f      	movs	r2, #15
 800135a:	400a      	ands	r2, r1
 800135c:	2a04      	cmp	r2, #4
 800135e:	d000      	beq.n	8001362 <__aeabi_ddiv+0x56a>
 8001360:	e74a      	b.n	80011f8 <__aeabi_ddiv+0x400>
 8001362:	e74f      	b.n	8001204 <__aeabi_ddiv+0x40c>
 8001364:	0015      	movs	r5, r2
 8001366:	4286      	cmp	r6, r0
 8001368:	d000      	beq.n	800136c <__aeabi_ddiv+0x574>
 800136a:	e66d      	b.n	8001048 <__aeabi_ddiv+0x250>
 800136c:	9a00      	ldr	r2, [sp, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d000      	beq.n	8001374 <__aeabi_ddiv+0x57c>
 8001372:	e669      	b.n	8001048 <__aeabi_ddiv+0x250>
 8001374:	e66a      	b.n	800104c <__aeabi_ddiv+0x254>
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <__aeabi_ddiv+0x5d8>)
 8001378:	445b      	add	r3, fp
 800137a:	2b00      	cmp	r3, #0
 800137c:	dc00      	bgt.n	8001380 <__aeabi_ddiv+0x588>
 800137e:	e713      	b.n	80011a8 <__aeabi_ddiv+0x3b0>
 8001380:	2501      	movs	r5, #1
 8001382:	2100      	movs	r1, #0
 8001384:	44a8      	add	r8, r5
 8001386:	e66a      	b.n	800105e <__aeabi_ddiv+0x266>
 8001388:	075d      	lsls	r5, r3, #29
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	0b1a      	lsrs	r2, r3, #12
 800138e:	08c9      	lsrs	r1, r1, #3
 8001390:	2300      	movs	r3, #0
 8001392:	430d      	orrs	r5, r1
 8001394:	e587      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 8001396:	9900      	ldr	r1, [sp, #0]
 8001398:	3d02      	subs	r5, #2
 800139a:	004a      	lsls	r2, r1, #1
 800139c:	428a      	cmp	r2, r1
 800139e:	41bf      	sbcs	r7, r7
 80013a0:	427f      	negs	r7, r7
 80013a2:	193f      	adds	r7, r7, r4
 80013a4:	19f6      	adds	r6, r6, r7
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	e7dd      	b.n	8001366 <__aeabi_ddiv+0x56e>
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	4643      	mov	r3, r8
 80013ae:	0312      	lsls	r2, r2, #12
 80013b0:	431a      	orrs	r2, r3
 80013b2:	0312      	lsls	r2, r2, #12
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <__aeabi_ddiv+0x5cc>)
 80013b6:	0b12      	lsrs	r2, r2, #12
 80013b8:	e575      	b.n	8000ea6 <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	4299      	cmp	r1, r3
 80013be:	d3ea      	bcc.n	8001396 <__aeabi_ddiv+0x59e>
 80013c0:	0015      	movs	r5, r2
 80013c2:	e7d3      	b.n	800136c <__aeabi_ddiv+0x574>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	0000043e 	.word	0x0000043e
 80013cc:	0000041e 	.word	0x0000041e
 80013d0:	000003ff 	.word	0x000003ff

080013d4 <__eqdf2>:
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	464e      	mov	r6, r9
 80013d8:	4645      	mov	r5, r8
 80013da:	46de      	mov	lr, fp
 80013dc:	4657      	mov	r7, sl
 80013de:	4690      	mov	r8, r2
 80013e0:	b5e0      	push	{r5, r6, r7, lr}
 80013e2:	0017      	movs	r7, r2
 80013e4:	031a      	lsls	r2, r3, #12
 80013e6:	0b12      	lsrs	r2, r2, #12
 80013e8:	0005      	movs	r5, r0
 80013ea:	4684      	mov	ip, r0
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <__eqdf2+0x80>)
 80013ee:	030e      	lsls	r6, r1, #12
 80013f0:	004c      	lsls	r4, r1, #1
 80013f2:	4691      	mov	r9, r2
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	0fdb      	lsrs	r3, r3, #31
 80013f8:	469b      	mov	fp, r3
 80013fa:	0b36      	lsrs	r6, r6, #12
 80013fc:	0d64      	lsrs	r4, r4, #21
 80013fe:	0fc9      	lsrs	r1, r1, #31
 8001400:	0d52      	lsrs	r2, r2, #21
 8001402:	4284      	cmp	r4, r0
 8001404:	d019      	beq.n	800143a <__eqdf2+0x66>
 8001406:	4282      	cmp	r2, r0
 8001408:	d010      	beq.n	800142c <__eqdf2+0x58>
 800140a:	2001      	movs	r0, #1
 800140c:	4294      	cmp	r4, r2
 800140e:	d10e      	bne.n	800142e <__eqdf2+0x5a>
 8001410:	454e      	cmp	r6, r9
 8001412:	d10c      	bne.n	800142e <__eqdf2+0x5a>
 8001414:	2001      	movs	r0, #1
 8001416:	45c4      	cmp	ip, r8
 8001418:	d109      	bne.n	800142e <__eqdf2+0x5a>
 800141a:	4559      	cmp	r1, fp
 800141c:	d017      	beq.n	800144e <__eqdf2+0x7a>
 800141e:	2c00      	cmp	r4, #0
 8001420:	d105      	bne.n	800142e <__eqdf2+0x5a>
 8001422:	0030      	movs	r0, r6
 8001424:	4328      	orrs	r0, r5
 8001426:	1e43      	subs	r3, r0, #1
 8001428:	4198      	sbcs	r0, r3
 800142a:	e000      	b.n	800142e <__eqdf2+0x5a>
 800142c:	2001      	movs	r0, #1
 800142e:	bcf0      	pop	{r4, r5, r6, r7}
 8001430:	46bb      	mov	fp, r7
 8001432:	46b2      	mov	sl, r6
 8001434:	46a9      	mov	r9, r5
 8001436:	46a0      	mov	r8, r4
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143a:	0033      	movs	r3, r6
 800143c:	2001      	movs	r0, #1
 800143e:	432b      	orrs	r3, r5
 8001440:	d1f5      	bne.n	800142e <__eqdf2+0x5a>
 8001442:	42a2      	cmp	r2, r4
 8001444:	d1f3      	bne.n	800142e <__eqdf2+0x5a>
 8001446:	464b      	mov	r3, r9
 8001448:	433b      	orrs	r3, r7
 800144a:	d1f0      	bne.n	800142e <__eqdf2+0x5a>
 800144c:	e7e2      	b.n	8001414 <__eqdf2+0x40>
 800144e:	2000      	movs	r0, #0
 8001450:	e7ed      	b.n	800142e <__eqdf2+0x5a>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	000007ff 	.word	0x000007ff

08001458 <__gedf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	4647      	mov	r7, r8
 800145c:	46ce      	mov	lr, r9
 800145e:	0004      	movs	r4, r0
 8001460:	0018      	movs	r0, r3
 8001462:	0016      	movs	r6, r2
 8001464:	031b      	lsls	r3, r3, #12
 8001466:	0b1b      	lsrs	r3, r3, #12
 8001468:	4d2d      	ldr	r5, [pc, #180]	; (8001520 <__gedf2+0xc8>)
 800146a:	004a      	lsls	r2, r1, #1
 800146c:	4699      	mov	r9, r3
 800146e:	b580      	push	{r7, lr}
 8001470:	0043      	lsls	r3, r0, #1
 8001472:	030f      	lsls	r7, r1, #12
 8001474:	46a4      	mov	ip, r4
 8001476:	46b0      	mov	r8, r6
 8001478:	0b3f      	lsrs	r7, r7, #12
 800147a:	0d52      	lsrs	r2, r2, #21
 800147c:	0fc9      	lsrs	r1, r1, #31
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	0fc0      	lsrs	r0, r0, #31
 8001482:	42aa      	cmp	r2, r5
 8001484:	d021      	beq.n	80014ca <__gedf2+0x72>
 8001486:	42ab      	cmp	r3, r5
 8001488:	d013      	beq.n	80014b2 <__gedf2+0x5a>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d122      	bne.n	80014d4 <__gedf2+0x7c>
 800148e:	433c      	orrs	r4, r7
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <__gedf2+0x42>
 8001494:	464d      	mov	r5, r9
 8001496:	432e      	orrs	r6, r5
 8001498:	d022      	beq.n	80014e0 <__gedf2+0x88>
 800149a:	2c00      	cmp	r4, #0
 800149c:	d010      	beq.n	80014c0 <__gedf2+0x68>
 800149e:	4281      	cmp	r1, r0
 80014a0:	d022      	beq.n	80014e8 <__gedf2+0x90>
 80014a2:	2002      	movs	r0, #2
 80014a4:	3901      	subs	r1, #1
 80014a6:	4008      	ands	r0, r1
 80014a8:	3801      	subs	r0, #1
 80014aa:	bcc0      	pop	{r6, r7}
 80014ac:	46b9      	mov	r9, r7
 80014ae:	46b0      	mov	r8, r6
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b2:	464d      	mov	r5, r9
 80014b4:	432e      	orrs	r6, r5
 80014b6:	d129      	bne.n	800150c <__gedf2+0xb4>
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d1f0      	bne.n	800149e <__gedf2+0x46>
 80014bc:	433c      	orrs	r4, r7
 80014be:	d1ee      	bne.n	800149e <__gedf2+0x46>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d1f2      	bne.n	80014aa <__gedf2+0x52>
 80014c4:	2001      	movs	r0, #1
 80014c6:	4240      	negs	r0, r0
 80014c8:	e7ef      	b.n	80014aa <__gedf2+0x52>
 80014ca:	003d      	movs	r5, r7
 80014cc:	4325      	orrs	r5, r4
 80014ce:	d11d      	bne.n	800150c <__gedf2+0xb4>
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d0ee      	beq.n	80014b2 <__gedf2+0x5a>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e2      	bne.n	800149e <__gedf2+0x46>
 80014d8:	464c      	mov	r4, r9
 80014da:	4326      	orrs	r6, r4
 80014dc:	d1df      	bne.n	800149e <__gedf2+0x46>
 80014de:	e7e0      	b.n	80014a2 <__gedf2+0x4a>
 80014e0:	2000      	movs	r0, #0
 80014e2:	2c00      	cmp	r4, #0
 80014e4:	d0e1      	beq.n	80014aa <__gedf2+0x52>
 80014e6:	e7dc      	b.n	80014a2 <__gedf2+0x4a>
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dc0a      	bgt.n	8001502 <__gedf2+0xaa>
 80014ec:	dbe8      	blt.n	80014c0 <__gedf2+0x68>
 80014ee:	454f      	cmp	r7, r9
 80014f0:	d8d7      	bhi.n	80014a2 <__gedf2+0x4a>
 80014f2:	d00e      	beq.n	8001512 <__gedf2+0xba>
 80014f4:	2000      	movs	r0, #0
 80014f6:	454f      	cmp	r7, r9
 80014f8:	d2d7      	bcs.n	80014aa <__gedf2+0x52>
 80014fa:	2900      	cmp	r1, #0
 80014fc:	d0e2      	beq.n	80014c4 <__gedf2+0x6c>
 80014fe:	0008      	movs	r0, r1
 8001500:	e7d3      	b.n	80014aa <__gedf2+0x52>
 8001502:	4243      	negs	r3, r0
 8001504:	4158      	adcs	r0, r3
 8001506:	0040      	lsls	r0, r0, #1
 8001508:	3801      	subs	r0, #1
 800150a:	e7ce      	b.n	80014aa <__gedf2+0x52>
 800150c:	2002      	movs	r0, #2
 800150e:	4240      	negs	r0, r0
 8001510:	e7cb      	b.n	80014aa <__gedf2+0x52>
 8001512:	45c4      	cmp	ip, r8
 8001514:	d8c5      	bhi.n	80014a2 <__gedf2+0x4a>
 8001516:	2000      	movs	r0, #0
 8001518:	45c4      	cmp	ip, r8
 800151a:	d2c6      	bcs.n	80014aa <__gedf2+0x52>
 800151c:	e7ed      	b.n	80014fa <__gedf2+0xa2>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	000007ff 	.word	0x000007ff

08001524 <__ledf2>:
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	4647      	mov	r7, r8
 8001528:	46ce      	mov	lr, r9
 800152a:	0004      	movs	r4, r0
 800152c:	0018      	movs	r0, r3
 800152e:	0016      	movs	r6, r2
 8001530:	031b      	lsls	r3, r3, #12
 8001532:	0b1b      	lsrs	r3, r3, #12
 8001534:	4d2c      	ldr	r5, [pc, #176]	; (80015e8 <__ledf2+0xc4>)
 8001536:	004a      	lsls	r2, r1, #1
 8001538:	4699      	mov	r9, r3
 800153a:	b580      	push	{r7, lr}
 800153c:	0043      	lsls	r3, r0, #1
 800153e:	030f      	lsls	r7, r1, #12
 8001540:	46a4      	mov	ip, r4
 8001542:	46b0      	mov	r8, r6
 8001544:	0b3f      	lsrs	r7, r7, #12
 8001546:	0d52      	lsrs	r2, r2, #21
 8001548:	0fc9      	lsrs	r1, r1, #31
 800154a:	0d5b      	lsrs	r3, r3, #21
 800154c:	0fc0      	lsrs	r0, r0, #31
 800154e:	42aa      	cmp	r2, r5
 8001550:	d00d      	beq.n	800156e <__ledf2+0x4a>
 8001552:	42ab      	cmp	r3, r5
 8001554:	d010      	beq.n	8001578 <__ledf2+0x54>
 8001556:	2a00      	cmp	r2, #0
 8001558:	d127      	bne.n	80015aa <__ledf2+0x86>
 800155a:	433c      	orrs	r4, r7
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <__ledf2+0x60>
 8001560:	464d      	mov	r5, r9
 8001562:	432e      	orrs	r6, r5
 8001564:	d10e      	bne.n	8001584 <__ledf2+0x60>
 8001566:	2000      	movs	r0, #0
 8001568:	2c00      	cmp	r4, #0
 800156a:	d015      	beq.n	8001598 <__ledf2+0x74>
 800156c:	e00e      	b.n	800158c <__ledf2+0x68>
 800156e:	003d      	movs	r5, r7
 8001570:	4325      	orrs	r5, r4
 8001572:	d110      	bne.n	8001596 <__ledf2+0x72>
 8001574:	4293      	cmp	r3, r2
 8001576:	d118      	bne.n	80015aa <__ledf2+0x86>
 8001578:	464d      	mov	r5, r9
 800157a:	432e      	orrs	r6, r5
 800157c:	d10b      	bne.n	8001596 <__ledf2+0x72>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d102      	bne.n	8001588 <__ledf2+0x64>
 8001582:	433c      	orrs	r4, r7
 8001584:	2c00      	cmp	r4, #0
 8001586:	d00b      	beq.n	80015a0 <__ledf2+0x7c>
 8001588:	4281      	cmp	r1, r0
 800158a:	d014      	beq.n	80015b6 <__ledf2+0x92>
 800158c:	2002      	movs	r0, #2
 800158e:	3901      	subs	r1, #1
 8001590:	4008      	ands	r0, r1
 8001592:	3801      	subs	r0, #1
 8001594:	e000      	b.n	8001598 <__ledf2+0x74>
 8001596:	2002      	movs	r0, #2
 8001598:	bcc0      	pop	{r6, r7}
 800159a:	46b9      	mov	r9, r7
 800159c:	46b0      	mov	r8, r6
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1f9      	bne.n	8001598 <__ledf2+0x74>
 80015a4:	2001      	movs	r0, #1
 80015a6:	4240      	negs	r0, r0
 80015a8:	e7f6      	b.n	8001598 <__ledf2+0x74>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ec      	bne.n	8001588 <__ledf2+0x64>
 80015ae:	464c      	mov	r4, r9
 80015b0:	4326      	orrs	r6, r4
 80015b2:	d1e9      	bne.n	8001588 <__ledf2+0x64>
 80015b4:	e7ea      	b.n	800158c <__ledf2+0x68>
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dd04      	ble.n	80015c4 <__ledf2+0xa0>
 80015ba:	4243      	negs	r3, r0
 80015bc:	4158      	adcs	r0, r3
 80015be:	0040      	lsls	r0, r0, #1
 80015c0:	3801      	subs	r0, #1
 80015c2:	e7e9      	b.n	8001598 <__ledf2+0x74>
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbeb      	blt.n	80015a0 <__ledf2+0x7c>
 80015c8:	454f      	cmp	r7, r9
 80015ca:	d8df      	bhi.n	800158c <__ledf2+0x68>
 80015cc:	d006      	beq.n	80015dc <__ledf2+0xb8>
 80015ce:	2000      	movs	r0, #0
 80015d0:	454f      	cmp	r7, r9
 80015d2:	d2e1      	bcs.n	8001598 <__ledf2+0x74>
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d0e5      	beq.n	80015a4 <__ledf2+0x80>
 80015d8:	0008      	movs	r0, r1
 80015da:	e7dd      	b.n	8001598 <__ledf2+0x74>
 80015dc:	45c4      	cmp	ip, r8
 80015de:	d8d5      	bhi.n	800158c <__ledf2+0x68>
 80015e0:	2000      	movs	r0, #0
 80015e2:	45c4      	cmp	ip, r8
 80015e4:	d2d8      	bcs.n	8001598 <__ledf2+0x74>
 80015e6:	e7f5      	b.n	80015d4 <__ledf2+0xb0>
 80015e8:	000007ff 	.word	0x000007ff

080015ec <__aeabi_dmul>:
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	4657      	mov	r7, sl
 80015f4:	464e      	mov	r6, r9
 80015f6:	b5e0      	push	{r5, r6, r7, lr}
 80015f8:	001f      	movs	r7, r3
 80015fa:	030b      	lsls	r3, r1, #12
 80015fc:	0b1b      	lsrs	r3, r3, #12
 80015fe:	469b      	mov	fp, r3
 8001600:	004d      	lsls	r5, r1, #1
 8001602:	0fcb      	lsrs	r3, r1, #31
 8001604:	0004      	movs	r4, r0
 8001606:	4691      	mov	r9, r2
 8001608:	4698      	mov	r8, r3
 800160a:	b087      	sub	sp, #28
 800160c:	0d6d      	lsrs	r5, r5, #21
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x26>
 8001610:	e1cd      	b.n	80019ae <__aeabi_dmul+0x3c2>
 8001612:	4bce      	ldr	r3, [pc, #824]	; (800194c <__aeabi_dmul+0x360>)
 8001614:	429d      	cmp	r5, r3
 8001616:	d100      	bne.n	800161a <__aeabi_dmul+0x2e>
 8001618:	e1e9      	b.n	80019ee <__aeabi_dmul+0x402>
 800161a:	465a      	mov	r2, fp
 800161c:	0f43      	lsrs	r3, r0, #29
 800161e:	00d2      	lsls	r2, r2, #3
 8001620:	4313      	orrs	r3, r2
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	00c3      	lsls	r3, r0, #3
 800162a:	469a      	mov	sl, r3
 800162c:	4bc8      	ldr	r3, [pc, #800]	; (8001950 <__aeabi_dmul+0x364>)
 800162e:	4693      	mov	fp, r2
 8001630:	469c      	mov	ip, r3
 8001632:	2300      	movs	r3, #0
 8001634:	2600      	movs	r6, #0
 8001636:	4465      	add	r5, ip
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	033c      	lsls	r4, r7, #12
 800163c:	007b      	lsls	r3, r7, #1
 800163e:	4648      	mov	r0, r9
 8001640:	0b24      	lsrs	r4, r4, #12
 8001642:	0d5b      	lsrs	r3, r3, #21
 8001644:	0fff      	lsrs	r7, r7, #31
 8001646:	2b00      	cmp	r3, #0
 8001648:	d100      	bne.n	800164c <__aeabi_dmul+0x60>
 800164a:	e189      	b.n	8001960 <__aeabi_dmul+0x374>
 800164c:	4abf      	ldr	r2, [pc, #764]	; (800194c <__aeabi_dmul+0x360>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <__aeabi_dmul+0x9a>
 8001652:	0f42      	lsrs	r2, r0, #29
 8001654:	00e4      	lsls	r4, r4, #3
 8001656:	4322      	orrs	r2, r4
 8001658:	2480      	movs	r4, #128	; 0x80
 800165a:	0424      	lsls	r4, r4, #16
 800165c:	4314      	orrs	r4, r2
 800165e:	4abc      	ldr	r2, [pc, #752]	; (8001950 <__aeabi_dmul+0x364>)
 8001660:	2100      	movs	r1, #0
 8001662:	4694      	mov	ip, r2
 8001664:	4642      	mov	r2, r8
 8001666:	4463      	add	r3, ip
 8001668:	195b      	adds	r3, r3, r5
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	9b01      	ldr	r3, [sp, #4]
 800166e:	407a      	eors	r2, r7
 8001670:	3301      	adds	r3, #1
 8001672:	00c0      	lsls	r0, r0, #3
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2e0a      	cmp	r6, #10
 800167a:	dd1c      	ble.n	80016b6 <__aeabi_dmul+0xca>
 800167c:	003a      	movs	r2, r7
 800167e:	2e0b      	cmp	r6, #11
 8001680:	d05e      	beq.n	8001740 <__aeabi_dmul+0x154>
 8001682:	4647      	mov	r7, r8
 8001684:	e056      	b.n	8001734 <__aeabi_dmul+0x148>
 8001686:	4649      	mov	r1, r9
 8001688:	4bb0      	ldr	r3, [pc, #704]	; (800194c <__aeabi_dmul+0x360>)
 800168a:	4321      	orrs	r1, r4
 800168c:	18eb      	adds	r3, r5, r3
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2900      	cmp	r1, #0
 8001692:	d12a      	bne.n	80016ea <__aeabi_dmul+0xfe>
 8001694:	2080      	movs	r0, #128	; 0x80
 8001696:	2202      	movs	r2, #2
 8001698:	0100      	lsls	r0, r0, #4
 800169a:	002b      	movs	r3, r5
 800169c:	4684      	mov	ip, r0
 800169e:	4316      	orrs	r6, r2
 80016a0:	4642      	mov	r2, r8
 80016a2:	4463      	add	r3, ip
 80016a4:	407a      	eors	r2, r7
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2e0a      	cmp	r6, #10
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dmul+0xc4>
 80016ae:	e231      	b.n	8001b14 <__aeabi_dmul+0x528>
 80016b0:	2000      	movs	r0, #0
 80016b2:	2400      	movs	r4, #0
 80016b4:	2102      	movs	r1, #2
 80016b6:	2e02      	cmp	r6, #2
 80016b8:	dc26      	bgt.n	8001708 <__aeabi_dmul+0x11c>
 80016ba:	3e01      	subs	r6, #1
 80016bc:	2e01      	cmp	r6, #1
 80016be:	d852      	bhi.n	8001766 <__aeabi_dmul+0x17a>
 80016c0:	2902      	cmp	r1, #2
 80016c2:	d04c      	beq.n	800175e <__aeabi_dmul+0x172>
 80016c4:	2901      	cmp	r1, #1
 80016c6:	d000      	beq.n	80016ca <__aeabi_dmul+0xde>
 80016c8:	e118      	b.n	80018fc <__aeabi_dmul+0x310>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2400      	movs	r4, #0
 80016ce:	2500      	movs	r5, #0
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	4323      	orrs	r3, r4
 80016d4:	07d2      	lsls	r2, r2, #31
 80016d6:	4313      	orrs	r3, r2
 80016d8:	0028      	movs	r0, r5
 80016da:	0019      	movs	r1, r3
 80016dc:	b007      	add	sp, #28
 80016de:	bcf0      	pop	{r4, r5, r6, r7}
 80016e0:	46bb      	mov	fp, r7
 80016e2:	46b2      	mov	sl, r6
 80016e4:	46a9      	mov	r9, r5
 80016e6:	46a0      	mov	r8, r4
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	2203      	movs	r2, #3
 80016ee:	0109      	lsls	r1, r1, #4
 80016f0:	002b      	movs	r3, r5
 80016f2:	468c      	mov	ip, r1
 80016f4:	4316      	orrs	r6, r2
 80016f6:	4642      	mov	r2, r8
 80016f8:	4463      	add	r3, ip
 80016fa:	407a      	eors	r2, r7
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2e0a      	cmp	r6, #10
 8001702:	dd00      	ble.n	8001706 <__aeabi_dmul+0x11a>
 8001704:	e228      	b.n	8001b58 <__aeabi_dmul+0x56c>
 8001706:	2103      	movs	r1, #3
 8001708:	2501      	movs	r5, #1
 800170a:	40b5      	lsls	r5, r6
 800170c:	46ac      	mov	ip, r5
 800170e:	26a6      	movs	r6, #166	; 0xa6
 8001710:	4663      	mov	r3, ip
 8001712:	00f6      	lsls	r6, r6, #3
 8001714:	4035      	ands	r5, r6
 8001716:	4233      	tst	r3, r6
 8001718:	d10b      	bne.n	8001732 <__aeabi_dmul+0x146>
 800171a:	2690      	movs	r6, #144	; 0x90
 800171c:	00b6      	lsls	r6, r6, #2
 800171e:	4233      	tst	r3, r6
 8001720:	d118      	bne.n	8001754 <__aeabi_dmul+0x168>
 8001722:	3eb9      	subs	r6, #185	; 0xb9
 8001724:	3eff      	subs	r6, #255	; 0xff
 8001726:	421e      	tst	r6, r3
 8001728:	d01d      	beq.n	8001766 <__aeabi_dmul+0x17a>
 800172a:	46a3      	mov	fp, r4
 800172c:	4682      	mov	sl, r0
 800172e:	9100      	str	r1, [sp, #0]
 8001730:	e000      	b.n	8001734 <__aeabi_dmul+0x148>
 8001732:	0017      	movs	r7, r2
 8001734:	9900      	ldr	r1, [sp, #0]
 8001736:	003a      	movs	r2, r7
 8001738:	2902      	cmp	r1, #2
 800173a:	d010      	beq.n	800175e <__aeabi_dmul+0x172>
 800173c:	465c      	mov	r4, fp
 800173e:	4650      	mov	r0, sl
 8001740:	2903      	cmp	r1, #3
 8001742:	d1bf      	bne.n	80016c4 <__aeabi_dmul+0xd8>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	431c      	orrs	r4, r3
 800174a:	0324      	lsls	r4, r4, #12
 800174c:	0005      	movs	r5, r0
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <__aeabi_dmul+0x360>)
 8001750:	0b24      	lsrs	r4, r4, #12
 8001752:	e7bd      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001754:	2480      	movs	r4, #128	; 0x80
 8001756:	2200      	movs	r2, #0
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <__aeabi_dmul+0x360>)
 800175a:	0324      	lsls	r4, r4, #12
 800175c:	e7b8      	b.n	80016d0 <__aeabi_dmul+0xe4>
 800175e:	2400      	movs	r4, #0
 8001760:	2500      	movs	r5, #0
 8001762:	4b7a      	ldr	r3, [pc, #488]	; (800194c <__aeabi_dmul+0x360>)
 8001764:	e7b4      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001766:	4653      	mov	r3, sl
 8001768:	041e      	lsls	r6, r3, #16
 800176a:	0c36      	lsrs	r6, r6, #16
 800176c:	0c1f      	lsrs	r7, r3, #16
 800176e:	0033      	movs	r3, r6
 8001770:	0c01      	lsrs	r1, r0, #16
 8001772:	0400      	lsls	r0, r0, #16
 8001774:	0c00      	lsrs	r0, r0, #16
 8001776:	4343      	muls	r3, r0
 8001778:	4698      	mov	r8, r3
 800177a:	0003      	movs	r3, r0
 800177c:	437b      	muls	r3, r7
 800177e:	4699      	mov	r9, r3
 8001780:	0033      	movs	r3, r6
 8001782:	434b      	muls	r3, r1
 8001784:	469c      	mov	ip, r3
 8001786:	4643      	mov	r3, r8
 8001788:	000d      	movs	r5, r1
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	469a      	mov	sl, r3
 800178e:	437d      	muls	r5, r7
 8001790:	44cc      	add	ip, r9
 8001792:	44d4      	add	ip, sl
 8001794:	9500      	str	r5, [sp, #0]
 8001796:	45e1      	cmp	r9, ip
 8001798:	d904      	bls.n	80017a4 <__aeabi_dmul+0x1b8>
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	4699      	mov	r9, r3
 80017a0:	444d      	add	r5, r9
 80017a2:	9500      	str	r5, [sp, #0]
 80017a4:	4663      	mov	r3, ip
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	001d      	movs	r5, r3
 80017aa:	4663      	mov	r3, ip
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	469c      	mov	ip, r3
 80017b0:	4643      	mov	r3, r8
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	4698      	mov	r8, r3
 80017b8:	4663      	mov	r3, ip
 80017ba:	4443      	add	r3, r8
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	0c23      	lsrs	r3, r4, #16
 80017c0:	4698      	mov	r8, r3
 80017c2:	0033      	movs	r3, r6
 80017c4:	0424      	lsls	r4, r4, #16
 80017c6:	0c24      	lsrs	r4, r4, #16
 80017c8:	4363      	muls	r3, r4
 80017ca:	469c      	mov	ip, r3
 80017cc:	0023      	movs	r3, r4
 80017ce:	437b      	muls	r3, r7
 80017d0:	4699      	mov	r9, r3
 80017d2:	4643      	mov	r3, r8
 80017d4:	435e      	muls	r6, r3
 80017d6:	435f      	muls	r7, r3
 80017d8:	444e      	add	r6, r9
 80017da:	4663      	mov	r3, ip
 80017dc:	46b2      	mov	sl, r6
 80017de:	0c1e      	lsrs	r6, r3, #16
 80017e0:	4456      	add	r6, sl
 80017e2:	45b1      	cmp	r9, r6
 80017e4:	d903      	bls.n	80017ee <__aeabi_dmul+0x202>
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	4699      	mov	r9, r3
 80017ec:	444f      	add	r7, r9
 80017ee:	0c33      	lsrs	r3, r6, #16
 80017f0:	4699      	mov	r9, r3
 80017f2:	003b      	movs	r3, r7
 80017f4:	444b      	add	r3, r9
 80017f6:	9305      	str	r3, [sp, #20]
 80017f8:	4663      	mov	r3, ip
 80017fa:	46ac      	mov	ip, r5
 80017fc:	041f      	lsls	r7, r3, #16
 80017fe:	0c3f      	lsrs	r7, r7, #16
 8001800:	0436      	lsls	r6, r6, #16
 8001802:	19f6      	adds	r6, r6, r7
 8001804:	44b4      	add	ip, r6
 8001806:	4663      	mov	r3, ip
 8001808:	9304      	str	r3, [sp, #16]
 800180a:	465b      	mov	r3, fp
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	469c      	mov	ip, r3
 8001810:	465b      	mov	r3, fp
 8001812:	041f      	lsls	r7, r3, #16
 8001814:	0c3f      	lsrs	r7, r7, #16
 8001816:	003b      	movs	r3, r7
 8001818:	4343      	muls	r3, r0
 800181a:	4699      	mov	r9, r3
 800181c:	4663      	mov	r3, ip
 800181e:	4343      	muls	r3, r0
 8001820:	469a      	mov	sl, r3
 8001822:	464b      	mov	r3, r9
 8001824:	4660      	mov	r0, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	469b      	mov	fp, r3
 800182a:	4348      	muls	r0, r1
 800182c:	4379      	muls	r1, r7
 800182e:	4451      	add	r1, sl
 8001830:	4459      	add	r1, fp
 8001832:	458a      	cmp	sl, r1
 8001834:	d903      	bls.n	800183e <__aeabi_dmul+0x252>
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	469a      	mov	sl, r3
 800183c:	4450      	add	r0, sl
 800183e:	0c0b      	lsrs	r3, r1, #16
 8001840:	469a      	mov	sl, r3
 8001842:	464b      	mov	r3, r9
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	4699      	mov	r9, r3
 800184a:	003b      	movs	r3, r7
 800184c:	4363      	muls	r3, r4
 800184e:	0409      	lsls	r1, r1, #16
 8001850:	4645      	mov	r5, r8
 8001852:	4449      	add	r1, r9
 8001854:	4699      	mov	r9, r3
 8001856:	4663      	mov	r3, ip
 8001858:	435c      	muls	r4, r3
 800185a:	436b      	muls	r3, r5
 800185c:	469c      	mov	ip, r3
 800185e:	464b      	mov	r3, r9
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	4698      	mov	r8, r3
 8001864:	436f      	muls	r7, r5
 8001866:	193f      	adds	r7, r7, r4
 8001868:	4447      	add	r7, r8
 800186a:	4450      	add	r0, sl
 800186c:	42bc      	cmp	r4, r7
 800186e:	d903      	bls.n	8001878 <__aeabi_dmul+0x28c>
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	4698      	mov	r8, r3
 8001876:	44c4      	add	ip, r8
 8001878:	9b04      	ldr	r3, [sp, #16]
 800187a:	9d00      	ldr	r5, [sp, #0]
 800187c:	4698      	mov	r8, r3
 800187e:	4445      	add	r5, r8
 8001880:	42b5      	cmp	r5, r6
 8001882:	41b6      	sbcs	r6, r6
 8001884:	4273      	negs	r3, r6
 8001886:	4698      	mov	r8, r3
 8001888:	464b      	mov	r3, r9
 800188a:	041e      	lsls	r6, r3, #16
 800188c:	9b05      	ldr	r3, [sp, #20]
 800188e:	043c      	lsls	r4, r7, #16
 8001890:	4699      	mov	r9, r3
 8001892:	0c36      	lsrs	r6, r6, #16
 8001894:	19a4      	adds	r4, r4, r6
 8001896:	444c      	add	r4, r9
 8001898:	46a1      	mov	r9, r4
 800189a:	4683      	mov	fp, r0
 800189c:	186e      	adds	r6, r5, r1
 800189e:	44c1      	add	r9, r8
 80018a0:	428e      	cmp	r6, r1
 80018a2:	4189      	sbcs	r1, r1
 80018a4:	44cb      	add	fp, r9
 80018a6:	465d      	mov	r5, fp
 80018a8:	4249      	negs	r1, r1
 80018aa:	186d      	adds	r5, r5, r1
 80018ac:	429c      	cmp	r4, r3
 80018ae:	41a4      	sbcs	r4, r4
 80018b0:	45c1      	cmp	r9, r8
 80018b2:	419b      	sbcs	r3, r3
 80018b4:	4583      	cmp	fp, r0
 80018b6:	4180      	sbcs	r0, r0
 80018b8:	428d      	cmp	r5, r1
 80018ba:	4189      	sbcs	r1, r1
 80018bc:	425b      	negs	r3, r3
 80018be:	4264      	negs	r4, r4
 80018c0:	431c      	orrs	r4, r3
 80018c2:	4240      	negs	r0, r0
 80018c4:	9b03      	ldr	r3, [sp, #12]
 80018c6:	4249      	negs	r1, r1
 80018c8:	4301      	orrs	r1, r0
 80018ca:	0270      	lsls	r0, r6, #9
 80018cc:	0c3f      	lsrs	r7, r7, #16
 80018ce:	4318      	orrs	r0, r3
 80018d0:	19e4      	adds	r4, r4, r7
 80018d2:	1e47      	subs	r7, r0, #1
 80018d4:	41b8      	sbcs	r0, r7
 80018d6:	1864      	adds	r4, r4, r1
 80018d8:	4464      	add	r4, ip
 80018da:	0df6      	lsrs	r6, r6, #23
 80018dc:	0261      	lsls	r1, r4, #9
 80018de:	4330      	orrs	r0, r6
 80018e0:	0dec      	lsrs	r4, r5, #23
 80018e2:	026e      	lsls	r6, r5, #9
 80018e4:	430c      	orrs	r4, r1
 80018e6:	4330      	orrs	r0, r6
 80018e8:	01c9      	lsls	r1, r1, #7
 80018ea:	d400      	bmi.n	80018ee <__aeabi_dmul+0x302>
 80018ec:	e0f1      	b.n	8001ad2 <__aeabi_dmul+0x4e6>
 80018ee:	2101      	movs	r1, #1
 80018f0:	0843      	lsrs	r3, r0, #1
 80018f2:	4001      	ands	r1, r0
 80018f4:	430b      	orrs	r3, r1
 80018f6:	07e0      	lsls	r0, r4, #31
 80018f8:	4318      	orrs	r0, r3
 80018fa:	0864      	lsrs	r4, r4, #1
 80018fc:	4915      	ldr	r1, [pc, #84]	; (8001954 <__aeabi_dmul+0x368>)
 80018fe:	9b02      	ldr	r3, [sp, #8]
 8001900:	468c      	mov	ip, r1
 8001902:	4463      	add	r3, ip
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x31e>
 8001908:	e097      	b.n	8001a3a <__aeabi_dmul+0x44e>
 800190a:	0741      	lsls	r1, r0, #29
 800190c:	d009      	beq.n	8001922 <__aeabi_dmul+0x336>
 800190e:	210f      	movs	r1, #15
 8001910:	4001      	ands	r1, r0
 8001912:	2904      	cmp	r1, #4
 8001914:	d005      	beq.n	8001922 <__aeabi_dmul+0x336>
 8001916:	1d01      	adds	r1, r0, #4
 8001918:	4281      	cmp	r1, r0
 800191a:	4180      	sbcs	r0, r0
 800191c:	4240      	negs	r0, r0
 800191e:	1824      	adds	r4, r4, r0
 8001920:	0008      	movs	r0, r1
 8001922:	01e1      	lsls	r1, r4, #7
 8001924:	d506      	bpl.n	8001934 <__aeabi_dmul+0x348>
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	00c9      	lsls	r1, r1, #3
 800192a:	468c      	mov	ip, r1
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <__aeabi_dmul+0x36c>)
 800192e:	401c      	ands	r4, r3
 8001930:	9b02      	ldr	r3, [sp, #8]
 8001932:	4463      	add	r3, ip
 8001934:	4909      	ldr	r1, [pc, #36]	; (800195c <__aeabi_dmul+0x370>)
 8001936:	428b      	cmp	r3, r1
 8001938:	dd00      	ble.n	800193c <__aeabi_dmul+0x350>
 800193a:	e710      	b.n	800175e <__aeabi_dmul+0x172>
 800193c:	0761      	lsls	r1, r4, #29
 800193e:	08c5      	lsrs	r5, r0, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	055b      	lsls	r3, r3, #21
 8001944:	430d      	orrs	r5, r1
 8001946:	0b24      	lsrs	r4, r4, #12
 8001948:	0d5b      	lsrs	r3, r3, #21
 800194a:	e6c1      	b.n	80016d0 <__aeabi_dmul+0xe4>
 800194c:	000007ff 	.word	0x000007ff
 8001950:	fffffc01 	.word	0xfffffc01
 8001954:	000003ff 	.word	0x000003ff
 8001958:	feffffff 	.word	0xfeffffff
 800195c:	000007fe 	.word	0x000007fe
 8001960:	464b      	mov	r3, r9
 8001962:	4323      	orrs	r3, r4
 8001964:	d059      	beq.n	8001a1a <__aeabi_dmul+0x42e>
 8001966:	2c00      	cmp	r4, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dmul+0x380>
 800196a:	e0a3      	b.n	8001ab4 <__aeabi_dmul+0x4c8>
 800196c:	0020      	movs	r0, r4
 800196e:	f000 fdf9 	bl	8002564 <__clzsi2>
 8001972:	0001      	movs	r1, r0
 8001974:	0003      	movs	r3, r0
 8001976:	390b      	subs	r1, #11
 8001978:	221d      	movs	r2, #29
 800197a:	1a52      	subs	r2, r2, r1
 800197c:	4649      	mov	r1, r9
 800197e:	0018      	movs	r0, r3
 8001980:	40d1      	lsrs	r1, r2
 8001982:	464a      	mov	r2, r9
 8001984:	3808      	subs	r0, #8
 8001986:	4082      	lsls	r2, r0
 8001988:	4084      	lsls	r4, r0
 800198a:	0010      	movs	r0, r2
 800198c:	430c      	orrs	r4, r1
 800198e:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <__aeabi_dmul+0x574>)
 8001990:	1aeb      	subs	r3, r5, r3
 8001992:	4694      	mov	ip, r2
 8001994:	4642      	mov	r2, r8
 8001996:	4463      	add	r3, ip
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	407a      	eors	r2, r7
 800199e:	3301      	adds	r3, #1
 80019a0:	2100      	movs	r1, #0
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	2e0a      	cmp	r6, #10
 80019a8:	dd00      	ble.n	80019ac <__aeabi_dmul+0x3c0>
 80019aa:	e667      	b.n	800167c <__aeabi_dmul+0x90>
 80019ac:	e683      	b.n	80016b6 <__aeabi_dmul+0xca>
 80019ae:	465b      	mov	r3, fp
 80019b0:	4303      	orrs	r3, r0
 80019b2:	469a      	mov	sl, r3
 80019b4:	d02a      	beq.n	8001a0c <__aeabi_dmul+0x420>
 80019b6:	465b      	mov	r3, fp
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d06d      	beq.n	8001a98 <__aeabi_dmul+0x4ac>
 80019bc:	4658      	mov	r0, fp
 80019be:	f000 fdd1 	bl	8002564 <__clzsi2>
 80019c2:	0001      	movs	r1, r0
 80019c4:	0003      	movs	r3, r0
 80019c6:	390b      	subs	r1, #11
 80019c8:	221d      	movs	r2, #29
 80019ca:	1a52      	subs	r2, r2, r1
 80019cc:	0021      	movs	r1, r4
 80019ce:	0018      	movs	r0, r3
 80019d0:	465d      	mov	r5, fp
 80019d2:	40d1      	lsrs	r1, r2
 80019d4:	3808      	subs	r0, #8
 80019d6:	4085      	lsls	r5, r0
 80019d8:	000a      	movs	r2, r1
 80019da:	4084      	lsls	r4, r0
 80019dc:	432a      	orrs	r2, r5
 80019de:	4693      	mov	fp, r2
 80019e0:	46a2      	mov	sl, r4
 80019e2:	4d5f      	ldr	r5, [pc, #380]	; (8001b60 <__aeabi_dmul+0x574>)
 80019e4:	2600      	movs	r6, #0
 80019e6:	1aed      	subs	r5, r5, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	e625      	b.n	800163a <__aeabi_dmul+0x4e>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4303      	orrs	r3, r0
 80019f2:	469a      	mov	sl, r3
 80019f4:	d105      	bne.n	8001a02 <__aeabi_dmul+0x416>
 80019f6:	2300      	movs	r3, #0
 80019f8:	469b      	mov	fp, r3
 80019fa:	3302      	adds	r3, #2
 80019fc:	2608      	movs	r6, #8
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	e61b      	b.n	800163a <__aeabi_dmul+0x4e>
 8001a02:	2303      	movs	r3, #3
 8001a04:	4682      	mov	sl, r0
 8001a06:	260c      	movs	r6, #12
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	e616      	b.n	800163a <__aeabi_dmul+0x4e>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	469b      	mov	fp, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	2604      	movs	r6, #4
 8001a14:	2500      	movs	r5, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	e60f      	b.n	800163a <__aeabi_dmul+0x4e>
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	9501      	str	r5, [sp, #4]
 8001a20:	431e      	orrs	r6, r3
 8001a22:	9b01      	ldr	r3, [sp, #4]
 8001a24:	407a      	eors	r2, r7
 8001a26:	3301      	adds	r3, #1
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2e0a      	cmp	r6, #10
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dmul+0x44c>
 8001a36:	e621      	b.n	800167c <__aeabi_dmul+0x90>
 8001a38:	e63d      	b.n	80016b6 <__aeabi_dmul+0xca>
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	1ac9      	subs	r1, r1, r3
 8001a3e:	2938      	cmp	r1, #56	; 0x38
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dmul+0x458>
 8001a42:	e642      	b.n	80016ca <__aeabi_dmul+0xde>
 8001a44:	291f      	cmp	r1, #31
 8001a46:	dd47      	ble.n	8001ad8 <__aeabi_dmul+0x4ec>
 8001a48:	261f      	movs	r6, #31
 8001a4a:	0025      	movs	r5, r4
 8001a4c:	4276      	negs	r6, r6
 8001a4e:	1af3      	subs	r3, r6, r3
 8001a50:	40dd      	lsrs	r5, r3
 8001a52:	002b      	movs	r3, r5
 8001a54:	2920      	cmp	r1, #32
 8001a56:	d005      	beq.n	8001a64 <__aeabi_dmul+0x478>
 8001a58:	4942      	ldr	r1, [pc, #264]	; (8001b64 <__aeabi_dmul+0x578>)
 8001a5a:	9d02      	ldr	r5, [sp, #8]
 8001a5c:	468c      	mov	ip, r1
 8001a5e:	4465      	add	r5, ip
 8001a60:	40ac      	lsls	r4, r5
 8001a62:	4320      	orrs	r0, r4
 8001a64:	1e41      	subs	r1, r0, #1
 8001a66:	4188      	sbcs	r0, r1
 8001a68:	4318      	orrs	r0, r3
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	001d      	movs	r5, r3
 8001a6e:	2400      	movs	r4, #0
 8001a70:	4005      	ands	r5, r0
 8001a72:	4203      	tst	r3, r0
 8001a74:	d04a      	beq.n	8001b0c <__aeabi_dmul+0x520>
 8001a76:	230f      	movs	r3, #15
 8001a78:	2400      	movs	r4, #0
 8001a7a:	4003      	ands	r3, r0
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d042      	beq.n	8001b06 <__aeabi_dmul+0x51a>
 8001a80:	1d03      	adds	r3, r0, #4
 8001a82:	4283      	cmp	r3, r0
 8001a84:	4180      	sbcs	r0, r0
 8001a86:	4240      	negs	r0, r0
 8001a88:	1824      	adds	r4, r4, r0
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	0223      	lsls	r3, r4, #8
 8001a8e:	d53a      	bpl.n	8001b06 <__aeabi_dmul+0x51a>
 8001a90:	2301      	movs	r3, #1
 8001a92:	2400      	movs	r4, #0
 8001a94:	2500      	movs	r5, #0
 8001a96:	e61b      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001a98:	f000 fd64 	bl	8002564 <__clzsi2>
 8001a9c:	0001      	movs	r1, r0
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	3115      	adds	r1, #21
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	291c      	cmp	r1, #28
 8001aa6:	dd8f      	ble.n	80019c8 <__aeabi_dmul+0x3dc>
 8001aa8:	3808      	subs	r0, #8
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4084      	lsls	r4, r0
 8001aae:	4692      	mov	sl, r2
 8001ab0:	46a3      	mov	fp, r4
 8001ab2:	e796      	b.n	80019e2 <__aeabi_dmul+0x3f6>
 8001ab4:	f000 fd56 	bl	8002564 <__clzsi2>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	0003      	movs	r3, r0
 8001abc:	3115      	adds	r1, #21
 8001abe:	3320      	adds	r3, #32
 8001ac0:	291c      	cmp	r1, #28
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_dmul+0x4da>
 8001ac4:	e758      	b.n	8001978 <__aeabi_dmul+0x38c>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	464c      	mov	r4, r9
 8001aca:	3a08      	subs	r2, #8
 8001acc:	2000      	movs	r0, #0
 8001ace:	4094      	lsls	r4, r2
 8001ad0:	e75d      	b.n	800198e <__aeabi_dmul+0x3a2>
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	e711      	b.n	80018fc <__aeabi_dmul+0x310>
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <__aeabi_dmul+0x57c>)
 8001ada:	0026      	movs	r6, r4
 8001adc:	469c      	mov	ip, r3
 8001ade:	0003      	movs	r3, r0
 8001ae0:	9d02      	ldr	r5, [sp, #8]
 8001ae2:	40cb      	lsrs	r3, r1
 8001ae4:	4465      	add	r5, ip
 8001ae6:	40ae      	lsls	r6, r5
 8001ae8:	431e      	orrs	r6, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	40ab      	lsls	r3, r5
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	4183      	sbcs	r3, r0
 8001af2:	0030      	movs	r0, r6
 8001af4:	4318      	orrs	r0, r3
 8001af6:	40cc      	lsrs	r4, r1
 8001af8:	0743      	lsls	r3, r0, #29
 8001afa:	d0c7      	beq.n	8001a8c <__aeabi_dmul+0x4a0>
 8001afc:	230f      	movs	r3, #15
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d1bd      	bne.n	8001a80 <__aeabi_dmul+0x494>
 8001b04:	e7c2      	b.n	8001a8c <__aeabi_dmul+0x4a0>
 8001b06:	0765      	lsls	r5, r4, #29
 8001b08:	0264      	lsls	r4, r4, #9
 8001b0a:	0b24      	lsrs	r4, r4, #12
 8001b0c:	08c0      	lsrs	r0, r0, #3
 8001b0e:	2300      	movs	r3, #0
 8001b10:	4305      	orrs	r5, r0
 8001b12:	e5dd      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001b14:	2500      	movs	r5, #0
 8001b16:	2302      	movs	r3, #2
 8001b18:	2e0f      	cmp	r6, #15
 8001b1a:	d10c      	bne.n	8001b36 <__aeabi_dmul+0x54a>
 8001b1c:	2480      	movs	r4, #128	; 0x80
 8001b1e:	465b      	mov	r3, fp
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	4223      	tst	r3, r4
 8001b24:	d00e      	beq.n	8001b44 <__aeabi_dmul+0x558>
 8001b26:	4221      	tst	r1, r4
 8001b28:	d10c      	bne.n	8001b44 <__aeabi_dmul+0x558>
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	003a      	movs	r2, r7
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <__aeabi_dmul+0x580>)
 8001b32:	0b24      	lsrs	r4, r4, #12
 8001b34:	e5cc      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001b36:	2e0b      	cmp	r6, #11
 8001b38:	d000      	beq.n	8001b3c <__aeabi_dmul+0x550>
 8001b3a:	e5a2      	b.n	8001682 <__aeabi_dmul+0x96>
 8001b3c:	468b      	mov	fp, r1
 8001b3e:	46aa      	mov	sl, r5
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	e5f7      	b.n	8001734 <__aeabi_dmul+0x148>
 8001b44:	2480      	movs	r4, #128	; 0x80
 8001b46:	465b      	mov	r3, fp
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	4642      	mov	r2, r8
 8001b50:	4655      	mov	r5, sl
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <__aeabi_dmul+0x580>)
 8001b54:	0b24      	lsrs	r4, r4, #12
 8001b56:	e5bb      	b.n	80016d0 <__aeabi_dmul+0xe4>
 8001b58:	464d      	mov	r5, r9
 8001b5a:	0021      	movs	r1, r4
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e7db      	b.n	8001b18 <__aeabi_dmul+0x52c>
 8001b60:	fffffc0d 	.word	0xfffffc0d
 8001b64:	0000043e 	.word	0x0000043e
 8001b68:	0000041e 	.word	0x0000041e
 8001b6c:	000007ff 	.word	0x000007ff

08001b70 <__aeabi_dsub>:
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	4657      	mov	r7, sl
 8001b74:	464e      	mov	r6, r9
 8001b76:	4645      	mov	r5, r8
 8001b78:	46de      	mov	lr, fp
 8001b7a:	b5e0      	push	{r5, r6, r7, lr}
 8001b7c:	000d      	movs	r5, r1
 8001b7e:	0004      	movs	r4, r0
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	032b      	lsls	r3, r5, #12
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	0f62      	lsrs	r2, r4, #29
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	00e3      	lsls	r3, r4, #3
 8001b8e:	030c      	lsls	r4, r1, #12
 8001b90:	0a64      	lsrs	r4, r4, #9
 8001b92:	0f47      	lsrs	r7, r0, #29
 8001b94:	4327      	orrs	r7, r4
 8001b96:	4cd0      	ldr	r4, [pc, #832]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001b98:	006e      	lsls	r6, r5, #1
 8001b9a:	4691      	mov	r9, r2
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	004a      	lsls	r2, r1, #1
 8001ba0:	00c0      	lsls	r0, r0, #3
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	46a2      	mov	sl, r4
 8001ba6:	0d76      	lsrs	r6, r6, #21
 8001ba8:	0fed      	lsrs	r5, r5, #31
 8001baa:	0d52      	lsrs	r2, r2, #21
 8001bac:	0fc9      	lsrs	r1, r1, #31
 8001bae:	9001      	str	r0, [sp, #4]
 8001bb0:	42a2      	cmp	r2, r4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x46>
 8001bb4:	e0b9      	b.n	8001d2a <__aeabi_dsub+0x1ba>
 8001bb6:	2401      	movs	r4, #1
 8001bb8:	4061      	eors	r1, r4
 8001bba:	468b      	mov	fp, r1
 8001bbc:	428d      	cmp	r5, r1
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x52>
 8001bc0:	e08d      	b.n	8001cde <__aeabi_dsub+0x16e>
 8001bc2:	1ab4      	subs	r4, r6, r2
 8001bc4:	46a4      	mov	ip, r4
 8001bc6:	2c00      	cmp	r4, #0
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x5c>
 8001bca:	e0b7      	b.n	8001d3c <__aeabi_dsub+0x1cc>
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x62>
 8001bd0:	e0cb      	b.n	8001d6a <__aeabi_dsub+0x1fa>
 8001bd2:	4ac1      	ldr	r2, [pc, #772]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001bd4:	4296      	cmp	r6, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x6a>
 8001bd8:	e186      	b.n	8001ee8 <__aeabi_dsub+0x378>
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0412      	lsls	r2, r2, #16
 8001bde:	4317      	orrs	r7, r2
 8001be0:	4662      	mov	r2, ip
 8001be2:	2a38      	cmp	r2, #56	; 0x38
 8001be4:	dd00      	ble.n	8001be8 <__aeabi_dsub+0x78>
 8001be6:	e1a4      	b.n	8001f32 <__aeabi_dsub+0x3c2>
 8001be8:	2a1f      	cmp	r2, #31
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dsub+0x7e>
 8001bec:	e21d      	b.n	800202a <__aeabi_dsub+0x4ba>
 8001bee:	4661      	mov	r1, ip
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	003c      	movs	r4, r7
 8001bf4:	1a52      	subs	r2, r2, r1
 8001bf6:	0001      	movs	r1, r0
 8001bf8:	4090      	lsls	r0, r2
 8001bfa:	4094      	lsls	r4, r2
 8001bfc:	1e42      	subs	r2, r0, #1
 8001bfe:	4190      	sbcs	r0, r2
 8001c00:	4662      	mov	r2, ip
 8001c02:	46a0      	mov	r8, r4
 8001c04:	4664      	mov	r4, ip
 8001c06:	40d7      	lsrs	r7, r2
 8001c08:	464a      	mov	r2, r9
 8001c0a:	40e1      	lsrs	r1, r4
 8001c0c:	4644      	mov	r4, r8
 8001c0e:	1bd2      	subs	r2, r2, r7
 8001c10:	4691      	mov	r9, r2
 8001c12:	430c      	orrs	r4, r1
 8001c14:	4304      	orrs	r4, r0
 8001c16:	1b1c      	subs	r4, r3, r4
 8001c18:	42a3      	cmp	r3, r4
 8001c1a:	4192      	sbcs	r2, r2
 8001c1c:	464b      	mov	r3, r9
 8001c1e:	4252      	negs	r2, r2
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	469a      	mov	sl, r3
 8001c24:	4653      	mov	r3, sl
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	d400      	bmi.n	8001c2c <__aeabi_dsub+0xbc>
 8001c2a:	e12b      	b.n	8001e84 <__aeabi_dsub+0x314>
 8001c2c:	4653      	mov	r3, sl
 8001c2e:	025a      	lsls	r2, r3, #9
 8001c30:	0a53      	lsrs	r3, r2, #9
 8001c32:	469a      	mov	sl, r3
 8001c34:	4653      	mov	r3, sl
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0xcc>
 8001c3a:	e166      	b.n	8001f0a <__aeabi_dsub+0x39a>
 8001c3c:	4650      	mov	r0, sl
 8001c3e:	f000 fc91 	bl	8002564 <__clzsi2>
 8001c42:	0003      	movs	r3, r0
 8001c44:	3b08      	subs	r3, #8
 8001c46:	2220      	movs	r2, #32
 8001c48:	0020      	movs	r0, r4
 8001c4a:	1ad2      	subs	r2, r2, r3
 8001c4c:	4651      	mov	r1, sl
 8001c4e:	40d0      	lsrs	r0, r2
 8001c50:	4099      	lsls	r1, r3
 8001c52:	0002      	movs	r2, r0
 8001c54:	409c      	lsls	r4, r3
 8001c56:	430a      	orrs	r2, r1
 8001c58:	429e      	cmp	r6, r3
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dsub+0xee>
 8001c5c:	e164      	b.n	8001f28 <__aeabi_dsub+0x3b8>
 8001c5e:	1b9b      	subs	r3, r3, r6
 8001c60:	1c59      	adds	r1, r3, #1
 8001c62:	291f      	cmp	r1, #31
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0xf8>
 8001c66:	e0fe      	b.n	8001e66 <__aeabi_dsub+0x2f6>
 8001c68:	2320      	movs	r3, #32
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	0026      	movs	r6, r4
 8001c6e:	1a5b      	subs	r3, r3, r1
 8001c70:	409c      	lsls	r4, r3
 8001c72:	4098      	lsls	r0, r3
 8001c74:	40ce      	lsrs	r6, r1
 8001c76:	40ca      	lsrs	r2, r1
 8001c78:	1e63      	subs	r3, r4, #1
 8001c7a:	419c      	sbcs	r4, r3
 8001c7c:	4330      	orrs	r0, r6
 8001c7e:	4692      	mov	sl, r2
 8001c80:	2600      	movs	r6, #0
 8001c82:	4304      	orrs	r4, r0
 8001c84:	0763      	lsls	r3, r4, #29
 8001c86:	d009      	beq.n	8001c9c <__aeabi_dsub+0x12c>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4023      	ands	r3, r4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <__aeabi_dsub+0x12c>
 8001c90:	1d23      	adds	r3, r4, #4
 8001c92:	42a3      	cmp	r3, r4
 8001c94:	41a4      	sbcs	r4, r4
 8001c96:	4264      	negs	r4, r4
 8001c98:	44a2      	add	sl, r4
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	4653      	mov	r3, sl
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	d400      	bmi.n	8001ca4 <__aeabi_dsub+0x134>
 8001ca2:	e0f2      	b.n	8001e8a <__aeabi_dsub+0x31a>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001ca6:	3601      	adds	r6, #1
 8001ca8:	429e      	cmp	r6, r3
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x13e>
 8001cac:	e10f      	b.n	8001ece <__aeabi_dsub+0x35e>
 8001cae:	4653      	mov	r3, sl
 8001cb0:	498a      	ldr	r1, [pc, #552]	; (8001edc <__aeabi_dsub+0x36c>)
 8001cb2:	08e4      	lsrs	r4, r4, #3
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	0572      	lsls	r2, r6, #21
 8001cbe:	024c      	lsls	r4, r1, #9
 8001cc0:	0b24      	lsrs	r4, r4, #12
 8001cc2:	0d52      	lsrs	r2, r2, #21
 8001cc4:	0512      	lsls	r2, r2, #20
 8001cc6:	4322      	orrs	r2, r4
 8001cc8:	07ed      	lsls	r5, r5, #31
 8001cca:	432a      	orrs	r2, r5
 8001ccc:	0018      	movs	r0, r3
 8001cce:	0011      	movs	r1, r2
 8001cd0:	b003      	add	sp, #12
 8001cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cd4:	46bb      	mov	fp, r7
 8001cd6:	46b2      	mov	sl, r6
 8001cd8:	46a9      	mov	r9, r5
 8001cda:	46a0      	mov	r8, r4
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	1ab4      	subs	r4, r6, r2
 8001ce0:	46a4      	mov	ip, r4
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	dd59      	ble.n	8001d9a <__aeabi_dsub+0x22a>
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x17c>
 8001cea:	e0b0      	b.n	8001e4e <__aeabi_dsub+0x2de>
 8001cec:	4556      	cmp	r6, sl
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x182>
 8001cf0:	e0fa      	b.n	8001ee8 <__aeabi_dsub+0x378>
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0412      	lsls	r2, r2, #16
 8001cf6:	4317      	orrs	r7, r2
 8001cf8:	4662      	mov	r2, ip
 8001cfa:	2a38      	cmp	r2, #56	; 0x38
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0x190>
 8001cfe:	e0d4      	b.n	8001eaa <__aeabi_dsub+0x33a>
 8001d00:	2a1f      	cmp	r2, #31
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x196>
 8001d04:	e1c0      	b.n	8002088 <__aeabi_dsub+0x518>
 8001d06:	0039      	movs	r1, r7
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d1      	lsrs	r1, r2
 8001d0c:	4662      	mov	r2, ip
 8001d0e:	2a20      	cmp	r2, #32
 8001d10:	d006      	beq.n	8001d20 <__aeabi_dsub+0x1b0>
 8001d12:	4664      	mov	r4, ip
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	1b12      	subs	r2, r2, r4
 8001d18:	003c      	movs	r4, r7
 8001d1a:	4094      	lsls	r4, r2
 8001d1c:	4304      	orrs	r4, r0
 8001d1e:	9401      	str	r4, [sp, #4]
 8001d20:	9c01      	ldr	r4, [sp, #4]
 8001d22:	1e62      	subs	r2, r4, #1
 8001d24:	4194      	sbcs	r4, r2
 8001d26:	430c      	orrs	r4, r1
 8001d28:	e0c3      	b.n	8001eb2 <__aeabi_dsub+0x342>
 8001d2a:	003c      	movs	r4, r7
 8001d2c:	4304      	orrs	r4, r0
 8001d2e:	d02b      	beq.n	8001d88 <__aeabi_dsub+0x218>
 8001d30:	468b      	mov	fp, r1
 8001d32:	428d      	cmp	r5, r1
 8001d34:	d02e      	beq.n	8001d94 <__aeabi_dsub+0x224>
 8001d36:	4c6a      	ldr	r4, [pc, #424]	; (8001ee0 <__aeabi_dsub+0x370>)
 8001d38:	46a4      	mov	ip, r4
 8001d3a:	44b4      	add	ip, r6
 8001d3c:	4664      	mov	r4, ip
 8001d3e:	2c00      	cmp	r4, #0
 8001d40:	d05f      	beq.n	8001e02 <__aeabi_dsub+0x292>
 8001d42:	1b94      	subs	r4, r2, r6
 8001d44:	46a4      	mov	ip, r4
 8001d46:	2e00      	cmp	r6, #0
 8001d48:	d000      	beq.n	8001d4c <__aeabi_dsub+0x1dc>
 8001d4a:	e120      	b.n	8001f8e <__aeabi_dsub+0x41e>
 8001d4c:	464c      	mov	r4, r9
 8001d4e:	431c      	orrs	r4, r3
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x1e4>
 8001d52:	e1c7      	b.n	80020e4 <__aeabi_dsub+0x574>
 8001d54:	4661      	mov	r1, ip
 8001d56:	1e4c      	subs	r4, r1, #1
 8001d58:	2901      	cmp	r1, #1
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x1ee>
 8001d5c:	e223      	b.n	80021a6 <__aeabi_dsub+0x636>
 8001d5e:	4d5e      	ldr	r5, [pc, #376]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001d60:	45ac      	cmp	ip, r5
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x1f6>
 8001d64:	e1d8      	b.n	8002118 <__aeabi_dsub+0x5a8>
 8001d66:	46a4      	mov	ip, r4
 8001d68:	e11a      	b.n	8001fa0 <__aeabi_dsub+0x430>
 8001d6a:	003a      	movs	r2, r7
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x202>
 8001d70:	e0e4      	b.n	8001f3c <__aeabi_dsub+0x3cc>
 8001d72:	0022      	movs	r2, r4
 8001d74:	3a01      	subs	r2, #1
 8001d76:	2c01      	cmp	r4, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x20c>
 8001d7a:	e1c3      	b.n	8002104 <__aeabi_dsub+0x594>
 8001d7c:	4956      	ldr	r1, [pc, #344]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001d7e:	428c      	cmp	r4, r1
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x214>
 8001d82:	e0b1      	b.n	8001ee8 <__aeabi_dsub+0x378>
 8001d84:	4694      	mov	ip, r2
 8001d86:	e72b      	b.n	8001be0 <__aeabi_dsub+0x70>
 8001d88:	2401      	movs	r4, #1
 8001d8a:	4061      	eors	r1, r4
 8001d8c:	468b      	mov	fp, r1
 8001d8e:	428d      	cmp	r5, r1
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x224>
 8001d92:	e716      	b.n	8001bc2 <__aeabi_dsub+0x52>
 8001d94:	4952      	ldr	r1, [pc, #328]	; (8001ee0 <__aeabi_dsub+0x370>)
 8001d96:	468c      	mov	ip, r1
 8001d98:	44b4      	add	ip, r6
 8001d9a:	4664      	mov	r4, ip
 8001d9c:	2c00      	cmp	r4, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x232>
 8001da0:	e0d3      	b.n	8001f4a <__aeabi_dsub+0x3da>
 8001da2:	1b91      	subs	r1, r2, r6
 8001da4:	468c      	mov	ip, r1
 8001da6:	2e00      	cmp	r6, #0
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x23c>
 8001daa:	e15e      	b.n	800206a <__aeabi_dsub+0x4fa>
 8001dac:	494a      	ldr	r1, [pc, #296]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001dae:	428a      	cmp	r2, r1
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x244>
 8001db2:	e1be      	b.n	8002132 <__aeabi_dsub+0x5c2>
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	464c      	mov	r4, r9
 8001db8:	0409      	lsls	r1, r1, #16
 8001dba:	430c      	orrs	r4, r1
 8001dbc:	46a1      	mov	r9, r4
 8001dbe:	4661      	mov	r1, ip
 8001dc0:	2938      	cmp	r1, #56	; 0x38
 8001dc2:	dd00      	ble.n	8001dc6 <__aeabi_dsub+0x256>
 8001dc4:	e1ba      	b.n	800213c <__aeabi_dsub+0x5cc>
 8001dc6:	291f      	cmp	r1, #31
 8001dc8:	dd00      	ble.n	8001dcc <__aeabi_dsub+0x25c>
 8001dca:	e227      	b.n	800221c <__aeabi_dsub+0x6ac>
 8001dcc:	2420      	movs	r4, #32
 8001dce:	1a64      	subs	r4, r4, r1
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	40a1      	lsls	r1, r4
 8001dd4:	001e      	movs	r6, r3
 8001dd6:	4688      	mov	r8, r1
 8001dd8:	4661      	mov	r1, ip
 8001dda:	40a3      	lsls	r3, r4
 8001ddc:	40ce      	lsrs	r6, r1
 8001dde:	4641      	mov	r1, r8
 8001de0:	1e5c      	subs	r4, r3, #1
 8001de2:	41a3      	sbcs	r3, r4
 8001de4:	4331      	orrs	r1, r6
 8001de6:	4319      	orrs	r1, r3
 8001de8:	000c      	movs	r4, r1
 8001dea:	4663      	mov	r3, ip
 8001dec:	4649      	mov	r1, r9
 8001dee:	40d9      	lsrs	r1, r3
 8001df0:	187f      	adds	r7, r7, r1
 8001df2:	1824      	adds	r4, r4, r0
 8001df4:	4284      	cmp	r4, r0
 8001df6:	419b      	sbcs	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	469a      	mov	sl, r3
 8001dfc:	0016      	movs	r6, r2
 8001dfe:	44ba      	add	sl, r7
 8001e00:	e05d      	b.n	8001ebe <__aeabi_dsub+0x34e>
 8001e02:	4c38      	ldr	r4, [pc, #224]	; (8001ee4 <__aeabi_dsub+0x374>)
 8001e04:	1c72      	adds	r2, r6, #1
 8001e06:	4222      	tst	r2, r4
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dsub+0x29c>
 8001e0a:	e0df      	b.n	8001fcc <__aeabi_dsub+0x45c>
 8001e0c:	464a      	mov	r2, r9
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	2e00      	cmp	r6, #0
 8001e12:	d000      	beq.n	8001e16 <__aeabi_dsub+0x2a6>
 8001e14:	e15c      	b.n	80020d0 <__aeabi_dsub+0x560>
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x2ac>
 8001e1a:	e1cf      	b.n	80021bc <__aeabi_dsub+0x64c>
 8001e1c:	003a      	movs	r2, r7
 8001e1e:	4302      	orrs	r2, r0
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x2b4>
 8001e22:	e17f      	b.n	8002124 <__aeabi_dsub+0x5b4>
 8001e24:	1a1c      	subs	r4, r3, r0
 8001e26:	464a      	mov	r2, r9
 8001e28:	42a3      	cmp	r3, r4
 8001e2a:	4189      	sbcs	r1, r1
 8001e2c:	1bd2      	subs	r2, r2, r7
 8001e2e:	4249      	negs	r1, r1
 8001e30:	1a52      	subs	r2, r2, r1
 8001e32:	4692      	mov	sl, r2
 8001e34:	0212      	lsls	r2, r2, #8
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dsub+0x2ca>
 8001e38:	e20a      	b.n	8002250 <__aeabi_dsub+0x6e0>
 8001e3a:	1ac4      	subs	r4, r0, r3
 8001e3c:	42a0      	cmp	r0, r4
 8001e3e:	4180      	sbcs	r0, r0
 8001e40:	464b      	mov	r3, r9
 8001e42:	4240      	negs	r0, r0
 8001e44:	1aff      	subs	r7, r7, r3
 8001e46:	1a3b      	subs	r3, r7, r0
 8001e48:	469a      	mov	sl, r3
 8001e4a:	465d      	mov	r5, fp
 8001e4c:	e71a      	b.n	8001c84 <__aeabi_dsub+0x114>
 8001e4e:	003a      	movs	r2, r7
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d073      	beq.n	8001f3c <__aeabi_dsub+0x3cc>
 8001e54:	0022      	movs	r2, r4
 8001e56:	3a01      	subs	r2, #1
 8001e58:	2c01      	cmp	r4, #1
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x2ee>
 8001e5c:	e0cb      	b.n	8001ff6 <__aeabi_dsub+0x486>
 8001e5e:	4554      	cmp	r4, sl
 8001e60:	d042      	beq.n	8001ee8 <__aeabi_dsub+0x378>
 8001e62:	4694      	mov	ip, r2
 8001e64:	e748      	b.n	8001cf8 <__aeabi_dsub+0x188>
 8001e66:	0010      	movs	r0, r2
 8001e68:	3b1f      	subs	r3, #31
 8001e6a:	40d8      	lsrs	r0, r3
 8001e6c:	2920      	cmp	r1, #32
 8001e6e:	d003      	beq.n	8001e78 <__aeabi_dsub+0x308>
 8001e70:	2340      	movs	r3, #64	; 0x40
 8001e72:	1a5b      	subs	r3, r3, r1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	4314      	orrs	r4, r2
 8001e78:	1e63      	subs	r3, r4, #1
 8001e7a:	419c      	sbcs	r4, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2600      	movs	r6, #0
 8001e80:	469a      	mov	sl, r3
 8001e82:	4304      	orrs	r4, r0
 8001e84:	0763      	lsls	r3, r4, #29
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x31a>
 8001e88:	e6fe      	b.n	8001c88 <__aeabi_dsub+0x118>
 8001e8a:	4652      	mov	r2, sl
 8001e8c:	08e3      	lsrs	r3, r4, #3
 8001e8e:	0752      	lsls	r2, r2, #29
 8001e90:	4313      	orrs	r3, r2
 8001e92:	4652      	mov	r2, sl
 8001e94:	46b4      	mov	ip, r6
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	490f      	ldr	r1, [pc, #60]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001e9a:	458c      	cmp	ip, r1
 8001e9c:	d02a      	beq.n	8001ef4 <__aeabi_dsub+0x384>
 8001e9e:	0312      	lsls	r2, r2, #12
 8001ea0:	0b14      	lsrs	r4, r2, #12
 8001ea2:	4662      	mov	r2, ip
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	0d52      	lsrs	r2, r2, #21
 8001ea8:	e70c      	b.n	8001cc4 <__aeabi_dsub+0x154>
 8001eaa:	003c      	movs	r4, r7
 8001eac:	4304      	orrs	r4, r0
 8001eae:	1e62      	subs	r2, r4, #1
 8001eb0:	4194      	sbcs	r4, r2
 8001eb2:	18e4      	adds	r4, r4, r3
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	4252      	negs	r2, r2
 8001eba:	444a      	add	r2, r9
 8001ebc:	4692      	mov	sl, r2
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d5df      	bpl.n	8001e84 <__aeabi_dsub+0x314>
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__aeabi_dsub+0x368>)
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	429e      	cmp	r6, r3
 8001eca:	d000      	beq.n	8001ece <__aeabi_dsub+0x35e>
 8001ecc:	e0a0      	b.n	8002010 <__aeabi_dsub+0x4a0>
 8001ece:	0032      	movs	r2, r6
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e6f6      	b.n	8001cc4 <__aeabi_dsub+0x154>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	ff7fffff 	.word	0xff7fffff
 8001ee0:	fffff801 	.word	0xfffff801
 8001ee4:	000007fe 	.word	0x000007fe
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	464a      	mov	r2, r9
 8001eec:	0752      	lsls	r2, r2, #29
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	08d2      	lsrs	r2, r2, #3
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x38c>
 8001efa:	e1b5      	b.n	8002268 <__aeabi_dsub+0x6f8>
 8001efc:	2480      	movs	r4, #128	; 0x80
 8001efe:	0324      	lsls	r4, r4, #12
 8001f00:	4314      	orrs	r4, r2
 8001f02:	0324      	lsls	r4, r4, #12
 8001f04:	4ad5      	ldr	r2, [pc, #852]	; (800225c <__aeabi_dsub+0x6ec>)
 8001f06:	0b24      	lsrs	r4, r4, #12
 8001f08:	e6dc      	b.n	8001cc4 <__aeabi_dsub+0x154>
 8001f0a:	0020      	movs	r0, r4
 8001f0c:	f000 fb2a 	bl	8002564 <__clzsi2>
 8001f10:	0003      	movs	r3, r0
 8001f12:	3318      	adds	r3, #24
 8001f14:	2b1f      	cmp	r3, #31
 8001f16:	dc00      	bgt.n	8001f1a <__aeabi_dsub+0x3aa>
 8001f18:	e695      	b.n	8001c46 <__aeabi_dsub+0xd6>
 8001f1a:	0022      	movs	r2, r4
 8001f1c:	3808      	subs	r0, #8
 8001f1e:	4082      	lsls	r2, r0
 8001f20:	2400      	movs	r4, #0
 8001f22:	429e      	cmp	r6, r3
 8001f24:	dc00      	bgt.n	8001f28 <__aeabi_dsub+0x3b8>
 8001f26:	e69a      	b.n	8001c5e <__aeabi_dsub+0xee>
 8001f28:	1af6      	subs	r6, r6, r3
 8001f2a:	4bcd      	ldr	r3, [pc, #820]	; (8002260 <__aeabi_dsub+0x6f0>)
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	4692      	mov	sl, r2
 8001f30:	e6a8      	b.n	8001c84 <__aeabi_dsub+0x114>
 8001f32:	003c      	movs	r4, r7
 8001f34:	4304      	orrs	r4, r0
 8001f36:	1e62      	subs	r2, r4, #1
 8001f38:	4194      	sbcs	r4, r2
 8001f3a:	e66c      	b.n	8001c16 <__aeabi_dsub+0xa6>
 8001f3c:	464a      	mov	r2, r9
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	0752      	lsls	r2, r2, #29
 8001f42:	4313      	orrs	r3, r2
 8001f44:	464a      	mov	r2, r9
 8001f46:	08d2      	lsrs	r2, r2, #3
 8001f48:	e7a6      	b.n	8001e98 <__aeabi_dsub+0x328>
 8001f4a:	4cc6      	ldr	r4, [pc, #792]	; (8002264 <__aeabi_dsub+0x6f4>)
 8001f4c:	1c72      	adds	r2, r6, #1
 8001f4e:	4222      	tst	r2, r4
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x3e4>
 8001f52:	e0ac      	b.n	80020ae <__aeabi_dsub+0x53e>
 8001f54:	464a      	mov	r2, r9
 8001f56:	431a      	orrs	r2, r3
 8001f58:	2e00      	cmp	r6, #0
 8001f5a:	d000      	beq.n	8001f5e <__aeabi_dsub+0x3ee>
 8001f5c:	e105      	b.n	800216a <__aeabi_dsub+0x5fa>
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x3f4>
 8001f62:	e156      	b.n	8002212 <__aeabi_dsub+0x6a2>
 8001f64:	003a      	movs	r2, r7
 8001f66:	4302      	orrs	r2, r0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x3fc>
 8001f6a:	e0db      	b.n	8002124 <__aeabi_dsub+0x5b4>
 8001f6c:	181c      	adds	r4, r3, r0
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	419b      	sbcs	r3, r3
 8001f72:	444f      	add	r7, r9
 8001f74:	46ba      	mov	sl, r7
 8001f76:	425b      	negs	r3, r3
 8001f78:	449a      	add	sl, r3
 8001f7a:	4653      	mov	r3, sl
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	d400      	bmi.n	8001f82 <__aeabi_dsub+0x412>
 8001f80:	e780      	b.n	8001e84 <__aeabi_dsub+0x314>
 8001f82:	4652      	mov	r2, sl
 8001f84:	4bb6      	ldr	r3, [pc, #728]	; (8002260 <__aeabi_dsub+0x6f0>)
 8001f86:	2601      	movs	r6, #1
 8001f88:	401a      	ands	r2, r3
 8001f8a:	4692      	mov	sl, r2
 8001f8c:	e77a      	b.n	8001e84 <__aeabi_dsub+0x314>
 8001f8e:	4cb3      	ldr	r4, [pc, #716]	; (800225c <__aeabi_dsub+0x6ec>)
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x426>
 8001f94:	e0c0      	b.n	8002118 <__aeabi_dsub+0x5a8>
 8001f96:	2480      	movs	r4, #128	; 0x80
 8001f98:	464d      	mov	r5, r9
 8001f9a:	0424      	lsls	r4, r4, #16
 8001f9c:	4325      	orrs	r5, r4
 8001f9e:	46a9      	mov	r9, r5
 8001fa0:	4664      	mov	r4, ip
 8001fa2:	2c38      	cmp	r4, #56	; 0x38
 8001fa4:	dc53      	bgt.n	800204e <__aeabi_dsub+0x4de>
 8001fa6:	4661      	mov	r1, ip
 8001fa8:	2c1f      	cmp	r4, #31
 8001faa:	dd00      	ble.n	8001fae <__aeabi_dsub+0x43e>
 8001fac:	e0cd      	b.n	800214a <__aeabi_dsub+0x5da>
 8001fae:	2520      	movs	r5, #32
 8001fb0:	001e      	movs	r6, r3
 8001fb2:	1b2d      	subs	r5, r5, r4
 8001fb4:	464c      	mov	r4, r9
 8001fb6:	40ab      	lsls	r3, r5
 8001fb8:	40ac      	lsls	r4, r5
 8001fba:	40ce      	lsrs	r6, r1
 8001fbc:	1e5d      	subs	r5, r3, #1
 8001fbe:	41ab      	sbcs	r3, r5
 8001fc0:	4334      	orrs	r4, r6
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	464c      	mov	r4, r9
 8001fc6:	40cc      	lsrs	r4, r1
 8001fc8:	1b3f      	subs	r7, r7, r4
 8001fca:	e045      	b.n	8002058 <__aeabi_dsub+0x4e8>
 8001fcc:	464a      	mov	r2, r9
 8001fce:	1a1c      	subs	r4, r3, r0
 8001fd0:	1bd1      	subs	r1, r2, r7
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	4192      	sbcs	r2, r2
 8001fd6:	4252      	negs	r2, r2
 8001fd8:	4692      	mov	sl, r2
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4651      	mov	r1, sl
 8001fde:	1a52      	subs	r2, r2, r1
 8001fe0:	4692      	mov	sl, r2
 8001fe2:	0212      	lsls	r2, r2, #8
 8001fe4:	d500      	bpl.n	8001fe8 <__aeabi_dsub+0x478>
 8001fe6:	e083      	b.n	80020f0 <__aeabi_dsub+0x580>
 8001fe8:	4653      	mov	r3, sl
 8001fea:	4323      	orrs	r3, r4
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x480>
 8001fee:	e621      	b.n	8001c34 <__aeabi_dsub+0xc4>
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	e753      	b.n	8001e9e <__aeabi_dsub+0x32e>
 8001ff6:	181c      	adds	r4, r3, r0
 8001ff8:	429c      	cmp	r4, r3
 8001ffa:	419b      	sbcs	r3, r3
 8001ffc:	444f      	add	r7, r9
 8001ffe:	46ba      	mov	sl, r7
 8002000:	425b      	negs	r3, r3
 8002002:	449a      	add	sl, r3
 8002004:	4653      	mov	r3, sl
 8002006:	2601      	movs	r6, #1
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	d400      	bmi.n	800200e <__aeabi_dsub+0x49e>
 800200c:	e73a      	b.n	8001e84 <__aeabi_dsub+0x314>
 800200e:	2602      	movs	r6, #2
 8002010:	4652      	mov	r2, sl
 8002012:	4b93      	ldr	r3, [pc, #588]	; (8002260 <__aeabi_dsub+0x6f0>)
 8002014:	2101      	movs	r1, #1
 8002016:	401a      	ands	r2, r3
 8002018:	0013      	movs	r3, r2
 800201a:	4021      	ands	r1, r4
 800201c:	0862      	lsrs	r2, r4, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	07dc      	lsls	r4, r3, #31
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	469a      	mov	sl, r3
 8002026:	4314      	orrs	r4, r2
 8002028:	e62c      	b.n	8001c84 <__aeabi_dsub+0x114>
 800202a:	0039      	movs	r1, r7
 800202c:	3a20      	subs	r2, #32
 800202e:	40d1      	lsrs	r1, r2
 8002030:	4662      	mov	r2, ip
 8002032:	2a20      	cmp	r2, #32
 8002034:	d006      	beq.n	8002044 <__aeabi_dsub+0x4d4>
 8002036:	4664      	mov	r4, ip
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	1b12      	subs	r2, r2, r4
 800203c:	003c      	movs	r4, r7
 800203e:	4094      	lsls	r4, r2
 8002040:	4304      	orrs	r4, r0
 8002042:	9401      	str	r4, [sp, #4]
 8002044:	9c01      	ldr	r4, [sp, #4]
 8002046:	1e62      	subs	r2, r4, #1
 8002048:	4194      	sbcs	r4, r2
 800204a:	430c      	orrs	r4, r1
 800204c:	e5e3      	b.n	8001c16 <__aeabi_dsub+0xa6>
 800204e:	4649      	mov	r1, r9
 8002050:	4319      	orrs	r1, r3
 8002052:	000b      	movs	r3, r1
 8002054:	1e5c      	subs	r4, r3, #1
 8002056:	41a3      	sbcs	r3, r4
 8002058:	1ac4      	subs	r4, r0, r3
 800205a:	42a0      	cmp	r0, r4
 800205c:	419b      	sbcs	r3, r3
 800205e:	425b      	negs	r3, r3
 8002060:	1afb      	subs	r3, r7, r3
 8002062:	469a      	mov	sl, r3
 8002064:	465d      	mov	r5, fp
 8002066:	0016      	movs	r6, r2
 8002068:	e5dc      	b.n	8001c24 <__aeabi_dsub+0xb4>
 800206a:	4649      	mov	r1, r9
 800206c:	4319      	orrs	r1, r3
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x502>
 8002070:	e0ae      	b.n	80021d0 <__aeabi_dsub+0x660>
 8002072:	4661      	mov	r1, ip
 8002074:	4664      	mov	r4, ip
 8002076:	3901      	subs	r1, #1
 8002078:	2c01      	cmp	r4, #1
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x50e>
 800207c:	e0e0      	b.n	8002240 <__aeabi_dsub+0x6d0>
 800207e:	4c77      	ldr	r4, [pc, #476]	; (800225c <__aeabi_dsub+0x6ec>)
 8002080:	45a4      	cmp	ip, r4
 8002082:	d056      	beq.n	8002132 <__aeabi_dsub+0x5c2>
 8002084:	468c      	mov	ip, r1
 8002086:	e69a      	b.n	8001dbe <__aeabi_dsub+0x24e>
 8002088:	4661      	mov	r1, ip
 800208a:	2220      	movs	r2, #32
 800208c:	003c      	movs	r4, r7
 800208e:	1a52      	subs	r2, r2, r1
 8002090:	4094      	lsls	r4, r2
 8002092:	0001      	movs	r1, r0
 8002094:	4090      	lsls	r0, r2
 8002096:	46a0      	mov	r8, r4
 8002098:	4664      	mov	r4, ip
 800209a:	1e42      	subs	r2, r0, #1
 800209c:	4190      	sbcs	r0, r2
 800209e:	4662      	mov	r2, ip
 80020a0:	40e1      	lsrs	r1, r4
 80020a2:	4644      	mov	r4, r8
 80020a4:	40d7      	lsrs	r7, r2
 80020a6:	430c      	orrs	r4, r1
 80020a8:	4304      	orrs	r4, r0
 80020aa:	44b9      	add	r9, r7
 80020ac:	e701      	b.n	8001eb2 <__aeabi_dsub+0x342>
 80020ae:	496b      	ldr	r1, [pc, #428]	; (800225c <__aeabi_dsub+0x6ec>)
 80020b0:	428a      	cmp	r2, r1
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x546>
 80020b4:	e70c      	b.n	8001ed0 <__aeabi_dsub+0x360>
 80020b6:	1818      	adds	r0, r3, r0
 80020b8:	4298      	cmp	r0, r3
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	444f      	add	r7, r9
 80020be:	425b      	negs	r3, r3
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	07dc      	lsls	r4, r3, #31
 80020c4:	0840      	lsrs	r0, r0, #1
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	469a      	mov	sl, r3
 80020ca:	0016      	movs	r6, r2
 80020cc:	4304      	orrs	r4, r0
 80020ce:	e6d9      	b.n	8001e84 <__aeabi_dsub+0x314>
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d000      	beq.n	80020d6 <__aeabi_dsub+0x566>
 80020d4:	e081      	b.n	80021da <__aeabi_dsub+0x66a>
 80020d6:	003b      	movs	r3, r7
 80020d8:	4303      	orrs	r3, r0
 80020da:	d11d      	bne.n	8002118 <__aeabi_dsub+0x5a8>
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	2500      	movs	r5, #0
 80020e0:	0312      	lsls	r2, r2, #12
 80020e2:	e70b      	b.n	8001efc <__aeabi_dsub+0x38c>
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	077b      	lsls	r3, r7, #29
 80020e8:	465d      	mov	r5, fp
 80020ea:	4303      	orrs	r3, r0
 80020ec:	08fa      	lsrs	r2, r7, #3
 80020ee:	e6d3      	b.n	8001e98 <__aeabi_dsub+0x328>
 80020f0:	1ac4      	subs	r4, r0, r3
 80020f2:	42a0      	cmp	r0, r4
 80020f4:	4180      	sbcs	r0, r0
 80020f6:	464b      	mov	r3, r9
 80020f8:	4240      	negs	r0, r0
 80020fa:	1aff      	subs	r7, r7, r3
 80020fc:	1a3b      	subs	r3, r7, r0
 80020fe:	469a      	mov	sl, r3
 8002100:	465d      	mov	r5, fp
 8002102:	e597      	b.n	8001c34 <__aeabi_dsub+0xc4>
 8002104:	1a1c      	subs	r4, r3, r0
 8002106:	464a      	mov	r2, r9
 8002108:	42a3      	cmp	r3, r4
 800210a:	419b      	sbcs	r3, r3
 800210c:	1bd7      	subs	r7, r2, r7
 800210e:	425b      	negs	r3, r3
 8002110:	1afb      	subs	r3, r7, r3
 8002112:	469a      	mov	sl, r3
 8002114:	2601      	movs	r6, #1
 8002116:	e585      	b.n	8001c24 <__aeabi_dsub+0xb4>
 8002118:	08c0      	lsrs	r0, r0, #3
 800211a:	077b      	lsls	r3, r7, #29
 800211c:	465d      	mov	r5, fp
 800211e:	4303      	orrs	r3, r0
 8002120:	08fa      	lsrs	r2, r7, #3
 8002122:	e6e7      	b.n	8001ef4 <__aeabi_dsub+0x384>
 8002124:	464a      	mov	r2, r9
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	0752      	lsls	r2, r2, #29
 800212a:	4313      	orrs	r3, r2
 800212c:	464a      	mov	r2, r9
 800212e:	08d2      	lsrs	r2, r2, #3
 8002130:	e6b5      	b.n	8001e9e <__aeabi_dsub+0x32e>
 8002132:	08c0      	lsrs	r0, r0, #3
 8002134:	077b      	lsls	r3, r7, #29
 8002136:	4303      	orrs	r3, r0
 8002138:	08fa      	lsrs	r2, r7, #3
 800213a:	e6db      	b.n	8001ef4 <__aeabi_dsub+0x384>
 800213c:	4649      	mov	r1, r9
 800213e:	4319      	orrs	r1, r3
 8002140:	000b      	movs	r3, r1
 8002142:	1e59      	subs	r1, r3, #1
 8002144:	418b      	sbcs	r3, r1
 8002146:	001c      	movs	r4, r3
 8002148:	e653      	b.n	8001df2 <__aeabi_dsub+0x282>
 800214a:	464d      	mov	r5, r9
 800214c:	3c20      	subs	r4, #32
 800214e:	40e5      	lsrs	r5, r4
 8002150:	2920      	cmp	r1, #32
 8002152:	d005      	beq.n	8002160 <__aeabi_dsub+0x5f0>
 8002154:	2440      	movs	r4, #64	; 0x40
 8002156:	1a64      	subs	r4, r4, r1
 8002158:	4649      	mov	r1, r9
 800215a:	40a1      	lsls	r1, r4
 800215c:	430b      	orrs	r3, r1
 800215e:	4698      	mov	r8, r3
 8002160:	4643      	mov	r3, r8
 8002162:	1e5c      	subs	r4, r3, #1
 8002164:	41a3      	sbcs	r3, r4
 8002166:	432b      	orrs	r3, r5
 8002168:	e776      	b.n	8002058 <__aeabi_dsub+0x4e8>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d0e1      	beq.n	8002132 <__aeabi_dsub+0x5c2>
 800216e:	003a      	movs	r2, r7
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	4302      	orrs	r2, r0
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x608>
 8002176:	e6b8      	b.n	8001eea <__aeabi_dsub+0x37a>
 8002178:	464a      	mov	r2, r9
 800217a:	0752      	lsls	r2, r2, #29
 800217c:	2480      	movs	r4, #128	; 0x80
 800217e:	4313      	orrs	r3, r2
 8002180:	464a      	mov	r2, r9
 8002182:	0324      	lsls	r4, r4, #12
 8002184:	08d2      	lsrs	r2, r2, #3
 8002186:	4222      	tst	r2, r4
 8002188:	d007      	beq.n	800219a <__aeabi_dsub+0x62a>
 800218a:	08fe      	lsrs	r6, r7, #3
 800218c:	4226      	tst	r6, r4
 800218e:	d104      	bne.n	800219a <__aeabi_dsub+0x62a>
 8002190:	465d      	mov	r5, fp
 8002192:	0032      	movs	r2, r6
 8002194:	08c3      	lsrs	r3, r0, #3
 8002196:	077f      	lsls	r7, r7, #29
 8002198:	433b      	orrs	r3, r7
 800219a:	0f59      	lsrs	r1, r3, #29
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	0749      	lsls	r1, r1, #29
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	430b      	orrs	r3, r1
 80021a4:	e6a6      	b.n	8001ef4 <__aeabi_dsub+0x384>
 80021a6:	1ac4      	subs	r4, r0, r3
 80021a8:	42a0      	cmp	r0, r4
 80021aa:	4180      	sbcs	r0, r0
 80021ac:	464b      	mov	r3, r9
 80021ae:	4240      	negs	r0, r0
 80021b0:	1aff      	subs	r7, r7, r3
 80021b2:	1a3b      	subs	r3, r7, r0
 80021b4:	469a      	mov	sl, r3
 80021b6:	465d      	mov	r5, fp
 80021b8:	2601      	movs	r6, #1
 80021ba:	e533      	b.n	8001c24 <__aeabi_dsub+0xb4>
 80021bc:	003b      	movs	r3, r7
 80021be:	4303      	orrs	r3, r0
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x654>
 80021c2:	e715      	b.n	8001ff0 <__aeabi_dsub+0x480>
 80021c4:	08c0      	lsrs	r0, r0, #3
 80021c6:	077b      	lsls	r3, r7, #29
 80021c8:	465d      	mov	r5, fp
 80021ca:	4303      	orrs	r3, r0
 80021cc:	08fa      	lsrs	r2, r7, #3
 80021ce:	e666      	b.n	8001e9e <__aeabi_dsub+0x32e>
 80021d0:	08c0      	lsrs	r0, r0, #3
 80021d2:	077b      	lsls	r3, r7, #29
 80021d4:	4303      	orrs	r3, r0
 80021d6:	08fa      	lsrs	r2, r7, #3
 80021d8:	e65e      	b.n	8001e98 <__aeabi_dsub+0x328>
 80021da:	003a      	movs	r2, r7
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	4302      	orrs	r2, r0
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x674>
 80021e2:	e682      	b.n	8001eea <__aeabi_dsub+0x37a>
 80021e4:	464a      	mov	r2, r9
 80021e6:	0752      	lsls	r2, r2, #29
 80021e8:	2480      	movs	r4, #128	; 0x80
 80021ea:	4313      	orrs	r3, r2
 80021ec:	464a      	mov	r2, r9
 80021ee:	0324      	lsls	r4, r4, #12
 80021f0:	08d2      	lsrs	r2, r2, #3
 80021f2:	4222      	tst	r2, r4
 80021f4:	d007      	beq.n	8002206 <__aeabi_dsub+0x696>
 80021f6:	08fe      	lsrs	r6, r7, #3
 80021f8:	4226      	tst	r6, r4
 80021fa:	d104      	bne.n	8002206 <__aeabi_dsub+0x696>
 80021fc:	465d      	mov	r5, fp
 80021fe:	0032      	movs	r2, r6
 8002200:	08c3      	lsrs	r3, r0, #3
 8002202:	077f      	lsls	r7, r7, #29
 8002204:	433b      	orrs	r3, r7
 8002206:	0f59      	lsrs	r1, r3, #29
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	0749      	lsls	r1, r1, #29
 800220e:	430b      	orrs	r3, r1
 8002210:	e670      	b.n	8001ef4 <__aeabi_dsub+0x384>
 8002212:	08c0      	lsrs	r0, r0, #3
 8002214:	077b      	lsls	r3, r7, #29
 8002216:	4303      	orrs	r3, r0
 8002218:	08fa      	lsrs	r2, r7, #3
 800221a:	e640      	b.n	8001e9e <__aeabi_dsub+0x32e>
 800221c:	464c      	mov	r4, r9
 800221e:	3920      	subs	r1, #32
 8002220:	40cc      	lsrs	r4, r1
 8002222:	4661      	mov	r1, ip
 8002224:	2920      	cmp	r1, #32
 8002226:	d006      	beq.n	8002236 <__aeabi_dsub+0x6c6>
 8002228:	4666      	mov	r6, ip
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	1b89      	subs	r1, r1, r6
 800222e:	464e      	mov	r6, r9
 8002230:	408e      	lsls	r6, r1
 8002232:	4333      	orrs	r3, r6
 8002234:	4698      	mov	r8, r3
 8002236:	4643      	mov	r3, r8
 8002238:	1e59      	subs	r1, r3, #1
 800223a:	418b      	sbcs	r3, r1
 800223c:	431c      	orrs	r4, r3
 800223e:	e5d8      	b.n	8001df2 <__aeabi_dsub+0x282>
 8002240:	181c      	adds	r4, r3, r0
 8002242:	4284      	cmp	r4, r0
 8002244:	4180      	sbcs	r0, r0
 8002246:	444f      	add	r7, r9
 8002248:	46ba      	mov	sl, r7
 800224a:	4240      	negs	r0, r0
 800224c:	4482      	add	sl, r0
 800224e:	e6d9      	b.n	8002004 <__aeabi_dsub+0x494>
 8002250:	4653      	mov	r3, sl
 8002252:	4323      	orrs	r3, r4
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x6e8>
 8002256:	e6cb      	b.n	8001ff0 <__aeabi_dsub+0x480>
 8002258:	e614      	b.n	8001e84 <__aeabi_dsub+0x314>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	000007ff 	.word	0x000007ff
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	000007fe 	.word	0x000007fe
 8002268:	2300      	movs	r3, #0
 800226a:	4a01      	ldr	r2, [pc, #4]	; (8002270 <__aeabi_dsub+0x700>)
 800226c:	001c      	movs	r4, r3
 800226e:	e529      	b.n	8001cc4 <__aeabi_dsub+0x154>
 8002270:	000007ff 	.word	0x000007ff

08002274 <__aeabi_dcmpun>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	0005      	movs	r5, r0
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <__aeabi_dcmpun+0x38>)
 800227a:	031c      	lsls	r4, r3, #12
 800227c:	0016      	movs	r6, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	030a      	lsls	r2, r1, #12
 8002282:	0049      	lsls	r1, r1, #1
 8002284:	0b12      	lsrs	r2, r2, #12
 8002286:	0d49      	lsrs	r1, r1, #21
 8002288:	0b24      	lsrs	r4, r4, #12
 800228a:	0d5b      	lsrs	r3, r3, #21
 800228c:	4281      	cmp	r1, r0
 800228e:	d008      	beq.n	80022a2 <__aeabi_dcmpun+0x2e>
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <__aeabi_dcmpun+0x38>)
 8002292:	2000      	movs	r0, #0
 8002294:	4293      	cmp	r3, r2
 8002296:	d103      	bne.n	80022a0 <__aeabi_dcmpun+0x2c>
 8002298:	0020      	movs	r0, r4
 800229a:	4330      	orrs	r0, r6
 800229c:	1e43      	subs	r3, r0, #1
 800229e:	4198      	sbcs	r0, r3
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	2001      	movs	r0, #1
 80022a4:	432a      	orrs	r2, r5
 80022a6:	d1fb      	bne.n	80022a0 <__aeabi_dcmpun+0x2c>
 80022a8:	e7f2      	b.n	8002290 <__aeabi_dcmpun+0x1c>
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	000007ff 	.word	0x000007ff

080022b0 <__aeabi_d2iz>:
 80022b0:	000a      	movs	r2, r1
 80022b2:	b530      	push	{r4, r5, lr}
 80022b4:	4c13      	ldr	r4, [pc, #76]	; (8002304 <__aeabi_d2iz+0x54>)
 80022b6:	0053      	lsls	r3, r2, #1
 80022b8:	0309      	lsls	r1, r1, #12
 80022ba:	0005      	movs	r5, r0
 80022bc:	0b09      	lsrs	r1, r1, #12
 80022be:	2000      	movs	r0, #0
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	0fd2      	lsrs	r2, r2, #31
 80022c4:	42a3      	cmp	r3, r4
 80022c6:	dd04      	ble.n	80022d2 <__aeabi_d2iz+0x22>
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <__aeabi_d2iz+0x58>)
 80022ca:	4283      	cmp	r3, r0
 80022cc:	dd02      	ble.n	80022d4 <__aeabi_d2iz+0x24>
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <__aeabi_d2iz+0x5c>)
 80022d0:	18d0      	adds	r0, r2, r3
 80022d2:	bd30      	pop	{r4, r5, pc}
 80022d4:	2080      	movs	r0, #128	; 0x80
 80022d6:	0340      	lsls	r0, r0, #13
 80022d8:	4301      	orrs	r1, r0
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <__aeabi_d2iz+0x60>)
 80022dc:	1ac0      	subs	r0, r0, r3
 80022de:	281f      	cmp	r0, #31
 80022e0:	dd08      	ble.n	80022f4 <__aeabi_d2iz+0x44>
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <__aeabi_d2iz+0x64>)
 80022e4:	1ac3      	subs	r3, r0, r3
 80022e6:	40d9      	lsrs	r1, r3
 80022e8:	000b      	movs	r3, r1
 80022ea:	4258      	negs	r0, r3
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d1f0      	bne.n	80022d2 <__aeabi_d2iz+0x22>
 80022f0:	0018      	movs	r0, r3
 80022f2:	e7ee      	b.n	80022d2 <__aeabi_d2iz+0x22>
 80022f4:	4c08      	ldr	r4, [pc, #32]	; (8002318 <__aeabi_d2iz+0x68>)
 80022f6:	40c5      	lsrs	r5, r0
 80022f8:	46a4      	mov	ip, r4
 80022fa:	4463      	add	r3, ip
 80022fc:	4099      	lsls	r1, r3
 80022fe:	000b      	movs	r3, r1
 8002300:	432b      	orrs	r3, r5
 8002302:	e7f2      	b.n	80022ea <__aeabi_d2iz+0x3a>
 8002304:	000003fe 	.word	0x000003fe
 8002308:	0000041d 	.word	0x0000041d
 800230c:	7fffffff 	.word	0x7fffffff
 8002310:	00000433 	.word	0x00000433
 8002314:	00000413 	.word	0x00000413
 8002318:	fffffbed 	.word	0xfffffbed

0800231c <__aeabi_i2d>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	2800      	cmp	r0, #0
 8002320:	d016      	beq.n	8002350 <__aeabi_i2d+0x34>
 8002322:	17c3      	asrs	r3, r0, #31
 8002324:	18c5      	adds	r5, r0, r3
 8002326:	405d      	eors	r5, r3
 8002328:	0fc4      	lsrs	r4, r0, #31
 800232a:	0028      	movs	r0, r5
 800232c:	f000 f91a 	bl	8002564 <__clzsi2>
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <__aeabi_i2d+0x5c>)
 8002332:	1a1b      	subs	r3, r3, r0
 8002334:	280a      	cmp	r0, #10
 8002336:	dc16      	bgt.n	8002366 <__aeabi_i2d+0x4a>
 8002338:	0002      	movs	r2, r0
 800233a:	002e      	movs	r6, r5
 800233c:	3215      	adds	r2, #21
 800233e:	4096      	lsls	r6, r2
 8002340:	220b      	movs	r2, #11
 8002342:	1a12      	subs	r2, r2, r0
 8002344:	40d5      	lsrs	r5, r2
 8002346:	055b      	lsls	r3, r3, #21
 8002348:	032d      	lsls	r5, r5, #12
 800234a:	0b2d      	lsrs	r5, r5, #12
 800234c:	0d5b      	lsrs	r3, r3, #21
 800234e:	e003      	b.n	8002358 <__aeabi_i2d+0x3c>
 8002350:	2400      	movs	r4, #0
 8002352:	2300      	movs	r3, #0
 8002354:	2500      	movs	r5, #0
 8002356:	2600      	movs	r6, #0
 8002358:	051b      	lsls	r3, r3, #20
 800235a:	432b      	orrs	r3, r5
 800235c:	07e4      	lsls	r4, r4, #31
 800235e:	4323      	orrs	r3, r4
 8002360:	0030      	movs	r0, r6
 8002362:	0019      	movs	r1, r3
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	380b      	subs	r0, #11
 8002368:	4085      	lsls	r5, r0
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	2600      	movs	r6, #0
 8002370:	0b2d      	lsrs	r5, r5, #12
 8002372:	0d5b      	lsrs	r3, r3, #21
 8002374:	e7f0      	b.n	8002358 <__aeabi_i2d+0x3c>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	0000041e 	.word	0x0000041e

0800237c <__aeabi_ui2d>:
 800237c:	b510      	push	{r4, lr}
 800237e:	1e04      	subs	r4, r0, #0
 8002380:	d010      	beq.n	80023a4 <__aeabi_ui2d+0x28>
 8002382:	f000 f8ef 	bl	8002564 <__clzsi2>
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <__aeabi_ui2d+0x48>)
 8002388:	1a1b      	subs	r3, r3, r0
 800238a:	280a      	cmp	r0, #10
 800238c:	dc11      	bgt.n	80023b2 <__aeabi_ui2d+0x36>
 800238e:	220b      	movs	r2, #11
 8002390:	0021      	movs	r1, r4
 8002392:	1a12      	subs	r2, r2, r0
 8002394:	40d1      	lsrs	r1, r2
 8002396:	3015      	adds	r0, #21
 8002398:	030a      	lsls	r2, r1, #12
 800239a:	055b      	lsls	r3, r3, #21
 800239c:	4084      	lsls	r4, r0
 800239e:	0b12      	lsrs	r2, r2, #12
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	e001      	b.n	80023a8 <__aeabi_ui2d+0x2c>
 80023a4:	2300      	movs	r3, #0
 80023a6:	2200      	movs	r2, #0
 80023a8:	051b      	lsls	r3, r3, #20
 80023aa:	4313      	orrs	r3, r2
 80023ac:	0020      	movs	r0, r4
 80023ae:	0019      	movs	r1, r3
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	0022      	movs	r2, r4
 80023b4:	380b      	subs	r0, #11
 80023b6:	4082      	lsls	r2, r0
 80023b8:	055b      	lsls	r3, r3, #21
 80023ba:	0312      	lsls	r2, r2, #12
 80023bc:	2400      	movs	r4, #0
 80023be:	0b12      	lsrs	r2, r2, #12
 80023c0:	0d5b      	lsrs	r3, r3, #21
 80023c2:	e7f1      	b.n	80023a8 <__aeabi_ui2d+0x2c>
 80023c4:	0000041e 	.word	0x0000041e

080023c8 <__aeabi_f2d>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	0242      	lsls	r2, r0, #9
 80023cc:	0043      	lsls	r3, r0, #1
 80023ce:	0fc4      	lsrs	r4, r0, #31
 80023d0:	20fe      	movs	r0, #254	; 0xfe
 80023d2:	0e1b      	lsrs	r3, r3, #24
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	0a55      	lsrs	r5, r2, #9
 80023d8:	4208      	tst	r0, r1
 80023da:	d00c      	beq.n	80023f6 <__aeabi_f2d+0x2e>
 80023dc:	21e0      	movs	r1, #224	; 0xe0
 80023de:	0089      	lsls	r1, r1, #2
 80023e0:	468c      	mov	ip, r1
 80023e2:	076d      	lsls	r5, r5, #29
 80023e4:	0b12      	lsrs	r2, r2, #12
 80023e6:	4463      	add	r3, ip
 80023e8:	051b      	lsls	r3, r3, #20
 80023ea:	4313      	orrs	r3, r2
 80023ec:	07e4      	lsls	r4, r4, #31
 80023ee:	4323      	orrs	r3, r4
 80023f0:	0028      	movs	r0, r5
 80023f2:	0019      	movs	r1, r3
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <__aeabi_f2d+0x5c>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d01b      	beq.n	8002436 <__aeabi_f2d+0x6e>
 80023fe:	0028      	movs	r0, r5
 8002400:	f000 f8b0 	bl	8002564 <__clzsi2>
 8002404:	280a      	cmp	r0, #10
 8002406:	dc1c      	bgt.n	8002442 <__aeabi_f2d+0x7a>
 8002408:	230b      	movs	r3, #11
 800240a:	002a      	movs	r2, r5
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	40da      	lsrs	r2, r3
 8002410:	0003      	movs	r3, r0
 8002412:	3315      	adds	r3, #21
 8002414:	409d      	lsls	r5, r3
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <__aeabi_f2d+0x88>)
 8002418:	0312      	lsls	r2, r2, #12
 800241a:	1a1b      	subs	r3, r3, r0
 800241c:	055b      	lsls	r3, r3, #21
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e7e1      	b.n	80023e8 <__aeabi_f2d+0x20>
 8002424:	2d00      	cmp	r5, #0
 8002426:	d009      	beq.n	800243c <__aeabi_f2d+0x74>
 8002428:	0b13      	lsrs	r3, r2, #12
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0312      	lsls	r2, r2, #12
 800242e:	431a      	orrs	r2, r3
 8002430:	076d      	lsls	r5, r5, #29
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <__aeabi_f2d+0x8c>)
 8002434:	e7d8      	b.n	80023e8 <__aeabi_f2d+0x20>
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	e7d5      	b.n	80023e8 <__aeabi_f2d+0x20>
 800243c:	2200      	movs	r2, #0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <__aeabi_f2d+0x8c>)
 8002440:	e7d2      	b.n	80023e8 <__aeabi_f2d+0x20>
 8002442:	0003      	movs	r3, r0
 8002444:	002a      	movs	r2, r5
 8002446:	3b0b      	subs	r3, #11
 8002448:	409a      	lsls	r2, r3
 800244a:	2500      	movs	r5, #0
 800244c:	e7e3      	b.n	8002416 <__aeabi_f2d+0x4e>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	00000389 	.word	0x00000389
 8002454:	000007ff 	.word	0x000007ff

08002458 <__aeabi_d2f>:
 8002458:	0002      	movs	r2, r0
 800245a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245c:	004b      	lsls	r3, r1, #1
 800245e:	030d      	lsls	r5, r1, #12
 8002460:	0f40      	lsrs	r0, r0, #29
 8002462:	0d5b      	lsrs	r3, r3, #21
 8002464:	0fcc      	lsrs	r4, r1, #31
 8002466:	0a6d      	lsrs	r5, r5, #9
 8002468:	493a      	ldr	r1, [pc, #232]	; (8002554 <__aeabi_d2f+0xfc>)
 800246a:	4305      	orrs	r5, r0
 800246c:	1c58      	adds	r0, r3, #1
 800246e:	00d7      	lsls	r7, r2, #3
 8002470:	4208      	tst	r0, r1
 8002472:	d00a      	beq.n	800248a <__aeabi_d2f+0x32>
 8002474:	4938      	ldr	r1, [pc, #224]	; (8002558 <__aeabi_d2f+0x100>)
 8002476:	1859      	adds	r1, r3, r1
 8002478:	29fe      	cmp	r1, #254	; 0xfe
 800247a:	dd16      	ble.n	80024aa <__aeabi_d2f+0x52>
 800247c:	20ff      	movs	r0, #255	; 0xff
 800247e:	2200      	movs	r2, #0
 8002480:	05c0      	lsls	r0, r0, #23
 8002482:	4310      	orrs	r0, r2
 8002484:	07e4      	lsls	r4, r4, #31
 8002486:	4320      	orrs	r0, r4
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <__aeabi_d2f+0x44>
 800248e:	433d      	orrs	r5, r7
 8002490:	d026      	beq.n	80024e0 <__aeabi_d2f+0x88>
 8002492:	2205      	movs	r2, #5
 8002494:	0192      	lsls	r2, r2, #6
 8002496:	0a52      	lsrs	r2, r2, #9
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	e7f1      	b.n	8002480 <__aeabi_d2f+0x28>
 800249c:	432f      	orrs	r7, r5
 800249e:	d0ed      	beq.n	800247c <__aeabi_d2f+0x24>
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	03d2      	lsls	r2, r2, #15
 80024a4:	20ff      	movs	r0, #255	; 0xff
 80024a6:	432a      	orrs	r2, r5
 80024a8:	e7ea      	b.n	8002480 <__aeabi_d2f+0x28>
 80024aa:	2900      	cmp	r1, #0
 80024ac:	dd1b      	ble.n	80024e6 <__aeabi_d2f+0x8e>
 80024ae:	0192      	lsls	r2, r2, #6
 80024b0:	1e50      	subs	r0, r2, #1
 80024b2:	4182      	sbcs	r2, r0
 80024b4:	00ed      	lsls	r5, r5, #3
 80024b6:	0f7f      	lsrs	r7, r7, #29
 80024b8:	432a      	orrs	r2, r5
 80024ba:	433a      	orrs	r2, r7
 80024bc:	0753      	lsls	r3, r2, #29
 80024be:	d047      	beq.n	8002550 <__aeabi_d2f+0xf8>
 80024c0:	230f      	movs	r3, #15
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d000      	beq.n	80024ca <__aeabi_d2f+0x72>
 80024c8:	3204      	adds	r2, #4
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	04db      	lsls	r3, r3, #19
 80024ce:	4013      	ands	r3, r2
 80024d0:	d03e      	beq.n	8002550 <__aeabi_d2f+0xf8>
 80024d2:	1c48      	adds	r0, r1, #1
 80024d4:	29fe      	cmp	r1, #254	; 0xfe
 80024d6:	d0d1      	beq.n	800247c <__aeabi_d2f+0x24>
 80024d8:	0192      	lsls	r2, r2, #6
 80024da:	0a52      	lsrs	r2, r2, #9
 80024dc:	b2c0      	uxtb	r0, r0
 80024de:	e7cf      	b.n	8002480 <__aeabi_d2f+0x28>
 80024e0:	2000      	movs	r0, #0
 80024e2:	2200      	movs	r2, #0
 80024e4:	e7cc      	b.n	8002480 <__aeabi_d2f+0x28>
 80024e6:	000a      	movs	r2, r1
 80024e8:	3217      	adds	r2, #23
 80024ea:	db2f      	blt.n	800254c <__aeabi_d2f+0xf4>
 80024ec:	2680      	movs	r6, #128	; 0x80
 80024ee:	0436      	lsls	r6, r6, #16
 80024f0:	432e      	orrs	r6, r5
 80024f2:	251e      	movs	r5, #30
 80024f4:	1a6d      	subs	r5, r5, r1
 80024f6:	2d1f      	cmp	r5, #31
 80024f8:	dd11      	ble.n	800251e <__aeabi_d2f+0xc6>
 80024fa:	2202      	movs	r2, #2
 80024fc:	4252      	negs	r2, r2
 80024fe:	1a52      	subs	r2, r2, r1
 8002500:	0031      	movs	r1, r6
 8002502:	40d1      	lsrs	r1, r2
 8002504:	2d20      	cmp	r5, #32
 8002506:	d004      	beq.n	8002512 <__aeabi_d2f+0xba>
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <__aeabi_d2f+0x104>)
 800250a:	4694      	mov	ip, r2
 800250c:	4463      	add	r3, ip
 800250e:	409e      	lsls	r6, r3
 8002510:	4337      	orrs	r7, r6
 8002512:	003a      	movs	r2, r7
 8002514:	1e53      	subs	r3, r2, #1
 8002516:	419a      	sbcs	r2, r3
 8002518:	430a      	orrs	r2, r1
 800251a:	2100      	movs	r1, #0
 800251c:	e7ce      	b.n	80024bc <__aeabi_d2f+0x64>
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <__aeabi_d2f+0x108>)
 8002520:	0038      	movs	r0, r7
 8002522:	4694      	mov	ip, r2
 8002524:	4463      	add	r3, ip
 8002526:	4098      	lsls	r0, r3
 8002528:	003a      	movs	r2, r7
 800252a:	1e41      	subs	r1, r0, #1
 800252c:	4188      	sbcs	r0, r1
 800252e:	409e      	lsls	r6, r3
 8002530:	40ea      	lsrs	r2, r5
 8002532:	4330      	orrs	r0, r6
 8002534:	4302      	orrs	r2, r0
 8002536:	2100      	movs	r1, #0
 8002538:	0753      	lsls	r3, r2, #29
 800253a:	d1c1      	bne.n	80024c0 <__aeabi_d2f+0x68>
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0013      	movs	r3, r2
 8002540:	04c9      	lsls	r1, r1, #19
 8002542:	2001      	movs	r0, #1
 8002544:	400b      	ands	r3, r1
 8002546:	420a      	tst	r2, r1
 8002548:	d1c6      	bne.n	80024d8 <__aeabi_d2f+0x80>
 800254a:	e7a3      	b.n	8002494 <__aeabi_d2f+0x3c>
 800254c:	2300      	movs	r3, #0
 800254e:	e7a0      	b.n	8002492 <__aeabi_d2f+0x3a>
 8002550:	000b      	movs	r3, r1
 8002552:	e79f      	b.n	8002494 <__aeabi_d2f+0x3c>
 8002554:	000007fe 	.word	0x000007fe
 8002558:	fffffc80 	.word	0xfffffc80
 800255c:	fffffca2 	.word	0xfffffca2
 8002560:	fffffc82 	.word	0xfffffc82

08002564 <__clzsi2>:
 8002564:	211c      	movs	r1, #28
 8002566:	2301      	movs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	4298      	cmp	r0, r3
 800256c:	d301      	bcc.n	8002572 <__clzsi2+0xe>
 800256e:	0c00      	lsrs	r0, r0, #16
 8002570:	3910      	subs	r1, #16
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	4298      	cmp	r0, r3
 8002576:	d301      	bcc.n	800257c <__clzsi2+0x18>
 8002578:	0a00      	lsrs	r0, r0, #8
 800257a:	3908      	subs	r1, #8
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	4298      	cmp	r0, r3
 8002580:	d301      	bcc.n	8002586 <__clzsi2+0x22>
 8002582:	0900      	lsrs	r0, r0, #4
 8002584:	3904      	subs	r1, #4
 8002586:	a202      	add	r2, pc, #8	; (adr r2, 8002590 <__clzsi2+0x2c>)
 8002588:	5c10      	ldrb	r0, [r2, r0]
 800258a:	1840      	adds	r0, r0, r1
 800258c:	4770      	bx	lr
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	02020304 	.word	0x02020304
 8002594:	01010101 	.word	0x01010101
	...

080025a0 <__clzdi2>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	2900      	cmp	r1, #0
 80025a4:	d103      	bne.n	80025ae <__clzdi2+0xe>
 80025a6:	f7ff ffdd 	bl	8002564 <__clzsi2>
 80025aa:	3020      	adds	r0, #32
 80025ac:	e002      	b.n	80025b4 <__clzdi2+0x14>
 80025ae:	0008      	movs	r0, r1
 80025b0:	f7ff ffd8 	bl	8002564 <__clzsi2>
 80025b4:	bd10      	pop	{r4, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)

080025b8 <main>:

double Ks = 2.4e-3;


int main(void)
{
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b0d5      	sub	sp, #340	; 0x154
 80025bc:	af00      	add	r7, sp, #0
  HAL_Init();
 80025be:	f001 fab1 	bl	8003b24 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80025c2:	f000 ff47 	bl	8003454 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c6:	f001 f819 	bl	80035fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ca:	f000 ffc9 	bl	8003560 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80025ce:	f000 ff89 	bl	80034e4 <MX_SPI1_Init>


 char *texto = "\n\r Reinicio ... \n";
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <main+0x1bc>)
 80025d4:	2490      	movs	r4, #144	; 0x90
 80025d6:	0064      	lsls	r4, r4, #1
 80025d8:	2508      	movs	r5, #8
 80025da:	1962      	adds	r2, r4, r5
 80025dc:	19d2      	adds	r2, r2, r7
 80025de:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)texto, strlen(texto), HAL_MAX_DELAY);
 80025e0:	1963      	adds	r3, r4, r5
 80025e2:	19db      	adds	r3, r3, r7
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fd fd8c 	bl	8000104 <strlen>
 80025ec:	0003      	movs	r3, r0
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	425b      	negs	r3, r3
 80025f4:	1961      	adds	r1, r4, r5
 80025f6:	19c9      	adds	r1, r1, r7
 80025f8:	6809      	ldr	r1, [r1, #0]
 80025fa:	485f      	ldr	r0, [pc, #380]	; (8002778 <main+0x1c0>)
 80025fc:	f003 fcb4 	bl	8005f68 <HAL_UART_Transmit>
  /*Tiempo para bloquear la elección de la interfaz CS up*/
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <main+0x1c4>)
 8002602:	2200      	movs	r2, #0
 8002604:	2101      	movs	r1, #1
 8002606:	0018      	movs	r0, r3
 8002608:	f001 fd89 	bl	800411e <HAL_GPIO_WritePin>


  while (1)
  {
	  //reinicioDSP();
	  if (HAL_GPIO_ReadPin(GPIOC, BUTTON_Pin) == GPIO_PIN_RESET && inicio == 0) {
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	019b      	lsls	r3, r3, #6
 8002610:	4a5b      	ldr	r2, [pc, #364]	; (8002780 <main+0x1c8>)
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f001 fd65 	bl	80040e4 <HAL_GPIO_ReadPin>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d1f6      	bne.n	800260c <main+0x54>
 800261e:	4b59      	ldr	r3, [pc, #356]	; (8002784 <main+0x1cc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f2      	bne.n	800260c <main+0x54>
	  //lectura y actualizacion de datos V  I
	  for(int j=0;j<3;j++){
 8002626:	2300      	movs	r3, #0
 8002628:	22a2      	movs	r2, #162	; 0xa2
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	2108      	movs	r1, #8
 800262e:	1852      	adds	r2, r2, r1
 8002630:	19d2      	adds	r2, r2, r7
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e210      	b.n	8002a58 <main+0x4a0>
		  reinicioRegistros();
 8002636:	f000 fe51 	bl	80032dc <reinicioRegistros>

	  /*CS Inicio de comunicacion */
		   HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 800263a:	4b50      	ldr	r3, [pc, #320]	; (800277c <main+0x1c4>)
 800263c:	2200      	movs	r2, #0
 800263e:	2101      	movs	r1, #1
 8002640:	0018      	movs	r0, r3
 8002642:	f001 fd6c 	bl	800411e <HAL_GPIO_WritePin>

	  //LED ON
		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8002646:	23a0      	movs	r3, #160	; 0xa0
 8002648:	05db      	lsls	r3, r3, #23
 800264a:	2201      	movs	r2, #1
 800264c:	2120      	movs	r1, #32
 800264e:	0018      	movs	r0, r3
 8002650:	f001 fd65 	bl	800411e <HAL_GPIO_WritePin>
		  /*---------------------    Solicitud direccion de lectura direccion 0x48 fila 36  --------------------------*/
		 uint8_t data1[5] = {0x48, 0xFF, 0xFF, 0xFF, 0x00};
 8002654:	247c      	movs	r4, #124	; 0x7c
 8002656:	2508      	movs	r5, #8
 8002658:	1963      	adds	r3, r4, r5
 800265a:	19db      	adds	r3, r3, r7
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <main+0x1d0>)
 800265e:	6811      	ldr	r1, [r2, #0]
 8002660:	6019      	str	r1, [r3, #0]
 8002662:	7912      	ldrb	r2, [r2, #4]
 8002664:	711a      	strb	r2, [r3, #4]
		 /* Calculate CRC */
		 data1[4] = calculate_crc(data1, 4);
 8002666:	1963      	adds	r3, r4, r5
 8002668:	19db      	adds	r3, r3, r7
 800266a:	2104      	movs	r1, #4
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fecd 	bl	800340c <calculate_crc>
 8002672:	0003      	movs	r3, r0
 8002674:	001a      	movs	r2, r3
 8002676:	0021      	movs	r1, r4
 8002678:	194b      	adds	r3, r1, r5
 800267a:	19db      	adds	r3, r3, r7
 800267c:	711a      	strb	r2, [r3, #4]
		 /* Transmit data + CRC */
		 HAL_SPI_Transmit(&hspi1, data1, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 800267e:	2301      	movs	r3, #1
 8002680:	425b      	negs	r3, r3
 8002682:	194a      	adds	r2, r1, r5
 8002684:	19d1      	adds	r1, r2, r7
 8002686:	4841      	ldr	r0, [pc, #260]	; (800278c <main+0x1d4>)
 8002688:	2205      	movs	r2, #5
 800268a:	f002 fdaf 	bl	80051ec <HAL_SPI_Transmit>
		 /*--------------------Recepcion de datos de la direccion 48 (32-bit data + CRC)-------------- */
		 HAL_SPI_Receive(&hspi1, rx_data1, sizeof(rx_data1), HAL_MAX_DELAY);
 800268e:	2301      	movs	r3, #1
 8002690:	425b      	negs	r3, r3
 8002692:	493f      	ldr	r1, [pc, #252]	; (8002790 <main+0x1d8>)
 8002694:	483d      	ldr	r0, [pc, #244]	; (800278c <main+0x1d4>)
 8002696:	2205      	movs	r2, #5
 8002698:	f002 ff08 	bl	80054ac <HAL_SPI_Receive>

		 if(inicio == 0){
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <main+0x1cc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d15f      	bne.n	8002764 <main+0x1ac>
		 char *texto1 = "Trama enviada por SPI \n";
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <main+0x1dc>)
 80026a6:	24b8      	movs	r4, #184	; 0xb8
 80026a8:	1962      	adds	r2, r4, r5
 80026aa:	19d2      	adds	r2, r2, r7
 80026ac:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart2, (uint8_t*)texto1, strlen(texto1), HAL_MAX_DELAY);
 80026ae:	1963      	adds	r3, r4, r5
 80026b0:	19db      	adds	r3, r3, r7
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fd fd25 	bl	8000104 <strlen>
 80026ba:	0003      	movs	r3, r0
 80026bc:	b29a      	uxth	r2, r3
 80026be:	2301      	movs	r3, #1
 80026c0:	425b      	negs	r3, r3
 80026c2:	1961      	adds	r1, r4, r5
 80026c4:	19c9      	adds	r1, r1, r7
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	482b      	ldr	r0, [pc, #172]	; (8002778 <main+0x1c0>)
 80026ca:	f003 fc4d 	bl	8005f68 <HAL_UART_Transmit>
		 // Enviar datos por UART en formato hexadecimal
		 for (int i = 0; i < sizeof(data1); i++) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	22a0      	movs	r2, #160	; 0xa0
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	1952      	adds	r2, r2, r5
 80026d6:	19d2      	adds	r2, r2, r7
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e023      	b.n	8002724 <main+0x16c>
			 sprintf(buf_tx, "%02X ", data1[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 80026dc:	237c      	movs	r3, #124	; 0x7c
 80026de:	2508      	movs	r5, #8
 80026e0:	195b      	adds	r3, r3, r5
 80026e2:	19da      	adds	r2, r3, r7
 80026e4:	24a0      	movs	r4, #160	; 0xa0
 80026e6:	0064      	lsls	r4, r4, #1
 80026e8:	1963      	adds	r3, r4, r5
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	001a      	movs	r2, r3
 80026f4:	4928      	ldr	r1, [pc, #160]	; (8002798 <main+0x1e0>)
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <main+0x1e4>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f005 f8bf 	bl	800787c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx, strlen(buf_tx), HAL_MAX_DELAY); // Transmitir el byte por UART
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <main+0x1e4>)
 8002700:	0018      	movs	r0, r3
 8002702:	f7fd fcff 	bl	8000104 <strlen>
 8002706:	0003      	movs	r3, r0
 8002708:	b29a      	uxth	r2, r3
 800270a:	2301      	movs	r3, #1
 800270c:	425b      	negs	r3, r3
 800270e:	4923      	ldr	r1, [pc, #140]	; (800279c <main+0x1e4>)
 8002710:	4819      	ldr	r0, [pc, #100]	; (8002778 <main+0x1c0>)
 8002712:	f003 fc29 	bl	8005f68 <HAL_UART_Transmit>
		 for (int i = 0; i < sizeof(data1); i++) {
 8002716:	1963      	adds	r3, r4, r5
 8002718:	19db      	adds	r3, r3, r7
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	1962      	adds	r2, r4, r5
 8002720:	19d2      	adds	r2, r2, r7
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	23a0      	movs	r3, #160	; 0xa0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2508      	movs	r5, #8
 800272a:	195b      	adds	r3, r3, r5
 800272c:	19db      	adds	r3, r3, r7
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d9d3      	bls.n	80026dc <main+0x124>
		 }
		 inicio=1;
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <main+0x1cc>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]
		 char *texto1_1 = "\n Vrms y Irms  direccion registro 0x48 \n";
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <main+0x1e8>)
 800273c:	24b4      	movs	r4, #180	; 0xb4
 800273e:	1962      	adds	r2, r4, r5
 8002740:	19d2      	adds	r2, r2, r7
 8002742:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart2, (uint8_t*)texto1_1, strlen(texto1_1), HAL_MAX_DELAY);
 8002744:	1963      	adds	r3, r4, r5
 8002746:	19db      	adds	r3, r3, r7
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0018      	movs	r0, r3
 800274c:	f7fd fcda 	bl	8000104 <strlen>
 8002750:	0003      	movs	r3, r0
 8002752:	b29a      	uxth	r2, r3
 8002754:	2301      	movs	r3, #1
 8002756:	425b      	negs	r3, r3
 8002758:	1961      	adds	r1, r4, r5
 800275a:	19c9      	adds	r1, r1, r7
 800275c:	6809      	ldr	r1, [r1, #0]
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <main+0x1c0>)
 8002760:	f003 fc02 	bl	8005f68 <HAL_UART_Transmit>

		 }



		 for (int i = sizeof(rx_data1) - 1; i >= 0; i--) {
 8002764:	2304      	movs	r3, #4
 8002766:	229e      	movs	r2, #158	; 0x9e
 8002768:	0052      	lsls	r2, r2, #1
 800276a:	2108      	movs	r1, #8
 800276c:	1852      	adds	r2, r2, r1
 800276e:	19d2      	adds	r2, r2, r7
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e039      	b.n	80027e8 <main+0x230>
 8002774:	08009c88 	.word	0x08009c88
 8002778:	2000025c 	.word	0x2000025c
 800277c:	50000400 	.word	0x50000400
 8002780:	50000800 	.word	0x50000800
 8002784:	200003b4 	.word	0x200003b4
 8002788:	08009dcc 	.word	0x08009dcc
 800278c:	200001f8 	.word	0x200001f8
 8002790:	200003b8 	.word	0x200003b8
 8002794:	08009c9c 	.word	0x08009c9c
 8002798:	08009cb4 	.word	0x08009cb4
 800279c:	200002f4 	.word	0x200002f4
 80027a0:	08009cbc 	.word	0x08009cbc
			 sprintf(buf_tx2, "%02X ", rx_data1[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 80027a4:	4ade      	ldr	r2, [pc, #888]	; (8002b20 <main+0x568>)
 80027a6:	249e      	movs	r4, #158	; 0x9e
 80027a8:	0064      	lsls	r4, r4, #1
 80027aa:	2508      	movs	r5, #8
 80027ac:	1963      	adds	r3, r4, r5
 80027ae:	19db      	adds	r3, r3, r7
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	18d3      	adds	r3, r2, r3
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	001a      	movs	r2, r3
 80027b8:	49da      	ldr	r1, [pc, #872]	; (8002b24 <main+0x56c>)
 80027ba:	4bdb      	ldr	r3, [pc, #876]	; (8002b28 <main+0x570>)
 80027bc:	0018      	movs	r0, r3
 80027be:	f005 f85d 	bl	800787c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx2, strlen(buf_tx2), HAL_MAX_DELAY); // Transmitir el byte por UART
 80027c2:	4bd9      	ldr	r3, [pc, #868]	; (8002b28 <main+0x570>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fd fc9d 	bl	8000104 <strlen>
 80027ca:	0003      	movs	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	2301      	movs	r3, #1
 80027d0:	425b      	negs	r3, r3
 80027d2:	49d5      	ldr	r1, [pc, #852]	; (8002b28 <main+0x570>)
 80027d4:	48d5      	ldr	r0, [pc, #852]	; (8002b2c <main+0x574>)
 80027d6:	f003 fbc7 	bl	8005f68 <HAL_UART_Transmit>
		 for (int i = sizeof(rx_data1) - 1; i >= 0; i--) {
 80027da:	1963      	adds	r3, r4, r5
 80027dc:	19db      	adds	r3, r3, r7
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	1962      	adds	r2, r4, r5
 80027e4:	19d2      	adds	r2, r2, r7
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	239e      	movs	r3, #158	; 0x9e
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2108      	movs	r1, #8
 80027ee:	185b      	adds	r3, r3, r1
 80027f0:	19db      	adds	r3, r3, r7
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dad5      	bge.n	80027a4 <main+0x1ec>
		 }
		 uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 80027f8:	4bc9      	ldr	r3, [pc, #804]	; (8002b20 <main+0x568>)
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	061a      	lsls	r2, r3, #24
								  (uint32_t)rx_data1[2] << 16 |
 80027fe:	4bc8      	ldr	r3, [pc, #800]	; (8002b20 <main+0x568>)
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	041b      	lsls	r3, r3, #16
		 uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 8002804:	431a      	orrs	r2, r3
								  (uint32_t)rx_data1[1] << 8 |
 8002806:	4bc6      	ldr	r3, [pc, #792]	; (8002b20 <main+0x568>)
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	021b      	lsls	r3, r3, #8
								  (uint32_t)rx_data1[2] << 16 |
 800280c:	4313      	orrs	r3, r2
								  (uint32_t)rx_data1[0];
 800280e:	4ac4      	ldr	r2, [pc, #784]	; (8002b20 <main+0x568>)
 8002810:	7812      	ldrb	r2, [r2, #0]
		 uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 8002812:	4313      	orrs	r3, r2
 8002814:	26b0      	movs	r6, #176	; 0xb0
 8002816:	1872      	adds	r2, r6, r1
 8002818:	19d2      	adds	r2, r2, r7
 800281a:	6013      	str	r3, [r2, #0]


	    // Bytes [14:0] para calcular Vrms
		 uint32_t vrms_bytes = received_data & 0x7FFF; // Máscara para obtener los primeros 15 bits
 800281c:	000a      	movs	r2, r1
 800281e:	1873      	adds	r3, r6, r1
 8002820:	19db      	adds	r3, r3, r7
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	045b      	lsls	r3, r3, #17
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	21ac      	movs	r1, #172	; 0xac
 800282a:	0015      	movs	r5, r2
 800282c:	194a      	adds	r2, r1, r5
 800282e:	19d2      	adds	r2, r2, r7
 8002830:	6013      	str	r3, [r2, #0]
		 // Calcular Vrms según la ecuación dada
		 long long int potencia = pow(2,15);
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	0212      	lsls	r2, r2, #8
 8002836:	2300      	movs	r3, #0
 8002838:	20a0      	movs	r0, #160	; 0xa0
 800283a:	1940      	adds	r0, r0, r5
 800283c:	19c4      	adds	r4, r0, r7
 800283e:	6022      	str	r2, [r4, #0]
 8002840:	6063      	str	r3, [r4, #4]
		 float vrms_decimal = ((float)vrms_bytes * 1.2 * (1 + 810000.0 / 470)) / (0.875 * 2 * potencia);
 8002842:	194a      	adds	r2, r1, r5
 8002844:	19d3      	adds	r3, r2, r7
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f7fd ff2e 	bl	80006a8 <__aeabi_ui2f>
 800284c:	1c03      	adds	r3, r0, #0
 800284e:	1c18      	adds	r0, r3, #0
 8002850:	f7ff fdba 	bl	80023c8 <__aeabi_f2d>
 8002854:	4ab6      	ldr	r2, [pc, #728]	; (8002b30 <main+0x578>)
 8002856:	4bb7      	ldr	r3, [pc, #732]	; (8002b34 <main+0x57c>)
 8002858:	f7fe fec8 	bl	80015ec <__aeabi_dmul>
 800285c:	0002      	movs	r2, r0
 800285e:	000b      	movs	r3, r1
 8002860:	0010      	movs	r0, r2
 8002862:	0019      	movs	r1, r3
 8002864:	4ab4      	ldr	r2, [pc, #720]	; (8002b38 <main+0x580>)
 8002866:	4bb5      	ldr	r3, [pc, #724]	; (8002b3c <main+0x584>)
 8002868:	f7fe fec0 	bl	80015ec <__aeabi_dmul>
 800286c:	0002      	movs	r2, r0
 800286e:	000b      	movs	r3, r1
 8002870:	0014      	movs	r4, r2
 8002872:	001d      	movs	r5, r3
 8002874:	20a0      	movs	r0, #160	; 0xa0
 8002876:	2308      	movs	r3, #8
 8002878:	18c2      	adds	r2, r0, r3
 800287a:	19d3      	adds	r3, r2, r7
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	f7fd fe30 	bl	80004e4 <__aeabi_l2d>
 8002884:	2200      	movs	r2, #0
 8002886:	4bae      	ldr	r3, [pc, #696]	; (8002b40 <main+0x588>)
 8002888:	f7fe feb0 	bl	80015ec <__aeabi_dmul>
 800288c:	0002      	movs	r2, r0
 800288e:	000b      	movs	r3, r1
 8002890:	0020      	movs	r0, r4
 8002892:	0029      	movs	r1, r5
 8002894:	f7fe fab0 	bl	8000df8 <__aeabi_ddiv>
 8002898:	0002      	movs	r2, r0
 800289a:	000b      	movs	r3, r1
 800289c:	0010      	movs	r0, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	f7ff fdda 	bl	8002458 <__aeabi_d2f>
 80028a4:	1c03      	adds	r3, r0, #0
 80028a6:	229c      	movs	r2, #156	; 0x9c
 80028a8:	2008      	movs	r0, #8
 80028aa:	1812      	adds	r2, r2, r0
 80028ac:	19d1      	adds	r1, r2, r7
 80028ae:	600b      	str	r3, [r1, #0]

			 // Obtener los bytes [31:15] para calcular Irms
		 uint32_t irms_bytes = received_data >> 15;
 80028b0:	0002      	movs	r2, r0
 80028b2:	18b3      	adds	r3, r6, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0bdb      	lsrs	r3, r3, #15
 80028ba:	2198      	movs	r1, #152	; 0x98
 80028bc:	0014      	movs	r4, r2
 80028be:	190a      	adds	r2, r1, r4
 80028c0:	19d0      	adds	r0, r2, r7
 80028c2:	6003      	str	r3, [r0, #0]
		 long long int potencia2 = pow(2,17);
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0292      	lsls	r2, r2, #10
 80028c8:	2300      	movs	r3, #0
 80028ca:	2690      	movs	r6, #144	; 0x90
 80028cc:	1930      	adds	r0, r6, r4
 80028ce:	19c0      	adds	r0, r0, r7
 80028d0:	6002      	str	r2, [r0, #0]
 80028d2:	6043      	str	r3, [r0, #4]
		 float irms_decimal = ((float)irms_bytes * 1.2)/ (0.875*16* potencia2 *Ks*1);
 80028d4:	190a      	adds	r2, r1, r4
 80028d6:	19d3      	adds	r3, r2, r7
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f7fd fee5 	bl	80006a8 <__aeabi_ui2f>
 80028de:	1c03      	adds	r3, r0, #0
 80028e0:	1c18      	adds	r0, r3, #0
 80028e2:	f7ff fd71 	bl	80023c8 <__aeabi_f2d>
 80028e6:	4a92      	ldr	r2, [pc, #584]	; (8002b30 <main+0x578>)
 80028e8:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <main+0x57c>)
 80028ea:	f7fe fe7f 	bl	80015ec <__aeabi_dmul>
 80028ee:	0002      	movs	r2, r0
 80028f0:	000b      	movs	r3, r1
 80028f2:	0014      	movs	r4, r2
 80028f4:	001d      	movs	r5, r3
 80028f6:	2308      	movs	r3, #8
 80028f8:	18f2      	adds	r2, r6, r3
 80028fa:	19d3      	adds	r3, r2, r7
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	f7fd fdf0 	bl	80004e4 <__aeabi_l2d>
 8002904:	2200      	movs	r2, #0
 8002906:	4b8f      	ldr	r3, [pc, #572]	; (8002b44 <main+0x58c>)
 8002908:	f7fe fe70 	bl	80015ec <__aeabi_dmul>
 800290c:	0002      	movs	r2, r0
 800290e:	000b      	movs	r3, r1
 8002910:	0010      	movs	r0, r2
 8002912:	0019      	movs	r1, r3
 8002914:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <main+0x590>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f7fe fe67 	bl	80015ec <__aeabi_dmul>
 800291e:	0002      	movs	r2, r0
 8002920:	000b      	movs	r3, r1
 8002922:	0020      	movs	r0, r4
 8002924:	0029      	movs	r1, r5
 8002926:	f7fe fa67 	bl	8000df8 <__aeabi_ddiv>
 800292a:	0002      	movs	r2, r0
 800292c:	000b      	movs	r3, r1
 800292e:	0010      	movs	r0, r2
 8002930:	0019      	movs	r1, r3
 8002932:	f7ff fd91 	bl	8002458 <__aeabi_d2f>
 8002936:	1c03      	adds	r3, r0, #0
 8002938:	258c      	movs	r5, #140	; 0x8c
 800293a:	2408      	movs	r4, #8
 800293c:	192a      	adds	r2, r5, r4
 800293e:	19d1      	adds	r1, r2, r7
 8002940:	600b      	str	r3, [r1, #0]




		 uint8_t calculated_crc = calculate_crc(rx_data1, 4);
 8002942:	268b      	movs	r6, #139	; 0x8b
 8002944:	1933      	adds	r3, r6, r4
 8002946:	19dc      	adds	r4, r3, r7
 8002948:	4b75      	ldr	r3, [pc, #468]	; (8002b20 <main+0x568>)
 800294a:	2104      	movs	r1, #4
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fd5d 	bl	800340c <calculate_crc>
 8002952:	0003      	movs	r3, r0
 8002954:	7023      	strb	r3, [r4, #0]
		 if (calculated_crc == rx_data1[4]) {
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <main+0x568>)
 8002958:	791b      	ldrb	r3, [r3, #4]
 800295a:	2408      	movs	r4, #8
 800295c:	1932      	adds	r2, r6, r4
 800295e:	19d2      	adds	r2, r2, r7
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d142      	bne.n	80029ec <main+0x434>
			 char texto3[50];
			 char texto4[50];

			 sprintf(buf_tx3, "%.2f",(float)vrms_decimal);
 8002966:	229c      	movs	r2, #156	; 0x9c
 8002968:	1913      	adds	r3, r2, r4
 800296a:	19db      	adds	r3, r3, r7
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f7ff fd2b 	bl	80023c8 <__aeabi_f2d>
 8002972:	0002      	movs	r2, r0
 8002974:	000b      	movs	r3, r1
 8002976:	4975      	ldr	r1, [pc, #468]	; (8002b4c <main+0x594>)
 8002978:	4875      	ldr	r0, [pc, #468]	; (8002b50 <main+0x598>)
 800297a:	f004 ff7f 	bl	800787c <siprintf>
			 sprintf(texto3, "-> Vrms (%s) ", buf_tx3);
 800297e:	4a74      	ldr	r2, [pc, #464]	; (8002b50 <main+0x598>)
 8002980:	4974      	ldr	r1, [pc, #464]	; (8002b54 <main+0x59c>)
 8002982:	260c      	movs	r6, #12
 8002984:	19bb      	adds	r3, r7, r6
 8002986:	0018      	movs	r0, r3
 8002988:	f004 ff78 	bl	800787c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto3, strlen(texto3), HAL_MAX_DELAY);
 800298c:	19bb      	adds	r3, r7, r6
 800298e:	0018      	movs	r0, r3
 8002990:	f7fd fbb8 	bl	8000104 <strlen>
 8002994:	0003      	movs	r3, r0
 8002996:	b29a      	uxth	r2, r3
 8002998:	2301      	movs	r3, #1
 800299a:	425b      	negs	r3, r3
 800299c:	19b9      	adds	r1, r7, r6
 800299e:	4863      	ldr	r0, [pc, #396]	; (8002b2c <main+0x574>)
 80029a0:	f003 fae2 	bl	8005f68 <HAL_UART_Transmit>

			 sprintf(buf_tx4, "%.5f",(float)irms_decimal);
 80029a4:	0026      	movs	r6, r4
 80029a6:	192b      	adds	r3, r5, r4
 80029a8:	19db      	adds	r3, r3, r7
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f7ff fd0c 	bl	80023c8 <__aeabi_f2d>
 80029b0:	0002      	movs	r2, r0
 80029b2:	000b      	movs	r3, r1
 80029b4:	4968      	ldr	r1, [pc, #416]	; (8002b58 <main+0x5a0>)
 80029b6:	4869      	ldr	r0, [pc, #420]	; (8002b5c <main+0x5a4>)
 80029b8:	f004 ff60 	bl	800787c <siprintf>
			 sprintf(texto4, " Irms (%s) \n", buf_tx4);
 80029bc:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <main+0x5a4>)
 80029be:	4968      	ldr	r1, [pc, #416]	; (8002b60 <main+0x5a8>)
 80029c0:	2438      	movs	r4, #56	; 0x38
 80029c2:	0035      	movs	r5, r6
 80029c4:	1963      	adds	r3, r4, r5
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	0018      	movs	r0, r3
 80029ca:	f004 ff57 	bl	800787c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto4, strlen(texto4), HAL_MAX_DELAY);
 80029ce:	1963      	adds	r3, r4, r5
 80029d0:	19db      	adds	r3, r3, r7
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fd fb96 	bl	8000104 <strlen>
 80029d8:	0003      	movs	r3, r0
 80029da:	b29a      	uxth	r2, r3
 80029dc:	2301      	movs	r3, #1
 80029de:	425b      	negs	r3, r3
 80029e0:	1961      	adds	r1, r4, r5
 80029e2:	19c9      	adds	r1, r1, r7
 80029e4:	4851      	ldr	r0, [pc, #324]	; (8002b2c <main+0x574>)
 80029e6:	f003 fabf 	bl	8005f68 <HAL_UART_Transmit>
 80029ea:	e015      	b.n	8002a18 <main+0x460>

		 } else {
			 char *texto5 = "->Incorrect CRC\r\n	";
 80029ec:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <main+0x5ac>)
 80029ee:	2484      	movs	r4, #132	; 0x84
 80029f0:	2508      	movs	r5, #8
 80029f2:	1962      	adds	r2, r4, r5
 80029f4:	19d2      	adds	r2, r2, r7
 80029f6:	6013      	str	r3, [r2, #0]
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto5, strlen(texto5), HAL_MAX_DELAY);
 80029f8:	1963      	adds	r3, r4, r5
 80029fa:	19db      	adds	r3, r3, r7
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fd fb80 	bl	8000104 <strlen>
 8002a04:	0003      	movs	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2301      	movs	r3, #1
 8002a0a:	425b      	negs	r3, r3
 8002a0c:	1961      	adds	r1, r4, r5
 8002a0e:	19c9      	adds	r1, r1, r7
 8002a10:	6809      	ldr	r1, [r1, #0]
 8002a12:	4846      	ldr	r0, [pc, #280]	; (8002b2c <main+0x574>)
 8002a14:	f003 faa8 	bl	8005f68 <HAL_UART_Transmit>
		 }


		 calculated_crc = 0;
 8002a18:	238b      	movs	r3, #139	; 0x8b
 8002a1a:	2408      	movs	r4, #8
 8002a1c:	191b      	adds	r3, r3, r4
 8002a1e:	19db      	adds	r3, r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		 memset(rx_data1, 0, sizeof(rx_data1));
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <main+0x568>)
 8002a26:	2205      	movs	r2, #5
 8002a28:	2100      	movs	r1, #0
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f004 ff92 	bl	8007954 <memset>
		 /* Se cierra la comunicacion SCS --> up */
		 HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a30:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <main+0x5b0>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	2101      	movs	r1, #1
 8002a36:	0018      	movs	r0, r3
 8002a38:	f001 fb71 	bl	800411e <HAL_GPIO_WritePin>
		 delay_ms(700);
 8002a3c:	23af      	movs	r3, #175	; 0xaf
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 fc9b 	bl	800337c <delay_ms>
	  for(int j=0;j<3;j++){
 8002a46:	22a2      	movs	r2, #162	; 0xa2
 8002a48:	0052      	lsls	r2, r2, #1
 8002a4a:	1913      	adds	r3, r2, r4
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	1912      	adds	r2, r2, r4
 8002a54:	19d2      	adds	r2, r2, r7
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	23a2      	movs	r3, #162	; 0xa2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	185b      	adds	r3, r3, r1
 8002a60:	19db      	adds	r3, r3, r7
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	dc00      	bgt.n	8002a6a <main+0x4b2>
 8002a68:	e5e5      	b.n	8002636 <main+0x7e>





	  for(int p=0;p<3;p++){
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	229c      	movs	r2, #156	; 0x9c
 8002a6e:	0052      	lsls	r2, r2, #1
 8002a70:	1852      	adds	r2, r2, r1
 8002a72:	19d2      	adds	r2, r2, r7
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e1e6      	b.n	8002e46 <main+0x88e>
		  reinicioRegistros();
 8002a78:	f000 fc30 	bl	80032dc <reinicioRegistros>
		  	/*CS Inicio de comunicacion */
		  	  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <main+0x5b0>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2101      	movs	r1, #1
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 fb4b 	bl	800411e <HAL_GPIO_WritePin>

			   //LED ON
			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8002a88:	23a0      	movs	r3, #160	; 0xa0
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2120      	movs	r1, #32
 8002a90:	0018      	movs	r0, r3
 8002a92:	f001 fb44 	bl	800411e <HAL_GPIO_WritePin>

			 /*------------------- Solicitud direccion 0x5C Fila 46  PH1 ActivePower [28:0]-------------*/
			 uint8_t data2[5] = {0x5C, 0xFF, 0xFF, 0xFF, 0x00};
 8002a96:	2474      	movs	r4, #116	; 0x74
 8002a98:	2508      	movs	r5, #8
 8002a9a:	1963      	adds	r3, r4, r5
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <main+0x5b4>)
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	6019      	str	r1, [r3, #0]
 8002aa4:	7912      	ldrb	r2, [r2, #4]
 8002aa6:	711a      	strb	r2, [r3, #4]
			 		 /* Calculate CRC */
				 	 data2[4] = calculate_crc(data2, 4);
 8002aa8:	1963      	adds	r3, r4, r5
 8002aaa:	19db      	adds	r3, r3, r7
 8002aac:	2104      	movs	r1, #4
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fcac 	bl	800340c <calculate_crc>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	0021      	movs	r1, r4
 8002aba:	194b      	adds	r3, r1, r5
 8002abc:	19db      	adds	r3, r3, r7
 8002abe:	711a      	strb	r2, [r3, #4]
			 		 /* Transmit data + CRC */
				 HAL_SPI_Transmit(&hspi1, data2, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	194a      	adds	r2, r1, r5
 8002ac6:	19d1      	adds	r1, r2, r7
 8002ac8:	4829      	ldr	r0, [pc, #164]	; (8002b70 <main+0x5b8>)
 8002aca:	2205      	movs	r2, #5
 8002acc:	f002 fb8e 	bl	80051ec <HAL_SPI_Transmit>
				 /*--------------------Recepcion de datos de la direccion 5C (32-bit data + CRC)-------------- */
				 HAL_SPI_Receive(&hspi1, rx_data2, sizeof(rx_data2), HAL_MAX_DELAY);
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	4927      	ldr	r1, [pc, #156]	; (8002b74 <main+0x5bc>)
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <main+0x5b8>)
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f002 fce7 	bl	80054ac <HAL_SPI_Receive>

				if(inicio == 1){
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <main+0x5c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d000      	beq.n	8002ae8 <main+0x530>
 8002ae6:	e08c      	b.n	8002c02 <main+0x64a>
						 char *texto6 = "Trama enviada por SPI \n";
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <main+0x5c4>)
 8002aea:	24e8      	movs	r4, #232	; 0xe8
 8002aec:	1962      	adds	r2, r4, r5
 8002aee:	19d2      	adds	r2, r2, r7
 8002af0:	6013      	str	r3, [r2, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)texto6, strlen(texto6), HAL_MAX_DELAY);
 8002af2:	1963      	adds	r3, r4, r5
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fd fb03 	bl	8000104 <strlen>
 8002afe:	0003      	movs	r3, r0
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	2301      	movs	r3, #1
 8002b04:	425b      	negs	r3, r3
 8002b06:	1961      	adds	r1, r4, r5
 8002b08:	19c9      	adds	r1, r1, r7
 8002b0a:	6809      	ldr	r1, [r1, #0]
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <main+0x574>)
 8002b0e:	f003 fa2b 	bl	8005f68 <HAL_UART_Transmit>
						 // Enviar datos por UART en formato hexadecimal
						 for (int i = 0; i < sizeof(data2); i++) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	229a      	movs	r2, #154	; 0x9a
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	1952      	adds	r2, r2, r5
 8002b1a:	19d2      	adds	r2, r2, r7
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e053      	b.n	8002bc8 <main+0x610>
 8002b20:	200003b8 	.word	0x200003b8
 8002b24:	08009cb4 	.word	0x08009cb4
 8002b28:	20000308 	.word	0x20000308
 8002b2c:	2000025c 	.word	0x2000025c
 8002b30:	33333333 	.word	0x33333333
 8002b34:	3ff33333 	.word	0x3ff33333
 8002b38:	f51b3bea 	.word	0xf51b3bea
 8002b3c:	409af19d 	.word	0x409af19d
 8002b40:	3ffc0000 	.word	0x3ffc0000
 8002b44:	402c0000 	.word	0x402c0000
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	08009ce8 	.word	0x08009ce8
 8002b50:	20000314 	.word	0x20000314
 8002b54:	08009cf0 	.word	0x08009cf0
 8002b58:	08009d00 	.word	0x08009d00
 8002b5c:	20000328 	.word	0x20000328
 8002b60:	08009d08 	.word	0x08009d08
 8002b64:	08009d18 	.word	0x08009d18
 8002b68:	50000400 	.word	0x50000400
 8002b6c:	08009dd4 	.word	0x08009dd4
 8002b70:	200001f8 	.word	0x200001f8
 8002b74:	200003c0 	.word	0x200003c0
 8002b78:	200003b4 	.word	0x200003b4
 8002b7c:	08009c9c 	.word	0x08009c9c
							 sprintf(buf_tx5, "%02X ", data2[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002b80:	2374      	movs	r3, #116	; 0x74
 8002b82:	2508      	movs	r5, #8
 8002b84:	195b      	adds	r3, r3, r5
 8002b86:	19da      	adds	r2, r3, r7
 8002b88:	249a      	movs	r4, #154	; 0x9a
 8002b8a:	0064      	lsls	r4, r4, #1
 8002b8c:	1963      	adds	r3, r4, r5
 8002b8e:	19db      	adds	r3, r3, r7
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	001a      	movs	r2, r3
 8002b98:	49dc      	ldr	r1, [pc, #880]	; (8002f0c <main+0x954>)
 8002b9a:	4bdd      	ldr	r3, [pc, #884]	; (8002f10 <main+0x958>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f004 fe6d 	bl	800787c <siprintf>
							 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx5, strlen(buf_tx5), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002ba2:	4bdb      	ldr	r3, [pc, #876]	; (8002f10 <main+0x958>)
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fd faad 	bl	8000104 <strlen>
 8002baa:	0003      	movs	r3, r0
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	2301      	movs	r3, #1
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	49d7      	ldr	r1, [pc, #860]	; (8002f10 <main+0x958>)
 8002bb4:	48d7      	ldr	r0, [pc, #860]	; (8002f14 <main+0x95c>)
 8002bb6:	f003 f9d7 	bl	8005f68 <HAL_UART_Transmit>
						 for (int i = 0; i < sizeof(data2); i++) {
 8002bba:	1963      	adds	r3, r4, r5
 8002bbc:	19db      	adds	r3, r3, r7
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	1962      	adds	r2, r4, r5
 8002bc4:	19d2      	adds	r2, r2, r7
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	239a      	movs	r3, #154	; 0x9a
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2508      	movs	r5, #8
 8002bce:	195b      	adds	r3, r3, r5
 8002bd0:	19db      	adds	r3, r3, r7
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d9d3      	bls.n	8002b80 <main+0x5c8>
						 }
						 char *texto6_1 = "\n Potecia Activa direccion registro 0x5C \n";
 8002bd8:	4bcf      	ldr	r3, [pc, #828]	; (8002f18 <main+0x960>)
 8002bda:	24e4      	movs	r4, #228	; 0xe4
 8002bdc:	1962      	adds	r2, r4, r5
 8002bde:	19d2      	adds	r2, r2, r7
 8002be0:	6013      	str	r3, [r2, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)texto6_1, strlen(texto6_1), HAL_MAX_DELAY);
 8002be2:	1963      	adds	r3, r4, r5
 8002be4:	19db      	adds	r3, r3, r7
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fd fa8b 	bl	8000104 <strlen>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	1961      	adds	r1, r4, r5
 8002bf8:	19c9      	adds	r1, r1, r7
 8002bfa:	6809      	ldr	r1, [r1, #0]
 8002bfc:	48c5      	ldr	r0, [pc, #788]	; (8002f14 <main+0x95c>)
 8002bfe:	f003 f9b3 	bl	8005f68 <HAL_UART_Transmit>
						}

				for (int i = sizeof(rx_data2) - 1; i >= 0; i--) {
 8002c02:	2304      	movs	r3, #4
 8002c04:	2298      	movs	r2, #152	; 0x98
 8002c06:	0052      	lsls	r2, r2, #1
 8002c08:	2108      	movs	r1, #8
 8002c0a:	1852      	adds	r2, r2, r1
 8002c0c:	19d2      	adds	r2, r2, r7
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e021      	b.n	8002c56 <main+0x69e>
					 sprintf(buf_tx6, "%02X ", rx_data2[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002c12:	4ac2      	ldr	r2, [pc, #776]	; (8002f1c <main+0x964>)
 8002c14:	2498      	movs	r4, #152	; 0x98
 8002c16:	0064      	lsls	r4, r4, #1
 8002c18:	2508      	movs	r5, #8
 8002c1a:	1963      	adds	r3, r4, r5
 8002c1c:	19db      	adds	r3, r3, r7
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	001a      	movs	r2, r3
 8002c26:	49b9      	ldr	r1, [pc, #740]	; (8002f0c <main+0x954>)
 8002c28:	4bbd      	ldr	r3, [pc, #756]	; (8002f20 <main+0x968>)
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f004 fe26 	bl	800787c <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx6, strlen(buf_tx6), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002c30:	4bbb      	ldr	r3, [pc, #748]	; (8002f20 <main+0x968>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fa66 	bl	8000104 <strlen>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	425b      	negs	r3, r3
 8002c40:	49b7      	ldr	r1, [pc, #732]	; (8002f20 <main+0x968>)
 8002c42:	48b4      	ldr	r0, [pc, #720]	; (8002f14 <main+0x95c>)
 8002c44:	f003 f990 	bl	8005f68 <HAL_UART_Transmit>
				for (int i = sizeof(rx_data2) - 1; i >= 0; i--) {
 8002c48:	1963      	adds	r3, r4, r5
 8002c4a:	19db      	adds	r3, r3, r7
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	1962      	adds	r2, r4, r5
 8002c52:	19d2      	adds	r2, r2, r7
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	2398      	movs	r3, #152	; 0x98
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	185b      	adds	r3, r3, r1
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	dad5      	bge.n	8002c12 <main+0x65a>
				 	 }
						uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 8002c66:	4bad      	ldr	r3, [pc, #692]	; (8002f1c <main+0x964>)
 8002c68:	78db      	ldrb	r3, [r3, #3]
 8002c6a:	061a      	lsls	r2, r3, #24
													  (uint32_t)rx_data2[2] << 16 |
 8002c6c:	4bab      	ldr	r3, [pc, #684]	; (8002f1c <main+0x964>)
 8002c6e:	789b      	ldrb	r3, [r3, #2]
 8002c70:	041b      	lsls	r3, r3, #16
						uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 8002c72:	431a      	orrs	r2, r3
													  (uint32_t)rx_data2[1] << 8 |
 8002c74:	4ba9      	ldr	r3, [pc, #676]	; (8002f1c <main+0x964>)
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	021b      	lsls	r3, r3, #8
													  (uint32_t)rx_data2[2] << 16 |
 8002c7a:	4313      	orrs	r3, r2
													  (uint32_t)rx_data2[0];
 8002c7c:	4aa7      	ldr	r2, [pc, #668]	; (8002f1c <main+0x964>)
 8002c7e:	7812      	ldrb	r2, [r2, #0]
						uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 8002c80:	4313      	orrs	r3, r2
 8002c82:	22e0      	movs	r2, #224	; 0xe0
 8002c84:	0008      	movs	r0, r1
 8002c86:	1811      	adds	r1, r2, r0
 8002c88:	19c9      	adds	r1, r1, r7
 8002c8a:	600b      	str	r3, [r1, #0]

					 // Bytes [28:0] para calcular LSBp
						 uint32_t LSBp_bytes = received_data_PA & 0x0FFFFFFF; // Esta máscara tiene los primeros 28 bits
 8002c8c:	1813      	adds	r3, r2, r0
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	21dc      	movs	r1, #220	; 0xdc
 8002c98:	0005      	movs	r5, r0
 8002c9a:	194a      	adds	r2, r1, r5
 8002c9c:	19d2      	adds	r2, r2, r7
 8002c9e:	6013      	str	r3, [r2, #0]
						 // Calcular LSBp según la ecuación dada
					 long long int potencia2 = pow(2,28);
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	0552      	lsls	r2, r2, #21
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	26d0      	movs	r6, #208	; 0xd0
 8002ca8:	1970      	adds	r0, r6, r5
 8002caa:	19c0      	adds	r0, r0, r7
 8002cac:	6002      	str	r2, [r0, #0]
 8002cae:	6043      	str	r3, [r0, #4]
					 double Vref2 = pow(1.2,2);
 8002cb0:	4a9c      	ldr	r2, [pc, #624]	; (8002f24 <main+0x96c>)
 8002cb2:	4b9d      	ldr	r3, [pc, #628]	; (8002f28 <main+0x970>)
 8002cb4:	24c8      	movs	r4, #200	; 0xc8
 8002cb6:	1960      	adds	r0, r4, r5
 8002cb8:	19c0      	adds	r0, r0, r7
 8002cba:	6002      	str	r2, [r0, #0]
 8002cbc:	6043      	str	r3, [r0, #4]
					 float LSBp_decimal = ((float)LSBp_bytes * Vref2 * (1 + 810000.0 / 470)) / (1*2*16*Ks*0.875*0.875* potencia2);
 8002cbe:	194b      	adds	r3, r1, r5
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f7fd fcf0 	bl	80006a8 <__aeabi_ui2f>
 8002cc8:	1c03      	adds	r3, r0, #0
 8002cca:	1c18      	adds	r0, r3, #0
 8002ccc:	f7ff fb7c 	bl	80023c8 <__aeabi_f2d>
 8002cd0:	1963      	adds	r3, r4, r5
 8002cd2:	19db      	adds	r3, r3, r7
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f7fe fc88 	bl	80015ec <__aeabi_dmul>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	000b      	movs	r3, r1
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	4a91      	ldr	r2, [pc, #580]	; (8002f2c <main+0x974>)
 8002ce6:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <main+0x978>)
 8002ce8:	f7fe fc80 	bl	80015ec <__aeabi_dmul>
 8002cec:	0002      	movs	r2, r0
 8002cee:	000b      	movs	r3, r1
 8002cf0:	0014      	movs	r4, r2
 8002cf2:	001d      	movs	r5, r3
 8002cf4:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <main+0x97c>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <main+0x980>)
 8002cfe:	f7fe fc75 	bl	80015ec <__aeabi_dmul>
 8002d02:	0002      	movs	r2, r0
 8002d04:	000b      	movs	r3, r1
 8002d06:	0010      	movs	r0, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <main+0x984>)
 8002d0e:	f7fe fc6d 	bl	80015ec <__aeabi_dmul>
 8002d12:	0002      	movs	r2, r0
 8002d14:	000b      	movs	r3, r1
 8002d16:	0010      	movs	r0, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4b87      	ldr	r3, [pc, #540]	; (8002f3c <main+0x984>)
 8002d1e:	f7fe fc65 	bl	80015ec <__aeabi_dmul>
 8002d22:	0002      	movs	r2, r0
 8002d24:	000b      	movs	r3, r1
 8002d26:	603a      	str	r2, [r7, #0]
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	1873      	adds	r3, r6, r1
 8002d2e:	19db      	adds	r3, r3, r7
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	f7fd fbd6 	bl	80004e4 <__aeabi_l2d>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f7fe fc54 	bl	80015ec <__aeabi_dmul>
 8002d44:	0002      	movs	r2, r0
 8002d46:	000b      	movs	r3, r1
 8002d48:	0020      	movs	r0, r4
 8002d4a:	0029      	movs	r1, r5
 8002d4c:	f7fe f854 	bl	8000df8 <__aeabi_ddiv>
 8002d50:	0002      	movs	r2, r0
 8002d52:	000b      	movs	r3, r1
 8002d54:	0010      	movs	r0, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	f7ff fb7e 	bl	8002458 <__aeabi_d2f>
 8002d5c:	1c03      	adds	r3, r0, #0
 8002d5e:	25c4      	movs	r5, #196	; 0xc4
 8002d60:	2108      	movs	r1, #8
 8002d62:	186a      	adds	r2, r5, r1
 8002d64:	19d2      	adds	r2, r2, r7
 8002d66:	6013      	str	r3, [r2, #0]

					 uint8_t calculated_crc2 = calculate_crc(rx_data2, 4);
 8002d68:	26c3      	movs	r6, #195	; 0xc3
 8002d6a:	1873      	adds	r3, r6, r1
 8002d6c:	19dc      	adds	r4, r3, r7
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <main+0x964>)
 8002d70:	2104      	movs	r1, #4
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 fb4a 	bl	800340c <calculate_crc>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	7023      	strb	r3, [r4, #0]
					 if (calculated_crc2 == rx_data2[4]) {
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <main+0x964>)
 8002d7e:	791b      	ldrb	r3, [r3, #4]
 8002d80:	2108      	movs	r1, #8
 8002d82:	1872      	adds	r2, r6, r1
 8002d84:	19d2      	adds	r2, r2, r7
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d123      	bne.n	8002dd4 <main+0x81c>
						 char texto7[50];
						 //char texto7_1[50];

						 sprintf(buf_tx7, "%.5f",(float)LSBp_decimal);
 8002d8c:	000e      	movs	r6, r1
 8002d8e:	186b      	adds	r3, r5, r1
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	f7ff fb18 	bl	80023c8 <__aeabi_f2d>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	000b      	movs	r3, r1
 8002d9c:	4968      	ldr	r1, [pc, #416]	; (8002f40 <main+0x988>)
 8002d9e:	4869      	ldr	r0, [pc, #420]	; (8002f44 <main+0x98c>)
 8002da0:	f004 fd6c 	bl	800787c <siprintf>
						 sprintf(texto7, "-> LSBp (%s)[W] \n ", buf_tx7);
 8002da4:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <main+0x98c>)
 8002da6:	4968      	ldr	r1, [pc, #416]	; (8002f48 <main+0x990>)
 8002da8:	2438      	movs	r4, #56	; 0x38
 8002daa:	0035      	movs	r5, r6
 8002dac:	1963      	adds	r3, r4, r5
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	0018      	movs	r0, r3
 8002db2:	f004 fd63 	bl	800787c <siprintf>
						 HAL_UART_Transmit(&huart2, (uint8_t*)texto7, strlen(texto7), HAL_MAX_DELAY);
 8002db6:	1963      	adds	r3, r4, r5
 8002db8:	19db      	adds	r3, r3, r7
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fd f9a2 	bl	8000104 <strlen>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	1961      	adds	r1, r4, r5
 8002dca:	19c9      	adds	r1, r1, r7
 8002dcc:	4851      	ldr	r0, [pc, #324]	; (8002f14 <main+0x95c>)
 8002dce:	f003 f8cb 	bl	8005f68 <HAL_UART_Transmit>
 8002dd2:	e015      	b.n	8002e00 <main+0x848>
						/* sprintf(buf_tx7, "%.5f",(float)irms_decimal);
						 sprintf(texto7_1, " Irms (%s) \n", buf_tx7);
						 HAL_UART_Transmit(&huart2, (uint8_t*)texto7_1, strlen(texto7_1), HAL_MAX_DELAY);*/

					 } else {
						 char *texto8 = "->Incorrect CRC\r\n	";
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <main+0x994>)
 8002dd6:	24bc      	movs	r4, #188	; 0xbc
 8002dd8:	2508      	movs	r5, #8
 8002dda:	1962      	adds	r2, r4, r5
 8002ddc:	19d2      	adds	r2, r2, r7
 8002dde:	6013      	str	r3, [r2, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)texto8, strlen(texto8), HAL_MAX_DELAY);
 8002de0:	1963      	adds	r3, r4, r5
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd f98c 	bl	8000104 <strlen>
 8002dec:	0003      	movs	r3, r0
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	2301      	movs	r3, #1
 8002df2:	425b      	negs	r3, r3
 8002df4:	1961      	adds	r1, r4, r5
 8002df6:	19c9      	adds	r1, r1, r7
 8002df8:	6809      	ldr	r1, [r1, #0]
 8002dfa:	4846      	ldr	r0, [pc, #280]	; (8002f14 <main+0x95c>)
 8002dfc:	f003 f8b4 	bl	8005f68 <HAL_UART_Transmit>
					 }

			 calculated_crc2 = 0;
 8002e00:	23c3      	movs	r3, #195	; 0xc3
 8002e02:	2408      	movs	r4, #8
 8002e04:	191b      	adds	r3, r3, r4
 8002e06:	19db      	adds	r3, r3, r7
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
			 memset(rx_data2, 0, sizeof(rx_data1));
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <main+0x964>)
 8002e0e:	2205      	movs	r2, #5
 8002e10:	2100      	movs	r1, #0
 8002e12:	0018      	movs	r0, r3
 8002e14:	f004 fd9e 	bl	8007954 <memset>
			 /* Se cierra la comunicacion SCS --> up */
			 HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <main+0x998>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 f97d 	bl	800411e <HAL_GPIO_WritePin>
			 delay_ms(800);
 8002e24:	23c8      	movs	r3, #200	; 0xc8
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 faa7 	bl	800337c <delay_ms>
			 inicio =2;
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <main+0x99c>)
 8002e30:	2202      	movs	r2, #2
 8002e32:	601a      	str	r2, [r3, #0]
	  for(int p=0;p<3;p++){
 8002e34:	229c      	movs	r2, #156	; 0x9c
 8002e36:	0052      	lsls	r2, r2, #1
 8002e38:	1913      	adds	r3, r2, r4
 8002e3a:	19db      	adds	r3, r3, r7
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	1912      	adds	r2, r2, r4
 8002e42:	19d2      	adds	r2, r2, r7
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	239c      	movs	r3, #156	; 0x9c
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2108      	movs	r1, #8
 8002e4c:	185b      	adds	r3, r3, r1
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	dc00      	bgt.n	8002e58 <main+0x8a0>
 8002e56:	e60f      	b.n	8002a78 <main+0x4c0>
		  }//--> end for int p




	  for(int q=0;q<4;q++){
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2296      	movs	r2, #150	; 0x96
 8002e5c:	0052      	lsls	r2, r2, #1
 8002e5e:	1852      	adds	r2, r2, r1
 8002e60:	19d2      	adds	r2, r2, r7
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e1e6      	b.n	8003234 <main+0xc7c>
	  		  reinicioRegistros();
 8002e66:	f000 fa39 	bl	80032dc <reinicioRegistros>
	  		  	/*CS Inicio de comunicacion */
	  		  	  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <main+0x998>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2101      	movs	r1, #1
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 f954 	bl	800411e <HAL_GPIO_WritePin>

	  			   //LED ON
	  			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2120      	movs	r1, #32
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f001 f94d 	bl	800411e <HAL_GPIO_WritePin>

	  			 /*------------------- Solicitud direccion 0x54 Fila 42  PH1 Active Energy [31:0]-------------*/
	  			 uint8_t data3[5] = {0x54, 0xFF, 0xFF, 0xFF, 0x00};
 8002e84:	246c      	movs	r4, #108	; 0x6c
 8002e86:	2508      	movs	r5, #8
 8002e88:	1963      	adds	r3, r4, r5
 8002e8a:	19db      	adds	r3, r3, r7
 8002e8c:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <main+0x9a0>)
 8002e8e:	6811      	ldr	r1, [r2, #0]
 8002e90:	6019      	str	r1, [r3, #0]
 8002e92:	7912      	ldrb	r2, [r2, #4]
 8002e94:	711a      	strb	r2, [r3, #4]
	  			 		 /* Calculate CRC */
	  			 	 	 data3[4] = calculate_crc(data2, 4);
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <main+0x9a4>)
 8002e98:	2104      	movs	r1, #4
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 fab6 	bl	800340c <calculate_crc>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	1963      	adds	r3, r4, r5
 8002ea6:	19db      	adds	r3, r3, r7
 8002ea8:	711a      	strb	r2, [r3, #4]
	  			 		 /* Transmit data + CRC */
	  				 HAL_SPI_Transmit(&hspi1, data3, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 8002eaa:	2301      	movs	r3, #1
 8002eac:	425b      	negs	r3, r3
 8002eae:	1962      	adds	r2, r4, r5
 8002eb0:	19d1      	adds	r1, r2, r7
 8002eb2:	482b      	ldr	r0, [pc, #172]	; (8002f60 <main+0x9a8>)
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	f002 f999 	bl	80051ec <HAL_SPI_Transmit>
	  				 /*--------------------Recepcion de datos de la direccion 5C (32-bit data + CRC)-------------- */
	  				 HAL_SPI_Receive(&hspi1, rx_data3, sizeof(rx_data3), HAL_MAX_DELAY);
 8002eba:	2301      	movs	r3, #1
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	4929      	ldr	r1, [pc, #164]	; (8002f64 <main+0x9ac>)
 8002ec0:	4827      	ldr	r0, [pc, #156]	; (8002f60 <main+0x9a8>)
 8002ec2:	2205      	movs	r2, #5
 8002ec4:	f002 faf2 	bl	80054ac <HAL_SPI_Receive>

	  				if(inicio == 2){
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <main+0x99c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d000      	beq.n	8002ed2 <main+0x91a>
 8002ed0:	e08e      	b.n	8002ff0 <main+0xa38>
	  						 char *texto9 = "Trama enviada por SPI \n";
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <main+0x9b0>)
 8002ed4:	248c      	movs	r4, #140	; 0x8c
 8002ed6:	0064      	lsls	r4, r4, #1
 8002ed8:	1962      	adds	r2, r4, r5
 8002eda:	19d2      	adds	r2, r2, r7
 8002edc:	6013      	str	r3, [r2, #0]
	  						 HAL_UART_Transmit(&huart2, (uint8_t*)texto9, strlen(texto9), HAL_MAX_DELAY);
 8002ede:	1963      	adds	r3, r4, r5
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd f90d 	bl	8000104 <strlen>
 8002eea:	0003      	movs	r3, r0
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	2301      	movs	r3, #1
 8002ef0:	425b      	negs	r3, r3
 8002ef2:	1961      	adds	r1, r4, r5
 8002ef4:	19c9      	adds	r1, r1, r7
 8002ef6:	6809      	ldr	r1, [r1, #0]
 8002ef8:	4806      	ldr	r0, [pc, #24]	; (8002f14 <main+0x95c>)
 8002efa:	f003 f835 	bl	8005f68 <HAL_UART_Transmit>
	  						 // Enviar datos por UART en formato hexadecimal
	  						 for (int i = 0; i < sizeof(data3); i++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	2294      	movs	r2, #148	; 0x94
 8002f02:	0052      	lsls	r2, r2, #1
 8002f04:	1952      	adds	r2, r2, r5
 8002f06:	19d2      	adds	r2, r2, r7
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e053      	b.n	8002fb4 <main+0x9fc>
 8002f0c:	08009cb4 	.word	0x08009cb4
 8002f10:	2000033c 	.word	0x2000033c
 8002f14:	2000025c 	.word	0x2000025c
 8002f18:	08009d2c 	.word	0x08009d2c
 8002f1c:	200003c0 	.word	0x200003c0
 8002f20:	20000350 	.word	0x20000350
 8002f24:	70a3d70a 	.word	0x70a3d70a
 8002f28:	3ff70a3d 	.word	0x3ff70a3d
 8002f2c:	f51b3bea 	.word	0xf51b3bea
 8002f30:	409af19d 	.word	0x409af19d
 8002f34:	20000000 	.word	0x20000000
 8002f38:	40400000 	.word	0x40400000
 8002f3c:	3fec0000 	.word	0x3fec0000
 8002f40:	08009d00 	.word	0x08009d00
 8002f44:	20000364 	.word	0x20000364
 8002f48:	08009d58 	.word	0x08009d58
 8002f4c:	08009d18 	.word	0x08009d18
 8002f50:	50000400 	.word	0x50000400
 8002f54:	200003b4 	.word	0x200003b4
 8002f58:	08009ddc 	.word	0x08009ddc
 8002f5c:	200003d0 	.word	0x200003d0
 8002f60:	200001f8 	.word	0x200001f8
 8002f64:	200003c8 	.word	0x200003c8
 8002f68:	08009c9c 	.word	0x08009c9c
	  							 sprintf(buf_tx8, "%02X ", data3[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002f6c:	236c      	movs	r3, #108	; 0x6c
 8002f6e:	2508      	movs	r5, #8
 8002f70:	195b      	adds	r3, r3, r5
 8002f72:	19da      	adds	r2, r3, r7
 8002f74:	2494      	movs	r4, #148	; 0x94
 8002f76:	0064      	lsls	r4, r4, #1
 8002f78:	1963      	adds	r3, r4, r5
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	18d3      	adds	r3, r2, r3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	001a      	movs	r2, r3
 8002f84:	49c1      	ldr	r1, [pc, #772]	; (800328c <main+0xcd4>)
 8002f86:	4bc2      	ldr	r3, [pc, #776]	; (8003290 <main+0xcd8>)
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f004 fc77 	bl	800787c <siprintf>
	  							 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx8, strlen(buf_tx8), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002f8e:	4bc0      	ldr	r3, [pc, #768]	; (8003290 <main+0xcd8>)
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fd f8b7 	bl	8000104 <strlen>
 8002f96:	0003      	movs	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	425b      	negs	r3, r3
 8002f9e:	49bc      	ldr	r1, [pc, #752]	; (8003290 <main+0xcd8>)
 8002fa0:	48bc      	ldr	r0, [pc, #752]	; (8003294 <main+0xcdc>)
 8002fa2:	f002 ffe1 	bl	8005f68 <HAL_UART_Transmit>
	  						 for (int i = 0; i < sizeof(data3); i++) {
 8002fa6:	1963      	adds	r3, r4, r5
 8002fa8:	19db      	adds	r3, r3, r7
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	1962      	adds	r2, r4, r5
 8002fb0:	19d2      	adds	r2, r2, r7
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	2394      	movs	r3, #148	; 0x94
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2508      	movs	r5, #8
 8002fba:	195b      	adds	r3, r3, r5
 8002fbc:	19db      	adds	r3, r3, r7
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d9d3      	bls.n	8002f6c <main+0x9b4>
	  						 }
	  						 char *texto9_1 = "\n Energia Activa direccion registro 0x54 \n";
 8002fc4:	4bb4      	ldr	r3, [pc, #720]	; (8003298 <main+0xce0>)
 8002fc6:	248a      	movs	r4, #138	; 0x8a
 8002fc8:	0064      	lsls	r4, r4, #1
 8002fca:	1962      	adds	r2, r4, r5
 8002fcc:	19d2      	adds	r2, r2, r7
 8002fce:	6013      	str	r3, [r2, #0]
	  						 HAL_UART_Transmit(&huart2, (uint8_t*)texto9_1, strlen(texto9_1), HAL_MAX_DELAY);
 8002fd0:	1963      	adds	r3, r4, r5
 8002fd2:	19db      	adds	r3, r3, r7
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd f894 	bl	8000104 <strlen>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	425b      	negs	r3, r3
 8002fe4:	1961      	adds	r1, r4, r5
 8002fe6:	19c9      	adds	r1, r1, r7
 8002fe8:	6809      	ldr	r1, [r1, #0]
 8002fea:	48aa      	ldr	r0, [pc, #680]	; (8003294 <main+0xcdc>)
 8002fec:	f002 ffbc 	bl	8005f68 <HAL_UART_Transmit>
	  						}

	  				for (int i = sizeof(rx_data3) - 1; i >= 0; i--) {
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	2292      	movs	r2, #146	; 0x92
 8002ff4:	0052      	lsls	r2, r2, #1
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	1852      	adds	r2, r2, r1
 8002ffa:	19d2      	adds	r2, r2, r7
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e021      	b.n	8003044 <main+0xa8c>
	  					 sprintf(buf_tx9, "%02X ", rx_data3[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8003000:	4aa6      	ldr	r2, [pc, #664]	; (800329c <main+0xce4>)
 8003002:	2492      	movs	r4, #146	; 0x92
 8003004:	0064      	lsls	r4, r4, #1
 8003006:	2508      	movs	r5, #8
 8003008:	1963      	adds	r3, r4, r5
 800300a:	19db      	adds	r3, r3, r7
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	18d3      	adds	r3, r2, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	001a      	movs	r2, r3
 8003014:	499d      	ldr	r1, [pc, #628]	; (800328c <main+0xcd4>)
 8003016:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <main+0xce8>)
 8003018:	0018      	movs	r0, r3
 800301a:	f004 fc2f 	bl	800787c <siprintf>
	  					 HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx9, strlen(buf_tx9), HAL_MAX_DELAY); // Transmitir el byte por UART
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <main+0xce8>)
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd f86f 	bl	8000104 <strlen>
 8003026:	0003      	movs	r3, r0
 8003028:	b29a      	uxth	r2, r3
 800302a:	2301      	movs	r3, #1
 800302c:	425b      	negs	r3, r3
 800302e:	499c      	ldr	r1, [pc, #624]	; (80032a0 <main+0xce8>)
 8003030:	4898      	ldr	r0, [pc, #608]	; (8003294 <main+0xcdc>)
 8003032:	f002 ff99 	bl	8005f68 <HAL_UART_Transmit>
	  				for (int i = sizeof(rx_data3) - 1; i >= 0; i--) {
 8003036:	1963      	adds	r3, r4, r5
 8003038:	19db      	adds	r3, r3, r7
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	1962      	adds	r2, r4, r5
 8003040:	19d2      	adds	r2, r2, r7
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	2392      	movs	r3, #146	; 0x92
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2108      	movs	r1, #8
 800304a:	185b      	adds	r3, r3, r1
 800304c:	19db      	adds	r3, r3, r7
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	dad5      	bge.n	8003000 <main+0xa48>
	  				 	 }
	  						uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 8003054:	4b91      	ldr	r3, [pc, #580]	; (800329c <main+0xce4>)
 8003056:	78db      	ldrb	r3, [r3, #3]
 8003058:	061a      	lsls	r2, r3, #24
	  													  (uint32_t)rx_data3[2] << 16 |
 800305a:	4b90      	ldr	r3, [pc, #576]	; (800329c <main+0xce4>)
 800305c:	789b      	ldrb	r3, [r3, #2]
 800305e:	041b      	lsls	r3, r3, #16
	  						uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 8003060:	431a      	orrs	r2, r3
	  													  (uint32_t)rx_data3[1] << 8 |
 8003062:	4b8e      	ldr	r3, [pc, #568]	; (800329c <main+0xce4>)
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	021b      	lsls	r3, r3, #8
	  													  (uint32_t)rx_data3[2] << 16 |
 8003068:	4313      	orrs	r3, r2
	  													  (uint32_t)rx_data3[0];
 800306a:	4a8c      	ldr	r2, [pc, #560]	; (800329c <main+0xce4>)
 800306c:	7812      	ldrb	r2, [r2, #0]
	  						uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 800306e:	4313      	orrs	r3, r2
 8003070:	2288      	movs	r2, #136	; 0x88
 8003072:	0052      	lsls	r2, r2, #1
 8003074:	000e      	movs	r6, r1
 8003076:	1991      	adds	r1, r2, r6
 8003078:	19c9      	adds	r1, r1, r7
 800307a:	600b      	str	r3, [r1, #0]

	  					 // Bytes [28:0] para calcular LSBp
	  						 uint32_t LSBe_bytes = received_data_EA & 0xFFFFFFFF; // Esta máscara tiene los primeros 28 bits
 800307c:	1993      	adds	r3, r2, r6
 800307e:	19db      	adds	r3, r3, r7
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2186      	movs	r1, #134	; 0x86
 8003084:	0049      	lsls	r1, r1, #1
 8003086:	198a      	adds	r2, r1, r6
 8003088:	19d2      	adds	r2, r2, r7
 800308a:	6013      	str	r3, [r2, #0]
	  						 // Calcular LSBp según la ecuación dada
	  					 long long int potencia3 = pow(2,17);
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	0292      	lsls	r2, r2, #10
 8003090:	2300      	movs	r3, #0
 8003092:	2084      	movs	r0, #132	; 0x84
 8003094:	0040      	lsls	r0, r0, #1
 8003096:	1838      	adds	r0, r7, r0
 8003098:	6002      	str	r2, [r0, #0]
 800309a:	6043      	str	r3, [r0, #4]
	  					 double Vref_2 = pow(1.2,2);
 800309c:	4a81      	ldr	r2, [pc, #516]	; (80032a4 <main+0xcec>)
 800309e:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <main+0xcf0>)
 80030a0:	24f8      	movs	r4, #248	; 0xf8
 80030a2:	19a5      	adds	r5, r4, r6
 80030a4:	19e8      	adds	r0, r5, r7
 80030a6:	6002      	str	r2, [r0, #0]
 80030a8:	6043      	str	r3, [r0, #4]
	  					 float LSBe_decimal = ((float)LSBe_bytes * Vref_2 * (1 + 810000.0 / 470)) / (1*3600*7812.5*2*16*Ks*0.875*0.875* potencia3);
 80030aa:	198a      	adds	r2, r1, r6
 80030ac:	19d3      	adds	r3, r2, r7
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	f7fd fafa 	bl	80006a8 <__aeabi_ui2f>
 80030b4:	1c03      	adds	r3, r0, #0
 80030b6:	1c18      	adds	r0, r3, #0
 80030b8:	f7ff f986 	bl	80023c8 <__aeabi_f2d>
 80030bc:	19a2      	adds	r2, r4, r6
 80030be:	19d3      	adds	r3, r2, r7
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f7fe fa92 	bl	80015ec <__aeabi_dmul>
 80030c8:	0002      	movs	r2, r0
 80030ca:	000b      	movs	r3, r1
 80030cc:	0010      	movs	r0, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	4a76      	ldr	r2, [pc, #472]	; (80032ac <main+0xcf4>)
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <main+0xcf8>)
 80030d4:	f7fe fa8a 	bl	80015ec <__aeabi_dmul>
 80030d8:	0002      	movs	r2, r0
 80030da:	000b      	movs	r3, r1
 80030dc:	0014      	movs	r4, r2
 80030de:	001d      	movs	r5, r3
 80030e0:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <main+0xcfc>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	0612      	lsls	r2, r2, #24
 80030ea:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <main+0xd00>)
 80030ec:	f7fe fa7e 	bl	80015ec <__aeabi_dmul>
 80030f0:	0002      	movs	r2, r0
 80030f2:	000b      	movs	r3, r1
 80030f4:	0010      	movs	r0, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <main+0xd04>)
 80030fc:	f7fe fa76 	bl	80015ec <__aeabi_dmul>
 8003100:	0002      	movs	r2, r0
 8003102:	000b      	movs	r3, r1
 8003104:	0010      	movs	r0, r2
 8003106:	0019      	movs	r1, r3
 8003108:	2200      	movs	r2, #0
 800310a:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <main+0xd04>)
 800310c:	f7fe fa6e 	bl	80015ec <__aeabi_dmul>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	603a      	str	r2, [r7, #0]
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	2384      	movs	r3, #132	; 0x84
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	f7fd f9df 	bl	80004e4 <__aeabi_l2d>
 8003126:	0002      	movs	r2, r0
 8003128:	000b      	movs	r3, r1
 800312a:	6838      	ldr	r0, [r7, #0]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	f7fe fa5d 	bl	80015ec <__aeabi_dmul>
 8003132:	0002      	movs	r2, r0
 8003134:	000b      	movs	r3, r1
 8003136:	0020      	movs	r0, r4
 8003138:	0029      	movs	r1, r5
 800313a:	f7fd fe5d 	bl	8000df8 <__aeabi_ddiv>
 800313e:	0002      	movs	r2, r0
 8003140:	000b      	movs	r3, r1
 8003142:	0010      	movs	r0, r2
 8003144:	0019      	movs	r1, r3
 8003146:	f7ff f987 	bl	8002458 <__aeabi_d2f>
 800314a:	1c03      	adds	r3, r0, #0
 800314c:	25f4      	movs	r5, #244	; 0xf4
 800314e:	0031      	movs	r1, r6
 8003150:	186a      	adds	r2, r5, r1
 8003152:	19d2      	adds	r2, r2, r7
 8003154:	6013      	str	r3, [r2, #0]

	  					 uint8_t calculated_crc3 = calculate_crc(rx_data3, 4);
 8003156:	26f3      	movs	r6, #243	; 0xf3
 8003158:	1873      	adds	r3, r6, r1
 800315a:	19dc      	adds	r4, r3, r7
 800315c:	4b4f      	ldr	r3, [pc, #316]	; (800329c <main+0xce4>)
 800315e:	2104      	movs	r1, #4
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f953 	bl	800340c <calculate_crc>
 8003166:	0003      	movs	r3, r0
 8003168:	7023      	strb	r3, [r4, #0]
	  					 if (calculated_crc3 == rx_data3[4]) {
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <main+0xce4>)
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	2108      	movs	r1, #8
 8003170:	1872      	adds	r2, r6, r1
 8003172:	19d2      	adds	r2, r2, r7
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d123      	bne.n	80031c2 <main+0xc0a>
	  						 char texto10[50];

	  						 sprintf(buf_tx10, "%.6f",(float)LSBe_decimal);
 800317a:	000e      	movs	r6, r1
 800317c:	186b      	adds	r3, r5, r1
 800317e:	19db      	adds	r3, r3, r7
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f7ff f921 	bl	80023c8 <__aeabi_f2d>
 8003186:	0002      	movs	r2, r0
 8003188:	000b      	movs	r3, r1
 800318a:	494d      	ldr	r1, [pc, #308]	; (80032c0 <main+0xd08>)
 800318c:	484d      	ldr	r0, [pc, #308]	; (80032c4 <main+0xd0c>)
 800318e:	f004 fb75 	bl	800787c <siprintf>
	  						 sprintf(texto10, "-> LSBe (%s)[Wh] \n ", buf_tx10);
 8003192:	4a4c      	ldr	r2, [pc, #304]	; (80032c4 <main+0xd0c>)
 8003194:	494c      	ldr	r1, [pc, #304]	; (80032c8 <main+0xd10>)
 8003196:	2438      	movs	r4, #56	; 0x38
 8003198:	0035      	movs	r5, r6
 800319a:	1963      	adds	r3, r4, r5
 800319c:	19db      	adds	r3, r3, r7
 800319e:	0018      	movs	r0, r3
 80031a0:	f004 fb6c 	bl	800787c <siprintf>
	  						 HAL_UART_Transmit(&huart2, (uint8_t*)texto10, strlen(texto10), HAL_MAX_DELAY);
 80031a4:	1963      	adds	r3, r4, r5
 80031a6:	19db      	adds	r3, r3, r7
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fc ffab 	bl	8000104 <strlen>
 80031ae:	0003      	movs	r3, r0
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	425b      	negs	r3, r3
 80031b6:	1961      	adds	r1, r4, r5
 80031b8:	19c9      	adds	r1, r1, r7
 80031ba:	4836      	ldr	r0, [pc, #216]	; (8003294 <main+0xcdc>)
 80031bc:	f002 fed4 	bl	8005f68 <HAL_UART_Transmit>
 80031c0:	e015      	b.n	80031ee <main+0xc36>

	  					 } else {
	  						 char *texto11 = "->Incorrect CRC\r\n	";
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <main+0xd14>)
 80031c4:	24ec      	movs	r4, #236	; 0xec
 80031c6:	2508      	movs	r5, #8
 80031c8:	1962      	adds	r2, r4, r5
 80031ca:	19d2      	adds	r2, r2, r7
 80031cc:	6013      	str	r3, [r2, #0]
	  						 HAL_UART_Transmit(&huart2, (uint8_t*)texto11, strlen(texto11), HAL_MAX_DELAY);
 80031ce:	1963      	adds	r3, r4, r5
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fc ff95 	bl	8000104 <strlen>
 80031da:	0003      	movs	r3, r0
 80031dc:	b29a      	uxth	r2, r3
 80031de:	2301      	movs	r3, #1
 80031e0:	425b      	negs	r3, r3
 80031e2:	1961      	adds	r1, r4, r5
 80031e4:	19c9      	adds	r1, r1, r7
 80031e6:	6809      	ldr	r1, [r1, #0]
 80031e8:	482a      	ldr	r0, [pc, #168]	; (8003294 <main+0xcdc>)
 80031ea:	f002 febd 	bl	8005f68 <HAL_UART_Transmit>
	  					 }




	  			 calculated_crc3 = 0;
 80031ee:	23f3      	movs	r3, #243	; 0xf3
 80031f0:	2408      	movs	r4, #8
 80031f2:	191b      	adds	r3, r3, r4
 80031f4:	19db      	adds	r3, r3, r7
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
	  			 memset(rx_data3, 0, sizeof(rx_data3));
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <main+0xce4>)
 80031fc:	2205      	movs	r2, #5
 80031fe:	2100      	movs	r1, #0
 8003200:	0018      	movs	r0, r3
 8003202:	f004 fba7 	bl	8007954 <memset>
	  			 /* Se cierra la comunicacion SCS --> up */
	  			 HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <main+0xd18>)
 8003208:	2201      	movs	r2, #1
 800320a:	2101      	movs	r1, #1
 800320c:	0018      	movs	r0, r3
 800320e:	f000 ff86 	bl	800411e <HAL_GPIO_WritePin>
	  			 delay_ms(800);
 8003212:	23c8      	movs	r3, #200	; 0xc8
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	0018      	movs	r0, r3
 8003218:	f000 f8b0 	bl	800337c <delay_ms>
	  			 inicio =3;
 800321c:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <main+0xd1c>)
 800321e:	2203      	movs	r2, #3
 8003220:	601a      	str	r2, [r3, #0]
	  for(int q=0;q<4;q++){
 8003222:	2296      	movs	r2, #150	; 0x96
 8003224:	0052      	lsls	r2, r2, #1
 8003226:	1913      	adds	r3, r2, r4
 8003228:	19db      	adds	r3, r3, r7
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	1912      	adds	r2, r2, r4
 8003230:	19d2      	adds	r2, r2, r7
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	2396      	movs	r3, #150	; 0x96
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2508      	movs	r5, #8
 800323a:	195b      	adds	r3, r3, r5
 800323c:	19db      	adds	r3, r3, r7
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	dc00      	bgt.n	8003246 <main+0xc8e>
 8003244:	e60f      	b.n	8002e66 <main+0x8ae>




	  	// LED OFF
	  	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003246:	23a0      	movs	r3, #160	; 0xa0
 8003248:	05db      	lsls	r3, r3, #23
 800324a:	2200      	movs	r2, #0
 800324c:	2120      	movs	r1, #32
 800324e:	0018      	movs	r0, r3
 8003250:	f000 ff65 	bl	800411e <HAL_GPIO_WritePin>

	  	char *texto_fin = "FIN de comunicacion \n";
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <main+0xd20>)
 8003256:	248e      	movs	r4, #142	; 0x8e
 8003258:	0064      	lsls	r4, r4, #1
 800325a:	1962      	adds	r2, r4, r5
 800325c:	19d2      	adds	r2, r2, r7
 800325e:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart2, (uint8_t*)texto_fin, strlen(texto_fin), HAL_MAX_DELAY);
 8003260:	1963      	adds	r3, r4, r5
 8003262:	19db      	adds	r3, r3, r7
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0018      	movs	r0, r3
 8003268:	f7fc ff4c 	bl	8000104 <strlen>
 800326c:	0003      	movs	r3, r0
 800326e:	b29a      	uxth	r2, r3
 8003270:	2301      	movs	r3, #1
 8003272:	425b      	negs	r3, r3
 8003274:	1961      	adds	r1, r4, r5
 8003276:	19c9      	adds	r1, r1, r7
 8003278:	6809      	ldr	r1, [r1, #0]
 800327a:	4806      	ldr	r0, [pc, #24]	; (8003294 <main+0xcdc>)
 800327c:	f002 fe74 	bl	8005f68 <HAL_UART_Transmit>
		 delay_ms(10);
 8003280:	200a      	movs	r0, #10
 8003282:	f000 f87b 	bl	800337c <delay_ms>
	  if (HAL_GPIO_ReadPin(GPIOC, BUTTON_Pin) == GPIO_PIN_RESET && inicio == 0) {
 8003286:	f7ff f9c1 	bl	800260c <main+0x54>
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	08009cb4 	.word	0x08009cb4
 8003290:	20000378 	.word	0x20000378
 8003294:	2000025c 	.word	0x2000025c
 8003298:	08009d6c 	.word	0x08009d6c
 800329c:	200003c8 	.word	0x200003c8
 80032a0:	2000038c 	.word	0x2000038c
 80032a4:	70a3d70a 	.word	0x70a3d70a
 80032a8:	3ff70a3d 	.word	0x3ff70a3d
 80032ac:	f51b3bea 	.word	0xf51b3bea
 80032b0:	409af19d 	.word	0x409af19d
 80032b4:	20000000 	.word	0x20000000
 80032b8:	41cad274 	.word	0x41cad274
 80032bc:	3fec0000 	.word	0x3fec0000
 80032c0:	08009d98 	.word	0x08009d98
 80032c4:	200003a0 	.word	0x200003a0
 80032c8:	08009da0 	.word	0x08009da0
 80032cc:	08009d18 	.word	0x08009d18
 80032d0:	50000400 	.word	0x50000400
 80032d4:	200003b4 	.word	0x200003b4
 80032d8:	08009db4 	.word	0x08009db4

080032dc <reinicioRegistros>:

  }
}


void reinicioRegistros(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  	  /* Pull SYN pin up for 25ms */
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <reinicioRegistros+0x98>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 ff18 	bl	800411e <HAL_GPIO_WritePin>
  	  delay_ms(25);
 80032ee:	2019      	movs	r0, #25
 80032f0:	f000 f844 	bl	800337c <delay_ms>
  	  /* Tiempo para bloquear la elección de la interfaz */
  	  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 80032f4:	4b20      	ldr	r3, [pc, #128]	; (8003378 <reinicioRegistros+0x9c>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	2101      	movs	r1, #1
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 ff0f 	bl	800411e <HAL_GPIO_WritePin>
  	  //Tiempo entre el encendido y el reset del pin(SYN)
  	  delay_ms (25);
 8003300:	2019      	movs	r0, #25
 8003302:	f000 f83b 	bl	800337c <delay_ms>
  	  /*----------------- Pulsos de reinicio de registros STPM32-------------------*/

  	   /* Generate 3 pulses on SYN pin reiniciar  */
  	   for (int i = 0; i < 2; i++) {
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	e014      	b.n	8003336 <reinicioRegistros+0x5a>
  	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <reinicioRegistros+0x98>)
 800330e:	2200      	movs	r2, #0
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0018      	movs	r0, r3
 8003314:	f000 ff03 	bl	800411e <HAL_GPIO_WritePin>
  	  	  delay_ms(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f000 f82f 	bl	800337c <delay_ms>
  	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <reinicioRegistros+0x98>)
 8003320:	2201      	movs	r2, #1
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fefa 	bl	800411e <HAL_GPIO_WritePin>
  	  	  delay_ms(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 f826 	bl	800337c <delay_ms>
  	   for (int i = 0; i < 2; i++) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	dde7      	ble.n	800330c <reinicioRegistros+0x30>
  	   }
  	   /* Leave SYN pin high */
  	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <reinicioRegistros+0x98>)
 800333e:	2201      	movs	r2, #1
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0018      	movs	r0, r3
 8003344:	f000 feeb 	bl	800411e <HAL_GPIO_WritePin>
  	   delay_ms(1);//Delay from SYN to SCS
 8003348:	2001      	movs	r0, #1
 800334a:	f000 f817 	bl	800337c <delay_ms>
  	   HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <reinicioRegistros+0x9c>)
 8003350:	2200      	movs	r2, #0
 8003352:	2101      	movs	r1, #1
 8003354:	0018      	movs	r0, r3
 8003356:	f000 fee2 	bl	800411e <HAL_GPIO_WritePin>
  	   delay_ms(1);//Reset pulse width
 800335a:	2001      	movs	r0, #1
 800335c:	f000 f80e 	bl	800337c <delay_ms>
  	   HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <reinicioRegistros+0x9c>)
 8003362:	2201      	movs	r2, #1
 8003364:	2101      	movs	r1, #1
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fed9 	bl	800411e <HAL_GPIO_WritePin>
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	50000800 	.word	0x50000800
 8003378:	50000400 	.word	0x50000400

0800337c <delay_ms>:
  	   delay_ms(1);//Reset pulse width
  	   HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
}

void delay_ms(uint32_t ms)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fc52 	bl	8003c30 <HAL_Delay>
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <Crc8Calc>:
/* -----------------  CRC calculation function  ----------------------- */


// Función para calcular el CRC
static void Crc8Calc(uint8_t u8Data)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	0002      	movs	r2, r0
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	701a      	strb	r2, [r3, #0]
    uint8_t loc_u8Idx;
    uint8_t loc_u8Temp;
    loc_u8Idx = 0;
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
    while (loc_u8Idx < 8)
 80033a8:	e024      	b.n	80033f4 <Crc8Calc+0x60>
    {
        loc_u8Temp = u8Data ^ CRC_u8Checksum;
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <Crc8Calc+0x74>)
 80033ac:	7819      	ldrb	r1, [r3, #0]
 80033ae:	200e      	movs	r0, #14
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	1dfa      	adds	r2, r7, #7
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	404a      	eors	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]
        CRC_u8Checksum <<= 1;
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <Crc8Calc+0x74>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	18db      	adds	r3, r3, r3
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <Crc8Calc+0x74>)
 80033c4:	701a      	strb	r2, [r3, #0]
        if (loc_u8Temp & 0x80)
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da06      	bge.n	80033de <Crc8Calc+0x4a>
        {
            CRC_u8Checksum ^= CRC_8;
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <Crc8Calc+0x74>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2207      	movs	r2, #7
 80033d6:	4053      	eors	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <Crc8Calc+0x74>)
 80033dc:	701a      	strb	r2, [r3, #0]
        }
        u8Data <<= 1;
 80033de:	1dfa      	adds	r2, r7, #7
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	18db      	adds	r3, r3, r3
 80033e6:	7013      	strb	r3, [r2, #0]
        loc_u8Idx++;
 80033e8:	210f      	movs	r1, #15
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	3201      	adds	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
    while (loc_u8Idx < 8)
 80033f4:	230f      	movs	r3, #15
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	d9d5      	bls.n	80033aa <Crc8Calc+0x16>
    }
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200002f0 	.word	0x200002f0

0800340c <calculate_crc>:

// Función para calcular el CRC de una trama de datos
uint8_t calculate_crc(uint8_t *data, uint8_t length)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	000a      	movs	r2, r1
 8003416:	1cfb      	adds	r3, r7, #3
 8003418:	701a      	strb	r2, [r3, #0]
    CRC_u8Checksum = 0x00;
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <calculate_crc+0x44>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e009      	b.n	800343a <calculate_crc+0x2e>
    {
        Crc8Calc(data[i]);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff ffb0 	bl	8003394 <Crc8Calc>
    for (int i = 0; i < length; i++)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	1cfb      	adds	r3, r7, #3
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	dbf0      	blt.n	8003426 <calculate_crc+0x1a>
    }
    return CRC_u8Checksum;
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <calculate_crc+0x44>)
 8003446:	781b      	ldrb	r3, [r3, #0]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200002f0 	.word	0x200002f0

08003454 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b095      	sub	sp, #84	; 0x54
 8003458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800345a:	2414      	movs	r4, #20
 800345c:	193b      	adds	r3, r7, r4
 800345e:	0018      	movs	r0, r3
 8003460:	233c      	movs	r3, #60	; 0x3c
 8003462:	001a      	movs	r2, r3
 8003464:	2100      	movs	r1, #0
 8003466:	f004 fa75 	bl	8007954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	0018      	movs	r0, r3
 800346e:	2310      	movs	r3, #16
 8003470:	001a      	movs	r2, r3
 8003472:	2100      	movs	r1, #0
 8003474:	f004 fa6e 	bl	8007954 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fe6b 	bl	8004158 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003482:	193b      	adds	r3, r7, r4
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003488:	193b      	adds	r3, r7, r4
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0052      	lsls	r2, r2, #1
 800348e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003490:	193b      	adds	r3, r7, r4
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003496:	193b      	adds	r3, r7, r4
 8003498:	2240      	movs	r2, #64	; 0x40
 800349a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800349c:	193b      	adds	r3, r7, r4
 800349e:	2200      	movs	r2, #0
 80034a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fea3 	bl	80041f0 <HAL_RCC_OscConfig>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d001      	beq.n	80034b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80034ae:	f000 f95d 	bl	800376c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	2100      	movs	r1, #0
 80034ce:	0018      	movs	r0, r3
 80034d0:	f001 f9ee 	bl	80048b0 <HAL_RCC_ClockConfig>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80034d8:	f000 f948 	bl	800376c <Error_Handler>
  }
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b015      	add	sp, #84	; 0x54
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_SPI1_Init+0x74>)
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <MX_SPI1_Init+0x78>)
 80034ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <MX_SPI1_Init+0x74>)
 80034f0:	2282      	movs	r2, #130	; 0x82
 80034f2:	0052      	lsls	r2, r2, #1
 80034f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <MX_SPI1_Init+0x74>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <MX_SPI1_Init+0x74>)
 80034fe:	22e0      	movs	r2, #224	; 0xe0
 8003500:	00d2      	lsls	r2, r2, #3
 8003502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <MX_SPI1_Init+0x74>)
 8003506:	2202      	movs	r2, #2
 8003508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <MX_SPI1_Init+0x74>)
 800350c:	2201      	movs	r2, #1
 800350e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <MX_SPI1_Init+0x74>)
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <MX_SPI1_Init+0x74>)
 800351a:	2208      	movs	r2, #8
 800351c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <MX_SPI1_Init+0x74>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <MX_SPI1_Init+0x74>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <MX_SPI1_Init+0x74>)
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <MX_SPI1_Init+0x74>)
 8003532:	2207      	movs	r2, #7
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <MX_SPI1_Init+0x74>)
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <MX_SPI1_Init+0x74>)
 800353e:	2200      	movs	r2, #0
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <MX_SPI1_Init+0x74>)
 8003544:	0018      	movs	r0, r3
 8003546:	f001 fd99 	bl	800507c <HAL_SPI_Init>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800354e:	f000 f90d 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200001f8 	.word	0x200001f8
 800355c:	40013000 	.word	0x40013000

08003560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003566:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <MX_USART2_UART_Init+0x98>)
 8003568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 800356c:	22e1      	movs	r2, #225	; 0xe1
 800356e:	0252      	lsls	r2, r2, #9
 8003570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003586:	220c      	movs	r2, #12
 8003588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003592:	2200      	movs	r2, #0
 8003594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 8003598:	2200      	movs	r2, #0
 800359a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 800359e:	2200      	movs	r2, #0
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 80035aa:	0018      	movs	r0, r3
 80035ac:	f002 fc86 	bl	8005ebc <HAL_UART_Init>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80035b4:	f000 f8da 	bl	800376c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 80035ba:	2100      	movs	r1, #0
 80035bc:	0018      	movs	r0, r3
 80035be:	f003 fb3b 	bl	8006c38 <HAL_UARTEx_SetTxFifoThreshold>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035c6:	f000 f8d1 	bl	800376c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 80035cc:	2100      	movs	r1, #0
 80035ce:	0018      	movs	r0, r3
 80035d0:	f003 fb72 	bl	8006cb8 <HAL_UARTEx_SetRxFifoThreshold>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035d8:	f000 f8c8 	bl	800376c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <MX_USART2_UART_Init+0x94>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f003 faf0 	bl	8006bc4 <HAL_UARTEx_DisableFifoMode>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035e8:	f000 f8c0 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	2000025c 	.word	0x2000025c
 80035f8:	40004400 	.word	0x40004400

080035fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b08b      	sub	sp, #44	; 0x2c
 8003600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	2414      	movs	r4, #20
 8003604:	193b      	adds	r3, r7, r4
 8003606:	0018      	movs	r0, r3
 8003608:	2314      	movs	r3, #20
 800360a:	001a      	movs	r2, r3
 800360c:	2100      	movs	r1, #0
 800360e:	f004 f9a1 	bl	8007954 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	4b53      	ldr	r3, [pc, #332]	; (8003760 <MX_GPIO_Init+0x164>)
 8003614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <MX_GPIO_Init+0x164>)
 8003618:	2104      	movs	r1, #4
 800361a:	430a      	orrs	r2, r1
 800361c:	635a      	str	r2, [r3, #52]	; 0x34
 800361e:	4b50      	ldr	r3, [pc, #320]	; (8003760 <MX_GPIO_Init+0x164>)
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	2204      	movs	r2, #4
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800362a:	4b4d      	ldr	r3, [pc, #308]	; (8003760 <MX_GPIO_Init+0x164>)
 800362c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362e:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <MX_GPIO_Init+0x164>)
 8003630:	2120      	movs	r1, #32
 8003632:	430a      	orrs	r2, r1
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
 8003636:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <MX_GPIO_Init+0x164>)
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <MX_GPIO_Init+0x164>)
 8003644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <MX_GPIO_Init+0x164>)
 8003648:	2101      	movs	r1, #1
 800364a:	430a      	orrs	r2, r1
 800364c:	635a      	str	r2, [r3, #52]	; 0x34
 800364e:	4b44      	ldr	r3, [pc, #272]	; (8003760 <MX_GPIO_Init+0x164>)
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <MX_GPIO_Init+0x164>)
 800365c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <MX_GPIO_Init+0x164>)
 8003660:	2102      	movs	r1, #2
 8003662:	430a      	orrs	r2, r1
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
 8003666:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <MX_GPIO_Init+0x164>)
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|OUT3_3V_Pin, GPIO_PIN_RESET);
 8003672:	2388      	movs	r3, #136	; 0x88
 8003674:	0099      	lsls	r1, r3, #2
 8003676:	23a0      	movs	r3, #160	; 0xa0
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	2200      	movs	r2, #0
 800367c:	0018      	movs	r0, r3
 800367e:	f000 fd4e 	bl	800411e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <MX_GPIO_Init+0x168>)
 8003684:	2201      	movs	r2, #1
 8003686:	2101      	movs	r1, #1
 8003688:	0018      	movs	r0, r3
 800368a:	f000 fd48 	bl	800411e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYN_GPIO_Port, SYN_Pin, GPIO_PIN_SET);
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <MX_GPIO_Init+0x16c>)
 8003690:	2201      	movs	r2, #1
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fd42 	bl	800411e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	0192      	lsls	r2, r2, #6
 80036a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <MX_GPIO_Init+0x16c>)
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f000 fba9 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2220      	movs	r2, #32
 80036be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2201      	movs	r2, #1
 80036c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036cc:	193b      	adds	r3, r7, r4
 80036ce:	2202      	movs	r2, #2
 80036d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80036d2:	193a      	adds	r2, r7, r4
 80036d4:	23a0      	movs	r3, #160	; 0xa0
 80036d6:	05db      	lsls	r3, r3, #23
 80036d8:	0011      	movs	r1, r2
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 fb96 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2201      	movs	r2, #1
 80036ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <MX_GPIO_Init+0x168>)
 80036fc:	0019      	movs	r1, r3
 80036fe:	0010      	movs	r0, r2
 8003700:	f000 fb84 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT3_3V_Pin */
  GPIO_InitStruct.Pin = OUT3_3V_Pin;
 8003704:	0021      	movs	r1, r4
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370e:	000c      	movs	r4, r1
 8003710:	193b      	adds	r3, r7, r4
 8003712:	2201      	movs	r2, #1
 8003714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2201      	movs	r2, #1
 800371a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUT3_3V_GPIO_Port, &GPIO_InitStruct);
 8003722:	193a      	adds	r2, r7, r4
 8003724:	23a0      	movs	r3, #160	; 0xa0
 8003726:	05db      	lsls	r3, r3, #23
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f000 fb6e 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SYN_Pin */
  GPIO_InitStruct.Pin = SYN_Pin;
 8003730:	0021      	movs	r1, r4
 8003732:	187b      	adds	r3, r7, r1
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2201      	movs	r2, #1
 800373c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYN_GPIO_Port, &GPIO_InitStruct);
 800374a:	187b      	adds	r3, r7, r1
 800374c:	4a06      	ldr	r2, [pc, #24]	; (8003768 <MX_GPIO_Init+0x16c>)
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 fb5b 	bl	8003e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b00b      	add	sp, #44	; 0x2c
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40021000 	.word	0x40021000
 8003764:	50000400 	.word	0x50000400
 8003768:	50000800 	.word	0x50000800

0800376c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003774:	e7fe      	b.n	8003774 <Error_Handler+0x8>
	...

08003778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_MspInit+0x4c>)
 8003780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_MspInit+0x4c>)
 8003784:	2101      	movs	r1, #1
 8003786:	430a      	orrs	r2, r1
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_MspInit+0x4c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_MspInit+0x4c>)
 8003798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_MspInit+0x4c>)
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	0549      	lsls	r1, r1, #21
 80037a0:	430a      	orrs	r2, r1
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_MspInit+0x4c>)
 80037a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	055b      	lsls	r3, r3, #21
 80037ac:	4013      	ands	r3, r2
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80037b2:	23c0      	movs	r3, #192	; 0xc0
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fa5e 	bl	8003c78 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b08b      	sub	sp, #44	; 0x2c
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	2414      	movs	r4, #20
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	0018      	movs	r0, r3
 80037d6:	2314      	movs	r3, #20
 80037d8:	001a      	movs	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f004 f8ba 	bl	8007954 <memset>
  if(hspi->Instance==SPI1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_SPI_MspInit+0x8c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d130      	bne.n	800384c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_SPI_MspInit+0x90>)
 80037ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_SPI_MspInit+0x90>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0149      	lsls	r1, r1, #5
 80037f4:	430a      	orrs	r2, r1
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
 80037f8:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_SPI_MspInit+0x90>)
 80037fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_SPI_MspInit+0x90>)
 8003808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_SPI_MspInit+0x90>)
 800380c:	2101      	movs	r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_SPI_MspInit+0x90>)
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	2201      	movs	r2, #1
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800381e:	0021      	movs	r1, r4
 8003820:	187b      	adds	r3, r7, r1
 8003822:	22c2      	movs	r2, #194	; 0xc2
 8003824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003826:	187b      	adds	r3, r7, r1
 8003828:	2202      	movs	r2, #2
 800382a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	187b      	adds	r3, r7, r1
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	187a      	adds	r2, r7, r1
 8003840:	23a0      	movs	r3, #160	; 0xa0
 8003842:	05db      	lsls	r3, r3, #23
 8003844:	0011      	movs	r1, r2
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fae0 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b00b      	add	sp, #44	; 0x2c
 8003852:	bd90      	pop	{r4, r7, pc}
 8003854:	40013000 	.word	0x40013000
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b09d      	sub	sp, #116	; 0x74
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	235c      	movs	r3, #92	; 0x5c
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	0018      	movs	r0, r3
 800386a:	2314      	movs	r3, #20
 800386c:	001a      	movs	r2, r3
 800386e:	2100      	movs	r1, #0
 8003870:	f004 f870 	bl	8007954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003874:	2410      	movs	r4, #16
 8003876:	193b      	adds	r3, r7, r4
 8003878:	0018      	movs	r0, r3
 800387a:	234c      	movs	r3, #76	; 0x4c
 800387c:	001a      	movs	r2, r3
 800387e:	2100      	movs	r1, #0
 8003880:	f004 f868 	bl	8007954 <memset>
  if(huart->Instance==USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_UART_MspInit+0xb8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d13e      	bne.n	800390c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800388e:	193b      	adds	r3, r7, r4
 8003890:	2202      	movs	r2, #2
 8003892:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800389a:	193b      	adds	r3, r7, r4
 800389c:	0018      	movs	r0, r3
 800389e:	f001 f9b1 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038a6:	f7ff ff61 	bl	800376c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0289      	lsls	r1, r1, #10
 80038b4:	430a      	orrs	r2, r1
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038cc:	2101      	movs	r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_UART_MspInit+0xbc>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80038de:	215c      	movs	r1, #92	; 0x5c
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	220c      	movs	r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2202      	movs	r2, #2
 80038ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2200      	movs	r2, #0
 80038f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	2201      	movs	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	187a      	adds	r2, r7, r1
 8003900:	23a0      	movs	r3, #160	; 0xa0
 8003902:	05db      	lsls	r3, r3, #23
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fa80 	bl	8003e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b01d      	add	sp, #116	; 0x74
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	40004400 	.word	0x40004400
 8003918:	40021000 	.word	0x40021000

0800391c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003920:	e7fe      	b.n	8003920 <NMI_Handler+0x4>

08003922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <HardFault_Handler+0x4>

08003928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003940:	f000 f95a 	bl	8003bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
  return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_kill>:

int _kill(int pid, int sig)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003960:	f004 f852 	bl	8007a08 <__errno>
 8003964:	0003      	movs	r3, r0
 8003966:	2216      	movs	r2, #22
 8003968:	601a      	str	r2, [r3, #0]
  return -1;
 800396a:	2301      	movs	r3, #1
 800396c:	425b      	negs	r3, r3
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}

08003976 <_exit>:

void _exit (int status)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800397e:	2301      	movs	r3, #1
 8003980:	425a      	negs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0011      	movs	r1, r2
 8003986:	0018      	movs	r0, r3
 8003988:	f7ff ffe5 	bl	8003956 <_kill>
  while (1) {}    /* Make sure we hang here */
 800398c:	e7fe      	b.n	800398c <_exit+0x16>

0800398e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e00a      	b.n	80039b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039a0:	e000      	b.n	80039a4 <_read+0x16>
 80039a2:	bf00      	nop
 80039a4:	0001      	movs	r1, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	60ba      	str	r2, [r7, #8]
 80039ac:	b2ca      	uxtb	r2, r1
 80039ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3301      	adds	r3, #1
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	dbf0      	blt.n	80039a0 <_read+0x12>
  }

  return len;
 80039be:	687b      	ldr	r3, [r7, #4]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e009      	b.n	80039ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	60ba      	str	r2, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0018      	movs	r0, r3
 80039e4:	e000      	b.n	80039e8 <_write+0x20>
 80039e6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3301      	adds	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	dbf1      	blt.n	80039da <_write+0x12>
  }
  return len;
 80039f6:	687b      	ldr	r3, [r7, #4]
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b006      	add	sp, #24
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_close>:

int _close(int file)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	425b      	negs	r3, r3
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	0192      	lsls	r2, r2, #6
 8003a24:	605a      	str	r2, [r3, #4]
  return 0;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_isatty>:

int _isatty(int file)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a38:	2301      	movs	r3, #1
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <_sbrk+0x5c>)
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <_sbrk+0x60>)
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <_sbrk+0x64>)
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <_sbrk+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	18d3      	adds	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d207      	bcs.n	8003a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a88:	f003 ffbe 	bl	8007a08 <__errno>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	220c      	movs	r2, #12
 8003a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	425b      	negs	r3, r3
 8003a96:	e009      	b.n	8003aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a98:	4b08      	ldr	r3, [pc, #32]	; (8003abc <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	18d2      	adds	r2, r2, r3
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <_sbrk+0x64>)
 8003aa8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b006      	add	sp, #24
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20024000 	.word	0x20024000
 8003ab8:	00000400 	.word	0x00000400
 8003abc:	200003d8 	.word	0x200003d8
 8003ac0:	20000530 	.word	0x20000530

08003ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ad2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ad4:	f7ff fff6 	bl	8003ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <LoopForever+0xe>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	; (8003b1c <LoopForever+0x16>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003afe:	f003 ff89 	bl	8007a14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b02:	f7fe fd59 	bl	80025b8 <main>

08003b06 <LoopForever>:

LoopForever:
  b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>
  ldr   r0, =_estack
 8003b08:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003b14:	0800a22c 	.word	0x0800a22c
  ldr r2, =_sbss
 8003b18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003b1c:	2000052c 	.word	0x2000052c

08003b20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_COMP_IRQHandler>
	...

08003b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_Init+0x3c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_Init+0x3c>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0049      	lsls	r1, r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f000 f810 	bl	8003b64 <HAL_InitTick>
 8003b44:	1e03      	subs	r3, r0, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003b48:	1dfb      	adds	r3, r7, #7
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e001      	b.n	8003b54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003b50:	f7ff fe12 	bl	8003778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	781b      	ldrb	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40022000 	.word	0x40022000

08003b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_InitTick+0x88>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02b      	beq.n	8003bd4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_InitTick+0x8c>)
 8003b7e:	681c      	ldr	r4, [r3, #0]
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_InitTick+0x88>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	0019      	movs	r1, r3
 8003b86:	23fa      	movs	r3, #250	; 0xfa
 8003b88:	0098      	lsls	r0, r3, #2
 8003b8a:	f7fc fad7 	bl	800013c <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	0019      	movs	r1, r3
 8003b92:	0020      	movs	r0, r4
 8003b94:	f7fc fad2 	bl	800013c <__udivsi3>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 f929 	bl	8003df2 <HAL_SYSTICK_Config>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d112      	bne.n	8003bca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d80a      	bhi.n	8003bc0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	2301      	movs	r3, #1
 8003bae:	425b      	negs	r3, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 f908 	bl	8003dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_InitTick+0x90>)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e00d      	b.n	8003bdc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e008      	b.n	8003bdc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bca:	230f      	movs	r3, #15
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e003      	b.n	8003bdc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bd4:	230f      	movs	r3, #15
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003bdc:	230f      	movs	r3, #15
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b005      	add	sp, #20
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000010 	.word	0x20000010
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	2000000c 	.word	0x2000000c

08003bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_IncTick+0x1c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	001a      	movs	r2, r3
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_IncTick+0x20>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	18d2      	adds	r2, r2, r3
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_IncTick+0x20>)
 8003c0a:	601a      	str	r2, [r3, #0]
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000010 	.word	0x20000010
 8003c18:	200003dc 	.word	0x200003dc

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b02      	ldr	r3, [pc, #8]	; (8003c2c <HAL_GetTick+0x10>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	200003dc 	.word	0x200003dc

08003c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_Delay+0x44>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	001a      	movs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	f7ff ffe0 	bl	8003c1c <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f7      	bhi.n	8003c58 <HAL_Delay+0x28>
  {
  }
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000010 	.word	0x20000010

08003c78 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b002      	add	sp, #8
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	fffff9ff 	.word	0xfffff9ff

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	0002      	movs	r2, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb8:	d828      	bhi.n	8003d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cba:	4a2f      	ldr	r2, [pc, #188]	; (8003d78 <__NVIC_SetPriority+0xd4>)
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	33c0      	adds	r3, #192	; 0xc0
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	589b      	ldr	r3, [r3, r2]
 8003cca:	1dfa      	adds	r2, r7, #7
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	0011      	movs	r1, r2
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	00d2      	lsls	r2, r2, #3
 8003cd6:	21ff      	movs	r1, #255	; 0xff
 8003cd8:	4091      	lsls	r1, r2
 8003cda:	000a      	movs	r2, r1
 8003cdc:	43d2      	mvns	r2, r2
 8003cde:	401a      	ands	r2, r3
 8003ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	401a      	ands	r2, r3
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	4003      	ands	r3, r0
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf8:	481f      	ldr	r0, [pc, #124]	; (8003d78 <__NVIC_SetPriority+0xd4>)
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	430a      	orrs	r2, r1
 8003d04:	33c0      	adds	r3, #192	; 0xc0
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d0a:	e031      	b.n	8003d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <__NVIC_SetPriority+0xd8>)
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	0019      	movs	r1, r3
 8003d14:	230f      	movs	r3, #15
 8003d16:	400b      	ands	r3, r1
 8003d18:	3b08      	subs	r3, #8
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	3304      	adds	r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	1dfa      	adds	r2, r7, #7
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	400a      	ands	r2, r1
 8003d30:	00d2      	lsls	r2, r2, #3
 8003d32:	21ff      	movs	r1, #255	; 0xff
 8003d34:	4091      	lsls	r1, r2
 8003d36:	000a      	movs	r2, r1
 8003d38:	43d2      	mvns	r2, r2
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	22ff      	movs	r2, #255	; 0xff
 8003d44:	401a      	ands	r2, r3
 8003d46:	1dfb      	adds	r3, r7, #7
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	4003      	ands	r3, r0
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d54:	4809      	ldr	r0, [pc, #36]	; (8003d7c <__NVIC_SetPriority+0xd8>)
 8003d56:	1dfb      	adds	r3, r7, #7
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	001c      	movs	r4, r3
 8003d5c:	230f      	movs	r3, #15
 8003d5e:	4023      	ands	r3, r4
 8003d60:	3b08      	subs	r3, #8
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	430a      	orrs	r2, r1
 8003d66:	3306      	adds	r3, #6
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	18c3      	adds	r3, r0, r3
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b003      	add	sp, #12
 8003d76:	bd90      	pop	{r4, r7, pc}
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	045b      	lsls	r3, r3, #17
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d301      	bcc.n	8003d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d94:	2301      	movs	r3, #1
 8003d96:	e010      	b.n	8003dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <SysTick_Config+0x44>)
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da0:	2301      	movs	r3, #1
 8003da2:	425b      	negs	r3, r3
 8003da4:	2103      	movs	r1, #3
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff ff7c 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SysTick_Config+0x44>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SysTick_Config+0x44>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	1c02      	adds	r2, r0, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7ff ffbf 	bl	8003d80 <SysTick_Config>
 8003e02:	0003      	movs	r3, r0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e1a:	e14d      	b.n	80040b8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4091      	lsls	r1, r2
 8003e26:	000a      	movs	r2, r1
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d100      	bne.n	8003e34 <HAL_GPIO_Init+0x28>
 8003e32:	e13e      	b.n	80040b2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d005      	beq.n	8003e4c <HAL_GPIO_Init+0x40>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2203      	movs	r2, #3
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d130      	bne.n	8003eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	43da      	mvns	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	0013      	movs	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e82:	2201      	movs	r2, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	409a      	lsls	r2, r3
 8003e88:	0013      	movs	r3, r2
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	2201      	movs	r2, #1
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d017      	beq.n	8003eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	0013      	movs	r3, r2
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d123      	bne.n	8003f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	08da      	lsrs	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3208      	adds	r2, #8
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	58d3      	ldr	r3, [r2, r3]
 8003f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2207      	movs	r2, #7
 8003f08:	4013      	ands	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	0013      	movs	r3, r2
 8003f12:	43da      	mvns	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2107      	movs	r1, #7
 8003f22:	400b      	ands	r3, r1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	409a      	lsls	r2, r3
 8003f28:	0013      	movs	r3, r2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	6939      	ldr	r1, [r7, #16]
 8003f3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d100      	bne.n	8003f80 <HAL_GPIO_Init+0x174>
 8003f7e:	e098      	b.n	80040b2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f80:	4a53      	ldr	r2, [pc, #332]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	3318      	adds	r3, #24
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	589b      	ldr	r3, [r3, r2]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2203      	movs	r2, #3
 8003f92:	4013      	ands	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	220f      	movs	r2, #15
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	0013      	movs	r3, r2
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	23a0      	movs	r3, #160	; 0xa0
 8003fa8:	05db      	lsls	r3, r3, #23
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d019      	beq.n	8003fe2 <HAL_GPIO_Init+0x1d6>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a48      	ldr	r2, [pc, #288]	; (80040d4 <HAL_GPIO_Init+0x2c8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x1d2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a47      	ldr	r2, [pc, #284]	; (80040d8 <HAL_GPIO_Init+0x2cc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x1ce>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a46      	ldr	r2, [pc, #280]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x1ca>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a45      	ldr	r2, [pc, #276]	; (80040e0 <HAL_GPIO_Init+0x2d4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x1c6>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	e008      	b.n	8003fe4 <HAL_GPIO_Init+0x1d8>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e006      	b.n	8003fe4 <HAL_GPIO_Init+0x1d8>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e004      	b.n	8003fe4 <HAL_GPIO_Init+0x1d8>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e002      	b.n	8003fe4 <HAL_GPIO_Init+0x1d8>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_GPIO_Init+0x1d8>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	400a      	ands	r2, r1
 8003fea:	00d2      	lsls	r2, r2, #3
 8003fec:	4093      	lsls	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ff4:	4936      	ldr	r1, [pc, #216]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	035b      	lsls	r3, r3, #13
 800401a:	4013      	ands	r3, r2
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004026:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800402c:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	43da      	mvns	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	039b      	lsls	r3, r3, #14
 8004044:	4013      	ands	r3, r2
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8004058:	2384      	movs	r3, #132	; 0x84
 800405a:	58d3      	ldr	r3, [r2, r3]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	43da      	mvns	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	4013      	ands	r3, r2
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800407c:	4914      	ldr	r1, [pc, #80]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 800407e:	2284      	movs	r2, #132	; 0x84
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	58d3      	ldr	r3, [r2, r3]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	4013      	ands	r3, r2
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040aa:	4909      	ldr	r1, [pc, #36]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3301      	adds	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	40da      	lsrs	r2, r3
 80040c0:	1e13      	subs	r3, r2, #0
 80040c2:	d000      	beq.n	80040c6 <HAL_GPIO_Init+0x2ba>
 80040c4:	e6aa      	b.n	8003e1c <HAL_GPIO_Init+0x10>
  }
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b006      	add	sp, #24
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021800 	.word	0x40021800
 80040d4:	50000400 	.word	0x50000400
 80040d8:	50000800 	.word	0x50000800
 80040dc:	50000c00 	.word	0x50000c00
 80040e0:	50001000 	.word	0x50001000

080040e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	000a      	movs	r2, r1
 80040ee:	1cbb      	adds	r3, r7, #2
 80040f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	1cba      	adds	r2, r7, #2
 80040f8:	8812      	ldrh	r2, [r2, #0]
 80040fa:	4013      	ands	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80040fe:	230f      	movs	r3, #15
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e003      	b.n	8004110 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004110:	230f      	movs	r3, #15
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	0008      	movs	r0, r1
 8004128:	0011      	movs	r1, r2
 800412a:	1cbb      	adds	r3, r7, #2
 800412c:	1c02      	adds	r2, r0, #0
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	1c7b      	adds	r3, r7, #1
 8004132:	1c0a      	adds	r2, r1, #0
 8004134:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004136:	1c7b      	adds	r3, r7, #1
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800413e:	1cbb      	adds	r3, r7, #2
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004146:	e003      	b.n	8004150 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004148:	1cbb      	adds	r3, r7, #2
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004166:	4013      	ands	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d11f      	bne.n	80041bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	0013      	movs	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	189b      	adds	r3, r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4912      	ldr	r1, [pc, #72]	; (80041d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800418a:	0018      	movs	r0, r3
 800418c:	f7fb ffd6 	bl	800013c <__udivsi3>
 8004190:	0003      	movs	r3, r0
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004196:	e008      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e001      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e009      	b.n	80041be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	401a      	ands	r2, r3
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d0ed      	beq.n	8004198 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	40007000 	.word	0x40007000
 80041cc:	fffff9ff 	.word	0xfffff9ff
 80041d0:	20000008 	.word	0x20000008
 80041d4:	000f4240 	.word	0x000f4240

080041d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	23e0      	movs	r3, #224	; 0xe0
 80041e2:	01db      	lsls	r3, r3, #7
 80041e4:	4013      	ands	r3, r2
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000

080041f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f000 fb50 	bl	80048a4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	4013      	ands	r3, r2
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x20>
 800420e:	e07c      	b.n	800430a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004210:	4bc3      	ldr	r3, [pc, #780]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2238      	movs	r2, #56	; 0x38
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421a:	4bc1      	ldr	r3, [pc, #772]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2203      	movs	r2, #3
 8004220:	4013      	ands	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b10      	cmp	r3, #16
 8004228:	d102      	bne.n	8004230 <HAL_RCC_OscConfig+0x40>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d002      	beq.n	8004236 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b08      	cmp	r3, #8
 8004234:	d10b      	bne.n	800424e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004236:	4bba      	ldr	r3, [pc, #744]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	4013      	ands	r3, r2
 8004240:	d062      	beq.n	8004308 <HAL_RCC_OscConfig+0x118>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d15e      	bne.n	8004308 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e32a      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	025b      	lsls	r3, r3, #9
 8004256:	429a      	cmp	r2, r3
 8004258:	d107      	bne.n	800426a <HAL_RCC_OscConfig+0x7a>
 800425a:	4bb1      	ldr	r3, [pc, #708]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4bb0      	ldr	r3, [pc, #704]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	0249      	lsls	r1, r1, #9
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e020      	b.n	80042ac <HAL_RCC_OscConfig+0xbc>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	23a0      	movs	r3, #160	; 0xa0
 8004270:	02db      	lsls	r3, r3, #11
 8004272:	429a      	cmp	r2, r3
 8004274:	d10e      	bne.n	8004294 <HAL_RCC_OscConfig+0xa4>
 8004276:	4baa      	ldr	r3, [pc, #680]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4ba9      	ldr	r3, [pc, #676]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800427c:	2180      	movs	r1, #128	; 0x80
 800427e:	02c9      	lsls	r1, r1, #11
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	4ba6      	ldr	r3, [pc, #664]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4ba5      	ldr	r3, [pc, #660]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	0249      	lsls	r1, r1, #9
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xbc>
 8004294:	4ba2      	ldr	r3, [pc, #648]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4ba1      	ldr	r3, [pc, #644]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800429a:	49a2      	ldr	r1, [pc, #648]	; (8004524 <HAL_RCC_OscConfig+0x334>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	4b9f      	ldr	r3, [pc, #636]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b9e      	ldr	r3, [pc, #632]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80042a6:	49a0      	ldr	r1, [pc, #640]	; (8004528 <HAL_RCC_OscConfig+0x338>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d014      	beq.n	80042de <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7ff fcb2 	bl	8003c1c <HAL_GetTick>
 80042b8:	0003      	movs	r3, r0
 80042ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042be:	f7ff fcad 	bl	8003c1c <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b64      	cmp	r3, #100	; 0x64
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e2e9      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d0:	4b93      	ldr	r3, [pc, #588]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	4013      	ands	r3, r2
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0xce>
 80042dc:	e015      	b.n	800430a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7ff fc9d 	bl	8003c1c <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7ff fc98 	bl	8003c1c <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e2d4      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4013      	ands	r3, r2
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0xf8>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d100      	bne.n	8004316 <HAL_RCC_OscConfig+0x126>
 8004314:	e099      	b.n	800444a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004316:	4b82      	ldr	r3, [pc, #520]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2238      	movs	r2, #56	; 0x38
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004320:	4b7f      	ldr	r3, [pc, #508]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	4013      	ands	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b10      	cmp	r3, #16
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0x146>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d002      	beq.n	800433c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d135      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800433c:	4b78      	ldr	r3, [pc, #480]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4013      	ands	r3, r2
 8004346:	d005      	beq.n	8004354 <HAL_RCC_OscConfig+0x164>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e2a7      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004354:	4b72      	ldr	r3, [pc, #456]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a74      	ldr	r2, [pc, #464]	; (800452c <HAL_RCC_OscConfig+0x33c>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	4b6e      	ldr	r3, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d112      	bne.n	8004396 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004370:	4b6b      	ldr	r3, [pc, #428]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6e      	ldr	r2, [pc, #440]	; (8004530 <HAL_RCC_OscConfig+0x340>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004384:	4b66      	ldr	r3, [pc, #408]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0adb      	lsrs	r3, r3, #11
 800438a:	2207      	movs	r2, #7
 800438c:	4013      	ands	r3, r2
 800438e:	4a69      	ldr	r2, [pc, #420]	; (8004534 <HAL_RCC_OscConfig+0x344>)
 8004390:	40da      	lsrs	r2, r3
 8004392:	4b69      	ldr	r3, [pc, #420]	; (8004538 <HAL_RCC_OscConfig+0x348>)
 8004394:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004396:	4b69      	ldr	r3, [pc, #420]	; (800453c <HAL_RCC_OscConfig+0x34c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	0018      	movs	r0, r3
 800439c:	f7ff fbe2 	bl	8003b64 <HAL_InitTick>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d051      	beq.n	8004448 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e27d      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d030      	beq.n	8004412 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043b0:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5e      	ldr	r2, [pc, #376]	; (8004530 <HAL_RCC_OscConfig+0x340>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b56      	ldr	r3, [pc, #344]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b55      	ldr	r3, [pc, #340]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	0049      	lsls	r1, r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7ff fc23 	bl	8003c1c <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043dc:	f7ff fc1e 	bl	8003c1c <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e25a      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4013      	ands	r3, r2
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_RCC_OscConfig+0x33c>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	021a      	lsls	r2, r3, #8
 800440a:	4b45      	ldr	r3, [pc, #276]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	e01b      	b.n	800444a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b42      	ldr	r3, [pc, #264]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004418:	4949      	ldr	r1, [pc, #292]	; (8004540 <HAL_RCC_OscConfig+0x350>)
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7ff fbfd 	bl	8003c1c <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7ff fbf8 	bl	8003c1c <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e234      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4013      	ands	r3, r2
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x238>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004448:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	4013      	ands	r3, r2
 8004452:	d047      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2238      	movs	r2, #56	; 0x38
 800445a:	4013      	ands	r3, r2
 800445c:	2b18      	cmp	r3, #24
 800445e:	d10a      	bne.n	8004476 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004460:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	2202      	movs	r2, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d03c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2f4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d138      	bne.n	80044e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e216      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d019      	beq.n	80044b2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004482:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004484:	2101      	movs	r1, #1
 8004486:	430a      	orrs	r2, r1
 8004488:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7ff fbc7 	bl	8003c1c <HAL_GetTick>
 800448e:	0003      	movs	r3, r0
 8004490:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7ff fbc2 	bl	8003c1c <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1fe      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	2202      	movs	r2, #2
 80044ac:	4013      	ands	r3, r2
 80044ae:	d0f1      	beq.n	8004494 <HAL_RCC_OscConfig+0x2a4>
 80044b0:	e018      	b.n	80044e4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80044b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b6:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80044b8:	2101      	movs	r1, #1
 80044ba:	438a      	bics	r2, r1
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7ff fbad 	bl	8003c1c <HAL_GetTick>
 80044c2:	0003      	movs	r3, r0
 80044c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7ff fba8 	bl	8003c1c <HAL_GetTick>
 80044cc:	0002      	movs	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1e4      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80044dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044de:	2202      	movs	r2, #2
 80044e0:	4013      	ands	r3, r2
 80044e2:	d1f1      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2204      	movs	r2, #4
 80044ea:	4013      	ands	r3, r2
 80044ec:	d100      	bne.n	80044f0 <HAL_RCC_OscConfig+0x300>
 80044ee:	e0c7      	b.n	8004680 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f0:	231f      	movs	r3, #31
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2238      	movs	r2, #56	; 0x38
 80044fe:	4013      	ands	r3, r2
 8004500:	2b20      	cmp	r3, #32
 8004502:	d11f      	bne.n	8004544 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_OscConfig+0x330>)
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	2202      	movs	r2, #2
 800450a:	4013      	ands	r3, r2
 800450c:	d100      	bne.n	8004510 <HAL_RCC_OscConfig+0x320>
 800450e:	e0b7      	b.n	8004680 <HAL_RCC_OscConfig+0x490>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d000      	beq.n	800451a <HAL_RCC_OscConfig+0x32a>
 8004518:	e0b2      	b.n	8004680 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1c2      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	fffeffff 	.word	0xfffeffff
 8004528:	fffbffff 	.word	0xfffbffff
 800452c:	ffff80ff 	.word	0xffff80ff
 8004530:	ffffc7ff 	.word	0xffffc7ff
 8004534:	00f42400 	.word	0x00f42400
 8004538:	20000008 	.word	0x20000008
 800453c:	2000000c 	.word	0x2000000c
 8004540:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004544:	4bb5      	ldr	r3, [pc, #724]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	4013      	ands	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_RCC_OscConfig+0x364>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x366>
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d011      	beq.n	800457e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4bb0      	ldr	r3, [pc, #704]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	4baf      	ldr	r3, [pc, #700]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	0549      	lsls	r1, r1, #21
 8004564:	430a      	orrs	r2, r1
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
 8004568:	4bac      	ldr	r3, [pc, #688]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	055b      	lsls	r3, r3, #21
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004576:	231f      	movs	r3, #31
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457e:	4ba8      	ldr	r3, [pc, #672]	; (8004820 <HAL_RCC_OscConfig+0x630>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4013      	ands	r3, r2
 8004588:	d11a      	bne.n	80045c0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4ba5      	ldr	r3, [pc, #660]	; (8004820 <HAL_RCC_OscConfig+0x630>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4ba4      	ldr	r3, [pc, #656]	; (8004820 <HAL_RCC_OscConfig+0x630>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0049      	lsls	r1, r1, #1
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004598:	f7ff fb40 	bl	8003c1c <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7ff fb3b 	bl	8003c1c <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e177      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b9a      	ldr	r3, [pc, #616]	; (8004820 <HAL_RCC_OscConfig+0x630>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4013      	ands	r3, r2
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3e6>
 80045c8:	4b94      	ldr	r3, [pc, #592]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045cc:	4b93      	ldr	r3, [pc, #588]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	430a      	orrs	r2, r1
 80045d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80045d4:	e01c      	b.n	8004610 <HAL_RCC_OscConfig+0x420>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x408>
 80045de:	4b8f      	ldr	r3, [pc, #572]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045e2:	4b8e      	ldr	r3, [pc, #568]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045e4:	2104      	movs	r1, #4
 80045e6:	430a      	orrs	r2, r1
 80045e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ea:	4b8c      	ldr	r3, [pc, #560]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ee:	4b8b      	ldr	r3, [pc, #556]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045f0:	2101      	movs	r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f6:	e00b      	b.n	8004610 <HAL_RCC_OscConfig+0x420>
 80045f8:	4b88      	ldr	r3, [pc, #544]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fc:	4b87      	ldr	r3, [pc, #540]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80045fe:	2101      	movs	r1, #1
 8004600:	438a      	bics	r2, r1
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c
 8004604:	4b85      	ldr	r3, [pc, #532]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004608:	4b84      	ldr	r3, [pc, #528]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800460a:	2104      	movs	r1, #4
 800460c:	438a      	bics	r2, r1
 800460e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d014      	beq.n	8004642 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7ff fb00 	bl	8003c1c <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004620:	e009      	b.n	8004636 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7ff fafb 	bl	8003c1c <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	4a7d      	ldr	r2, [pc, #500]	; (8004824 <HAL_RCC_OscConfig+0x634>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e136      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004636:	4b79      	ldr	r3, [pc, #484]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x432>
 8004640:	e013      	b.n	800466a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7ff faeb 	bl	8003c1c <HAL_GetTick>
 8004646:	0003      	movs	r3, r0
 8004648:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800464a:	e009      	b.n	8004660 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7ff fae6 	bl	8003c1c <HAL_GetTick>
 8004650:	0002      	movs	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	4a73      	ldr	r2, [pc, #460]	; (8004824 <HAL_RCC_OscConfig+0x634>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e121      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b6e      	ldr	r3, [pc, #440]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	2202      	movs	r2, #2
 8004666:	4013      	ands	r3, r2
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800466a:	231f      	movs	r3, #31
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b69      	ldr	r3, [pc, #420]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004678:	4b68      	ldr	r3, [pc, #416]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800467a:	496b      	ldr	r1, [pc, #428]	; (8004828 <HAL_RCC_OscConfig+0x638>)
 800467c:	400a      	ands	r2, r1
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2220      	movs	r2, #32
 8004686:	4013      	ands	r3, r2
 8004688:	d039      	beq.n	80046fe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01b      	beq.n	80046ca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004692:	4b62      	ldr	r3, [pc, #392]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b61      	ldr	r3, [pc, #388]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	03c9      	lsls	r1, r1, #15
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7ff fabc 	bl	8003c1c <HAL_GetTick>
 80046a4:	0003      	movs	r3, r0
 80046a6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046aa:	f7ff fab7 	bl	8003c1c <HAL_GetTick>
 80046ae:	0002      	movs	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0f3      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046bc:	4b57      	ldr	r3, [pc, #348]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	4013      	ands	r3, r2
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x4ba>
 80046c8:	e019      	b.n	80046fe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ca:	4b54      	ldr	r3, [pc, #336]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80046d0:	4956      	ldr	r1, [pc, #344]	; (800482c <HAL_RCC_OscConfig+0x63c>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7ff faa1 	bl	8003c1c <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e0:	f7ff fa9c 	bl	8003c1c <HAL_GetTick>
 80046e4:	0002      	movs	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0d8      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80046f2:	4b4a      	ldr	r3, [pc, #296]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	4013      	ands	r3, r2
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d100      	bne.n	8004708 <HAL_RCC_OscConfig+0x518>
 8004706:	e0cc      	b.n	80048a2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004708:	4b44      	ldr	r3, [pc, #272]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2238      	movs	r2, #56	; 0x38
 800470e:	4013      	ands	r3, r2
 8004710:	2b10      	cmp	r3, #16
 8004712:	d100      	bne.n	8004716 <HAL_RCC_OscConfig+0x526>
 8004714:	e07b      	b.n	800480e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d156      	bne.n	80047cc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b3e      	ldr	r3, [pc, #248]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004724:	4942      	ldr	r1, [pc, #264]	; (8004830 <HAL_RCC_OscConfig+0x640>)
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7ff fa77 	bl	8003c1c <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7ff fa72 	bl	8003c1c <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0ae      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004746:	4b35      	ldr	r3, [pc, #212]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	049b      	lsls	r3, r3, #18
 800474e:	4013      	ands	r3, r2
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004752:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <HAL_RCC_OscConfig+0x644>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	431a      	orrs	r2, r3
 8004780:	4b26      	ldr	r3, [pc, #152]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004782:	430a      	orrs	r2, r1
 8004784:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004786:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	0449      	lsls	r1, r1, #17
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	0549      	lsls	r1, r1, #21
 800479e:	430a      	orrs	r2, r1
 80047a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7ff fa3b 	bl	8003c1c <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7ff fa36 	bl	8003c1c <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e072      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	049b      	lsls	r3, r3, #18
 80047c6:	4013      	ands	r3, r2
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x5bc>
 80047ca:	e06a      	b.n	80048a2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80047d2:	4917      	ldr	r1, [pc, #92]	; (8004830 <HAL_RCC_OscConfig+0x640>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7ff fa20 	bl	8003c1c <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7ff fa1b 	bl	8003c1c <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e057      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	049b      	lsls	r3, r3, #18
 80047fc:	4013      	ands	r3, r2
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_OscConfig+0x62c>)
 8004806:	490c      	ldr	r1, [pc, #48]	; (8004838 <HAL_RCC_OscConfig+0x648>)
 8004808:	400a      	ands	r2, r1
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	e049      	b.n	80048a2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d112      	bne.n	800483c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e044      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	40021000 	.word	0x40021000
 8004820:	40007000 	.word	0x40007000
 8004824:	00001388 	.word	0x00001388
 8004828:	efffffff 	.word	0xefffffff
 800482c:	ffbfffff 	.word	0xffbfffff
 8004830:	feffffff 	.word	0xfeffffff
 8004834:	11c1808c 	.word	0x11c1808c
 8004838:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x6bc>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2203      	movs	r2, #3
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	429a      	cmp	r2, r3
 800484e:	d126      	bne.n	800489e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2270      	movs	r2, #112	; 0x70
 8004854:	401a      	ands	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d11f      	bne.n	800489e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	23fe      	movs	r3, #254	; 0xfe
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	401a      	ands	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d116      	bne.n	800489e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	23f8      	movs	r3, #248	; 0xf8
 8004874:	039b      	lsls	r3, r3, #14
 8004876:	401a      	ands	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d10e      	bne.n	800489e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	23e0      	movs	r3, #224	; 0xe0
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	401a      	ands	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	0f5b      	lsrs	r3, r3, #29
 8004894:	075a      	lsls	r2, r3, #29
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b008      	add	sp, #32
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0e9      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2207      	movs	r2, #7
 80048ca:	4013      	ands	r3, r2
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d91e      	bls.n	8004910 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b73      	ldr	r3, [pc, #460]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2207      	movs	r2, #7
 80048d8:	4393      	bics	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	4b70      	ldr	r3, [pc, #448]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048e4:	f7ff f99a 	bl	8003c1c <HAL_GetTick>
 80048e8:	0003      	movs	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048ec:	e009      	b.n	8004902 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ee:	f7ff f995 	bl	8003c1c <HAL_GetTick>
 80048f2:	0002      	movs	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	4a6a      	ldr	r2, [pc, #424]	; (8004aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0ca      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004902:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2207      	movs	r2, #7
 8004908:	4013      	ands	r3, r2
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d1ee      	bne.n	80048ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2202      	movs	r2, #2
 8004916:	4013      	ands	r3, r2
 8004918:	d015      	beq.n	8004946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2204      	movs	r2, #4
 8004920:	4013      	ands	r3, r2
 8004922:	d006      	beq.n	8004932 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004924:	4b60      	ldr	r3, [pc, #384]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	4b5f      	ldr	r3, [pc, #380]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800492a:	21e0      	movs	r1, #224	; 0xe0
 800492c:	01c9      	lsls	r1, r1, #7
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004932:	4b5d      	ldr	r3, [pc, #372]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a5d      	ldr	r2, [pc, #372]	; (8004aac <HAL_RCC_ClockConfig+0x1fc>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2201      	movs	r2, #1
 800494c:	4013      	ands	r3, r2
 800494e:	d057      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004958:	4b53      	ldr	r3, [pc, #332]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	029b      	lsls	r3, r3, #10
 8004960:	4013      	ands	r3, r2
 8004962:	d12b      	bne.n	80049bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e097      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d107      	bne.n	8004980 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004970:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	049b      	lsls	r3, r3, #18
 8004978:	4013      	ands	r3, r2
 800497a:	d11f      	bne.n	80049bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e08b      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004988:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4013      	ands	r3, r2
 8004992:	d113      	bne.n	80049bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e07f      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d106      	bne.n	80049ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a4:	2202      	movs	r2, #2
 80049a6:	4013      	ands	r3, r2
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e074      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ae:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	2202      	movs	r2, #2
 80049b4:	4013      	ands	r3, r2
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e06d      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049bc:	4b3a      	ldr	r3, [pc, #232]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2207      	movs	r2, #7
 80049c2:	4393      	bics	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7ff f924 	bl	8003c1c <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d8:	e009      	b.n	80049ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049da:	f7ff f91f 	bl	8003c1c <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e054      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2238      	movs	r2, #56	; 0x38
 80049f4:	401a      	ands	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1ec      	bne.n	80049da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a00:	4b27      	ldr	r3, [pc, #156]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2207      	movs	r2, #7
 8004a06:	4013      	ands	r3, r2
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d21e      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2207      	movs	r2, #7
 8004a14:	4393      	bics	r3, r2
 8004a16:	0019      	movs	r1, r3
 8004a18:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a20:	f7ff f8fc 	bl	8003c1c <HAL_GetTick>
 8004a24:	0003      	movs	r3, r0
 8004a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a28:	e009      	b.n	8004a3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2a:	f7ff f8f7 	bl	8003c1c <HAL_GetTick>
 8004a2e:	0002      	movs	r2, r0
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_RCC_ClockConfig+0x1f4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e02c      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2207      	movs	r2, #7
 8004a44:	4013      	ands	r3, r2
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1ee      	bne.n	8004a2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2204      	movs	r2, #4
 8004a52:	4013      	ands	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <HAL_RCC_ClockConfig+0x200>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a6a:	f000 f829 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	0001      	movs	r1, r0
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	220f      	movs	r2, #15
 8004a78:	401a      	ands	r2, r3
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_ClockConfig+0x204>)
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	58d3      	ldr	r3, [r2, r3]
 8004a80:	221f      	movs	r2, #31
 8004a82:	4013      	ands	r3, r2
 8004a84:	000a      	movs	r2, r1
 8004a86:	40da      	lsrs	r2, r3
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_ClockConfig+0x208>)
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x20c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7ff f867 	bl	8003b64 <HAL_InitTick>
 8004a96:	0003      	movs	r3, r0
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b004      	add	sp, #16
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	00001388 	.word	0x00001388
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	fffff0ff 	.word	0xfffff0ff
 8004ab0:	ffff8fff 	.word	0xffff8fff
 8004ab4:	08009e24 	.word	0x08009e24
 8004ab8:	20000008 	.word	0x20000008
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ac6:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2238      	movs	r2, #56	; 0x38
 8004acc:	4013      	ands	r3, r2
 8004ace:	d10f      	bne.n	8004af0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0adb      	lsrs	r3, r3, #11
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2201      	movs	r2, #1
 8004adc:	409a      	lsls	r2, r3
 8004ade:	0013      	movs	r3, r2
 8004ae0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	4835      	ldr	r0, [pc, #212]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ae6:	f7fb fb29 	bl	800013c <__udivsi3>
 8004aea:	0003      	movs	r3, r0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	e05d      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2238      	movs	r2, #56	; 0x38
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d102      	bne.n	8004b02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004afc:	4b30      	ldr	r3, [pc, #192]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e054      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2238      	movs	r2, #56	; 0x38
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d138      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2203      	movs	r2, #3
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	2207      	movs	r2, #7
 8004b20:	4013      	ands	r3, r2
 8004b22:	3301      	adds	r3, #1
 8004b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4824      	ldr	r0, [pc, #144]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b30:	f7fb fb04 	bl	800013c <__udivsi3>
 8004b34:	0003      	movs	r3, r0
 8004b36:	0019      	movs	r1, r3
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	227f      	movs	r2, #127	; 0x7f
 8004b40:	4013      	ands	r3, r2
 8004b42:	434b      	muls	r3, r1
 8004b44:	617b      	str	r3, [r7, #20]
        break;
 8004b46:	e00d      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	481c      	ldr	r0, [pc, #112]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b4c:	f7fb faf6 	bl	800013c <__udivsi3>
 8004b50:	0003      	movs	r3, r0
 8004b52:	0019      	movs	r1, r3
 8004b54:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	227f      	movs	r2, #127	; 0x7f
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	434b      	muls	r3, r1
 8004b60:	617b      	str	r3, [r7, #20]
        break;
 8004b62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0f5b      	lsrs	r3, r3, #29
 8004b6a:	2207      	movs	r2, #7
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	3301      	adds	r3, #1
 8004b70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	6978      	ldr	r0, [r7, #20]
 8004b76:	f7fb fae1 	bl	800013c <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e015      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2238      	movs	r2, #56	; 0x38
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d103      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e00b      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2238      	movs	r2, #56	; 0x38
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	d103      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ba0:	23fa      	movs	r3, #250	; 0xfa
 8004ba2:	01db      	lsls	r3, r3, #7
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e001      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bac:	693b      	ldr	r3, [r7, #16]
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b006      	add	sp, #24
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	00f42400 	.word	0x00f42400
 8004bc0:	007a1200 	.word	0x007a1200

08004bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000008 	.word	0x20000008

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b5b0      	push	{r4, r5, r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bdc:	f7ff fff2 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004be0:	0004      	movs	r4, r0
 8004be2:	f7ff faf9 	bl	80041d8 <LL_RCC_GetAPB1Prescaler>
 8004be6:	0003      	movs	r3, r0
 8004be8:	0b1a      	lsrs	r2, r3, #12
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	58d3      	ldr	r3, [r2, r3]
 8004bf0:	221f      	movs	r2, #31
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	40dc      	lsrs	r4, r3
 8004bf6:	0023      	movs	r3, r4
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	08009e64 	.word	0x08009e64

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c0c:	2313      	movs	r3, #19
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c14:	2312      	movs	r3, #18
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	029b      	lsls	r3, r3, #10
 8004c24:	4013      	ands	r3, r2
 8004c26:	d100      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c28:	e0ad      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2a:	2011      	movs	r0, #17
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	055b      	lsls	r3, r3, #21
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d110      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	4b44      	ldr	r3, [pc, #272]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c42:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	0549      	lsls	r1, r1, #21
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	055b      	lsls	r3, r3, #21
 8004c54:	4013      	ands	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	183b      	adds	r3, r7, r0
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	0049      	lsls	r1, r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6e:	f7fe ffd5 	bl	8003c1c <HAL_GetTick>
 8004c72:	0003      	movs	r3, r0
 8004c74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fe ffd0 	bl	8003c1c <HAL_GetTick>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d904      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c86:	2313      	movs	r3, #19
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	701a      	strb	r2, [r3, #0]
        break;
 8004c8e:	e005      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d0ed      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c9c:	2313      	movs	r3, #19
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d15e      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004caa:	23c0      	movs	r3, #192	; 0xc0
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d019      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d014      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ccc:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	0249      	lsls	r1, r1, #9
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cda:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ce0:	491e      	ldr	r1, [pc, #120]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d016      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe ff92 	bl	8003c1c <HAL_GetTick>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfc:	e00c      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fe ff8d 	bl	8003c1c <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d904      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d0e:	2313      	movs	r3, #19
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2203      	movs	r2, #3
 8004d14:	701a      	strb	r2, [r3, #0]
            break;
 8004d16:	e004      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d0ed      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d22:	2313      	movs	r3, #19
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d40:	e016      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d42:	2312      	movs	r3, #18
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2213      	movs	r2, #19
 8004d48:	18ba      	adds	r2, r7, r2
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e00f      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40007000 	.word	0x40007000
 8004d58:	fffffcff 	.word	0xfffffcff
 8004d5c:	fffeffff 	.word	0xfffeffff
 8004d60:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	2312      	movs	r3, #18
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2213      	movs	r2, #19
 8004d6a:	18ba      	adds	r2, r7, r2
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d70:	2311      	movs	r3, #17
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d105      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7a:	4bb6      	ldr	r3, [pc, #728]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	4bb5      	ldr	r3, [pc, #724]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d80:	49b5      	ldr	r1, [pc, #724]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004d82:	400a      	ands	r2, r1
 8004d84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d90:	4bb0      	ldr	r3, [pc, #704]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	2203      	movs	r2, #3
 8004d96:	4393      	bics	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4bad      	ldr	r3, [pc, #692]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2202      	movs	r2, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dae:	4ba9      	ldr	r3, [pc, #676]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	220c      	movs	r2, #12
 8004db4:	4393      	bics	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	4ba5      	ldr	r3, [pc, #660]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dcc:	4ba1      	ldr	r3, [pc, #644]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	2230      	movs	r2, #48	; 0x30
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	4b9e      	ldr	r3, [pc, #632]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2210      	movs	r2, #16
 8004de6:	4013      	ands	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dea:	4b9a      	ldr	r3, [pc, #616]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	4a9b      	ldr	r2, [pc, #620]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b96      	ldr	r3, [pc, #600]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	015b      	lsls	r3, r3, #5
 8004e06:	4013      	ands	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004e0a:	4b92      	ldr	r3, [pc, #584]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	4a94      	ldr	r2, [pc, #592]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	4b8e      	ldr	r3, [pc, #568]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2a:	4b8a      	ldr	r3, [pc, #552]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	4a8d      	ldr	r2, [pc, #564]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e38:	4b86      	ldr	r3, [pc, #536]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4013      	ands	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e4a:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	4a86      	ldr	r2, [pc, #536]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2220      	movs	r2, #32
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e68:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	4a7f      	ldr	r2, [pc, #508]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	4b77      	ldr	r3, [pc, #476]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	4a79      	ldr	r2, [pc, #484]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	01db      	lsls	r3, r3, #7
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d015      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea6:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	0899      	lsrs	r1, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	05db      	lsls	r3, r3, #23
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ec4:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	4b62      	ldr	r3, [pc, #392]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	0249      	lsls	r1, r1, #9
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	4013      	ands	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eec:	4b59      	ldr	r3, [pc, #356]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	039b      	lsls	r3, r3, #14
 8004efa:	4013      	ands	r3, r2
 8004efc:	d016      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004efe:	4b55      	ldr	r3, [pc, #340]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	4a5c      	ldr	r2, [pc, #368]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0c:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	03db      	lsls	r3, r3, #15
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f1e:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	0449      	lsls	r1, r1, #17
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	03db      	lsls	r3, r3, #15
 8004f34:	4013      	ands	r3, r2
 8004f36:	d016      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	4a4e      	ldr	r2, [pc, #312]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	0019      	movs	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f46:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	045b      	lsls	r3, r3, #17
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d106      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f58:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	0449      	lsls	r1, r1, #17
 8004f62:	430a      	orrs	r2, r1
 8004f64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d014      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f72:	4b38      	ldr	r3, [pc, #224]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	2203      	movs	r2, #3
 8004f78:	4393      	bics	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	4b34      	ldr	r3, [pc, #208]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0249      	lsls	r1, r1, #9
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	019b      	lsls	r3, r3, #6
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d014      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	220c      	movs	r2, #12
 8004fae:	4393      	bics	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fc4:	4b23      	ldr	r3, [pc, #140]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	0249      	lsls	r1, r1, #9
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	045b      	lsls	r3, r3, #17
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d016      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	4a22      	ldr	r2, [pc, #136]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d106      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	0449      	lsls	r1, r1, #17
 8005008:	430a      	orrs	r2, r1
 800500a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	049b      	lsls	r3, r3, #18
 8005014:	4013      	ands	r3, r2
 8005016:	d016      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a10      	ldr	r2, [pc, #64]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005028:	430a      	orrs	r2, r1
 800502a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	429a      	cmp	r2, r3
 8005036:	d106      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	0449      	lsls	r1, r1, #17
 8005042:	430a      	orrs	r2, r1
 8005044:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005046:	2312      	movs	r3, #18
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b006      	add	sp, #24
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	efffffff 	.word	0xefffffff
 800505c:	fffff3ff 	.word	0xfffff3ff
 8005060:	fffffcff 	.word	0xfffffcff
 8005064:	fff3ffff 	.word	0xfff3ffff
 8005068:	ffcfffff 	.word	0xffcfffff
 800506c:	ffffcfff 	.word	0xffffcfff
 8005070:	ffff3fff 	.word	0xffff3fff
 8005074:	ffbfffff 	.word	0xffbfffff
 8005078:	feffffff 	.word	0xfeffffff

0800507c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0a8      	b.n	80051e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	2382      	movs	r3, #130	; 0x82
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	429a      	cmp	r2, r3
 80050a0:	d009      	beq.n	80050b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	61da      	str	r2, [r3, #28]
 80050a8:	e005      	b.n	80050b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	225d      	movs	r2, #93	; 0x5d
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	225c      	movs	r2, #92	; 0x5c
 80050cc:	2100      	movs	r1, #0
 80050ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fe fb78 	bl	80037c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	225d      	movs	r2, #93	; 0x5d
 80050dc:	2102      	movs	r1, #2
 80050de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	438a      	bics	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	23e0      	movs	r3, #224	; 0xe0
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d902      	bls.n	8005102 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e002      	b.n	8005108 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	015b      	lsls	r3, r3, #5
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	23f0      	movs	r3, #240	; 0xf0
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	429a      	cmp	r2, r3
 8005112:	d008      	beq.n	8005126 <HAL_SPI_Init+0xaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	23e0      	movs	r3, #224	; 0xe0
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	429a      	cmp	r2, r3
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	2382      	movs	r3, #130	; 0x82
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	401a      	ands	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6899      	ldr	r1, [r3, #8]
 8005134:	2384      	movs	r3, #132	; 0x84
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	400b      	ands	r3, r1
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2102      	movs	r1, #2
 8005142:	400b      	ands	r3, r1
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	2101      	movs	r1, #1
 800514c:	400b      	ands	r3, r1
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	400b      	ands	r3, r1
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2138      	movs	r1, #56	; 0x38
 8005162:	400b      	ands	r3, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	400b      	ands	r3, r1
 800516e:	431a      	orrs	r2, r3
 8005170:	0011      	movs	r1, r2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	401a      	ands	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	2204      	movs	r2, #4
 800518c:	401a      	ands	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	2110      	movs	r1, #16
 8005194:	400b      	ands	r3, r1
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	2108      	movs	r1, #8
 800519e:	400b      	ands	r3, r1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68d9      	ldr	r1, [r3, #12]
 80051a6:	23f0      	movs	r3, #240	; 0xf0
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	400b      	ands	r3, r1
 80051ac:	431a      	orrs	r2, r3
 80051ae:	0011      	movs	r1, r2
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	015b      	lsls	r3, r3, #5
 80051b6:	401a      	ands	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4907      	ldr	r1, [pc, #28]	; (80051e8 <HAL_SPI_Init+0x16c>)
 80051cc:	400a      	ands	r2, r1
 80051ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	225d      	movs	r2, #93	; 0x5d
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b004      	add	sp, #16
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffff7ff 	.word	0xfffff7ff

080051ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	1dbb      	adds	r3, r7, #6
 80051fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051fc:	231f      	movs	r3, #31
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	225c      	movs	r2, #92	; 0x5c
 8005208:	5c9b      	ldrb	r3, [r3, r2]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_SPI_Transmit+0x26>
 800520e:	2302      	movs	r3, #2
 8005210:	e147      	b.n	80054a2 <HAL_SPI_Transmit+0x2b6>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	225c      	movs	r2, #92	; 0x5c
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521a:	f7fe fcff 	bl	8003c1c <HAL_GetTick>
 800521e:	0003      	movs	r3, r0
 8005220:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005222:	2316      	movs	r3, #22
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	1dba      	adds	r2, r7, #6
 8005228:	8812      	ldrh	r2, [r2, #0]
 800522a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	225d      	movs	r2, #93	; 0x5d
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d004      	beq.n	8005242 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005238:	231f      	movs	r3, #31
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	2202      	movs	r2, #2
 800523e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005240:	e128      	b.n	8005494 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_SPI_Transmit+0x64>
 8005248:	1dbb      	adds	r3, r7, #6
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005250:	231f      	movs	r3, #31
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
    goto error;
 8005258:	e11c      	b.n	8005494 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	225d      	movs	r2, #93	; 0x5d
 800525e:	2103      	movs	r1, #3
 8005260:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1dba      	adds	r2, r7, #6
 8005272:	8812      	ldrh	r2, [r2, #0]
 8005274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1dba      	adds	r2, r7, #6
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2244      	movs	r2, #68	; 0x44
 8005288:	2100      	movs	r1, #0
 800528a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2246      	movs	r2, #70	; 0x46
 8005290:	2100      	movs	r1, #0
 8005292:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d110      	bne.n	80052ce <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2140      	movs	r1, #64	; 0x40
 80052b8:	438a      	bics	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	01c9      	lsls	r1, r1, #7
 80052ca:	430a      	orrs	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2240      	movs	r2, #64	; 0x40
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d007      	beq.n	80052ec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2140      	movs	r1, #64	; 0x40
 80052e8:	430a      	orrs	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	23e0      	movs	r3, #224	; 0xe0
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d952      	bls.n	800539e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_SPI_Transmit+0x11e>
 8005300:	2316      	movs	r3, #22
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d143      	bne.n	8005392 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800532e:	e030      	b.n	8005392 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2202      	movs	r2, #2
 8005338:	4013      	ands	r3, r2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d112      	bne.n	8005364 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	1c9a      	adds	r2, r3, #2
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005362:	e016      	b.n	8005392 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005364:	f7fe fc5a 	bl	8003c1c <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d802      	bhi.n	800537a <HAL_SPI_Transmit+0x18e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Transmit+0x194>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005380:	231f      	movs	r3, #31
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2203      	movs	r2, #3
 8005386:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	225d      	movs	r2, #93	; 0x5d
 800538c:	2101      	movs	r1, #1
 800538e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005390:	e080      	b.n	8005494 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1c9      	bne.n	8005330 <HAL_SPI_Transmit+0x144>
 800539c:	e053      	b.n	8005446 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <HAL_SPI_Transmit+0x1c4>
 80053a6:	2316      	movs	r3, #22
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d145      	bne.n	800543c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80053d6:	e031      	b.n	800543c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2202      	movs	r2, #2
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d113      	bne.n	800540e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540c:	e016      	b.n	800543c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800540e:	f7fe fc05 	bl	8003c1c <HAL_GetTick>
 8005412:	0002      	movs	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d802      	bhi.n	8005424 <HAL_SPI_Transmit+0x238>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	d102      	bne.n	800542a <HAL_SPI_Transmit+0x23e>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d108      	bne.n	800543c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800542a:	231f      	movs	r3, #31
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2203      	movs	r2, #3
 8005430:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	225d      	movs	r2, #93	; 0x5d
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
          goto error;
 800543a:	e02b      	b.n	8005494 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1c8      	bne.n	80053d8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fcef 	bl	8005e30 <SPI_EndRxTxTransaction>
 8005452:	1e03      	subs	r3, r0, #0
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005482:	231f      	movs	r3, #31
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e003      	b.n	8005494 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	225d      	movs	r2, #93	; 0x5d
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	225c      	movs	r2, #92	; 0x5c
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800549c:	231f      	movs	r3, #31
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	781b      	ldrb	r3, [r3, #0]
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b008      	add	sp, #32
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	1dbb      	adds	r3, r7, #6
 80054ba:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054bc:	2117      	movs	r1, #23
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	225d      	movs	r2, #93	; 0x5d
 80054c8:	5c9b      	ldrb	r3, [r3, r2]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2202      	movs	r2, #2
 80054d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80054d6:	e12b      	b.n	8005730 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	2382      	movs	r3, #130	; 0x82
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d113      	bne.n	800550c <HAL_SPI_Receive+0x60>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	225d      	movs	r2, #93	; 0x5d
 80054f0:	2104      	movs	r1, #4
 80054f2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f4:	1dbb      	adds	r3, r7, #6
 80054f6:	881c      	ldrh	r4, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	0023      	movs	r3, r4
 8005504:	f000 f924 	bl	8005750 <HAL_SPI_TransmitReceive>
 8005508:	0003      	movs	r3, r0
 800550a:	e118      	b.n	800573e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	225c      	movs	r2, #92	; 0x5c
 8005510:	5c9b      	ldrb	r3, [r3, r2]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_SPI_Receive+0x6e>
 8005516:	2302      	movs	r3, #2
 8005518:	e111      	b.n	800573e <HAL_SPI_Receive+0x292>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	225c      	movs	r2, #92	; 0x5c
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005522:	f7fe fb7b 	bl	8003c1c <HAL_GetTick>
 8005526:	0003      	movs	r3, r0
 8005528:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_SPI_Receive+0x8c>
 8005530:	1dbb      	adds	r3, r7, #6
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005538:	2317      	movs	r3, #23
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005540:	e0f6      	b.n	8005730 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	225d      	movs	r2, #93	; 0x5d
 8005546:	2104      	movs	r1, #4
 8005548:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1dba      	adds	r2, r7, #6
 800555a:	2144      	movs	r1, #68	; 0x44
 800555c:	8812      	ldrh	r2, [r2, #0]
 800555e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1dba      	adds	r2, r7, #6
 8005564:	2146      	movs	r1, #70	; 0x46
 8005566:	8812      	ldrh	r2, [r2, #0]
 8005568:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	23e0      	movs	r3, #224	; 0xe0
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	429a      	cmp	r2, r3
 8005592:	d908      	bls.n	80055a6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	496a      	ldr	r1, [pc, #424]	; (8005748 <HAL_SPI_Receive+0x29c>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e008      	b.n	80055b8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	0149      	lsls	r1, r1, #5
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d10f      	bne.n	80055e4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2140      	movs	r1, #64	; 0x40
 80055d0:	438a      	bics	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	495b      	ldr	r1, [pc, #364]	; (800574c <HAL_SPI_Receive+0x2a0>)
 80055e0:	400a      	ands	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d007      	beq.n	8005602 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	23e0      	movs	r3, #224	; 0xe0
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	429a      	cmp	r2, r3
 800560c:	d900      	bls.n	8005610 <HAL_SPI_Receive+0x164>
 800560e:	e071      	b.n	80056f4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005610:	e035      	b.n	800567e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	2b01      	cmp	r3, #1
 800561e:	d117      	bne.n	8005650 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	001a      	movs	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2246      	movs	r2, #70	; 0x46
 8005640:	5a9b      	ldrh	r3, [r3, r2]
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b299      	uxth	r1, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2246      	movs	r2, #70	; 0x46
 800564c:	5299      	strh	r1, [r3, r2]
 800564e:	e016      	b.n	800567e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005650:	f7fe fae4 	bl	8003c1c <HAL_GetTick>
 8005654:	0002      	movs	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d802      	bhi.n	8005666 <HAL_SPI_Receive+0x1ba>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	d102      	bne.n	800566c <HAL_SPI_Receive+0x1c0>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800566c:	2317      	movs	r3, #23
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	2203      	movs	r2, #3
 8005672:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	225d      	movs	r2, #93	; 0x5d
 8005678:	2101      	movs	r1, #1
 800567a:	5499      	strb	r1, [r3, r2]
          goto error;
 800567c:	e058      	b.n	8005730 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2246      	movs	r2, #70	; 0x46
 8005682:	5a9b      	ldrh	r3, [r3, r2]
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1c3      	bne.n	8005612 <HAL_SPI_Receive+0x166>
 800568a:	e039      	b.n	8005700 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2201      	movs	r2, #1
 8005694:	4013      	ands	r3, r2
 8005696:	2b01      	cmp	r3, #1
 8005698:	d115      	bne.n	80056c6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	b292      	uxth	r2, r2
 80056a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	1c9a      	adds	r2, r3, #2
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2246      	movs	r2, #70	; 0x46
 80056b6:	5a9b      	ldrh	r3, [r3, r2]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b299      	uxth	r1, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2246      	movs	r2, #70	; 0x46
 80056c2:	5299      	strh	r1, [r3, r2]
 80056c4:	e016      	b.n	80056f4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c6:	f7fe faa9 	bl	8003c1c <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d802      	bhi.n	80056dc <HAL_SPI_Receive+0x230>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x236>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d108      	bne.n	80056f4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80056e2:	2317      	movs	r3, #23
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2203      	movs	r2, #3
 80056e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	225d      	movs	r2, #93	; 0x5d
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80056f2:	e01d      	b.n	8005730 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2246      	movs	r2, #70	; 0x46
 80056f8:	5a9b      	ldrh	r3, [r3, r2]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1c5      	bne.n	800568c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	0018      	movs	r0, r3
 8005708:	f000 fb34 	bl	8005d74 <SPI_EndRxTransaction>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800571e:	2317      	movs	r3, #23
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e003      	b.n	8005730 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	225d      	movs	r2, #93	; 0x5d
 800572c:	2101      	movs	r1, #1
 800572e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	225c      	movs	r2, #92	; 0x5c
 8005734:	2100      	movs	r1, #0
 8005736:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005738:	2317      	movs	r3, #23
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	781b      	ldrb	r3, [r3, #0]
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	b007      	add	sp, #28
 8005744:	bd90      	pop	{r4, r7, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	ffffefff 	.word	0xffffefff
 800574c:	ffffbfff 	.word	0xffffbfff

08005750 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	001a      	movs	r2, r3
 800575e:	1cbb      	adds	r3, r7, #2
 8005760:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005762:	2301      	movs	r3, #1
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005766:	2323      	movs	r3, #35	; 0x23
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	225c      	movs	r2, #92	; 0x5c
 8005772:	5c9b      	ldrb	r3, [r3, r2]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2c>
 8005778:	2302      	movs	r3, #2
 800577a:	e1c4      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x3b6>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	225c      	movs	r2, #92	; 0x5c
 8005780:	2101      	movs	r1, #1
 8005782:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005784:	f7fe fa4a 	bl	8003c1c <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800578c:	201b      	movs	r0, #27
 800578e:	183b      	adds	r3, r7, r0
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	215d      	movs	r1, #93	; 0x5d
 8005794:	5c52      	ldrb	r2, [r2, r1]
 8005796:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800579e:	2312      	movs	r3, #18
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	1cba      	adds	r2, r7, #2
 80057a4:	8812      	ldrh	r2, [r2, #0]
 80057a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d011      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x84>
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	2382      	movs	r3, #130	; 0x82
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d107      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x7a>
 80057c2:	183b      	adds	r3, r7, r0
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d004      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80057ca:	2323      	movs	r3, #35	; 0x23
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	2202      	movs	r2, #2
 80057d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80057d2:	e191      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <HAL_SPI_TransmitReceive+0x98>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_SPI_TransmitReceive+0x98>
 80057e0:	1cbb      	adds	r3, r7, #2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80057e8:	2323      	movs	r3, #35	; 0x23
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80057f0:	e182      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	225d      	movs	r2, #93	; 0x5d
 80057f6:	5c9b      	ldrb	r3, [r3, r2]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	225d      	movs	r2, #93	; 0x5d
 8005802:	2105      	movs	r1, #5
 8005804:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1cba      	adds	r2, r7, #2
 8005816:	2146      	movs	r1, #70	; 0x46
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1cba      	adds	r2, r7, #2
 8005820:	2144      	movs	r1, #68	; 0x44
 8005822:	8812      	ldrh	r2, [r2, #0]
 8005824:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	1cba      	adds	r2, r7, #2
 8005830:	8812      	ldrh	r2, [r2, #0]
 8005832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1cba      	adds	r2, r7, #2
 8005838:	8812      	ldrh	r2, [r2, #0]
 800583a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	23e0      	movs	r3, #224	; 0xe0
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	429a      	cmp	r2, r3
 8005852:	d908      	bls.n	8005866 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	49ac      	ldr	r1, [pc, #688]	; (8005b10 <HAL_SPI_TransmitReceive+0x3c0>)
 8005860:	400a      	ands	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	e008      	b.n	8005878 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	0149      	lsls	r1, r1, #5
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	4013      	ands	r3, r2
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d007      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	23e0      	movs	r3, #224	; 0xe0
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	429a      	cmp	r2, r3
 80058a0:	d800      	bhi.n	80058a4 <HAL_SPI_TransmitReceive+0x154>
 80058a2:	e083      	b.n	80059ac <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x168>
 80058ac:	2312      	movs	r3, #18
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d000      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x168>
 80058b6:	e06d      	b.n	8005994 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058dc:	e05a      	b.n	8005994 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2202      	movs	r2, #2
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d11b      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x1d4>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x1d4>
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d113      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	1c9a      	adds	r2, r3, #2
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	2b01      	cmp	r3, #1
 8005930:	d11c      	bne.n	800596c <HAL_SPI_TransmitReceive+0x21c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2246      	movs	r2, #70	; 0x46
 8005936:	5a9b      	ldrh	r3, [r3, r2]
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	b292      	uxth	r2, r2
 800594a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	1c9a      	adds	r2, r3, #2
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2246      	movs	r2, #70	; 0x46
 800595a:	5a9b      	ldrh	r3, [r3, r2]
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b299      	uxth	r1, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2246      	movs	r2, #70	; 0x46
 8005966:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005968:	2301      	movs	r3, #1
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800596c:	f7fe f956 	bl	8003c1c <HAL_GetTick>
 8005970:	0002      	movs	r2, r0
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	429a      	cmp	r2, r3
 800597a:	d80b      	bhi.n	8005994 <HAL_SPI_TransmitReceive+0x244>
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	3301      	adds	r3, #1
 8005980:	d008      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005982:	2323      	movs	r3, #35	; 0x23
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	2203      	movs	r2, #3
 8005988:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	225d      	movs	r2, #93	; 0x5d
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]
        goto error;
 8005992:	e0b1      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d19f      	bne.n	80058de <HAL_SPI_TransmitReceive+0x18e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2246      	movs	r2, #70	; 0x46
 80059a2:	5a9b      	ldrh	r3, [r3, r2]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d199      	bne.n	80058de <HAL_SPI_TransmitReceive+0x18e>
 80059aa:	e089      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x270>
 80059b4:	2312      	movs	r3, #18
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d000      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x270>
 80059be:	e074      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e6:	e060      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2202      	movs	r2, #2
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d11c      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x2e0>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d017      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x2e0>
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d114      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2201      	movs	r2, #1
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d11e      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x32c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2246      	movs	r2, #70	; 0x46
 8005a42:	5a9b      	ldrh	r3, [r3, r2]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d018      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	001a      	movs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2246      	movs	r2, #70	; 0x46
 8005a6a:	5a9b      	ldrh	r3, [r3, r2]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b299      	uxth	r1, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2246      	movs	r2, #70	; 0x46
 8005a76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a7c:	f7fe f8ce 	bl	8003c1c <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d802      	bhi.n	8005a92 <HAL_SPI_TransmitReceive+0x342>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	3301      	adds	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x348>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d108      	bne.n	8005aaa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005a98:	2323      	movs	r3, #35	; 0x23
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	225d      	movs	r2, #93	; 0x5d
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	5499      	strb	r1, [r3, r2]
        goto error;
 8005aa8:	e026      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d199      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x298>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2246      	movs	r2, #70	; 0x46
 8005ab8:	5a9b      	ldrh	r3, [r3, r2]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d193      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f9b2 	bl	8005e30 <SPI_EndRxTxTransaction>
 8005acc:	1e03      	subs	r3, r0, #0
 8005ace:	d006      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005ad0:	2323      	movs	r3, #35	; 0x23
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005ae6:	2323      	movs	r3, #35	; 0x23
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	225d      	movs	r2, #93	; 0x5d
 8005af4:	2101      	movs	r1, #1
 8005af6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	225c      	movs	r2, #92	; 0x5c
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b00:	2323      	movs	r3, #35	; 0x23
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	781b      	ldrb	r3, [r3, #0]
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b00a      	add	sp, #40	; 0x28
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	ffffefff 	.word	0xffffefff

08005b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b24:	f7fe f87a 	bl	8003c1c <HAL_GetTick>
 8005b28:	0002      	movs	r2, r0
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	18d3      	adds	r3, r2, r3
 8005b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b34:	f7fe f872 	bl	8003c1c <HAL_GetTick>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	015b      	lsls	r3, r3, #5
 8005b42:	0d1b      	lsrs	r3, r3, #20
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	4353      	muls	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b4a:	e058      	b.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d055      	beq.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b52:	f7fe f863 	bl	8003c1c <HAL_GetTick>
 8005b56:	0002      	movs	r2, r0
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d902      	bls.n	8005b68 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d142      	bne.n	8005bee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	21e0      	movs	r1, #224	; 0xe0
 8005b74:	438a      	bics	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	2382      	movs	r3, #130	; 0x82
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d113      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x98>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d005      	beq.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2140      	movs	r1, #64	; 0x40
 8005ba8:	438a      	bics	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	019b      	lsls	r3, r3, #6
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d110      	bne.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	491a      	ldr	r1, [pc, #104]	; (8005c2c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2180      	movs	r1, #128	; 0x80
 8005bd4:	0189      	lsls	r1, r1, #6
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	225d      	movs	r2, #93	; 0x5d
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	225c      	movs	r2, #92	; 0x5c
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e017      	b.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	425a      	negs	r2, r3
 8005c0e:	4153      	adcs	r3, r2
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	001a      	movs	r2, r3
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d197      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b008      	add	sp, #32
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	20000008 	.word	0x20000008
 8005c2c:	ffffdfff 	.word	0xffffdfff

08005c30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c3e:	2317      	movs	r3, #23
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c46:	f7fd ffe9 	bl	8003c1c <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	18d3      	adds	r3, r2, r3
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c56:	f7fd ffe1 	bl	8003c1c <HAL_GetTick>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	0013      	movs	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	0d1b      	lsrs	r3, r3, #20
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	4353      	muls	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c7c:	e068      	b.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	23c0      	movs	r3, #192	; 0xc0
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d10a      	bne.n	8005c9e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d107      	bne.n	8005c9e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	2117      	movs	r1, #23
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c9a:	187b      	adds	r3, r7, r1
 8005c9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	d055      	beq.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ca4:	f7fd ffba 	bl	8003c1c <HAL_GetTick>
 8005ca8:	0002      	movs	r2, r0
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d902      	bls.n	8005cba <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d142      	bne.n	8005d40 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	21e0      	movs	r1, #224	; 0xe0
 8005cc6:	438a      	bics	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	2382      	movs	r3, #130	; 0x82
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d113      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0xce>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d005      	beq.n	8005cee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d107      	bne.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2140      	movs	r1, #64	; 0x40
 8005cfa:	438a      	bics	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d110      	bne.n	8005d2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4916      	ldr	r1, [pc, #88]	; (8005d70 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	0189      	lsls	r1, r1, #6
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	225d      	movs	r2, #93	; 0x5d
 8005d30:	2101      	movs	r1, #1
 8005d32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	225c      	movs	r2, #92	; 0x5c
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e010      	b.n	8005d62 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d18e      	bne.n	8005c7e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b00a      	add	sp, #40	; 0x28
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	20000008 	.word	0x20000008
 8005d70:	ffffdfff 	.word	0xffffdfff

08005d74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	2382      	movs	r3, #130	; 0x82
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d113      	bne.n	8005db4 <SPI_EndRxTransaction+0x40>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d005      	beq.n	8005da4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d107      	bne.n	8005db4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	438a      	bics	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	0013      	movs	r3, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	f7ff fea7 	bl	8005b14 <SPI_WaitFlagStateUntilTimeout>
 8005dc6:	1e03      	subs	r3, r0, #0
 8005dc8:	d007      	beq.n	8005dda <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dce:	2220      	movs	r2, #32
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e026      	b.n	8005e28 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	2382      	movs	r3, #130	; 0x82
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d11f      	bne.n	8005e26 <SPI_EndRxTransaction+0xb2>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d005      	beq.n	8005dfe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d113      	bne.n	8005e26 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	23c0      	movs	r3, #192	; 0xc0
 8005e02:	00d9      	lsls	r1, r3, #3
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f7ff ff0f 	bl	8005c30 <SPI_WaitFifoStateUntilTimeout>
 8005e12:	1e03      	subs	r3, r0, #0
 8005e14:	d007      	beq.n	8005e26 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e000      	b.n	8005e28 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	23c0      	movs	r3, #192	; 0xc0
 8005e40:	0159      	lsls	r1, r3, #5
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	0013      	movs	r3, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f7ff fef0 	bl	8005c30 <SPI_WaitFifoStateUntilTimeout>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d007      	beq.n	8005e64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e58:	2220      	movs	r2, #32
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e027      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	0013      	movs	r3, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	f7ff fe4f 	bl	8005b14 <SPI_WaitFlagStateUntilTimeout>
 8005e76:	1e03      	subs	r3, r0, #0
 8005e78:	d007      	beq.n	8005e8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7e:	2220      	movs	r2, #32
 8005e80:	431a      	orrs	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e014      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	23c0      	movs	r3, #192	; 0xc0
 8005e8e:	00d9      	lsls	r1, r3, #3
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	0013      	movs	r3, r2
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f7ff fec9 	bl	8005c30 <SPI_WaitFifoStateUntilTimeout>
 8005e9e:	1e03      	subs	r3, r0, #0
 8005ea0:	d007      	beq.n	8005eb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e000      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b004      	add	sp, #16
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e046      	b.n	8005f5c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2288      	movs	r2, #136	; 0x88
 8005ed2:	589b      	ldr	r3, [r3, r2]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2284      	movs	r2, #132	; 0x84
 8005edc:	2100      	movs	r1, #0
 8005ede:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7fd fcba 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2288      	movs	r2, #136	; 0x88
 8005eec:	2124      	movs	r1, #36	; 0x24
 8005eee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2101      	movs	r1, #1
 8005efc:	438a      	bics	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fc26 	bl	800675c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f000 f8cc 	bl	80060b0 <UART_SetConfig>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e01c      	b.n	8005f5c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	490d      	ldr	r1, [pc, #52]	; (8005f64 <HAL_UART_Init+0xa8>)
 8005f2e:	400a      	ands	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	212a      	movs	r1, #42	; 0x2a
 8005f3e:	438a      	bics	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 fcb5 	bl	80068c4 <UART_CheckIdleState>
 8005f5a:	0003      	movs	r3, r0
}
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	ffffb7ff 	.word	0xffffb7ff

08005f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	1dbb      	adds	r3, r7, #6
 8005f76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2288      	movs	r2, #136	; 0x88
 8005f7c:	589b      	ldr	r3, [r3, r2]
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d000      	beq.n	8005f84 <HAL_UART_Transmit+0x1c>
 8005f82:	e090      	b.n	80060a6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_Transmit+0x2a>
 8005f8a:	1dbb      	adds	r3, r7, #6
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e088      	b.n	80060a8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d109      	bne.n	8005fb6 <HAL_UART_Transmit+0x4e>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2201      	movs	r2, #1
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d001      	beq.n	8005fb6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e078      	b.n	80060a8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2290      	movs	r2, #144	; 0x90
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2288      	movs	r2, #136	; 0x88
 8005fc2:	2121      	movs	r1, #33	; 0x21
 8005fc4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fc6:	f7fd fe29 	bl	8003c1c <HAL_GetTick>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1dba      	adds	r2, r7, #6
 8005fd2:	2154      	movs	r1, #84	; 0x54
 8005fd4:	8812      	ldrh	r2, [r2, #0]
 8005fd6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1dba      	adds	r2, r7, #6
 8005fdc:	2156      	movs	r1, #86	; 0x56
 8005fde:	8812      	ldrh	r2, [r2, #0]
 8005fe0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	015b      	lsls	r3, r3, #5
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d108      	bne.n	8006000 <HAL_UART_Transmit+0x98>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e003      	b.n	8006008 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006008:	e030      	b.n	800606c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	0013      	movs	r3, r2
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	f000 fcfe 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d005      	beq.n	800602c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2288      	movs	r2, #136	; 0x88
 8006024:	2120      	movs	r1, #32
 8006026:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e03d      	b.n	80060a8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	001a      	movs	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	05d2      	lsls	r2, r2, #23
 800603e:	0dd2      	lsrs	r2, r2, #23
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	3302      	adds	r3, #2
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	e007      	b.n	800605a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	3301      	adds	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2256      	movs	r2, #86	; 0x56
 800605e:	5a9b      	ldrh	r3, [r3, r2]
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b299      	uxth	r1, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2256      	movs	r2, #86	; 0x56
 800606a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2256      	movs	r2, #86	; 0x56
 8006070:	5a9b      	ldrh	r3, [r3, r2]
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1c8      	bne.n	800600a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	0013      	movs	r3, r2
 8006082:	2200      	movs	r2, #0
 8006084:	2140      	movs	r1, #64	; 0x40
 8006086:	f000 fcc7 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d005      	beq.n	800609a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2288      	movs	r2, #136	; 0x88
 8006092:	2120      	movs	r1, #32
 8006094:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e006      	b.n	80060a8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2288      	movs	r2, #136	; 0x88
 800609e:	2120      	movs	r1, #32
 80060a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b008      	add	sp, #32
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b5b0      	push	{r4, r5, r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060b8:	231a      	movs	r3, #26
 80060ba:	2220      	movs	r2, #32
 80060bc:	189b      	adds	r3, r3, r2
 80060be:	19db      	adds	r3, r3, r7
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	4313      	orrs	r3, r2
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4ac1      	ldr	r2, [pc, #772]	; (80063e8 <UART_SetConfig+0x338>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4abc      	ldr	r2, [pc, #752]	; (80063ec <UART_SetConfig+0x33c>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	68d9      	ldr	r1, [r3, #12]
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	0003      	movs	r3, r0
 8006108:	430b      	orrs	r3, r1
 800610a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4ab6      	ldr	r2, [pc, #728]	; (80063f0 <UART_SetConfig+0x340>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <UART_SetConfig+0x80>
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4ab4      	ldr	r2, [pc, #720]	; (80063f4 <UART_SetConfig+0x344>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800612c:	4313      	orrs	r3, r2
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4ab0      	ldr	r2, [pc, #704]	; (80063f8 <UART_SetConfig+0x348>)
 8006138:	4013      	ands	r3, r2
 800613a:	0019      	movs	r1, r3
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006142:	430b      	orrs	r3, r1
 8006144:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	220f      	movs	r2, #15
 800614e:	4393      	bics	r3, r2
 8006150:	0018      	movs	r0, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	0003      	movs	r3, r0
 800615c:	430b      	orrs	r3, r1
 800615e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4aa5      	ldr	r2, [pc, #660]	; (80063fc <UART_SetConfig+0x34c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d131      	bne.n	80061ce <UART_SetConfig+0x11e>
 800616a:	4ba5      	ldr	r3, [pc, #660]	; (8006400 <UART_SetConfig+0x350>)
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	2203      	movs	r2, #3
 8006170:	4013      	ands	r3, r2
 8006172:	2b03      	cmp	r3, #3
 8006174:	d01d      	beq.n	80061b2 <UART_SetConfig+0x102>
 8006176:	d823      	bhi.n	80061c0 <UART_SetConfig+0x110>
 8006178:	2b02      	cmp	r3, #2
 800617a:	d00c      	beq.n	8006196 <UART_SetConfig+0xe6>
 800617c:	d820      	bhi.n	80061c0 <UART_SetConfig+0x110>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <UART_SetConfig+0xd8>
 8006182:	2b01      	cmp	r3, #1
 8006184:	d00e      	beq.n	80061a4 <UART_SetConfig+0xf4>
 8006186:	e01b      	b.n	80061c0 <UART_SetConfig+0x110>
 8006188:	231b      	movs	r3, #27
 800618a:	2220      	movs	r2, #32
 800618c:	189b      	adds	r3, r3, r2
 800618e:	19db      	adds	r3, r3, r7
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e154      	b.n	8006440 <UART_SetConfig+0x390>
 8006196:	231b      	movs	r3, #27
 8006198:	2220      	movs	r2, #32
 800619a:	189b      	adds	r3, r3, r2
 800619c:	19db      	adds	r3, r3, r7
 800619e:	2202      	movs	r2, #2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e14d      	b.n	8006440 <UART_SetConfig+0x390>
 80061a4:	231b      	movs	r3, #27
 80061a6:	2220      	movs	r2, #32
 80061a8:	189b      	adds	r3, r3, r2
 80061aa:	19db      	adds	r3, r3, r7
 80061ac:	2204      	movs	r2, #4
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e146      	b.n	8006440 <UART_SetConfig+0x390>
 80061b2:	231b      	movs	r3, #27
 80061b4:	2220      	movs	r2, #32
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	19db      	adds	r3, r3, r7
 80061ba:	2208      	movs	r2, #8
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e13f      	b.n	8006440 <UART_SetConfig+0x390>
 80061c0:	231b      	movs	r3, #27
 80061c2:	2220      	movs	r2, #32
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	19db      	adds	r3, r3, r7
 80061c8:	2210      	movs	r2, #16
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e138      	b.n	8006440 <UART_SetConfig+0x390>
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a8c      	ldr	r2, [pc, #560]	; (8006404 <UART_SetConfig+0x354>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d131      	bne.n	800623c <UART_SetConfig+0x18c>
 80061d8:	4b89      	ldr	r3, [pc, #548]	; (8006400 <UART_SetConfig+0x350>)
 80061da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061dc:	220c      	movs	r2, #12
 80061de:	4013      	ands	r3, r2
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d01d      	beq.n	8006220 <UART_SetConfig+0x170>
 80061e4:	d823      	bhi.n	800622e <UART_SetConfig+0x17e>
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d00c      	beq.n	8006204 <UART_SetConfig+0x154>
 80061ea:	d820      	bhi.n	800622e <UART_SetConfig+0x17e>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <UART_SetConfig+0x146>
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d00e      	beq.n	8006212 <UART_SetConfig+0x162>
 80061f4:	e01b      	b.n	800622e <UART_SetConfig+0x17e>
 80061f6:	231b      	movs	r3, #27
 80061f8:	2220      	movs	r2, #32
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	19db      	adds	r3, r3, r7
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e11d      	b.n	8006440 <UART_SetConfig+0x390>
 8006204:	231b      	movs	r3, #27
 8006206:	2220      	movs	r2, #32
 8006208:	189b      	adds	r3, r3, r2
 800620a:	19db      	adds	r3, r3, r7
 800620c:	2202      	movs	r2, #2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e116      	b.n	8006440 <UART_SetConfig+0x390>
 8006212:	231b      	movs	r3, #27
 8006214:	2220      	movs	r2, #32
 8006216:	189b      	adds	r3, r3, r2
 8006218:	19db      	adds	r3, r3, r7
 800621a:	2204      	movs	r2, #4
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e10f      	b.n	8006440 <UART_SetConfig+0x390>
 8006220:	231b      	movs	r3, #27
 8006222:	2220      	movs	r2, #32
 8006224:	189b      	adds	r3, r3, r2
 8006226:	19db      	adds	r3, r3, r7
 8006228:	2208      	movs	r2, #8
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e108      	b.n	8006440 <UART_SetConfig+0x390>
 800622e:	231b      	movs	r3, #27
 8006230:	2220      	movs	r2, #32
 8006232:	189b      	adds	r3, r3, r2
 8006234:	19db      	adds	r3, r3, r7
 8006236:	2210      	movs	r2, #16
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e101      	b.n	8006440 <UART_SetConfig+0x390>
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a71      	ldr	r2, [pc, #452]	; (8006408 <UART_SetConfig+0x358>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d131      	bne.n	80062aa <UART_SetConfig+0x1fa>
 8006246:	4b6e      	ldr	r3, [pc, #440]	; (8006400 <UART_SetConfig+0x350>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	2230      	movs	r2, #48	; 0x30
 800624c:	4013      	ands	r3, r2
 800624e:	2b30      	cmp	r3, #48	; 0x30
 8006250:	d01d      	beq.n	800628e <UART_SetConfig+0x1de>
 8006252:	d823      	bhi.n	800629c <UART_SetConfig+0x1ec>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d00c      	beq.n	8006272 <UART_SetConfig+0x1c2>
 8006258:	d820      	bhi.n	800629c <UART_SetConfig+0x1ec>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <UART_SetConfig+0x1b4>
 800625e:	2b10      	cmp	r3, #16
 8006260:	d00e      	beq.n	8006280 <UART_SetConfig+0x1d0>
 8006262:	e01b      	b.n	800629c <UART_SetConfig+0x1ec>
 8006264:	231b      	movs	r3, #27
 8006266:	2220      	movs	r2, #32
 8006268:	189b      	adds	r3, r3, r2
 800626a:	19db      	adds	r3, r3, r7
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e0e6      	b.n	8006440 <UART_SetConfig+0x390>
 8006272:	231b      	movs	r3, #27
 8006274:	2220      	movs	r2, #32
 8006276:	189b      	adds	r3, r3, r2
 8006278:	19db      	adds	r3, r3, r7
 800627a:	2202      	movs	r2, #2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e0df      	b.n	8006440 <UART_SetConfig+0x390>
 8006280:	231b      	movs	r3, #27
 8006282:	2220      	movs	r2, #32
 8006284:	189b      	adds	r3, r3, r2
 8006286:	19db      	adds	r3, r3, r7
 8006288:	2204      	movs	r2, #4
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e0d8      	b.n	8006440 <UART_SetConfig+0x390>
 800628e:	231b      	movs	r3, #27
 8006290:	2220      	movs	r2, #32
 8006292:	189b      	adds	r3, r3, r2
 8006294:	19db      	adds	r3, r3, r7
 8006296:	2208      	movs	r2, #8
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e0d1      	b.n	8006440 <UART_SetConfig+0x390>
 800629c:	231b      	movs	r3, #27
 800629e:	2220      	movs	r2, #32
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	19db      	adds	r3, r3, r7
 80062a4:	2210      	movs	r2, #16
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e0ca      	b.n	8006440 <UART_SetConfig+0x390>
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a57      	ldr	r2, [pc, #348]	; (800640c <UART_SetConfig+0x35c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d106      	bne.n	80062c2 <UART_SetConfig+0x212>
 80062b4:	231b      	movs	r3, #27
 80062b6:	2220      	movs	r2, #32
 80062b8:	189b      	adds	r3, r3, r2
 80062ba:	19db      	adds	r3, r3, r7
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	e0be      	b.n	8006440 <UART_SetConfig+0x390>
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a52      	ldr	r2, [pc, #328]	; (8006410 <UART_SetConfig+0x360>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d106      	bne.n	80062da <UART_SetConfig+0x22a>
 80062cc:	231b      	movs	r3, #27
 80062ce:	2220      	movs	r2, #32
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e0b2      	b.n	8006440 <UART_SetConfig+0x390>
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4d      	ldr	r2, [pc, #308]	; (8006414 <UART_SetConfig+0x364>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d106      	bne.n	80062f2 <UART_SetConfig+0x242>
 80062e4:	231b      	movs	r3, #27
 80062e6:	2220      	movs	r2, #32
 80062e8:	189b      	adds	r3, r3, r2
 80062ea:	19db      	adds	r3, r3, r7
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e0a6      	b.n	8006440 <UART_SetConfig+0x390>
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3e      	ldr	r2, [pc, #248]	; (80063f0 <UART_SetConfig+0x340>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d13e      	bne.n	800637a <UART_SetConfig+0x2ca>
 80062fc:	4b40      	ldr	r3, [pc, #256]	; (8006400 <UART_SetConfig+0x350>)
 80062fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006300:	23c0      	movs	r3, #192	; 0xc0
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	4013      	ands	r3, r2
 8006306:	22c0      	movs	r2, #192	; 0xc0
 8006308:	0112      	lsls	r2, r2, #4
 800630a:	4293      	cmp	r3, r2
 800630c:	d027      	beq.n	800635e <UART_SetConfig+0x2ae>
 800630e:	22c0      	movs	r2, #192	; 0xc0
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	4293      	cmp	r3, r2
 8006314:	d82a      	bhi.n	800636c <UART_SetConfig+0x2bc>
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	0112      	lsls	r2, r2, #4
 800631a:	4293      	cmp	r3, r2
 800631c:	d011      	beq.n	8006342 <UART_SetConfig+0x292>
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	4293      	cmp	r3, r2
 8006324:	d822      	bhi.n	800636c <UART_SetConfig+0x2bc>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <UART_SetConfig+0x284>
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	00d2      	lsls	r2, r2, #3
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <UART_SetConfig+0x2a0>
 8006332:	e01b      	b.n	800636c <UART_SetConfig+0x2bc>
 8006334:	231b      	movs	r3, #27
 8006336:	2220      	movs	r2, #32
 8006338:	189b      	adds	r3, r3, r2
 800633a:	19db      	adds	r3, r3, r7
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e07e      	b.n	8006440 <UART_SetConfig+0x390>
 8006342:	231b      	movs	r3, #27
 8006344:	2220      	movs	r2, #32
 8006346:	189b      	adds	r3, r3, r2
 8006348:	19db      	adds	r3, r3, r7
 800634a:	2202      	movs	r2, #2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e077      	b.n	8006440 <UART_SetConfig+0x390>
 8006350:	231b      	movs	r3, #27
 8006352:	2220      	movs	r2, #32
 8006354:	189b      	adds	r3, r3, r2
 8006356:	19db      	adds	r3, r3, r7
 8006358:	2204      	movs	r2, #4
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	e070      	b.n	8006440 <UART_SetConfig+0x390>
 800635e:	231b      	movs	r3, #27
 8006360:	2220      	movs	r2, #32
 8006362:	189b      	adds	r3, r3, r2
 8006364:	19db      	adds	r3, r3, r7
 8006366:	2208      	movs	r2, #8
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e069      	b.n	8006440 <UART_SetConfig+0x390>
 800636c:	231b      	movs	r3, #27
 800636e:	2220      	movs	r2, #32
 8006370:	189b      	adds	r3, r3, r2
 8006372:	19db      	adds	r3, r3, r7
 8006374:	2210      	movs	r2, #16
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e062      	b.n	8006440 <UART_SetConfig+0x390>
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <UART_SetConfig+0x344>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d157      	bne.n	8006434 <UART_SetConfig+0x384>
 8006384:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <UART_SetConfig+0x350>)
 8006386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006388:	23c0      	movs	r3, #192	; 0xc0
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4013      	ands	r3, r2
 800638e:	22c0      	movs	r2, #192	; 0xc0
 8006390:	0092      	lsls	r2, r2, #2
 8006392:	4293      	cmp	r3, r2
 8006394:	d040      	beq.n	8006418 <UART_SetConfig+0x368>
 8006396:	22c0      	movs	r2, #192	; 0xc0
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	4293      	cmp	r3, r2
 800639c:	d843      	bhi.n	8006426 <UART_SetConfig+0x376>
 800639e:	2280      	movs	r2, #128	; 0x80
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d011      	beq.n	80063ca <UART_SetConfig+0x31a>
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	0092      	lsls	r2, r2, #2
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d83b      	bhi.n	8006426 <UART_SetConfig+0x376>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <UART_SetConfig+0x30c>
 80063b2:	2280      	movs	r2, #128	; 0x80
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <UART_SetConfig+0x328>
 80063ba:	e034      	b.n	8006426 <UART_SetConfig+0x376>
 80063bc:	231b      	movs	r3, #27
 80063be:	2220      	movs	r2, #32
 80063c0:	189b      	adds	r3, r3, r2
 80063c2:	19db      	adds	r3, r3, r7
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e03a      	b.n	8006440 <UART_SetConfig+0x390>
 80063ca:	231b      	movs	r3, #27
 80063cc:	2220      	movs	r2, #32
 80063ce:	189b      	adds	r3, r3, r2
 80063d0:	19db      	adds	r3, r3, r7
 80063d2:	2202      	movs	r2, #2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e033      	b.n	8006440 <UART_SetConfig+0x390>
 80063d8:	231b      	movs	r3, #27
 80063da:	2220      	movs	r2, #32
 80063dc:	189b      	adds	r3, r3, r2
 80063de:	19db      	adds	r3, r3, r7
 80063e0:	2204      	movs	r2, #4
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e02c      	b.n	8006440 <UART_SetConfig+0x390>
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	cfff69f3 	.word	0xcfff69f3
 80063ec:	ffffcfff 	.word	0xffffcfff
 80063f0:	40008000 	.word	0x40008000
 80063f4:	40008400 	.word	0x40008400
 80063f8:	11fff4ff 	.word	0x11fff4ff
 80063fc:	40013800 	.word	0x40013800
 8006400:	40021000 	.word	0x40021000
 8006404:	40004400 	.word	0x40004400
 8006408:	40004800 	.word	0x40004800
 800640c:	40004c00 	.word	0x40004c00
 8006410:	40005000 	.word	0x40005000
 8006414:	40013c00 	.word	0x40013c00
 8006418:	231b      	movs	r3, #27
 800641a:	2220      	movs	r2, #32
 800641c:	189b      	adds	r3, r3, r2
 800641e:	19db      	adds	r3, r3, r7
 8006420:	2208      	movs	r2, #8
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e00c      	b.n	8006440 <UART_SetConfig+0x390>
 8006426:	231b      	movs	r3, #27
 8006428:	2220      	movs	r2, #32
 800642a:	189b      	adds	r3, r3, r2
 800642c:	19db      	adds	r3, r3, r7
 800642e:	2210      	movs	r2, #16
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e005      	b.n	8006440 <UART_SetConfig+0x390>
 8006434:	231b      	movs	r3, #27
 8006436:	2220      	movs	r2, #32
 8006438:	189b      	adds	r3, r3, r2
 800643a:	19db      	adds	r3, r3, r7
 800643c:	2210      	movs	r2, #16
 800643e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4ac1      	ldr	r2, [pc, #772]	; (800674c <UART_SetConfig+0x69c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d005      	beq.n	8006456 <UART_SetConfig+0x3a6>
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4ac0      	ldr	r2, [pc, #768]	; (8006750 <UART_SetConfig+0x6a0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d000      	beq.n	8006456 <UART_SetConfig+0x3a6>
 8006454:	e093      	b.n	800657e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006456:	231b      	movs	r3, #27
 8006458:	2220      	movs	r2, #32
 800645a:	189b      	adds	r3, r3, r2
 800645c:	19db      	adds	r3, r3, r7
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d015      	beq.n	8006490 <UART_SetConfig+0x3e0>
 8006464:	dc18      	bgt.n	8006498 <UART_SetConfig+0x3e8>
 8006466:	2b04      	cmp	r3, #4
 8006468:	d00d      	beq.n	8006486 <UART_SetConfig+0x3d6>
 800646a:	dc15      	bgt.n	8006498 <UART_SetConfig+0x3e8>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <UART_SetConfig+0x3c6>
 8006470:	2b02      	cmp	r3, #2
 8006472:	d005      	beq.n	8006480 <UART_SetConfig+0x3d0>
 8006474:	e010      	b.n	8006498 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006476:	f7fe fbaf 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 800647a:	0003      	movs	r3, r0
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800647e:	e014      	b.n	80064aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006480:	4bb4      	ldr	r3, [pc, #720]	; (8006754 <UART_SetConfig+0x6a4>)
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006484:	e011      	b.n	80064aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006486:	f7fe fb1b 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 800648a:	0003      	movs	r3, r0
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800648e:	e00c      	b.n	80064aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006496:	e008      	b.n	80064aa <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800649c:	231a      	movs	r3, #26
 800649e:	2220      	movs	r2, #32
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	2201      	movs	r2, #1
 80064a6:	701a      	strb	r2, [r3, #0]
        break;
 80064a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d100      	bne.n	80064b2 <UART_SetConfig+0x402>
 80064b0:	e135      	b.n	800671e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064b6:	4ba8      	ldr	r3, [pc, #672]	; (8006758 <UART_SetConfig+0x6a8>)
 80064b8:	0052      	lsls	r2, r2, #1
 80064ba:	5ad3      	ldrh	r3, [r2, r3]
 80064bc:	0019      	movs	r1, r3
 80064be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064c0:	f7f9 fe3c 	bl	800013c <__udivsi3>
 80064c4:	0003      	movs	r3, r0
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	0013      	movs	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d305      	bcc.n	80064e4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d906      	bls.n	80064f2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80064e4:	231a      	movs	r3, #26
 80064e6:	2220      	movs	r2, #32
 80064e8:	189b      	adds	r3, r3, r2
 80064ea:	19db      	adds	r3, r3, r7
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e044      	b.n	800657c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064fe:	4b96      	ldr	r3, [pc, #600]	; (8006758 <UART_SetConfig+0x6a8>)
 8006500:	0052      	lsls	r2, r2, #1
 8006502:	5ad3      	ldrh	r3, [r2, r3]
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	69b8      	ldr	r0, [r7, #24]
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	f7f9 ffc7 	bl	80004a4 <__aeabi_uldivmod>
 8006516:	0002      	movs	r2, r0
 8006518:	000b      	movs	r3, r1
 800651a:	0e11      	lsrs	r1, r2, #24
 800651c:	021d      	lsls	r5, r3, #8
 800651e:	430d      	orrs	r5, r1
 8006520:	0214      	lsls	r4, r2, #8
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68b8      	ldr	r0, [r7, #8]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	1900      	adds	r0, r0, r4
 8006534:	4169      	adcs	r1, r5
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f7f9 ffae 	bl	80004a4 <__aeabi_uldivmod>
 8006548:	0002      	movs	r2, r0
 800654a:	000b      	movs	r3, r1
 800654c:	0013      	movs	r3, r2
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	23c0      	movs	r3, #192	; 0xc0
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	429a      	cmp	r2, r3
 8006558:	d309      	bcc.n	800656e <UART_SetConfig+0x4be>
 800655a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	035b      	lsls	r3, r3, #13
 8006560:	429a      	cmp	r2, r3
 8006562:	d204      	bcs.n	800656e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	e006      	b.n	800657c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800656e:	231a      	movs	r3, #26
 8006570:	2220      	movs	r2, #32
 8006572:	189b      	adds	r3, r3, r2
 8006574:	19db      	adds	r3, r3, r7
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800657a:	e0d0      	b.n	800671e <UART_SetConfig+0x66e>
 800657c:	e0cf      	b.n	800671e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	429a      	cmp	r2, r3
 8006588:	d000      	beq.n	800658c <UART_SetConfig+0x4dc>
 800658a:	e070      	b.n	800666e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800658c:	231b      	movs	r3, #27
 800658e:	2220      	movs	r2, #32
 8006590:	189b      	adds	r3, r3, r2
 8006592:	19db      	adds	r3, r3, r7
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b08      	cmp	r3, #8
 8006598:	d015      	beq.n	80065c6 <UART_SetConfig+0x516>
 800659a:	dc18      	bgt.n	80065ce <UART_SetConfig+0x51e>
 800659c:	2b04      	cmp	r3, #4
 800659e:	d00d      	beq.n	80065bc <UART_SetConfig+0x50c>
 80065a0:	dc15      	bgt.n	80065ce <UART_SetConfig+0x51e>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <UART_SetConfig+0x4fc>
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d005      	beq.n	80065b6 <UART_SetConfig+0x506>
 80065aa:	e010      	b.n	80065ce <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ac:	f7fe fb14 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 80065b0:	0003      	movs	r3, r0
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b4:	e014      	b.n	80065e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b6:	4b67      	ldr	r3, [pc, #412]	; (8006754 <UART_SetConfig+0x6a4>)
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ba:	e011      	b.n	80065e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065bc:	f7fe fa80 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 80065c0:	0003      	movs	r3, r0
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c4:	e00c      	b.n	80065e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065cc:	e008      	b.n	80065e0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80065d2:	231a      	movs	r3, #26
 80065d4:	2220      	movs	r2, #32
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
        break;
 80065de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d100      	bne.n	80065e8 <UART_SetConfig+0x538>
 80065e6:	e09a      	b.n	800671e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ec:	4b5a      	ldr	r3, [pc, #360]	; (8006758 <UART_SetConfig+0x6a8>)
 80065ee:	0052      	lsls	r2, r2, #1
 80065f0:	5ad3      	ldrh	r3, [r2, r3]
 80065f2:	0019      	movs	r1, r3
 80065f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80065f6:	f7f9 fda1 	bl	800013c <__udivsi3>
 80065fa:	0003      	movs	r3, r0
 80065fc:	005a      	lsls	r2, r3, #1
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	18d2      	adds	r2, r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	0019      	movs	r1, r3
 800660c:	0010      	movs	r0, r2
 800660e:	f7f9 fd95 	bl	800013c <__udivsi3>
 8006612:	0003      	movs	r3, r0
 8006614:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d921      	bls.n	8006660 <UART_SetConfig+0x5b0>
 800661c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	025b      	lsls	r3, r3, #9
 8006622:	429a      	cmp	r2, r3
 8006624:	d21c      	bcs.n	8006660 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	b29a      	uxth	r2, r3
 800662a:	200e      	movs	r0, #14
 800662c:	2420      	movs	r4, #32
 800662e:	1903      	adds	r3, r0, r4
 8006630:	19db      	adds	r3, r3, r7
 8006632:	210f      	movs	r1, #15
 8006634:	438a      	bics	r2, r1
 8006636:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	b29b      	uxth	r3, r3
 800663e:	2207      	movs	r2, #7
 8006640:	4013      	ands	r3, r2
 8006642:	b299      	uxth	r1, r3
 8006644:	1903      	adds	r3, r0, r4
 8006646:	19db      	adds	r3, r3, r7
 8006648:	1902      	adds	r2, r0, r4
 800664a:	19d2      	adds	r2, r2, r7
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	1902      	adds	r2, r0, r4
 8006658:	19d2      	adds	r2, r2, r7
 800665a:	8812      	ldrh	r2, [r2, #0]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	e05e      	b.n	800671e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006660:	231a      	movs	r3, #26
 8006662:	2220      	movs	r2, #32
 8006664:	189b      	adds	r3, r3, r2
 8006666:	19db      	adds	r3, r3, r7
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	e057      	b.n	800671e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800666e:	231b      	movs	r3, #27
 8006670:	2220      	movs	r2, #32
 8006672:	189b      	adds	r3, r3, r2
 8006674:	19db      	adds	r3, r3, r7
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d015      	beq.n	80066a8 <UART_SetConfig+0x5f8>
 800667c:	dc18      	bgt.n	80066b0 <UART_SetConfig+0x600>
 800667e:	2b04      	cmp	r3, #4
 8006680:	d00d      	beq.n	800669e <UART_SetConfig+0x5ee>
 8006682:	dc15      	bgt.n	80066b0 <UART_SetConfig+0x600>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <UART_SetConfig+0x5de>
 8006688:	2b02      	cmp	r3, #2
 800668a:	d005      	beq.n	8006698 <UART_SetConfig+0x5e8>
 800668c:	e010      	b.n	80066b0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668e:	f7fe faa3 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8006692:	0003      	movs	r3, r0
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006696:	e014      	b.n	80066c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b2e      	ldr	r3, [pc, #184]	; (8006754 <UART_SetConfig+0x6a4>)
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800669c:	e011      	b.n	80066c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fe fa0f 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 80066a2:	0003      	movs	r3, r0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066a6:	e00c      	b.n	80066c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ae:	e008      	b.n	80066c2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066b4:	231a      	movs	r3, #26
 80066b6:	2220      	movs	r2, #32
 80066b8:	189b      	adds	r3, r3, r2
 80066ba:	19db      	adds	r3, r3, r7
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
        break;
 80066c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d02a      	beq.n	800671e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066cc:	4b22      	ldr	r3, [pc, #136]	; (8006758 <UART_SetConfig+0x6a8>)
 80066ce:	0052      	lsls	r2, r2, #1
 80066d0:	5ad3      	ldrh	r3, [r2, r3]
 80066d2:	0019      	movs	r1, r3
 80066d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066d6:	f7f9 fd31 	bl	800013c <__udivsi3>
 80066da:	0003      	movs	r3, r0
 80066dc:	001a      	movs	r2, r3
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	18d2      	adds	r2, r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	0019      	movs	r1, r3
 80066ec:	0010      	movs	r0, r2
 80066ee:	f7f9 fd25 	bl	800013c <__udivsi3>
 80066f2:	0003      	movs	r3, r0
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d90a      	bls.n	8006712 <UART_SetConfig+0x662>
 80066fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	025b      	lsls	r3, r3, #9
 8006702:	429a      	cmp	r2, r3
 8006704:	d205      	bcs.n	8006712 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	b29a      	uxth	r2, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006712:	231a      	movs	r3, #26
 8006714:	2220      	movs	r2, #32
 8006716:	189b      	adds	r3, r3, r2
 8006718:	19db      	adds	r3, r3, r7
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	226a      	movs	r2, #106	; 0x6a
 8006722:	2101      	movs	r1, #1
 8006724:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2268      	movs	r2, #104	; 0x68
 800672a:	2101      	movs	r1, #1
 800672c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2200      	movs	r2, #0
 8006732:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2200      	movs	r2, #0
 8006738:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800673a:	231a      	movs	r3, #26
 800673c:	2220      	movs	r2, #32
 800673e:	189b      	adds	r3, r3, r2
 8006740:	19db      	adds	r3, r3, r7
 8006742:	781b      	ldrb	r3, [r3, #0]
}
 8006744:	0018      	movs	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	b010      	add	sp, #64	; 0x40
 800674a:	bdb0      	pop	{r4, r5, r7, pc}
 800674c:	40008000 	.word	0x40008000
 8006750:	40008400 	.word	0x40008400
 8006754:	00f42400 	.word	0x00f42400
 8006758:	08009e84 	.word	0x08009e84

0800675c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	2208      	movs	r2, #8
 800676a:	4013      	ands	r3, r2
 800676c:	d00b      	beq.n	8006786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	4a4a      	ldr	r2, [pc, #296]	; (80068a0 <UART_AdvFeatureConfig+0x144>)
 8006776:	4013      	ands	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	2201      	movs	r2, #1
 800678c:	4013      	ands	r3, r2
 800678e:	d00b      	beq.n	80067a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4a43      	ldr	r2, [pc, #268]	; (80068a4 <UART_AdvFeatureConfig+0x148>)
 8006798:	4013      	ands	r3, r2
 800679a:	0019      	movs	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	2202      	movs	r2, #2
 80067ae:	4013      	ands	r3, r2
 80067b0:	d00b      	beq.n	80067ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a3b      	ldr	r2, [pc, #236]	; (80068a8 <UART_AdvFeatureConfig+0x14c>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	2204      	movs	r2, #4
 80067d0:	4013      	ands	r3, r2
 80067d2:	d00b      	beq.n	80067ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4a34      	ldr	r2, [pc, #208]	; (80068ac <UART_AdvFeatureConfig+0x150>)
 80067dc:	4013      	ands	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	2210      	movs	r2, #16
 80067f2:	4013      	ands	r3, r2
 80067f4:	d00b      	beq.n	800680e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <UART_AdvFeatureConfig+0x154>)
 80067fe:	4013      	ands	r3, r2
 8006800:	0019      	movs	r1, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	2220      	movs	r2, #32
 8006814:	4013      	ands	r3, r2
 8006816:	d00b      	beq.n	8006830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <UART_AdvFeatureConfig+0x158>)
 8006820:	4013      	ands	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	2240      	movs	r2, #64	; 0x40
 8006836:	4013      	ands	r3, r2
 8006838:	d01d      	beq.n	8006876 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <UART_AdvFeatureConfig+0x15c>)
 8006842:	4013      	ands	r3, r2
 8006844:	0019      	movs	r1, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	2380      	movs	r3, #128	; 0x80
 8006858:	035b      	lsls	r3, r3, #13
 800685a:	429a      	cmp	r2, r3
 800685c:	d10b      	bne.n	8006876 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <UART_AdvFeatureConfig+0x160>)
 8006866:	4013      	ands	r3, r2
 8006868:	0019      	movs	r1, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	4013      	ands	r3, r2
 800687e:	d00b      	beq.n	8006898 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <UART_AdvFeatureConfig+0x164>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }
}
 8006898:	46c0      	nop			; (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	ffff7fff 	.word	0xffff7fff
 80068a4:	fffdffff 	.word	0xfffdffff
 80068a8:	fffeffff 	.word	0xfffeffff
 80068ac:	fffbffff 	.word	0xfffbffff
 80068b0:	ffffefff 	.word	0xffffefff
 80068b4:	ffffdfff 	.word	0xffffdfff
 80068b8:	ffefffff 	.word	0xffefffff
 80068bc:	ff9fffff 	.word	0xff9fffff
 80068c0:	fff7ffff 	.word	0xfff7ffff

080068c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b092      	sub	sp, #72	; 0x48
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2290      	movs	r2, #144	; 0x90
 80068d0:	2100      	movs	r1, #0
 80068d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d4:	f7fd f9a2 	bl	8003c1c <HAL_GetTick>
 80068d8:	0003      	movs	r3, r0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2208      	movs	r2, #8
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d12d      	bne.n	8006946 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2280      	movs	r2, #128	; 0x80
 80068ee:	0391      	lsls	r1, r2, #14
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4a47      	ldr	r2, [pc, #284]	; (8006a10 <UART_CheckIdleState+0x14c>)
 80068f4:	9200      	str	r2, [sp, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f000 f88e 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 80068fc:	1e03      	subs	r3, r0, #0
 80068fe:	d022      	beq.n	8006946 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006908:	63bb      	str	r3, [r7, #56]	; 0x38
 800690a:	2301      	movs	r3, #1
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	438a      	bics	r2, r1
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	f383 8810 	msr	PRIMASK, r3
}
 8006930:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2288      	movs	r2, #136	; 0x88
 8006936:	2120      	movs	r1, #32
 8006938:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2284      	movs	r2, #132	; 0x84
 800693e:	2100      	movs	r1, #0
 8006940:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e060      	b.n	8006a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2204      	movs	r2, #4
 800694e:	4013      	ands	r3, r2
 8006950:	2b04      	cmp	r3, #4
 8006952:	d146      	bne.n	80069e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	2280      	movs	r2, #128	; 0x80
 8006958:	03d1      	lsls	r1, r2, #15
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <UART_CheckIdleState+0x14c>)
 800695e:	9200      	str	r2, [sp, #0]
 8006960:	2200      	movs	r2, #0
 8006962:	f000 f859 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8006966:	1e03      	subs	r3, r0, #0
 8006968:	d03b      	beq.n	80069e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696a:	f3ef 8310 	mrs	r3, PRIMASK
 800696e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006970:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
 8006974:	2301      	movs	r3, #1
 8006976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f383 8810 	msr	PRIMASK, r3
}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4922      	ldr	r1, [pc, #136]	; (8006a14 <UART_CheckIdleState+0x150>)
 800698c:	400a      	ands	r2, r1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f383 8810 	msr	PRIMASK, r3
}
 800699a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30
 80069a6:	2301      	movs	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2101      	movs	r1, #1
 80069be:	438a      	bics	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	228c      	movs	r2, #140	; 0x8c
 80069d2:	2120      	movs	r1, #32
 80069d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2284      	movs	r2, #132	; 0x84
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e012      	b.n	8006a08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2288      	movs	r2, #136	; 0x88
 80069e6:	2120      	movs	r1, #32
 80069e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	228c      	movs	r2, #140	; 0x8c
 80069ee:	2120      	movs	r1, #32
 80069f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2284      	movs	r2, #132	; 0x84
 8006a02:	2100      	movs	r1, #0
 8006a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	0018      	movs	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b010      	add	sp, #64	; 0x40
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	01ffffff 	.word	0x01ffffff
 8006a14:	fffffedf 	.word	0xfffffedf

08006a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	1dfb      	adds	r3, r7, #7
 8006a26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	e051      	b.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	d04e      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a30:	f7fd f8f4 	bl	8003c1c <HAL_GetTick>
 8006a34:	0002      	movs	r2, r0
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e051      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2204      	movs	r2, #4
 8006a52:	4013      	ands	r3, r2
 8006a54:	d03b      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d038      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d035      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d111      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f83c 	bl	8006af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2290      	movs	r2, #144	; 0x90
 8006a84:	2108      	movs	r1, #8
 8006a86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2284      	movs	r2, #132	; 0x84
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e02c      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	2380      	movs	r3, #128	; 0x80
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d112      	bne.n	8006ace <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2280      	movs	r2, #128	; 0x80
 8006aae:	0112      	lsls	r2, r2, #4
 8006ab0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f81f 	bl	8006af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2290      	movs	r2, #144	; 0x90
 8006abe:	2120      	movs	r1, #32
 8006ac0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2284      	movs	r2, #132	; 0x84
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e00f      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	425a      	negs	r2, r3
 8006ade:	4153      	adcs	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	1dfb      	adds	r3, r7, #7
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d09e      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b004      	add	sp, #16
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b00:	f3ef 8310 	mrs	r3, PRIMASK
 8006b04:	617b      	str	r3, [r7, #20]
  return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f383 8810 	msr	PRIMASK, r3
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4926      	ldr	r1, [pc, #152]	; (8006bbc <UART_EndRxTransfer+0xc4>)
 8006b22:	400a      	ands	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f383 8810 	msr	PRIMASK, r3
}
 8006b30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b32:	f3ef 8310 	mrs	r3, PRIMASK
 8006b36:	623b      	str	r3, [r7, #32]
  return(result);
 8006b38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f383 8810 	msr	PRIMASK, r3
}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	491b      	ldr	r1, [pc, #108]	; (8006bc0 <UART_EndRxTransfer+0xc8>)
 8006b54:	400a      	ands	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f383 8810 	msr	PRIMASK, r3
}
 8006b62:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d118      	bne.n	8006b9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b76:	2301      	movs	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2110      	movs	r1, #16
 8006b8e:	438a      	bics	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	228c      	movs	r2, #140	; 0x8c
 8006ba2:	2120      	movs	r1, #32
 8006ba4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b00e      	add	sp, #56	; 0x38
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	fffffedf 	.word	0xfffffedf
 8006bc0:	effffffe 	.word	0xeffffffe

08006bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2284      	movs	r2, #132	; 0x84
 8006bd0:	5c9b      	ldrb	r3, [r3, r2]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UARTEx_DisableFifoMode+0x16>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e027      	b.n	8006c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2284      	movs	r2, #132	; 0x84
 8006bde:	2101      	movs	r1, #1
 8006be0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2288      	movs	r2, #136	; 0x88
 8006be6:	2124      	movs	r1, #36	; 0x24
 8006be8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	438a      	bics	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a0b      	ldr	r2, [pc, #44]	; (8006c34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2288      	movs	r2, #136	; 0x88
 8006c1c:	2120      	movs	r1, #32
 8006c1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2284      	movs	r2, #132	; 0x84
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b004      	add	sp, #16
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	dfffffff 	.word	0xdfffffff

08006c38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2284      	movs	r2, #132	; 0x84
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e02e      	b.n	8006cae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2284      	movs	r2, #132	; 0x84
 8006c54:	2101      	movs	r1, #1
 8006c56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2288      	movs	r2, #136	; 0x88
 8006c5c:	2124      	movs	r1, #36	; 0x24
 8006c5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2101      	movs	r1, #1
 8006c74:	438a      	bics	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	08d9      	lsrs	r1, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 f854 	bl	8006d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2288      	movs	r2, #136	; 0x88
 8006ca0:	2120      	movs	r1, #32
 8006ca2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2284      	movs	r2, #132	; 0x84
 8006ca8:	2100      	movs	r1, #0
 8006caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b004      	add	sp, #16
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2284      	movs	r2, #132	; 0x84
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e02f      	b.n	8006d30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2284      	movs	r2, #132	; 0x84
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2288      	movs	r2, #136	; 0x88
 8006cdc:	2124      	movs	r1, #36	; 0x24
 8006cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	438a      	bics	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	; (8006d38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	0019      	movs	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 f813 	bl	8006d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2288      	movs	r2, #136	; 0x88
 8006d22:	2120      	movs	r1, #32
 8006d24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2284      	movs	r2, #132	; 0x84
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	0018      	movs	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b004      	add	sp, #16
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	f1ffffff 	.word	0xf1ffffff

08006d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	226a      	movs	r2, #106	; 0x6a
 8006d50:	2101      	movs	r1, #1
 8006d52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2268      	movs	r2, #104	; 0x68
 8006d58:	2101      	movs	r1, #1
 8006d5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d5c:	e043      	b.n	8006de6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d5e:	260f      	movs	r6, #15
 8006d60:	19bb      	adds	r3, r7, r6
 8006d62:	2208      	movs	r2, #8
 8006d64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d66:	200e      	movs	r0, #14
 8006d68:	183b      	adds	r3, r7, r0
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	0e5b      	lsrs	r3, r3, #25
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	240d      	movs	r4, #13
 8006d7a:	193b      	adds	r3, r7, r4
 8006d7c:	2107      	movs	r1, #7
 8006d7e:	400a      	ands	r2, r1
 8006d80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	0f5b      	lsrs	r3, r3, #29
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	250c      	movs	r5, #12
 8006d8e:	197b      	adds	r3, r7, r5
 8006d90:	2107      	movs	r1, #7
 8006d92:	400a      	ands	r2, r1
 8006d94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d96:	183b      	adds	r3, r7, r0
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	197a      	adds	r2, r7, r5
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	4914      	ldr	r1, [pc, #80]	; (8006df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006da0:	5c8a      	ldrb	r2, [r1, r2]
 8006da2:	435a      	muls	r2, r3
 8006da4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006da6:	197b      	adds	r3, r7, r5
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006dac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dae:	0019      	movs	r1, r3
 8006db0:	f7f9 fa4e 	bl	8000250 <__divsi3>
 8006db4:	0003      	movs	r3, r0
 8006db6:	b299      	uxth	r1, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	226a      	movs	r2, #106	; 0x6a
 8006dbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dbe:	19bb      	adds	r3, r7, r6
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	193a      	adds	r2, r7, r4
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	490a      	ldr	r1, [pc, #40]	; (8006df0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006dc8:	5c8a      	ldrb	r2, [r1, r2]
 8006dca:	435a      	muls	r2, r3
 8006dcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dce:	193b      	adds	r3, r7, r4
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006dd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	f7f9 fa3a 	bl	8000250 <__divsi3>
 8006ddc:	0003      	movs	r3, r0
 8006dde:	b299      	uxth	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2268      	movs	r2, #104	; 0x68
 8006de4:	5299      	strh	r1, [r3, r2]
}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	46bd      	mov	sp, r7
 8006dea:	b005      	add	sp, #20
 8006dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	08009e9c 	.word	0x08009e9c
 8006df4:	08009ea4 	.word	0x08009ea4

08006df8 <__cvt>:
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	001e      	movs	r6, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	0014      	movs	r4, r2
 8006e00:	b08b      	sub	sp, #44	; 0x2c
 8006e02:	429e      	cmp	r6, r3
 8006e04:	da04      	bge.n	8006e10 <__cvt+0x18>
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	0609      	lsls	r1, r1, #24
 8006e0a:	1873      	adds	r3, r6, r1
 8006e0c:	001e      	movs	r6, r3
 8006e0e:	232d      	movs	r3, #45	; 0x2d
 8006e10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e14:	7013      	strb	r3, [r2, #0]
 8006e16:	2320      	movs	r3, #32
 8006e18:	2203      	movs	r2, #3
 8006e1a:	439f      	bics	r7, r3
 8006e1c:	2f46      	cmp	r7, #70	; 0x46
 8006e1e:	d007      	beq.n	8006e30 <__cvt+0x38>
 8006e20:	003b      	movs	r3, r7
 8006e22:	3b45      	subs	r3, #69	; 0x45
 8006e24:	4259      	negs	r1, r3
 8006e26:	414b      	adcs	r3, r1
 8006e28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e2a:	3a01      	subs	r2, #1
 8006e2c:	18cb      	adds	r3, r1, r3
 8006e2e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e30:	ab09      	add	r3, sp, #36	; 0x24
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	ab08      	add	r3, sp, #32
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e3a:	9200      	str	r2, [sp, #0]
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e40:	0022      	movs	r2, r4
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	0033      	movs	r3, r6
 8006e46:	f000 fea7 	bl	8007b98 <_dtoa_r>
 8006e4a:	0005      	movs	r5, r0
 8006e4c:	2f47      	cmp	r7, #71	; 0x47
 8006e4e:	d102      	bne.n	8006e56 <__cvt+0x5e>
 8006e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e52:	07db      	lsls	r3, r3, #31
 8006e54:	d528      	bpl.n	8006ea8 <__cvt+0xb0>
 8006e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e58:	18eb      	adds	r3, r5, r3
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	2f46      	cmp	r7, #70	; 0x46
 8006e5e:	d114      	bne.n	8006e8a <__cvt+0x92>
 8006e60:	782b      	ldrb	r3, [r5, #0]
 8006e62:	2b30      	cmp	r3, #48	; 0x30
 8006e64:	d10c      	bne.n	8006e80 <__cvt+0x88>
 8006e66:	2200      	movs	r2, #0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	0031      	movs	r1, r6
 8006e6e:	f7f9 faeb 	bl	8000448 <__aeabi_dcmpeq>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d104      	bne.n	8006e80 <__cvt+0x88>
 8006e76:	2301      	movs	r3, #1
 8006e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	18d3      	adds	r3, r2, r3
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	0020      	movs	r0, r4
 8006e90:	0031      	movs	r1, r6
 8006e92:	f7f9 fad9 	bl	8000448 <__aeabi_dcmpeq>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d001      	beq.n	8006e9e <__cvt+0xa6>
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9e:	2230      	movs	r2, #48	; 0x30
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	9907      	ldr	r1, [sp, #28]
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	d306      	bcc.n	8006eb6 <__cvt+0xbe>
 8006ea8:	0028      	movs	r0, r5
 8006eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006eae:	1b5b      	subs	r3, r3, r5
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	b00b      	add	sp, #44	; 0x2c
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	e7f0      	b.n	8006ea0 <__cvt+0xa8>

08006ebe <__exponent>:
 8006ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec0:	1c83      	adds	r3, r0, #2
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	0005      	movs	r5, r0
 8006ec8:	000c      	movs	r4, r1
 8006eca:	232b      	movs	r3, #43	; 0x2b
 8006ecc:	7002      	strb	r2, [r0, #0]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	da01      	bge.n	8006ed6 <__exponent+0x18>
 8006ed2:	424c      	negs	r4, r1
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	706b      	strb	r3, [r5, #1]
 8006ed8:	2c09      	cmp	r4, #9
 8006eda:	dd2f      	ble.n	8006f3c <__exponent+0x7e>
 8006edc:	270a      	movs	r7, #10
 8006ede:	ab04      	add	r3, sp, #16
 8006ee0:	1dde      	adds	r6, r3, #7
 8006ee2:	0020      	movs	r0, r4
 8006ee4:	0039      	movs	r1, r7
 8006ee6:	9601      	str	r6, [sp, #4]
 8006ee8:	f7f9 fa98 	bl	800041c <__aeabi_idivmod>
 8006eec:	3e01      	subs	r6, #1
 8006eee:	3130      	adds	r1, #48	; 0x30
 8006ef0:	0020      	movs	r0, r4
 8006ef2:	7031      	strb	r1, [r6, #0]
 8006ef4:	0039      	movs	r1, r7
 8006ef6:	9402      	str	r4, [sp, #8]
 8006ef8:	f7f9 f9aa 	bl	8000250 <__divsi3>
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	0004      	movs	r4, r0
 8006f00:	2b63      	cmp	r3, #99	; 0x63
 8006f02:	dcee      	bgt.n	8006ee2 <__exponent+0x24>
 8006f04:	9b01      	ldr	r3, [sp, #4]
 8006f06:	3430      	adds	r4, #48	; 0x30
 8006f08:	1e9a      	subs	r2, r3, #2
 8006f0a:	0013      	movs	r3, r2
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	7014      	strb	r4, [r2, #0]
 8006f10:	a804      	add	r0, sp, #16
 8006f12:	3007      	adds	r0, #7
 8006f14:	4298      	cmp	r0, r3
 8006f16:	d80c      	bhi.n	8006f32 <__exponent+0x74>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4282      	cmp	r2, r0
 8006f1c:	d804      	bhi.n	8006f28 <__exponent+0x6a>
 8006f1e:	aa04      	add	r2, sp, #16
 8006f20:	3309      	adds	r3, #9
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	9a01      	ldr	r2, [sp, #4]
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	9a03      	ldr	r2, [sp, #12]
 8006f2a:	18d3      	adds	r3, r2, r3
 8006f2c:	1b58      	subs	r0, r3, r5
 8006f2e:	b007      	add	sp, #28
 8006f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f32:	7818      	ldrb	r0, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	7008      	strb	r0, [r1, #0]
 8006f38:	3101      	adds	r1, #1
 8006f3a:	e7e9      	b.n	8006f10 <__exponent+0x52>
 8006f3c:	2330      	movs	r3, #48	; 0x30
 8006f3e:	3430      	adds	r4, #48	; 0x30
 8006f40:	70ab      	strb	r3, [r5, #2]
 8006f42:	70ec      	strb	r4, [r5, #3]
 8006f44:	1d2b      	adds	r3, r5, #4
 8006f46:	e7f1      	b.n	8006f2c <__exponent+0x6e>

08006f48 <_printf_float>:
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	b095      	sub	sp, #84	; 0x54
 8006f4c:	000c      	movs	r4, r1
 8006f4e:	9208      	str	r2, [sp, #32]
 8006f50:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006f52:	9309      	str	r3, [sp, #36]	; 0x24
 8006f54:	0007      	movs	r7, r0
 8006f56:	f000 fd05 	bl	8007964 <_localeconv_r>
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f60:	f7f9 f8d0 	bl	8000104 <strlen>
 8006f64:	2300      	movs	r3, #0
 8006f66:	9312      	str	r3, [sp, #72]	; 0x48
 8006f68:	7e23      	ldrb	r3, [r4, #24]
 8006f6a:	2207      	movs	r2, #7
 8006f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	900d      	str	r0, [sp, #52]	; 0x34
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	05c9      	lsls	r1, r1, #23
 8006f7a:	d547      	bpl.n	800700c <_printf_float+0xc4>
 8006f7c:	189b      	adds	r3, r3, r2
 8006f7e:	4393      	bics	r3, r2
 8006f80:	001a      	movs	r2, r3
 8006f82:	3208      	adds	r2, #8
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	681e      	ldr	r6, [r3, #0]
 8006f88:	685d      	ldr	r5, [r3, #4]
 8006f8a:	0032      	movs	r2, r6
 8006f8c:	002b      	movs	r3, r5
 8006f8e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f92:	2201      	movs	r2, #1
 8006f94:	006b      	lsls	r3, r5, #1
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	930e      	str	r3, [sp, #56]	; 0x38
 8006f9a:	0030      	movs	r0, r6
 8006f9c:	4bab      	ldr	r3, [pc, #684]	; (800724c <_printf_float+0x304>)
 8006f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fa0:	4252      	negs	r2, r2
 8006fa2:	f7fb f967 	bl	8002274 <__aeabi_dcmpun>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d132      	bne.n	8007010 <_printf_float+0xc8>
 8006faa:	2201      	movs	r2, #1
 8006fac:	0030      	movs	r0, r6
 8006fae:	4ba7      	ldr	r3, [pc, #668]	; (800724c <_printf_float+0x304>)
 8006fb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006fb2:	4252      	negs	r2, r2
 8006fb4:	f7f9 fa58 	bl	8000468 <__aeabi_dcmple>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d129      	bne.n	8007010 <_printf_float+0xc8>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	0030      	movs	r0, r6
 8006fc2:	0029      	movs	r1, r5
 8006fc4:	f7f9 fa46 	bl	8000454 <__aeabi_dcmplt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d003      	beq.n	8006fd4 <_printf_float+0x8c>
 8006fcc:	0023      	movs	r3, r4
 8006fce:	222d      	movs	r2, #45	; 0x2d
 8006fd0:	3343      	adds	r3, #67	; 0x43
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	4d9e      	ldr	r5, [pc, #632]	; (8007250 <_printf_float+0x308>)
 8006fd8:	2b47      	cmp	r3, #71	; 0x47
 8006fda:	d900      	bls.n	8006fde <_printf_float+0x96>
 8006fdc:	4d9d      	ldr	r5, [pc, #628]	; (8007254 <_printf_float+0x30c>)
 8006fde:	2303      	movs	r3, #3
 8006fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	439a      	bics	r2, r3
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6022      	str	r2, [r4, #0]
 8006fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	0021      	movs	r1, r4
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	0038      	movs	r0, r7
 8006ff6:	9b08      	ldr	r3, [sp, #32]
 8006ff8:	aa13      	add	r2, sp, #76	; 0x4c
 8006ffa:	f000 f9fb 	bl	80073f4 <_printf_common>
 8006ffe:	3001      	adds	r0, #1
 8007000:	d000      	beq.n	8007004 <_printf_float+0xbc>
 8007002:	e0a3      	b.n	800714c <_printf_float+0x204>
 8007004:	2001      	movs	r0, #1
 8007006:	4240      	negs	r0, r0
 8007008:	b015      	add	sp, #84	; 0x54
 800700a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800700c:	3307      	adds	r3, #7
 800700e:	e7b6      	b.n	8006f7e <_printf_float+0x36>
 8007010:	0032      	movs	r2, r6
 8007012:	002b      	movs	r3, r5
 8007014:	0030      	movs	r0, r6
 8007016:	0029      	movs	r1, r5
 8007018:	f7fb f92c 	bl	8002274 <__aeabi_dcmpun>
 800701c:	2800      	cmp	r0, #0
 800701e:	d00b      	beq.n	8007038 <_printf_float+0xf0>
 8007020:	2d00      	cmp	r5, #0
 8007022:	da03      	bge.n	800702c <_printf_float+0xe4>
 8007024:	0023      	movs	r3, r4
 8007026:	222d      	movs	r2, #45	; 0x2d
 8007028:	3343      	adds	r3, #67	; 0x43
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	4d8a      	ldr	r5, [pc, #552]	; (8007258 <_printf_float+0x310>)
 8007030:	2b47      	cmp	r3, #71	; 0x47
 8007032:	d9d4      	bls.n	8006fde <_printf_float+0x96>
 8007034:	4d89      	ldr	r5, [pc, #548]	; (800725c <_printf_float+0x314>)
 8007036:	e7d2      	b.n	8006fde <_printf_float+0x96>
 8007038:	2220      	movs	r2, #32
 800703a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	4391      	bics	r1, r2
 8007040:	910e      	str	r1, [sp, #56]	; 0x38
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	d14a      	bne.n	80070dc <_printf_float+0x194>
 8007046:	3307      	adds	r3, #7
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4313      	orrs	r3, r2
 8007052:	2200      	movs	r2, #0
 8007054:	9206      	str	r2, [sp, #24]
 8007056:	aa12      	add	r2, sp, #72	; 0x48
 8007058:	9205      	str	r2, [sp, #20]
 800705a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	9204      	str	r2, [sp, #16]
 8007060:	aa11      	add	r2, sp, #68	; 0x44
 8007062:	9203      	str	r2, [sp, #12]
 8007064:	2223      	movs	r2, #35	; 0x23
 8007066:	a908      	add	r1, sp, #32
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	1852      	adds	r2, r2, r1
 800706e:	9202      	str	r2, [sp, #8]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	0032      	movs	r2, r6
 8007074:	002b      	movs	r3, r5
 8007076:	0038      	movs	r0, r7
 8007078:	f7ff febe 	bl	8006df8 <__cvt>
 800707c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800707e:	0005      	movs	r5, r0
 8007080:	2b47      	cmp	r3, #71	; 0x47
 8007082:	d109      	bne.n	8007098 <_printf_float+0x150>
 8007084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007086:	1cda      	adds	r2, r3, #3
 8007088:	db02      	blt.n	8007090 <_printf_float+0x148>
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	4293      	cmp	r3, r2
 800708e:	dd49      	ble.n	8007124 <_printf_float+0x1dc>
 8007090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007092:	3b02      	subs	r3, #2
 8007094:	b2db      	uxtb	r3, r3
 8007096:	930a      	str	r3, [sp, #40]	; 0x28
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800709c:	2b65      	cmp	r3, #101	; 0x65
 800709e:	d824      	bhi.n	80070ea <_printf_float+0x1a2>
 80070a0:	0020      	movs	r0, r4
 80070a2:	001a      	movs	r2, r3
 80070a4:	3901      	subs	r1, #1
 80070a6:	3050      	adds	r0, #80	; 0x50
 80070a8:	9111      	str	r1, [sp, #68]	; 0x44
 80070aa:	f7ff ff08 	bl	8006ebe <__exponent>
 80070ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80070b2:	1813      	adds	r3, r2, r0
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2a01      	cmp	r2, #1
 80070b8:	dc02      	bgt.n	80070c0 <_printf_float+0x178>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	07d2      	lsls	r2, r2, #31
 80070be:	d501      	bpl.n	80070c4 <_printf_float+0x17c>
 80070c0:	3301      	adds	r3, #1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2323      	movs	r3, #35	; 0x23
 80070c6:	aa08      	add	r2, sp, #32
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d100      	bne.n	80070d2 <_printf_float+0x18a>
 80070d0:	e78d      	b.n	8006fee <_printf_float+0xa6>
 80070d2:	0023      	movs	r3, r4
 80070d4:	222d      	movs	r2, #45	; 0x2d
 80070d6:	3343      	adds	r3, #67	; 0x43
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e788      	b.n	8006fee <_printf_float+0xa6>
 80070dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070de:	2a47      	cmp	r2, #71	; 0x47
 80070e0:	d1b3      	bne.n	800704a <_printf_float+0x102>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1b1      	bne.n	800704a <_printf_float+0x102>
 80070e6:	3301      	adds	r3, #1
 80070e8:	e7ae      	b.n	8007048 <_printf_float+0x100>
 80070ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ec:	2b66      	cmp	r3, #102	; 0x66
 80070ee:	d11b      	bne.n	8007128 <_printf_float+0x1e0>
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	2900      	cmp	r1, #0
 80070f4:	dd09      	ble.n	800710a <_printf_float+0x1c2>
 80070f6:	6121      	str	r1, [r4, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <_printf_float+0x1ba>
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	07d2      	lsls	r2, r2, #31
 8007100:	d50b      	bpl.n	800711a <_printf_float+0x1d2>
 8007102:	3301      	adds	r3, #1
 8007104:	185b      	adds	r3, r3, r1
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	e007      	b.n	800711a <_printf_float+0x1d2>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <_printf_float+0x1ce>
 800710e:	2201      	movs	r2, #1
 8007110:	6821      	ldr	r1, [r4, #0]
 8007112:	4211      	tst	r1, r2
 8007114:	d000      	beq.n	8007118 <_printf_float+0x1d0>
 8007116:	1c9a      	adds	r2, r3, #2
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800711c:	65a3      	str	r3, [r4, #88]	; 0x58
 800711e:	2300      	movs	r3, #0
 8007120:	930b      	str	r3, [sp, #44]	; 0x2c
 8007122:	e7cf      	b.n	80070c4 <_printf_float+0x17c>
 8007124:	2367      	movs	r3, #103	; 0x67
 8007126:	930a      	str	r3, [sp, #40]	; 0x28
 8007128:	9911      	ldr	r1, [sp, #68]	; 0x44
 800712a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800712c:	4299      	cmp	r1, r3
 800712e:	db06      	blt.n	800713e <_printf_float+0x1f6>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	6121      	str	r1, [r4, #16]
 8007134:	07db      	lsls	r3, r3, #31
 8007136:	d5f0      	bpl.n	800711a <_printf_float+0x1d2>
 8007138:	3101      	adds	r1, #1
 800713a:	6121      	str	r1, [r4, #16]
 800713c:	e7ed      	b.n	800711a <_printf_float+0x1d2>
 800713e:	2201      	movs	r2, #1
 8007140:	2900      	cmp	r1, #0
 8007142:	dc01      	bgt.n	8007148 <_printf_float+0x200>
 8007144:	1892      	adds	r2, r2, r2
 8007146:	1a52      	subs	r2, r2, r1
 8007148:	189b      	adds	r3, r3, r2
 800714a:	e7dc      	b.n	8007106 <_printf_float+0x1be>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	0553      	lsls	r3, r2, #21
 8007150:	d408      	bmi.n	8007164 <_printf_float+0x21c>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	002a      	movs	r2, r5
 8007156:	0038      	movs	r0, r7
 8007158:	9908      	ldr	r1, [sp, #32]
 800715a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800715c:	47a8      	blx	r5
 800715e:	3001      	adds	r0, #1
 8007160:	d12a      	bne.n	80071b8 <_printf_float+0x270>
 8007162:	e74f      	b.n	8007004 <_printf_float+0xbc>
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	2b65      	cmp	r3, #101	; 0x65
 8007168:	d800      	bhi.n	800716c <_printf_float+0x224>
 800716a:	e0ec      	b.n	8007346 <_printf_float+0x3fe>
 800716c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800716e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007170:	2200      	movs	r2, #0
 8007172:	2300      	movs	r3, #0
 8007174:	f7f9 f968 	bl	8000448 <__aeabi_dcmpeq>
 8007178:	2800      	cmp	r0, #0
 800717a:	d034      	beq.n	80071e6 <_printf_float+0x29e>
 800717c:	2301      	movs	r3, #1
 800717e:	0038      	movs	r0, r7
 8007180:	4a37      	ldr	r2, [pc, #220]	; (8007260 <_printf_float+0x318>)
 8007182:	9908      	ldr	r1, [sp, #32]
 8007184:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007186:	47a8      	blx	r5
 8007188:	3001      	adds	r0, #1
 800718a:	d100      	bne.n	800718e <_printf_float+0x246>
 800718c:	e73a      	b.n	8007004 <_printf_float+0xbc>
 800718e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007192:	429a      	cmp	r2, r3
 8007194:	db02      	blt.n	800719c <_printf_float+0x254>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	07db      	lsls	r3, r3, #31
 800719a:	d50d      	bpl.n	80071b8 <_printf_float+0x270>
 800719c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800719e:	0038      	movs	r0, r7
 80071a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a4:	9908      	ldr	r1, [sp, #32]
 80071a6:	47a8      	blx	r5
 80071a8:	2500      	movs	r5, #0
 80071aa:	3001      	adds	r0, #1
 80071ac:	d100      	bne.n	80071b0 <_printf_float+0x268>
 80071ae:	e729      	b.n	8007004 <_printf_float+0xbc>
 80071b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071b2:	3b01      	subs	r3, #1
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dc0a      	bgt.n	80071ce <_printf_float+0x286>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	079b      	lsls	r3, r3, #30
 80071bc:	d500      	bpl.n	80071c0 <_printf_float+0x278>
 80071be:	e116      	b.n	80073ee <_printf_float+0x4a6>
 80071c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	4298      	cmp	r0, r3
 80071c6:	db00      	blt.n	80071ca <_printf_float+0x282>
 80071c8:	e71e      	b.n	8007008 <_printf_float+0xc0>
 80071ca:	0018      	movs	r0, r3
 80071cc:	e71c      	b.n	8007008 <_printf_float+0xc0>
 80071ce:	0022      	movs	r2, r4
 80071d0:	2301      	movs	r3, #1
 80071d2:	0038      	movs	r0, r7
 80071d4:	9908      	ldr	r1, [sp, #32]
 80071d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80071d8:	321a      	adds	r2, #26
 80071da:	47b0      	blx	r6
 80071dc:	3001      	adds	r0, #1
 80071de:	d100      	bne.n	80071e2 <_printf_float+0x29a>
 80071e0:	e710      	b.n	8007004 <_printf_float+0xbc>
 80071e2:	3501      	adds	r5, #1
 80071e4:	e7e4      	b.n	80071b0 <_printf_float+0x268>
 80071e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	dc3b      	bgt.n	8007264 <_printf_float+0x31c>
 80071ec:	2301      	movs	r3, #1
 80071ee:	0038      	movs	r0, r7
 80071f0:	4a1b      	ldr	r2, [pc, #108]	; (8007260 <_printf_float+0x318>)
 80071f2:	9908      	ldr	r1, [sp, #32]
 80071f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80071f6:	47b0      	blx	r6
 80071f8:	3001      	adds	r0, #1
 80071fa:	d100      	bne.n	80071fe <_printf_float+0x2b6>
 80071fc:	e702      	b.n	8007004 <_printf_float+0xbc>
 80071fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007200:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007202:	4313      	orrs	r3, r2
 8007204:	d102      	bne.n	800720c <_printf_float+0x2c4>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	07db      	lsls	r3, r3, #31
 800720a:	d5d5      	bpl.n	80071b8 <_printf_float+0x270>
 800720c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800720e:	0038      	movs	r0, r7
 8007210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007212:	9908      	ldr	r1, [sp, #32]
 8007214:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007216:	47b0      	blx	r6
 8007218:	2300      	movs	r3, #0
 800721a:	3001      	adds	r0, #1
 800721c:	d100      	bne.n	8007220 <_printf_float+0x2d8>
 800721e:	e6f1      	b.n	8007004 <_printf_float+0xbc>
 8007220:	930a      	str	r3, [sp, #40]	; 0x28
 8007222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007226:	425b      	negs	r3, r3
 8007228:	4293      	cmp	r3, r2
 800722a:	dc01      	bgt.n	8007230 <_printf_float+0x2e8>
 800722c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800722e:	e791      	b.n	8007154 <_printf_float+0x20c>
 8007230:	0022      	movs	r2, r4
 8007232:	2301      	movs	r3, #1
 8007234:	0038      	movs	r0, r7
 8007236:	9908      	ldr	r1, [sp, #32]
 8007238:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800723a:	321a      	adds	r2, #26
 800723c:	47b0      	blx	r6
 800723e:	3001      	adds	r0, #1
 8007240:	d100      	bne.n	8007244 <_printf_float+0x2fc>
 8007242:	e6df      	b.n	8007004 <_printf_float+0xbc>
 8007244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007246:	3301      	adds	r3, #1
 8007248:	e7ea      	b.n	8007220 <_printf_float+0x2d8>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	7fefffff 	.word	0x7fefffff
 8007250:	08009eac 	.word	0x08009eac
 8007254:	08009eb0 	.word	0x08009eb0
 8007258:	08009eb4 	.word	0x08009eb4
 800725c:	08009eb8 	.word	0x08009eb8
 8007260:	08009ebc 	.word	0x08009ebc
 8007264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007268:	920a      	str	r2, [sp, #40]	; 0x28
 800726a:	429a      	cmp	r2, r3
 800726c:	dd00      	ble.n	8007270 <_printf_float+0x328>
 800726e:	930a      	str	r3, [sp, #40]	; 0x28
 8007270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc3d      	bgt.n	80072f2 <_printf_float+0x3aa>
 8007276:	2300      	movs	r3, #0
 8007278:	930e      	str	r3, [sp, #56]	; 0x38
 800727a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727c:	43db      	mvns	r3, r3
 800727e:	17db      	asrs	r3, r3, #31
 8007280:	930f      	str	r3, [sp, #60]	; 0x3c
 8007282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007286:	930b      	str	r3, [sp, #44]	; 0x2c
 8007288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800728a:	4013      	ands	r3, r2
 800728c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007292:	4293      	cmp	r3, r2
 8007294:	dc36      	bgt.n	8007304 <_printf_float+0x3bc>
 8007296:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800729a:	429a      	cmp	r2, r3
 800729c:	db40      	blt.n	8007320 <_printf_float+0x3d8>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	07db      	lsls	r3, r3, #31
 80072a2:	d43d      	bmi.n	8007320 <_printf_float+0x3d8>
 80072a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80072a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072aa:	1af3      	subs	r3, r6, r3
 80072ac:	1ab6      	subs	r6, r6, r2
 80072ae:	429e      	cmp	r6, r3
 80072b0:	dd00      	ble.n	80072b4 <_printf_float+0x36c>
 80072b2:	001e      	movs	r6, r3
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	dc3c      	bgt.n	8007332 <_printf_float+0x3ea>
 80072b8:	2300      	movs	r3, #0
 80072ba:	930a      	str	r3, [sp, #40]	; 0x28
 80072bc:	43f3      	mvns	r3, r6
 80072be:	17db      	asrs	r3, r3, #31
 80072c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ca:	4032      	ands	r2, r6
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072d0:	4293      	cmp	r3, r2
 80072d2:	dc00      	bgt.n	80072d6 <_printf_float+0x38e>
 80072d4:	e770      	b.n	80071b8 <_printf_float+0x270>
 80072d6:	0022      	movs	r2, r4
 80072d8:	2301      	movs	r3, #1
 80072da:	0038      	movs	r0, r7
 80072dc:	9908      	ldr	r1, [sp, #32]
 80072de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072e0:	321a      	adds	r2, #26
 80072e2:	47a8      	blx	r5
 80072e4:	3001      	adds	r0, #1
 80072e6:	d100      	bne.n	80072ea <_printf_float+0x3a2>
 80072e8:	e68c      	b.n	8007004 <_printf_float+0xbc>
 80072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ec:	3301      	adds	r3, #1
 80072ee:	930a      	str	r3, [sp, #40]	; 0x28
 80072f0:	e7e7      	b.n	80072c2 <_printf_float+0x37a>
 80072f2:	002a      	movs	r2, r5
 80072f4:	0038      	movs	r0, r7
 80072f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f8:	9908      	ldr	r1, [sp, #32]
 80072fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072fc:	47b0      	blx	r6
 80072fe:	3001      	adds	r0, #1
 8007300:	d1b9      	bne.n	8007276 <_printf_float+0x32e>
 8007302:	e67f      	b.n	8007004 <_printf_float+0xbc>
 8007304:	0022      	movs	r2, r4
 8007306:	2301      	movs	r3, #1
 8007308:	0038      	movs	r0, r7
 800730a:	9908      	ldr	r1, [sp, #32]
 800730c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800730e:	321a      	adds	r2, #26
 8007310:	47b0      	blx	r6
 8007312:	3001      	adds	r0, #1
 8007314:	d100      	bne.n	8007318 <_printf_float+0x3d0>
 8007316:	e675      	b.n	8007004 <_printf_float+0xbc>
 8007318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800731a:	3301      	adds	r3, #1
 800731c:	930e      	str	r3, [sp, #56]	; 0x38
 800731e:	e7b0      	b.n	8007282 <_printf_float+0x33a>
 8007320:	0038      	movs	r0, r7
 8007322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007326:	9908      	ldr	r1, [sp, #32]
 8007328:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800732a:	47b0      	blx	r6
 800732c:	3001      	adds	r0, #1
 800732e:	d1b9      	bne.n	80072a4 <_printf_float+0x35c>
 8007330:	e668      	b.n	8007004 <_printf_float+0xbc>
 8007332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007334:	0038      	movs	r0, r7
 8007336:	18ea      	adds	r2, r5, r3
 8007338:	9908      	ldr	r1, [sp, #32]
 800733a:	0033      	movs	r3, r6
 800733c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800733e:	47a8      	blx	r5
 8007340:	3001      	adds	r0, #1
 8007342:	d1b9      	bne.n	80072b8 <_printf_float+0x370>
 8007344:	e65e      	b.n	8007004 <_printf_float+0xbc>
 8007346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007348:	2b01      	cmp	r3, #1
 800734a:	dc02      	bgt.n	8007352 <_printf_float+0x40a>
 800734c:	2301      	movs	r3, #1
 800734e:	421a      	tst	r2, r3
 8007350:	d03a      	beq.n	80073c8 <_printf_float+0x480>
 8007352:	2301      	movs	r3, #1
 8007354:	002a      	movs	r2, r5
 8007356:	0038      	movs	r0, r7
 8007358:	9908      	ldr	r1, [sp, #32]
 800735a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800735c:	47b0      	blx	r6
 800735e:	3001      	adds	r0, #1
 8007360:	d100      	bne.n	8007364 <_printf_float+0x41c>
 8007362:	e64f      	b.n	8007004 <_printf_float+0xbc>
 8007364:	0038      	movs	r0, r7
 8007366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800736a:	9908      	ldr	r1, [sp, #32]
 800736c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800736e:	47b0      	blx	r6
 8007370:	3001      	adds	r0, #1
 8007372:	d100      	bne.n	8007376 <_printf_float+0x42e>
 8007374:	e646      	b.n	8007004 <_printf_float+0xbc>
 8007376:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007378:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800737a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800737c:	2200      	movs	r2, #0
 800737e:	001e      	movs	r6, r3
 8007380:	2300      	movs	r3, #0
 8007382:	f7f9 f861 	bl	8000448 <__aeabi_dcmpeq>
 8007386:	2800      	cmp	r0, #0
 8007388:	d11c      	bne.n	80073c4 <_printf_float+0x47c>
 800738a:	0033      	movs	r3, r6
 800738c:	1c6a      	adds	r2, r5, #1
 800738e:	3b01      	subs	r3, #1
 8007390:	0038      	movs	r0, r7
 8007392:	9908      	ldr	r1, [sp, #32]
 8007394:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007396:	47a8      	blx	r5
 8007398:	3001      	adds	r0, #1
 800739a:	d10f      	bne.n	80073bc <_printf_float+0x474>
 800739c:	e632      	b.n	8007004 <_printf_float+0xbc>
 800739e:	0022      	movs	r2, r4
 80073a0:	2301      	movs	r3, #1
 80073a2:	0038      	movs	r0, r7
 80073a4:	9908      	ldr	r1, [sp, #32]
 80073a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073a8:	321a      	adds	r2, #26
 80073aa:	47b0      	blx	r6
 80073ac:	3001      	adds	r0, #1
 80073ae:	d100      	bne.n	80073b2 <_printf_float+0x46a>
 80073b0:	e628      	b.n	8007004 <_printf_float+0xbc>
 80073b2:	3501      	adds	r5, #1
 80073b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073b6:	3b01      	subs	r3, #1
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dcf0      	bgt.n	800739e <_printf_float+0x456>
 80073bc:	0022      	movs	r2, r4
 80073be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c0:	3250      	adds	r2, #80	; 0x50
 80073c2:	e6c8      	b.n	8007156 <_printf_float+0x20e>
 80073c4:	2500      	movs	r5, #0
 80073c6:	e7f5      	b.n	80073b4 <_printf_float+0x46c>
 80073c8:	002a      	movs	r2, r5
 80073ca:	e7e1      	b.n	8007390 <_printf_float+0x448>
 80073cc:	0022      	movs	r2, r4
 80073ce:	2301      	movs	r3, #1
 80073d0:	0038      	movs	r0, r7
 80073d2:	9908      	ldr	r1, [sp, #32]
 80073d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073d6:	3219      	adds	r2, #25
 80073d8:	47b0      	blx	r6
 80073da:	3001      	adds	r0, #1
 80073dc:	d100      	bne.n	80073e0 <_printf_float+0x498>
 80073de:	e611      	b.n	8007004 <_printf_float+0xbc>
 80073e0:	3501      	adds	r5, #1
 80073e2:	68e3      	ldr	r3, [r4, #12]
 80073e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	dcef      	bgt.n	80073cc <_printf_float+0x484>
 80073ec:	e6e8      	b.n	80071c0 <_printf_float+0x278>
 80073ee:	2500      	movs	r5, #0
 80073f0:	e7f7      	b.n	80073e2 <_printf_float+0x49a>
 80073f2:	46c0      	nop			; (mov r8, r8)

080073f4 <_printf_common>:
 80073f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f6:	0016      	movs	r6, r2
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	688a      	ldr	r2, [r1, #8]
 80073fc:	690b      	ldr	r3, [r1, #16]
 80073fe:	000c      	movs	r4, r1
 8007400:	9000      	str	r0, [sp, #0]
 8007402:	4293      	cmp	r3, r2
 8007404:	da00      	bge.n	8007408 <_printf_common+0x14>
 8007406:	0013      	movs	r3, r2
 8007408:	0022      	movs	r2, r4
 800740a:	6033      	str	r3, [r6, #0]
 800740c:	3243      	adds	r2, #67	; 0x43
 800740e:	7812      	ldrb	r2, [r2, #0]
 8007410:	2a00      	cmp	r2, #0
 8007412:	d001      	beq.n	8007418 <_printf_common+0x24>
 8007414:	3301      	adds	r3, #1
 8007416:	6033      	str	r3, [r6, #0]
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	069b      	lsls	r3, r3, #26
 800741c:	d502      	bpl.n	8007424 <_printf_common+0x30>
 800741e:	6833      	ldr	r3, [r6, #0]
 8007420:	3302      	adds	r3, #2
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	2306      	movs	r3, #6
 8007428:	0015      	movs	r5, r2
 800742a:	401d      	ands	r5, r3
 800742c:	421a      	tst	r2, r3
 800742e:	d027      	beq.n	8007480 <_printf_common+0x8c>
 8007430:	0023      	movs	r3, r4
 8007432:	3343      	adds	r3, #67	; 0x43
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	4193      	sbcs	r3, r2
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d430      	bmi.n	80074a2 <_printf_common+0xae>
 8007440:	0022      	movs	r2, r4
 8007442:	9901      	ldr	r1, [sp, #4]
 8007444:	9800      	ldr	r0, [sp, #0]
 8007446:	9d08      	ldr	r5, [sp, #32]
 8007448:	3243      	adds	r2, #67	; 0x43
 800744a:	47a8      	blx	r5
 800744c:	3001      	adds	r0, #1
 800744e:	d025      	beq.n	800749c <_printf_common+0xa8>
 8007450:	2206      	movs	r2, #6
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	2500      	movs	r5, #0
 8007456:	4013      	ands	r3, r2
 8007458:	2b04      	cmp	r3, #4
 800745a:	d105      	bne.n	8007468 <_printf_common+0x74>
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	68e5      	ldr	r5, [r4, #12]
 8007460:	1aed      	subs	r5, r5, r3
 8007462:	43eb      	mvns	r3, r5
 8007464:	17db      	asrs	r3, r3, #31
 8007466:	401d      	ands	r5, r3
 8007468:	68a3      	ldr	r3, [r4, #8]
 800746a:	6922      	ldr	r2, [r4, #16]
 800746c:	4293      	cmp	r3, r2
 800746e:	dd01      	ble.n	8007474 <_printf_common+0x80>
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	18ed      	adds	r5, r5, r3
 8007474:	2600      	movs	r6, #0
 8007476:	42b5      	cmp	r5, r6
 8007478:	d120      	bne.n	80074bc <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e010      	b.n	80074a0 <_printf_common+0xac>
 800747e:	3501      	adds	r5, #1
 8007480:	68e3      	ldr	r3, [r4, #12]
 8007482:	6832      	ldr	r2, [r6, #0]
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	42ab      	cmp	r3, r5
 8007488:	ddd2      	ble.n	8007430 <_printf_common+0x3c>
 800748a:	0022      	movs	r2, r4
 800748c:	2301      	movs	r3, #1
 800748e:	9901      	ldr	r1, [sp, #4]
 8007490:	9800      	ldr	r0, [sp, #0]
 8007492:	9f08      	ldr	r7, [sp, #32]
 8007494:	3219      	adds	r2, #25
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	d1f0      	bne.n	800747e <_printf_common+0x8a>
 800749c:	2001      	movs	r0, #1
 800749e:	4240      	negs	r0, r0
 80074a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074a2:	2030      	movs	r0, #48	; 0x30
 80074a4:	18e1      	adds	r1, r4, r3
 80074a6:	3143      	adds	r1, #67	; 0x43
 80074a8:	7008      	strb	r0, [r1, #0]
 80074aa:	0021      	movs	r1, r4
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	3145      	adds	r1, #69	; 0x45
 80074b0:	7809      	ldrb	r1, [r1, #0]
 80074b2:	18a2      	adds	r2, r4, r2
 80074b4:	3243      	adds	r2, #67	; 0x43
 80074b6:	3302      	adds	r3, #2
 80074b8:	7011      	strb	r1, [r2, #0]
 80074ba:	e7c1      	b.n	8007440 <_printf_common+0x4c>
 80074bc:	0022      	movs	r2, r4
 80074be:	2301      	movs	r3, #1
 80074c0:	9901      	ldr	r1, [sp, #4]
 80074c2:	9800      	ldr	r0, [sp, #0]
 80074c4:	9f08      	ldr	r7, [sp, #32]
 80074c6:	321a      	adds	r2, #26
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	d0e6      	beq.n	800749c <_printf_common+0xa8>
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7d1      	b.n	8007476 <_printf_common+0x82>
	...

080074d4 <_printf_i>:
 80074d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074d6:	b08b      	sub	sp, #44	; 0x2c
 80074d8:	9206      	str	r2, [sp, #24]
 80074da:	000a      	movs	r2, r1
 80074dc:	3243      	adds	r2, #67	; 0x43
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	9005      	str	r0, [sp, #20]
 80074e2:	9204      	str	r2, [sp, #16]
 80074e4:	7e0a      	ldrb	r2, [r1, #24]
 80074e6:	000c      	movs	r4, r1
 80074e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ea:	2a78      	cmp	r2, #120	; 0x78
 80074ec:	d809      	bhi.n	8007502 <_printf_i+0x2e>
 80074ee:	2a62      	cmp	r2, #98	; 0x62
 80074f0:	d80b      	bhi.n	800750a <_printf_i+0x36>
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d100      	bne.n	80074f8 <_printf_i+0x24>
 80074f6:	e0be      	b.n	8007676 <_printf_i+0x1a2>
 80074f8:	497c      	ldr	r1, [pc, #496]	; (80076ec <_printf_i+0x218>)
 80074fa:	9103      	str	r1, [sp, #12]
 80074fc:	2a58      	cmp	r2, #88	; 0x58
 80074fe:	d100      	bne.n	8007502 <_printf_i+0x2e>
 8007500:	e093      	b.n	800762a <_printf_i+0x156>
 8007502:	0026      	movs	r6, r4
 8007504:	3642      	adds	r6, #66	; 0x42
 8007506:	7032      	strb	r2, [r6, #0]
 8007508:	e022      	b.n	8007550 <_printf_i+0x7c>
 800750a:	0010      	movs	r0, r2
 800750c:	3863      	subs	r0, #99	; 0x63
 800750e:	2815      	cmp	r0, #21
 8007510:	d8f7      	bhi.n	8007502 <_printf_i+0x2e>
 8007512:	f7f8 fe09 	bl	8000128 <__gnu_thumb1_case_shi>
 8007516:	0016      	.short	0x0016
 8007518:	fff6001f 	.word	0xfff6001f
 800751c:	fff6fff6 	.word	0xfff6fff6
 8007520:	001ffff6 	.word	0x001ffff6
 8007524:	fff6fff6 	.word	0xfff6fff6
 8007528:	fff6fff6 	.word	0xfff6fff6
 800752c:	003600a3 	.word	0x003600a3
 8007530:	fff60083 	.word	0xfff60083
 8007534:	00b4fff6 	.word	0x00b4fff6
 8007538:	0036fff6 	.word	0x0036fff6
 800753c:	fff6fff6 	.word	0xfff6fff6
 8007540:	0087      	.short	0x0087
 8007542:	0026      	movs	r6, r4
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	3642      	adds	r6, #66	; 0x42
 8007548:	1d11      	adds	r1, r2, #4
 800754a:	6019      	str	r1, [r3, #0]
 800754c:	6813      	ldr	r3, [r2, #0]
 800754e:	7033      	strb	r3, [r6, #0]
 8007550:	2301      	movs	r3, #1
 8007552:	e0a2      	b.n	800769a <_printf_i+0x1c6>
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	6809      	ldr	r1, [r1, #0]
 8007558:	1d02      	adds	r2, r0, #4
 800755a:	060d      	lsls	r5, r1, #24
 800755c:	d50b      	bpl.n	8007576 <_printf_i+0xa2>
 800755e:	6805      	ldr	r5, [r0, #0]
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	2d00      	cmp	r5, #0
 8007564:	da03      	bge.n	800756e <_printf_i+0x9a>
 8007566:	232d      	movs	r3, #45	; 0x2d
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	426d      	negs	r5, r5
 800756c:	7013      	strb	r3, [r2, #0]
 800756e:	4b5f      	ldr	r3, [pc, #380]	; (80076ec <_printf_i+0x218>)
 8007570:	270a      	movs	r7, #10
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	e01b      	b.n	80075ae <_printf_i+0xda>
 8007576:	6805      	ldr	r5, [r0, #0]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	0649      	lsls	r1, r1, #25
 800757c:	d5f1      	bpl.n	8007562 <_printf_i+0x8e>
 800757e:	b22d      	sxth	r5, r5
 8007580:	e7ef      	b.n	8007562 <_printf_i+0x8e>
 8007582:	680d      	ldr	r5, [r1, #0]
 8007584:	6819      	ldr	r1, [r3, #0]
 8007586:	1d08      	adds	r0, r1, #4
 8007588:	6018      	str	r0, [r3, #0]
 800758a:	062e      	lsls	r6, r5, #24
 800758c:	d501      	bpl.n	8007592 <_printf_i+0xbe>
 800758e:	680d      	ldr	r5, [r1, #0]
 8007590:	e003      	b.n	800759a <_printf_i+0xc6>
 8007592:	066d      	lsls	r5, r5, #25
 8007594:	d5fb      	bpl.n	800758e <_printf_i+0xba>
 8007596:	680d      	ldr	r5, [r1, #0]
 8007598:	b2ad      	uxth	r5, r5
 800759a:	4b54      	ldr	r3, [pc, #336]	; (80076ec <_printf_i+0x218>)
 800759c:	2708      	movs	r7, #8
 800759e:	9303      	str	r3, [sp, #12]
 80075a0:	2a6f      	cmp	r2, #111	; 0x6f
 80075a2:	d000      	beq.n	80075a6 <_printf_i+0xd2>
 80075a4:	3702      	adds	r7, #2
 80075a6:	0023      	movs	r3, r4
 80075a8:	2200      	movs	r2, #0
 80075aa:	3343      	adds	r3, #67	; 0x43
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	db03      	blt.n	80075be <_printf_i+0xea>
 80075b6:	2104      	movs	r1, #4
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	438a      	bics	r2, r1
 80075bc:	6022      	str	r2, [r4, #0]
 80075be:	2d00      	cmp	r5, #0
 80075c0:	d102      	bne.n	80075c8 <_printf_i+0xf4>
 80075c2:	9e04      	ldr	r6, [sp, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <_printf_i+0x10e>
 80075c8:	9e04      	ldr	r6, [sp, #16]
 80075ca:	0028      	movs	r0, r5
 80075cc:	0039      	movs	r1, r7
 80075ce:	f7f8 fe3b 	bl	8000248 <__aeabi_uidivmod>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	3e01      	subs	r6, #1
 80075d6:	5c5b      	ldrb	r3, [r3, r1]
 80075d8:	7033      	strb	r3, [r6, #0]
 80075da:	002b      	movs	r3, r5
 80075dc:	0005      	movs	r5, r0
 80075de:	429f      	cmp	r7, r3
 80075e0:	d9f3      	bls.n	80075ca <_printf_i+0xf6>
 80075e2:	2f08      	cmp	r7, #8
 80075e4:	d109      	bne.n	80075fa <_printf_i+0x126>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	07db      	lsls	r3, r3, #31
 80075ea:	d506      	bpl.n	80075fa <_printf_i+0x126>
 80075ec:	6862      	ldr	r2, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dc02      	bgt.n	80075fa <_printf_i+0x126>
 80075f4:	2330      	movs	r3, #48	; 0x30
 80075f6:	3e01      	subs	r6, #1
 80075f8:	7033      	strb	r3, [r6, #0]
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	1b9b      	subs	r3, r3, r6
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	9b07      	ldr	r3, [sp, #28]
 8007602:	0021      	movs	r1, r4
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	9805      	ldr	r0, [sp, #20]
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	aa09      	add	r2, sp, #36	; 0x24
 800760c:	f7ff fef2 	bl	80073f4 <_printf_common>
 8007610:	3001      	adds	r0, #1
 8007612:	d147      	bne.n	80076a4 <_printf_i+0x1d0>
 8007614:	2001      	movs	r0, #1
 8007616:	4240      	negs	r0, r0
 8007618:	b00b      	add	sp, #44	; 0x2c
 800761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761c:	2220      	movs	r2, #32
 800761e:	6809      	ldr	r1, [r1, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	2278      	movs	r2, #120	; 0x78
 8007626:	4932      	ldr	r1, [pc, #200]	; (80076f0 <_printf_i+0x21c>)
 8007628:	9103      	str	r1, [sp, #12]
 800762a:	0021      	movs	r1, r4
 800762c:	3145      	adds	r1, #69	; 0x45
 800762e:	700a      	strb	r2, [r1, #0]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	c920      	ldmia	r1!, {r5}
 8007636:	0610      	lsls	r0, r2, #24
 8007638:	d402      	bmi.n	8007640 <_printf_i+0x16c>
 800763a:	0650      	lsls	r0, r2, #25
 800763c:	d500      	bpl.n	8007640 <_printf_i+0x16c>
 800763e:	b2ad      	uxth	r5, r5
 8007640:	6019      	str	r1, [r3, #0]
 8007642:	07d3      	lsls	r3, r2, #31
 8007644:	d502      	bpl.n	800764c <_printf_i+0x178>
 8007646:	2320      	movs	r3, #32
 8007648:	4313      	orrs	r3, r2
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	2710      	movs	r7, #16
 800764e:	2d00      	cmp	r5, #0
 8007650:	d1a9      	bne.n	80075a6 <_printf_i+0xd2>
 8007652:	2220      	movs	r2, #32
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	4393      	bics	r3, r2
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	e7a4      	b.n	80075a6 <_printf_i+0xd2>
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	680d      	ldr	r5, [r1, #0]
 8007660:	1d10      	adds	r0, r2, #4
 8007662:	6949      	ldr	r1, [r1, #20]
 8007664:	6018      	str	r0, [r3, #0]
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	062e      	lsls	r6, r5, #24
 800766a:	d501      	bpl.n	8007670 <_printf_i+0x19c>
 800766c:	6019      	str	r1, [r3, #0]
 800766e:	e002      	b.n	8007676 <_printf_i+0x1a2>
 8007670:	066d      	lsls	r5, r5, #25
 8007672:	d5fb      	bpl.n	800766c <_printf_i+0x198>
 8007674:	8019      	strh	r1, [r3, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	9e04      	ldr	r6, [sp, #16]
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	e7c0      	b.n	8007600 <_printf_i+0x12c>
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	1d11      	adds	r1, r2, #4
 8007682:	6019      	str	r1, [r3, #0]
 8007684:	6816      	ldr	r6, [r2, #0]
 8007686:	2100      	movs	r1, #0
 8007688:	0030      	movs	r0, r6
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	f000 f9e9 	bl	8007a62 <memchr>
 8007690:	2800      	cmp	r0, #0
 8007692:	d001      	beq.n	8007698 <_printf_i+0x1c4>
 8007694:	1b80      	subs	r0, r0, r6
 8007696:	6060      	str	r0, [r4, #4]
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	2300      	movs	r3, #0
 800769e:	9a04      	ldr	r2, [sp, #16]
 80076a0:	7013      	strb	r3, [r2, #0]
 80076a2:	e7ad      	b.n	8007600 <_printf_i+0x12c>
 80076a4:	0032      	movs	r2, r6
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	9906      	ldr	r1, [sp, #24]
 80076aa:	9805      	ldr	r0, [sp, #20]
 80076ac:	9d07      	ldr	r5, [sp, #28]
 80076ae:	47a8      	blx	r5
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0af      	beq.n	8007614 <_printf_i+0x140>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	d415      	bmi.n	80076e6 <_printf_i+0x212>
 80076ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076bc:	68e0      	ldr	r0, [r4, #12]
 80076be:	4298      	cmp	r0, r3
 80076c0:	daaa      	bge.n	8007618 <_printf_i+0x144>
 80076c2:	0018      	movs	r0, r3
 80076c4:	e7a8      	b.n	8007618 <_printf_i+0x144>
 80076c6:	0022      	movs	r2, r4
 80076c8:	2301      	movs	r3, #1
 80076ca:	9906      	ldr	r1, [sp, #24]
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	9e07      	ldr	r6, [sp, #28]
 80076d0:	3219      	adds	r2, #25
 80076d2:	47b0      	blx	r6
 80076d4:	3001      	adds	r0, #1
 80076d6:	d09d      	beq.n	8007614 <_printf_i+0x140>
 80076d8:	3501      	adds	r5, #1
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	dcf0      	bgt.n	80076c6 <_printf_i+0x1f2>
 80076e4:	e7e9      	b.n	80076ba <_printf_i+0x1e6>
 80076e6:	2500      	movs	r5, #0
 80076e8:	e7f7      	b.n	80076da <_printf_i+0x206>
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	08009ebe 	.word	0x08009ebe
 80076f0:	08009ecf 	.word	0x08009ecf

080076f4 <std>:
 80076f4:	2300      	movs	r3, #0
 80076f6:	b510      	push	{r4, lr}
 80076f8:	0004      	movs	r4, r0
 80076fa:	6003      	str	r3, [r0, #0]
 80076fc:	6043      	str	r3, [r0, #4]
 80076fe:	6083      	str	r3, [r0, #8]
 8007700:	8181      	strh	r1, [r0, #12]
 8007702:	6643      	str	r3, [r0, #100]	; 0x64
 8007704:	81c2      	strh	r2, [r0, #14]
 8007706:	6103      	str	r3, [r0, #16]
 8007708:	6143      	str	r3, [r0, #20]
 800770a:	6183      	str	r3, [r0, #24]
 800770c:	0019      	movs	r1, r3
 800770e:	2208      	movs	r2, #8
 8007710:	305c      	adds	r0, #92	; 0x5c
 8007712:	f000 f91f 	bl	8007954 <memset>
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <std+0x50>)
 8007718:	6224      	str	r4, [r4, #32]
 800771a:	6263      	str	r3, [r4, #36]	; 0x24
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <std+0x54>)
 800771e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <std+0x58>)
 8007722:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <std+0x5c>)
 8007726:	6323      	str	r3, [r4, #48]	; 0x30
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <std+0x60>)
 800772a:	429c      	cmp	r4, r3
 800772c:	d005      	beq.n	800773a <std+0x46>
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <std+0x64>)
 8007730:	429c      	cmp	r4, r3
 8007732:	d002      	beq.n	800773a <std+0x46>
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <std+0x68>)
 8007736:	429c      	cmp	r4, r3
 8007738:	d103      	bne.n	8007742 <std+0x4e>
 800773a:	0020      	movs	r0, r4
 800773c:	3058      	adds	r0, #88	; 0x58
 800773e:	f000 f98d 	bl	8007a5c <__retarget_lock_init_recursive>
 8007742:	bd10      	pop	{r4, pc}
 8007744:	080078bd 	.word	0x080078bd
 8007748:	080078e5 	.word	0x080078e5
 800774c:	0800791d 	.word	0x0800791d
 8007750:	08007949 	.word	0x08007949
 8007754:	200003e0 	.word	0x200003e0
 8007758:	20000448 	.word	0x20000448
 800775c:	200004b0 	.word	0x200004b0

08007760 <stdio_exit_handler>:
 8007760:	b510      	push	{r4, lr}
 8007762:	4a03      	ldr	r2, [pc, #12]	; (8007770 <stdio_exit_handler+0x10>)
 8007764:	4903      	ldr	r1, [pc, #12]	; (8007774 <stdio_exit_handler+0x14>)
 8007766:	4804      	ldr	r0, [pc, #16]	; (8007778 <stdio_exit_handler+0x18>)
 8007768:	f000 f86c 	bl	8007844 <_fwalk_sglue>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000014 	.word	0x20000014
 8007774:	080094d1 	.word	0x080094d1
 8007778:	20000020 	.word	0x20000020

0800777c <cleanup_stdio>:
 800777c:	6841      	ldr	r1, [r0, #4]
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <cleanup_stdio+0x30>)
 8007780:	b510      	push	{r4, lr}
 8007782:	0004      	movs	r4, r0
 8007784:	4299      	cmp	r1, r3
 8007786:	d001      	beq.n	800778c <cleanup_stdio+0x10>
 8007788:	f001 fea2 	bl	80094d0 <_fflush_r>
 800778c:	68a1      	ldr	r1, [r4, #8]
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <cleanup_stdio+0x34>)
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <cleanup_stdio+0x1e>
 8007794:	0020      	movs	r0, r4
 8007796:	f001 fe9b 	bl	80094d0 <_fflush_r>
 800779a:	68e1      	ldr	r1, [r4, #12]
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <cleanup_stdio+0x38>)
 800779e:	4299      	cmp	r1, r3
 80077a0:	d002      	beq.n	80077a8 <cleanup_stdio+0x2c>
 80077a2:	0020      	movs	r0, r4
 80077a4:	f001 fe94 	bl	80094d0 <_fflush_r>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	200003e0 	.word	0x200003e0
 80077b0:	20000448 	.word	0x20000448
 80077b4:	200004b0 	.word	0x200004b0

080077b8 <global_stdio_init.part.0>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <global_stdio_init.part.0+0x28>)
 80077bc:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <global_stdio_init.part.0+0x2c>)
 80077be:	2104      	movs	r1, #4
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	4809      	ldr	r0, [pc, #36]	; (80077e8 <global_stdio_init.part.0+0x30>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	f7ff ff95 	bl	80076f4 <std>
 80077ca:	2201      	movs	r2, #1
 80077cc:	2109      	movs	r1, #9
 80077ce:	4807      	ldr	r0, [pc, #28]	; (80077ec <global_stdio_init.part.0+0x34>)
 80077d0:	f7ff ff90 	bl	80076f4 <std>
 80077d4:	2202      	movs	r2, #2
 80077d6:	2112      	movs	r1, #18
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <global_stdio_init.part.0+0x38>)
 80077da:	f7ff ff8b 	bl	80076f4 <std>
 80077de:	bd10      	pop	{r4, pc}
 80077e0:	20000518 	.word	0x20000518
 80077e4:	08007761 	.word	0x08007761
 80077e8:	200003e0 	.word	0x200003e0
 80077ec:	20000448 	.word	0x20000448
 80077f0:	200004b0 	.word	0x200004b0

080077f4 <__sfp_lock_acquire>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4802      	ldr	r0, [pc, #8]	; (8007800 <__sfp_lock_acquire+0xc>)
 80077f8:	f000 f931 	bl	8007a5e <__retarget_lock_acquire_recursive>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	20000521 	.word	0x20000521

08007804 <__sfp_lock_release>:
 8007804:	b510      	push	{r4, lr}
 8007806:	4802      	ldr	r0, [pc, #8]	; (8007810 <__sfp_lock_release+0xc>)
 8007808:	f000 f92a 	bl	8007a60 <__retarget_lock_release_recursive>
 800780c:	bd10      	pop	{r4, pc}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	20000521 	.word	0x20000521

08007814 <__sinit>:
 8007814:	b510      	push	{r4, lr}
 8007816:	0004      	movs	r4, r0
 8007818:	f7ff ffec 	bl	80077f4 <__sfp_lock_acquire>
 800781c:	6a23      	ldr	r3, [r4, #32]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <__sinit+0x14>
 8007822:	f7ff ffef 	bl	8007804 <__sfp_lock_release>
 8007826:	bd10      	pop	{r4, pc}
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <__sinit+0x28>)
 800782a:	6223      	str	r3, [r4, #32]
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__sinit+0x2c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f6      	bne.n	8007822 <__sinit+0xe>
 8007834:	f7ff ffc0 	bl	80077b8 <global_stdio_init.part.0>
 8007838:	e7f3      	b.n	8007822 <__sinit+0xe>
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	0800777d 	.word	0x0800777d
 8007840:	20000518 	.word	0x20000518

08007844 <_fwalk_sglue>:
 8007844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007846:	0014      	movs	r4, r2
 8007848:	2600      	movs	r6, #0
 800784a:	9000      	str	r0, [sp, #0]
 800784c:	9101      	str	r1, [sp, #4]
 800784e:	68a5      	ldr	r5, [r4, #8]
 8007850:	6867      	ldr	r7, [r4, #4]
 8007852:	3f01      	subs	r7, #1
 8007854:	d504      	bpl.n	8007860 <_fwalk_sglue+0x1c>
 8007856:	6824      	ldr	r4, [r4, #0]
 8007858:	2c00      	cmp	r4, #0
 800785a:	d1f8      	bne.n	800784e <_fwalk_sglue+0xa>
 800785c:	0030      	movs	r0, r6
 800785e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007860:	89ab      	ldrh	r3, [r5, #12]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d908      	bls.n	8007878 <_fwalk_sglue+0x34>
 8007866:	220e      	movs	r2, #14
 8007868:	5eab      	ldrsh	r3, [r5, r2]
 800786a:	3301      	adds	r3, #1
 800786c:	d004      	beq.n	8007878 <_fwalk_sglue+0x34>
 800786e:	0029      	movs	r1, r5
 8007870:	9800      	ldr	r0, [sp, #0]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	4798      	blx	r3
 8007876:	4306      	orrs	r6, r0
 8007878:	3568      	adds	r5, #104	; 0x68
 800787a:	e7ea      	b.n	8007852 <_fwalk_sglue+0xe>

0800787c <siprintf>:
 800787c:	b40e      	push	{r1, r2, r3}
 800787e:	b500      	push	{lr}
 8007880:	490b      	ldr	r1, [pc, #44]	; (80078b0 <siprintf+0x34>)
 8007882:	b09c      	sub	sp, #112	; 0x70
 8007884:	ab1d      	add	r3, sp, #116	; 0x74
 8007886:	9002      	str	r0, [sp, #8]
 8007888:	9006      	str	r0, [sp, #24]
 800788a:	9107      	str	r1, [sp, #28]
 800788c:	9104      	str	r1, [sp, #16]
 800788e:	4809      	ldr	r0, [pc, #36]	; (80078b4 <siprintf+0x38>)
 8007890:	4909      	ldr	r1, [pc, #36]	; (80078b8 <siprintf+0x3c>)
 8007892:	cb04      	ldmia	r3!, {r2}
 8007894:	9105      	str	r1, [sp, #20]
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	a902      	add	r1, sp, #8
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	f001 fc8e 	bl	80091bc <_svfiprintf_r>
 80078a0:	2200      	movs	r2, #0
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	b01c      	add	sp, #112	; 0x70
 80078a8:	bc08      	pop	{r3}
 80078aa:	b003      	add	sp, #12
 80078ac:	4718      	bx	r3
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	7fffffff 	.word	0x7fffffff
 80078b4:	2000006c 	.word	0x2000006c
 80078b8:	ffff0208 	.word	0xffff0208

080078bc <__sread>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	000c      	movs	r4, r1
 80078c0:	250e      	movs	r5, #14
 80078c2:	5f49      	ldrsh	r1, [r1, r5]
 80078c4:	f000 f878 	bl	80079b8 <_read_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	db03      	blt.n	80078d4 <__sread+0x18>
 80078cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80078ce:	181b      	adds	r3, r3, r0
 80078d0:	6563      	str	r3, [r4, #84]	; 0x54
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	4a02      	ldr	r2, [pc, #8]	; (80078e0 <__sread+0x24>)
 80078d8:	4013      	ands	r3, r2
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	e7f9      	b.n	80078d2 <__sread+0x16>
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	ffffefff 	.word	0xffffefff

080078e4 <__swrite>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	001f      	movs	r7, r3
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	0005      	movs	r5, r0
 80078ec:	000c      	movs	r4, r1
 80078ee:	0016      	movs	r6, r2
 80078f0:	05db      	lsls	r3, r3, #23
 80078f2:	d505      	bpl.n	8007900 <__swrite+0x1c>
 80078f4:	230e      	movs	r3, #14
 80078f6:	5ec9      	ldrsh	r1, [r1, r3]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2302      	movs	r3, #2
 80078fc:	f000 f848 	bl	8007990 <_lseek_r>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	4a05      	ldr	r2, [pc, #20]	; (8007918 <__swrite+0x34>)
 8007904:	0028      	movs	r0, r5
 8007906:	4013      	ands	r3, r2
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	0032      	movs	r2, r6
 800790c:	230e      	movs	r3, #14
 800790e:	5ee1      	ldrsh	r1, [r4, r3]
 8007910:	003b      	movs	r3, r7
 8007912:	f000 f865 	bl	80079e0 <_write_r>
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	ffffefff 	.word	0xffffefff

0800791c <__sseek>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	000c      	movs	r4, r1
 8007920:	250e      	movs	r5, #14
 8007922:	5f49      	ldrsh	r1, [r1, r5]
 8007924:	f000 f834 	bl	8007990 <_lseek_r>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	1c42      	adds	r2, r0, #1
 800792c:	d103      	bne.n	8007936 <__sseek+0x1a>
 800792e:	4a05      	ldr	r2, [pc, #20]	; (8007944 <__sseek+0x28>)
 8007930:	4013      	ands	r3, r2
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	0152      	lsls	r2, r2, #5
 800793a:	4313      	orrs	r3, r2
 800793c:	81a3      	strh	r3, [r4, #12]
 800793e:	6560      	str	r0, [r4, #84]	; 0x54
 8007940:	e7f8      	b.n	8007934 <__sseek+0x18>
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	ffffefff 	.word	0xffffefff

08007948 <__sclose>:
 8007948:	b510      	push	{r4, lr}
 800794a:	230e      	movs	r3, #14
 800794c:	5ec9      	ldrsh	r1, [r1, r3]
 800794e:	f000 f80d 	bl	800796c <_close_r>
 8007952:	bd10      	pop	{r4, pc}

08007954 <memset>:
 8007954:	0003      	movs	r3, r0
 8007956:	1882      	adds	r2, r0, r2
 8007958:	4293      	cmp	r3, r2
 800795a:	d100      	bne.n	800795e <memset+0xa>
 800795c:	4770      	bx	lr
 800795e:	7019      	strb	r1, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	e7f9      	b.n	8007958 <memset+0x4>

08007964 <_localeconv_r>:
 8007964:	4800      	ldr	r0, [pc, #0]	; (8007968 <_localeconv_r+0x4>)
 8007966:	4770      	bx	lr
 8007968:	20000160 	.word	0x20000160

0800796c <_close_r>:
 800796c:	2300      	movs	r3, #0
 800796e:	b570      	push	{r4, r5, r6, lr}
 8007970:	4d06      	ldr	r5, [pc, #24]	; (800798c <_close_r+0x20>)
 8007972:	0004      	movs	r4, r0
 8007974:	0008      	movs	r0, r1
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	f7fc f842 	bl	8003a00 <_close>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d103      	bne.n	8007988 <_close_r+0x1c>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d000      	beq.n	8007988 <_close_r+0x1c>
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	2000051c 	.word	0x2000051c

08007990 <_lseek_r>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	0004      	movs	r4, r0
 8007994:	0008      	movs	r0, r1
 8007996:	0011      	movs	r1, r2
 8007998:	001a      	movs	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	4d05      	ldr	r5, [pc, #20]	; (80079b4 <_lseek_r+0x24>)
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7fc f84f 	bl	8003a42 <_lseek>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d103      	bne.n	80079b0 <_lseek_r+0x20>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d000      	beq.n	80079b0 <_lseek_r+0x20>
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	2000051c 	.word	0x2000051c

080079b8 <_read_r>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	0004      	movs	r4, r0
 80079bc:	0008      	movs	r0, r1
 80079be:	0011      	movs	r1, r2
 80079c0:	001a      	movs	r2, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	4d05      	ldr	r5, [pc, #20]	; (80079dc <_read_r+0x24>)
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7fb ffe1 	bl	800398e <_read>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d103      	bne.n	80079d8 <_read_r+0x20>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d000      	beq.n	80079d8 <_read_r+0x20>
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	bd70      	pop	{r4, r5, r6, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	2000051c 	.word	0x2000051c

080079e0 <_write_r>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	0004      	movs	r4, r0
 80079e4:	0008      	movs	r0, r1
 80079e6:	0011      	movs	r1, r2
 80079e8:	001a      	movs	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	4d05      	ldr	r5, [pc, #20]	; (8007a04 <_write_r+0x24>)
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7fb ffea 	bl	80039c8 <_write>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d103      	bne.n	8007a00 <_write_r+0x20>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d000      	beq.n	8007a00 <_write_r+0x20>
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	2000051c 	.word	0x2000051c

08007a08 <__errno>:
 8007a08:	4b01      	ldr	r3, [pc, #4]	; (8007a10 <__errno+0x8>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	4770      	bx	lr
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	2000006c 	.word	0x2000006c

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	2600      	movs	r6, #0
 8007a18:	4c0c      	ldr	r4, [pc, #48]	; (8007a4c <__libc_init_array+0x38>)
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1c:	1b64      	subs	r4, r4, r5
 8007a1e:	10a4      	asrs	r4, r4, #2
 8007a20:	42a6      	cmp	r6, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	2600      	movs	r6, #0
 8007a26:	f002 f923 	bl	8009c70 <_init>
 8007a2a:	4c0a      	ldr	r4, [pc, #40]	; (8007a54 <__libc_init_array+0x40>)
 8007a2c:	4d0a      	ldr	r5, [pc, #40]	; (8007a58 <__libc_init_array+0x44>)
 8007a2e:	1b64      	subs	r4, r4, r5
 8007a30:	10a4      	asrs	r4, r4, #2
 8007a32:	42a6      	cmp	r6, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	00b3      	lsls	r3, r6, #2
 8007a3a:	58eb      	ldr	r3, [r5, r3]
 8007a3c:	4798      	blx	r3
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	00b3      	lsls	r3, r6, #2
 8007a44:	58eb      	ldr	r3, [r5, r3]
 8007a46:	4798      	blx	r3
 8007a48:	3601      	adds	r6, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	0800a224 	.word	0x0800a224
 8007a50:	0800a224 	.word	0x0800a224
 8007a54:	0800a228 	.word	0x0800a228
 8007a58:	0800a224 	.word	0x0800a224

08007a5c <__retarget_lock_init_recursive>:
 8007a5c:	4770      	bx	lr

08007a5e <__retarget_lock_acquire_recursive>:
 8007a5e:	4770      	bx	lr

08007a60 <__retarget_lock_release_recursive>:
 8007a60:	4770      	bx	lr

08007a62 <memchr>:
 8007a62:	b2c9      	uxtb	r1, r1
 8007a64:	1882      	adds	r2, r0, r2
 8007a66:	4290      	cmp	r0, r2
 8007a68:	d101      	bne.n	8007a6e <memchr+0xc>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	4770      	bx	lr
 8007a6e:	7803      	ldrb	r3, [r0, #0]
 8007a70:	428b      	cmp	r3, r1
 8007a72:	d0fb      	beq.n	8007a6c <memchr+0xa>
 8007a74:	3001      	adds	r0, #1
 8007a76:	e7f6      	b.n	8007a66 <memchr+0x4>

08007a78 <quorem>:
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	6902      	ldr	r2, [r0, #16]
 8007a7c:	690b      	ldr	r3, [r1, #16]
 8007a7e:	b089      	sub	sp, #36	; 0x24
 8007a80:	0007      	movs	r7, r0
 8007a82:	9104      	str	r1, [sp, #16]
 8007a84:	2000      	movs	r0, #0
 8007a86:	429a      	cmp	r2, r3
 8007a88:	db69      	blt.n	8007b5e <quorem+0xe6>
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	009c      	lsls	r4, r3, #2
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	000b      	movs	r3, r1
 8007a92:	3314      	adds	r3, #20
 8007a94:	9306      	str	r3, [sp, #24]
 8007a96:	191b      	adds	r3, r3, r4
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	003b      	movs	r3, r7
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	191c      	adds	r4, r3, r4
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	6826      	ldr	r6, [r4, #0]
 8007aa6:	681d      	ldr	r5, [r3, #0]
 8007aa8:	0030      	movs	r0, r6
 8007aaa:	3501      	adds	r5, #1
 8007aac:	0029      	movs	r1, r5
 8007aae:	f7f8 fb45 	bl	800013c <__udivsi3>
 8007ab2:	9002      	str	r0, [sp, #8]
 8007ab4:	42ae      	cmp	r6, r5
 8007ab6:	d329      	bcc.n	8007b0c <quorem+0x94>
 8007ab8:	9b06      	ldr	r3, [sp, #24]
 8007aba:	2600      	movs	r6, #0
 8007abc:	469c      	mov	ip, r3
 8007abe:	9d03      	ldr	r5, [sp, #12]
 8007ac0:	9606      	str	r6, [sp, #24]
 8007ac2:	4662      	mov	r2, ip
 8007ac4:	ca08      	ldmia	r2!, {r3}
 8007ac6:	6828      	ldr	r0, [r5, #0]
 8007ac8:	4694      	mov	ip, r2
 8007aca:	9a02      	ldr	r2, [sp, #8]
 8007acc:	b299      	uxth	r1, r3
 8007ace:	4351      	muls	r1, r2
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	4353      	muls	r3, r2
 8007ad4:	1989      	adds	r1, r1, r6
 8007ad6:	0c0a      	lsrs	r2, r1, #16
 8007ad8:	189b      	adds	r3, r3, r2
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	0c1e      	lsrs	r6, r3, #16
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	b282      	uxth	r2, r0
 8007ae2:	18d2      	adds	r2, r2, r3
 8007ae4:	466b      	mov	r3, sp
 8007ae6:	b289      	uxth	r1, r1
 8007ae8:	8b9b      	ldrh	r3, [r3, #28]
 8007aea:	1a52      	subs	r2, r2, r1
 8007aec:	0c01      	lsrs	r1, r0, #16
 8007aee:	1ac9      	subs	r1, r1, r3
 8007af0:	1413      	asrs	r3, r2, #16
 8007af2:	18cb      	adds	r3, r1, r3
 8007af4:	1419      	asrs	r1, r3, #16
 8007af6:	b292      	uxth	r2, r2
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	4313      	orrs	r3, r2
 8007afc:	c508      	stmia	r5!, {r3}
 8007afe:	9b05      	ldr	r3, [sp, #20]
 8007b00:	9106      	str	r1, [sp, #24]
 8007b02:	4563      	cmp	r3, ip
 8007b04:	d2dd      	bcs.n	8007ac2 <quorem+0x4a>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d030      	beq.n	8007b6e <quorem+0xf6>
 8007b0c:	0038      	movs	r0, r7
 8007b0e:	9904      	ldr	r1, [sp, #16]
 8007b10:	f001 f9de 	bl	8008ed0 <__mcmp>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	db21      	blt.n	8007b5c <quorem+0xe4>
 8007b18:	0038      	movs	r0, r7
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	9b02      	ldr	r3, [sp, #8]
 8007b1e:	9c04      	ldr	r4, [sp, #16]
 8007b20:	3301      	adds	r3, #1
 8007b22:	9302      	str	r3, [sp, #8]
 8007b24:	3014      	adds	r0, #20
 8007b26:	3414      	adds	r4, #20
 8007b28:	6803      	ldr	r3, [r0, #0]
 8007b2a:	cc02      	ldmia	r4!, {r1}
 8007b2c:	b29d      	uxth	r5, r3
 8007b2e:	19ad      	adds	r5, r5, r6
 8007b30:	b28a      	uxth	r2, r1
 8007b32:	1aaa      	subs	r2, r5, r2
 8007b34:	0c09      	lsrs	r1, r1, #16
 8007b36:	0c1b      	lsrs	r3, r3, #16
 8007b38:	1a5b      	subs	r3, r3, r1
 8007b3a:	1411      	asrs	r1, r2, #16
 8007b3c:	185b      	adds	r3, r3, r1
 8007b3e:	141e      	asrs	r6, r3, #16
 8007b40:	b292      	uxth	r2, r2
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	4313      	orrs	r3, r2
 8007b46:	c008      	stmia	r0!, {r3}
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	d2ec      	bcs.n	8007b28 <quorem+0xb0>
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	9a03      	ldr	r2, [sp, #12]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	18d3      	adds	r3, r2, r3
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	d015      	beq.n	8007b88 <quorem+0x110>
 8007b5c:	9802      	ldr	r0, [sp, #8]
 8007b5e:	b009      	add	sp, #36	; 0x24
 8007b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <quorem+0xfe>
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	3c04      	subs	r4, #4
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	d3f5      	bcc.n	8007b62 <quorem+0xea>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e7c7      	b.n	8007b0c <quorem+0x94>
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d106      	bne.n	8007b90 <quorem+0x118>
 8007b82:	9a01      	ldr	r2, [sp, #4]
 8007b84:	3a01      	subs	r2, #1
 8007b86:	9201      	str	r2, [sp, #4]
 8007b88:	9a03      	ldr	r2, [sp, #12]
 8007b8a:	3b04      	subs	r3, #4
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d3f5      	bcc.n	8007b7c <quorem+0x104>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	e7e2      	b.n	8007b5c <quorem+0xe4>
	...

08007b98 <_dtoa_r>:
 8007b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9a:	0014      	movs	r4, r2
 8007b9c:	001d      	movs	r5, r3
 8007b9e:	69c6      	ldr	r6, [r0, #28]
 8007ba0:	b09d      	sub	sp, #116	; 0x74
 8007ba2:	9408      	str	r4, [sp, #32]
 8007ba4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ba6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007ba8:	9004      	str	r0, [sp, #16]
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d10f      	bne.n	8007bce <_dtoa_r+0x36>
 8007bae:	2010      	movs	r0, #16
 8007bb0:	f000 fe4a 	bl	8008848 <malloc>
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	1e02      	subs	r2, r0, #0
 8007bb8:	61d8      	str	r0, [r3, #28]
 8007bba:	d104      	bne.n	8007bc6 <_dtoa_r+0x2e>
 8007bbc:	21ef      	movs	r1, #239	; 0xef
 8007bbe:	4bc6      	ldr	r3, [pc, #792]	; (8007ed8 <_dtoa_r+0x340>)
 8007bc0:	48c6      	ldr	r0, [pc, #792]	; (8007edc <_dtoa_r+0x344>)
 8007bc2:	f001 fcdf 	bl	8009584 <__assert_func>
 8007bc6:	6046      	str	r6, [r0, #4]
 8007bc8:	6086      	str	r6, [r0, #8]
 8007bca:	6006      	str	r6, [r0, #0]
 8007bcc:	60c6      	str	r6, [r0, #12]
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d00b      	beq.n	8007bf0 <_dtoa_r+0x58>
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4093      	lsls	r3, r2
 8007bde:	604a      	str	r2, [r1, #4]
 8007be0:	608b      	str	r3, [r1, #8]
 8007be2:	9804      	ldr	r0, [sp, #16]
 8007be4:	f000 ff32 	bl	8008a4c <_Bfree>
 8007be8:	2200      	movs	r2, #0
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	da1e      	bge.n	8007c32 <_dtoa_r+0x9a>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	006b      	lsls	r3, r5, #1
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c00:	4bb7      	ldr	r3, [pc, #732]	; (8007ee0 <_dtoa_r+0x348>)
 8007c02:	4ab7      	ldr	r2, [pc, #732]	; (8007ee0 <_dtoa_r+0x348>)
 8007c04:	403b      	ands	r3, r7
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d116      	bne.n	8007c38 <_dtoa_r+0xa0>
 8007c0a:	4bb6      	ldr	r3, [pc, #728]	; (8007ee4 <_dtoa_r+0x34c>)
 8007c0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	033b      	lsls	r3, r7, #12
 8007c12:	0b1b      	lsrs	r3, r3, #12
 8007c14:	4323      	orrs	r3, r4
 8007c16:	d101      	bne.n	8007c1c <_dtoa_r+0x84>
 8007c18:	f000 fdb5 	bl	8008786 <_dtoa_r+0xbee>
 8007c1c:	4bb2      	ldr	r3, [pc, #712]	; (8007ee8 <_dtoa_r+0x350>)
 8007c1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c20:	9306      	str	r3, [sp, #24]
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d002      	beq.n	8007c2c <_dtoa_r+0x94>
 8007c26:	4bb1      	ldr	r3, [pc, #708]	; (8007eec <_dtoa_r+0x354>)
 8007c28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	9806      	ldr	r0, [sp, #24]
 8007c2e:	b01d      	add	sp, #116	; 0x74
 8007c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c32:	2300      	movs	r3, #0
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	e7e2      	b.n	8007bfe <_dtoa_r+0x66>
 8007c38:	9a08      	ldr	r2, [sp, #32]
 8007c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3c:	9210      	str	r2, [sp, #64]	; 0x40
 8007c3e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c44:	2200      	movs	r2, #0
 8007c46:	2300      	movs	r3, #0
 8007c48:	f7f8 fbfe 	bl	8000448 <__aeabi_dcmpeq>
 8007c4c:	1e06      	subs	r6, r0, #0
 8007c4e:	d009      	beq.n	8007c64 <_dtoa_r+0xcc>
 8007c50:	2301      	movs	r3, #1
 8007c52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	4ba6      	ldr	r3, [pc, #664]	; (8007ef0 <_dtoa_r+0x358>)
 8007c58:	9306      	str	r3, [sp, #24]
 8007c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0e5      	beq.n	8007c2c <_dtoa_r+0x94>
 8007c60:	4ba4      	ldr	r3, [pc, #656]	; (8007ef4 <_dtoa_r+0x35c>)
 8007c62:	e7e1      	b.n	8007c28 <_dtoa_r+0x90>
 8007c64:	ab1a      	add	r3, sp, #104	; 0x68
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	9804      	ldr	r0, [sp, #16]
 8007c6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c72:	f001 f9e1 	bl	8009038 <__d2b>
 8007c76:	007a      	lsls	r2, r7, #1
 8007c78:	9005      	str	r0, [sp, #20]
 8007c7a:	0d52      	lsrs	r2, r2, #21
 8007c7c:	d100      	bne.n	8007c80 <_dtoa_r+0xe8>
 8007c7e:	e07b      	b.n	8007d78 <_dtoa_r+0x1e0>
 8007c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c82:	9617      	str	r6, [sp, #92]	; 0x5c
 8007c84:	0319      	lsls	r1, r3, #12
 8007c86:	4b9c      	ldr	r3, [pc, #624]	; (8007ef8 <_dtoa_r+0x360>)
 8007c88:	0b09      	lsrs	r1, r1, #12
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	499b      	ldr	r1, [pc, #620]	; (8007efc <_dtoa_r+0x364>)
 8007c8e:	1857      	adds	r7, r2, r1
 8007c90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c94:	0019      	movs	r1, r3
 8007c96:	2200      	movs	r2, #0
 8007c98:	4b99      	ldr	r3, [pc, #612]	; (8007f00 <_dtoa_r+0x368>)
 8007c9a:	f7f9 ff69 	bl	8001b70 <__aeabi_dsub>
 8007c9e:	4a99      	ldr	r2, [pc, #612]	; (8007f04 <_dtoa_r+0x36c>)
 8007ca0:	4b99      	ldr	r3, [pc, #612]	; (8007f08 <_dtoa_r+0x370>)
 8007ca2:	f7f9 fca3 	bl	80015ec <__aeabi_dmul>
 8007ca6:	4a99      	ldr	r2, [pc, #612]	; (8007f0c <_dtoa_r+0x374>)
 8007ca8:	4b99      	ldr	r3, [pc, #612]	; (8007f10 <_dtoa_r+0x378>)
 8007caa:	f7f8 fd45 	bl	8000738 <__aeabi_dadd>
 8007cae:	0004      	movs	r4, r0
 8007cb0:	0038      	movs	r0, r7
 8007cb2:	000d      	movs	r5, r1
 8007cb4:	f7fa fb32 	bl	800231c <__aeabi_i2d>
 8007cb8:	4a96      	ldr	r2, [pc, #600]	; (8007f14 <_dtoa_r+0x37c>)
 8007cba:	4b97      	ldr	r3, [pc, #604]	; (8007f18 <_dtoa_r+0x380>)
 8007cbc:	f7f9 fc96 	bl	80015ec <__aeabi_dmul>
 8007cc0:	0002      	movs	r2, r0
 8007cc2:	000b      	movs	r3, r1
 8007cc4:	0020      	movs	r0, r4
 8007cc6:	0029      	movs	r1, r5
 8007cc8:	f7f8 fd36 	bl	8000738 <__aeabi_dadd>
 8007ccc:	0004      	movs	r4, r0
 8007cce:	000d      	movs	r5, r1
 8007cd0:	f7fa faee 	bl	80022b0 <__aeabi_d2iz>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	9003      	str	r0, [sp, #12]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	0020      	movs	r0, r4
 8007cdc:	0029      	movs	r1, r5
 8007cde:	f7f8 fbb9 	bl	8000454 <__aeabi_dcmplt>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d00b      	beq.n	8007cfe <_dtoa_r+0x166>
 8007ce6:	9803      	ldr	r0, [sp, #12]
 8007ce8:	f7fa fb18 	bl	800231c <__aeabi_i2d>
 8007cec:	002b      	movs	r3, r5
 8007cee:	0022      	movs	r2, r4
 8007cf0:	f7f8 fbaa 	bl	8000448 <__aeabi_dcmpeq>
 8007cf4:	4243      	negs	r3, r0
 8007cf6:	4158      	adcs	r0, r3
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1a1b      	subs	r3, r3, r0
 8007cfc:	9303      	str	r3, [sp, #12]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	9316      	str	r3, [sp, #88]	; 0x58
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	2b16      	cmp	r3, #22
 8007d06:	d810      	bhi.n	8007d2a <_dtoa_r+0x192>
 8007d08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d0c:	9a03      	ldr	r2, [sp, #12]
 8007d0e:	4b83      	ldr	r3, [pc, #524]	; (8007f1c <_dtoa_r+0x384>)
 8007d10:	00d2      	lsls	r2, r2, #3
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f7f8 fb9c 	bl	8000454 <__aeabi_dcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d047      	beq.n	8007db0 <_dtoa_r+0x218>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	2300      	movs	r3, #0
 8007d28:	9316      	str	r3, [sp, #88]	; 0x58
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d30:	1bdb      	subs	r3, r3, r7
 8007d32:	1e5a      	subs	r2, r3, #1
 8007d34:	d53e      	bpl.n	8007db4 <_dtoa_r+0x21c>
 8007d36:	2201      	movs	r2, #1
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	db38      	blt.n	8007db8 <_dtoa_r+0x220>
 8007d46:	9a03      	ldr	r2, [sp, #12]
 8007d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4a:	4694      	mov	ip, r2
 8007d4c:	4463      	add	r3, ip
 8007d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d50:	2300      	movs	r3, #0
 8007d52:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d54:	930d      	str	r3, [sp, #52]	; 0x34
 8007d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d58:	2401      	movs	r4, #1
 8007d5a:	2b09      	cmp	r3, #9
 8007d5c:	d867      	bhi.n	8007e2e <_dtoa_r+0x296>
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	dd02      	ble.n	8007d68 <_dtoa_r+0x1d0>
 8007d62:	2400      	movs	r4, #0
 8007d64:	3b04      	subs	r3, #4
 8007d66:	9322      	str	r3, [sp, #136]	; 0x88
 8007d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d6a:	1e98      	subs	r0, r3, #2
 8007d6c:	2803      	cmp	r0, #3
 8007d6e:	d867      	bhi.n	8007e40 <_dtoa_r+0x2a8>
 8007d70:	f7f8 f9d0 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007d74:	5b383a2b 	.word	0x5b383a2b
 8007d78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d7a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007d7c:	18f6      	adds	r6, r6, r3
 8007d7e:	4b68      	ldr	r3, [pc, #416]	; (8007f20 <_dtoa_r+0x388>)
 8007d80:	18f2      	adds	r2, r6, r3
 8007d82:	2a20      	cmp	r2, #32
 8007d84:	dd0f      	ble.n	8007da6 <_dtoa_r+0x20e>
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	409f      	lsls	r7, r3
 8007d8c:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <_dtoa_r+0x38c>)
 8007d8e:	0038      	movs	r0, r7
 8007d90:	18f3      	adds	r3, r6, r3
 8007d92:	40dc      	lsrs	r4, r3
 8007d94:	4320      	orrs	r0, r4
 8007d96:	f7fa faf1 	bl	800237c <__aeabi_ui2d>
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4b62      	ldr	r3, [pc, #392]	; (8007f28 <_dtoa_r+0x390>)
 8007d9e:	1e77      	subs	r7, r6, #1
 8007da0:	18cb      	adds	r3, r1, r3
 8007da2:	9217      	str	r2, [sp, #92]	; 0x5c
 8007da4:	e776      	b.n	8007c94 <_dtoa_r+0xfc>
 8007da6:	2320      	movs	r3, #32
 8007da8:	0020      	movs	r0, r4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	4098      	lsls	r0, r3
 8007dae:	e7f2      	b.n	8007d96 <_dtoa_r+0x1fe>
 8007db0:	9016      	str	r0, [sp, #88]	; 0x58
 8007db2:	e7ba      	b.n	8007d2a <_dtoa_r+0x192>
 8007db4:	920c      	str	r2, [sp, #48]	; 0x30
 8007db6:	e7c3      	b.n	8007d40 <_dtoa_r+0x1a8>
 8007db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dba:	9a03      	ldr	r2, [sp, #12]
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc0:	4253      	negs	r3, r2
 8007dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dc8:	e7c5      	b.n	8007d56 <_dtoa_r+0x1be>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dc13      	bgt.n	8007e00 <_dtoa_r+0x268>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	001a      	movs	r2, r3
 8007ddc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007de2:	e00d      	b.n	8007e00 <_dtoa_r+0x268>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7f1      	b.n	8007dcc <_dtoa_r+0x234>
 8007de8:	2300      	movs	r3, #0
 8007dea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dee:	4694      	mov	ip, r2
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	4463      	add	r3, ip
 8007df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df6:	3301      	adds	r3, #1
 8007df8:	9307      	str	r3, [sp, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc00      	bgt.n	8007e00 <_dtoa_r+0x268>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	9a04      	ldr	r2, [sp, #16]
 8007e02:	2100      	movs	r1, #0
 8007e04:	69d0      	ldr	r0, [r2, #28]
 8007e06:	2204      	movs	r2, #4
 8007e08:	0015      	movs	r5, r2
 8007e0a:	3514      	adds	r5, #20
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	d91b      	bls.n	8007e48 <_dtoa_r+0x2b0>
 8007e10:	6041      	str	r1, [r0, #4]
 8007e12:	9804      	ldr	r0, [sp, #16]
 8007e14:	f000 fdd6 	bl	80089c4 <_Balloc>
 8007e18:	9006      	str	r0, [sp, #24]
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d117      	bne.n	8007e4e <_dtoa_r+0x2b6>
 8007e1e:	21b0      	movs	r1, #176	; 0xb0
 8007e20:	4b42      	ldr	r3, [pc, #264]	; (8007f2c <_dtoa_r+0x394>)
 8007e22:	482e      	ldr	r0, [pc, #184]	; (8007edc <_dtoa_r+0x344>)
 8007e24:	9a06      	ldr	r2, [sp, #24]
 8007e26:	31ff      	adds	r1, #255	; 0xff
 8007e28:	e6cb      	b.n	8007bc2 <_dtoa_r+0x2a>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e7dd      	b.n	8007dea <_dtoa_r+0x252>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	940f      	str	r4, [sp, #60]	; 0x3c
 8007e32:	9322      	str	r3, [sp, #136]	; 0x88
 8007e34:	3b01      	subs	r3, #1
 8007e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	3313      	adds	r3, #19
 8007e3e:	e7cf      	b.n	8007de0 <_dtoa_r+0x248>
 8007e40:	2301      	movs	r3, #1
 8007e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e44:	3b02      	subs	r3, #2
 8007e46:	e7f6      	b.n	8007e36 <_dtoa_r+0x29e>
 8007e48:	3101      	adds	r1, #1
 8007e4a:	0052      	lsls	r2, r2, #1
 8007e4c:	e7dc      	b.n	8007e08 <_dtoa_r+0x270>
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	9a06      	ldr	r2, [sp, #24]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	9b07      	ldr	r3, [sp, #28]
 8007e58:	2b0e      	cmp	r3, #14
 8007e5a:	d900      	bls.n	8007e5e <_dtoa_r+0x2c6>
 8007e5c:	e0e5      	b.n	800802a <_dtoa_r+0x492>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	d100      	bne.n	8007e64 <_dtoa_r+0x2cc>
 8007e62:	e0e2      	b.n	800802a <_dtoa_r+0x492>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd64      	ble.n	8007f34 <_dtoa_r+0x39c>
 8007e6a:	210f      	movs	r1, #15
 8007e6c:	9a03      	ldr	r2, [sp, #12]
 8007e6e:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <_dtoa_r+0x384>)
 8007e70:	400a      	ands	r2, r1
 8007e72:	00d2      	lsls	r2, r2, #3
 8007e74:	189b      	adds	r3, r3, r2
 8007e76:	681e      	ldr	r6, [r3, #0]
 8007e78:	685f      	ldr	r7, [r3, #4]
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	2402      	movs	r4, #2
 8007e7e:	111d      	asrs	r5, r3, #4
 8007e80:	05db      	lsls	r3, r3, #23
 8007e82:	d50a      	bpl.n	8007e9a <_dtoa_r+0x302>
 8007e84:	4b2a      	ldr	r3, [pc, #168]	; (8007f30 <_dtoa_r+0x398>)
 8007e86:	400d      	ands	r5, r1
 8007e88:	6a1a      	ldr	r2, [r3, #32]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e90:	f7f8 ffb2 	bl	8000df8 <__aeabi_ddiv>
 8007e94:	9008      	str	r0, [sp, #32]
 8007e96:	9109      	str	r1, [sp, #36]	; 0x24
 8007e98:	3401      	adds	r4, #1
 8007e9a:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <_dtoa_r+0x398>)
 8007e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	d108      	bne.n	8007eb4 <_dtoa_r+0x31c>
 8007ea2:	9808      	ldr	r0, [sp, #32]
 8007ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea6:	0032      	movs	r2, r6
 8007ea8:	003b      	movs	r3, r7
 8007eaa:	f7f8 ffa5 	bl	8000df8 <__aeabi_ddiv>
 8007eae:	9008      	str	r0, [sp, #32]
 8007eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8007eb2:	e05a      	b.n	8007f6a <_dtoa_r+0x3d2>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	421d      	tst	r5, r3
 8007eb8:	d009      	beq.n	8007ece <_dtoa_r+0x336>
 8007eba:	18e4      	adds	r4, r4, r3
 8007ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ebe:	0030      	movs	r0, r6
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	0039      	movs	r1, r7
 8007ec6:	f7f9 fb91 	bl	80015ec <__aeabi_dmul>
 8007eca:	0006      	movs	r6, r0
 8007ecc:	000f      	movs	r7, r1
 8007ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed0:	106d      	asrs	r5, r5, #1
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	e7e2      	b.n	8007e9c <_dtoa_r+0x304>
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	08009eed 	.word	0x08009eed
 8007edc:	08009f04 	.word	0x08009f04
 8007ee0:	7ff00000 	.word	0x7ff00000
 8007ee4:	0000270f 	.word	0x0000270f
 8007ee8:	08009ee9 	.word	0x08009ee9
 8007eec:	08009eec 	.word	0x08009eec
 8007ef0:	08009ebc 	.word	0x08009ebc
 8007ef4:	08009ebd 	.word	0x08009ebd
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	fffffc01 	.word	0xfffffc01
 8007f00:	3ff80000 	.word	0x3ff80000
 8007f04:	636f4361 	.word	0x636f4361
 8007f08:	3fd287a7 	.word	0x3fd287a7
 8007f0c:	8b60c8b3 	.word	0x8b60c8b3
 8007f10:	3fc68a28 	.word	0x3fc68a28
 8007f14:	509f79fb 	.word	0x509f79fb
 8007f18:	3fd34413 	.word	0x3fd34413
 8007f1c:	08009ff0 	.word	0x08009ff0
 8007f20:	00000432 	.word	0x00000432
 8007f24:	00000412 	.word	0x00000412
 8007f28:	fe100000 	.word	0xfe100000
 8007f2c:	08009f5c 	.word	0x08009f5c
 8007f30:	08009fc8 	.word	0x08009fc8
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	2402      	movs	r4, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <_dtoa_r+0x3d2>
 8007f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f40:	220f      	movs	r2, #15
 8007f42:	425d      	negs	r5, r3
 8007f44:	402a      	ands	r2, r5
 8007f46:	4bdd      	ldr	r3, [pc, #884]	; (80082bc <_dtoa_r+0x724>)
 8007f48:	00d2      	lsls	r2, r2, #3
 8007f4a:	189b      	adds	r3, r3, r2
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f7f9 fb4c 	bl	80015ec <__aeabi_dmul>
 8007f54:	2701      	movs	r7, #1
 8007f56:	2300      	movs	r3, #0
 8007f58:	9008      	str	r0, [sp, #32]
 8007f5a:	9109      	str	r1, [sp, #36]	; 0x24
 8007f5c:	4ed8      	ldr	r6, [pc, #864]	; (80082c0 <_dtoa_r+0x728>)
 8007f5e:	112d      	asrs	r5, r5, #4
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	d000      	beq.n	8007f66 <_dtoa_r+0x3ce>
 8007f64:	e091      	b.n	800808a <_dtoa_r+0x4f2>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1a1      	bne.n	8007eae <_dtoa_r+0x316>
 8007f6a:	9e08      	ldr	r6, [sp, #32]
 8007f6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d100      	bne.n	8007f76 <_dtoa_r+0x3de>
 8007f74:	e094      	b.n	80080a0 <_dtoa_r+0x508>
 8007f76:	2200      	movs	r2, #0
 8007f78:	0030      	movs	r0, r6
 8007f7a:	0039      	movs	r1, r7
 8007f7c:	4bd1      	ldr	r3, [pc, #836]	; (80082c4 <_dtoa_r+0x72c>)
 8007f7e:	f7f8 fa69 	bl	8000454 <__aeabi_dcmplt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d100      	bne.n	8007f88 <_dtoa_r+0x3f0>
 8007f86:	e08b      	b.n	80080a0 <_dtoa_r+0x508>
 8007f88:	9b07      	ldr	r3, [sp, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d100      	bne.n	8007f90 <_dtoa_r+0x3f8>
 8007f8e:	e087      	b.n	80080a0 <_dtoa_r+0x508>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd45      	ble.n	8008022 <_dtoa_r+0x48a>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9e:	0030      	movs	r0, r6
 8007fa0:	4bc9      	ldr	r3, [pc, #804]	; (80082c8 <_dtoa_r+0x730>)
 8007fa2:	0039      	movs	r1, r7
 8007fa4:	f7f9 fb22 	bl	80015ec <__aeabi_dmul>
 8007fa8:	9008      	str	r0, [sp, #32]
 8007faa:	9109      	str	r1, [sp, #36]	; 0x24
 8007fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fae:	3401      	adds	r4, #1
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	9e08      	ldr	r6, [sp, #32]
 8007fb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fb6:	9312      	str	r3, [sp, #72]	; 0x48
 8007fb8:	f7fa f9b0 	bl	800231c <__aeabi_i2d>
 8007fbc:	0032      	movs	r2, r6
 8007fbe:	003b      	movs	r3, r7
 8007fc0:	f7f9 fb14 	bl	80015ec <__aeabi_dmul>
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4bc1      	ldr	r3, [pc, #772]	; (80082cc <_dtoa_r+0x734>)
 8007fc8:	f7f8 fbb6 	bl	8000738 <__aeabi_dadd>
 8007fcc:	4ac0      	ldr	r2, [pc, #768]	; (80082d0 <_dtoa_r+0x738>)
 8007fce:	9014      	str	r0, [sp, #80]	; 0x50
 8007fd0:	9115      	str	r1, [sp, #84]	; 0x54
 8007fd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007fd6:	4694      	mov	ip, r2
 8007fd8:	9308      	str	r3, [sp, #32]
 8007fda:	9409      	str	r4, [sp, #36]	; 0x24
 8007fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fde:	4463      	add	r3, ip
 8007fe0:	9318      	str	r3, [sp, #96]	; 0x60
 8007fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d15e      	bne.n	80080a8 <_dtoa_r+0x510>
 8007fea:	2200      	movs	r2, #0
 8007fec:	4bb9      	ldr	r3, [pc, #740]	; (80082d4 <_dtoa_r+0x73c>)
 8007fee:	0030      	movs	r0, r6
 8007ff0:	0039      	movs	r1, r7
 8007ff2:	f7f9 fdbd 	bl	8001b70 <__aeabi_dsub>
 8007ff6:	9a08      	ldr	r2, [sp, #32]
 8007ff8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007ffa:	0004      	movs	r4, r0
 8007ffc:	000d      	movs	r5, r1
 8007ffe:	f7f8 fa3d 	bl	800047c <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	d000      	beq.n	8008008 <_dtoa_r+0x470>
 8008006:	e2b3      	b.n	8008570 <_dtoa_r+0x9d8>
 8008008:	48b3      	ldr	r0, [pc, #716]	; (80082d8 <_dtoa_r+0x740>)
 800800a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800800c:	4684      	mov	ip, r0
 800800e:	4461      	add	r1, ip
 8008010:	000b      	movs	r3, r1
 8008012:	0020      	movs	r0, r4
 8008014:	0029      	movs	r1, r5
 8008016:	9a08      	ldr	r2, [sp, #32]
 8008018:	f7f8 fa1c 	bl	8000454 <__aeabi_dcmplt>
 800801c:	2800      	cmp	r0, #0
 800801e:	d000      	beq.n	8008022 <_dtoa_r+0x48a>
 8008020:	e2a3      	b.n	800856a <_dtoa_r+0x9d2>
 8008022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008024:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	9409      	str	r4, [sp, #36]	; 0x24
 800802a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800802c:	2b00      	cmp	r3, #0
 800802e:	da00      	bge.n	8008032 <_dtoa_r+0x49a>
 8008030:	e179      	b.n	8008326 <_dtoa_r+0x78e>
 8008032:	9a03      	ldr	r2, [sp, #12]
 8008034:	2a0e      	cmp	r2, #14
 8008036:	dd00      	ble.n	800803a <_dtoa_r+0x4a2>
 8008038:	e175      	b.n	8008326 <_dtoa_r+0x78e>
 800803a:	4ba0      	ldr	r3, [pc, #640]	; (80082bc <_dtoa_r+0x724>)
 800803c:	00d2      	lsls	r2, r2, #3
 800803e:	189b      	adds	r3, r3, r2
 8008040:	681e      	ldr	r6, [r3, #0]
 8008042:	685f      	ldr	r7, [r3, #4]
 8008044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008046:	2b00      	cmp	r3, #0
 8008048:	db00      	blt.n	800804c <_dtoa_r+0x4b4>
 800804a:	e0e5      	b.n	8008218 <_dtoa_r+0x680>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd00      	ble.n	8008054 <_dtoa_r+0x4bc>
 8008052:	e0e1      	b.n	8008218 <_dtoa_r+0x680>
 8008054:	d000      	beq.n	8008058 <_dtoa_r+0x4c0>
 8008056:	e288      	b.n	800856a <_dtoa_r+0x9d2>
 8008058:	2200      	movs	r2, #0
 800805a:	0030      	movs	r0, r6
 800805c:	0039      	movs	r1, r7
 800805e:	4b9d      	ldr	r3, [pc, #628]	; (80082d4 <_dtoa_r+0x73c>)
 8008060:	f7f9 fac4 	bl	80015ec <__aeabi_dmul>
 8008064:	9a08      	ldr	r2, [sp, #32]
 8008066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008068:	f7f8 fa12 	bl	8000490 <__aeabi_dcmpge>
 800806c:	9e07      	ldr	r6, [sp, #28]
 800806e:	0037      	movs	r7, r6
 8008070:	2800      	cmp	r0, #0
 8008072:	d000      	beq.n	8008076 <_dtoa_r+0x4de>
 8008074:	e25f      	b.n	8008536 <_dtoa_r+0x99e>
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	3301      	adds	r3, #1
 800807c:	9308      	str	r3, [sp, #32]
 800807e:	2331      	movs	r3, #49	; 0x31
 8008080:	7013      	strb	r3, [r2, #0]
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	e25a      	b.n	8008540 <_dtoa_r+0x9a8>
 800808a:	423d      	tst	r5, r7
 800808c:	d005      	beq.n	800809a <_dtoa_r+0x502>
 800808e:	6832      	ldr	r2, [r6, #0]
 8008090:	6873      	ldr	r3, [r6, #4]
 8008092:	f7f9 faab 	bl	80015ec <__aeabi_dmul>
 8008096:	003b      	movs	r3, r7
 8008098:	3401      	adds	r4, #1
 800809a:	106d      	asrs	r5, r5, #1
 800809c:	3608      	adds	r6, #8
 800809e:	e75f      	b.n	8007f60 <_dtoa_r+0x3c8>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	930e      	str	r3, [sp, #56]	; 0x38
 80080a4:	9b07      	ldr	r3, [sp, #28]
 80080a6:	e783      	b.n	8007fb0 <_dtoa_r+0x418>
 80080a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080aa:	4b84      	ldr	r3, [pc, #528]	; (80082bc <_dtoa_r+0x724>)
 80080ac:	3a01      	subs	r2, #1
 80080ae:	00d2      	lsls	r2, r2, #3
 80080b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80080b2:	189b      	adds	r3, r3, r2
 80080b4:	9c08      	ldr	r4, [sp, #32]
 80080b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2900      	cmp	r1, #0
 80080be:	d051      	beq.n	8008164 <_dtoa_r+0x5cc>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4986      	ldr	r1, [pc, #536]	; (80082dc <_dtoa_r+0x744>)
 80080c4:	f7f8 fe98 	bl	8000df8 <__aeabi_ddiv>
 80080c8:	0022      	movs	r2, r4
 80080ca:	002b      	movs	r3, r5
 80080cc:	f7f9 fd50 	bl	8001b70 <__aeabi_dsub>
 80080d0:	9a06      	ldr	r2, [sp, #24]
 80080d2:	0004      	movs	r4, r0
 80080d4:	4694      	mov	ip, r2
 80080d6:	000d      	movs	r5, r1
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	9314      	str	r3, [sp, #80]	; 0x50
 80080dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080de:	4463      	add	r3, ip
 80080e0:	9318      	str	r3, [sp, #96]	; 0x60
 80080e2:	0039      	movs	r1, r7
 80080e4:	0030      	movs	r0, r6
 80080e6:	f7fa f8e3 	bl	80022b0 <__aeabi_d2iz>
 80080ea:	9012      	str	r0, [sp, #72]	; 0x48
 80080ec:	f7fa f916 	bl	800231c <__aeabi_i2d>
 80080f0:	0002      	movs	r2, r0
 80080f2:	000b      	movs	r3, r1
 80080f4:	0030      	movs	r0, r6
 80080f6:	0039      	movs	r1, r7
 80080f8:	f7f9 fd3a 	bl	8001b70 <__aeabi_dsub>
 80080fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008100:	3301      	adds	r3, #1
 8008102:	9308      	str	r3, [sp, #32]
 8008104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008106:	0006      	movs	r6, r0
 8008108:	3330      	adds	r3, #48	; 0x30
 800810a:	7013      	strb	r3, [r2, #0]
 800810c:	0022      	movs	r2, r4
 800810e:	002b      	movs	r3, r5
 8008110:	000f      	movs	r7, r1
 8008112:	f7f8 f99f 	bl	8000454 <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d174      	bne.n	8008204 <_dtoa_r+0x66c>
 800811a:	0032      	movs	r2, r6
 800811c:	003b      	movs	r3, r7
 800811e:	2000      	movs	r0, #0
 8008120:	4968      	ldr	r1, [pc, #416]	; (80082c4 <_dtoa_r+0x72c>)
 8008122:	f7f9 fd25 	bl	8001b70 <__aeabi_dsub>
 8008126:	0022      	movs	r2, r4
 8008128:	002b      	movs	r3, r5
 800812a:	f7f8 f993 	bl	8000454 <__aeabi_dcmplt>
 800812e:	2800      	cmp	r0, #0
 8008130:	d000      	beq.n	8008134 <_dtoa_r+0x59c>
 8008132:	e0d7      	b.n	80082e4 <_dtoa_r+0x74c>
 8008134:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008136:	9a08      	ldr	r2, [sp, #32]
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <_dtoa_r+0x5a6>
 800813c:	e771      	b.n	8008022 <_dtoa_r+0x48a>
 800813e:	2200      	movs	r2, #0
 8008140:	0020      	movs	r0, r4
 8008142:	0029      	movs	r1, r5
 8008144:	4b60      	ldr	r3, [pc, #384]	; (80082c8 <_dtoa_r+0x730>)
 8008146:	f7f9 fa51 	bl	80015ec <__aeabi_dmul>
 800814a:	4b5f      	ldr	r3, [pc, #380]	; (80082c8 <_dtoa_r+0x730>)
 800814c:	0004      	movs	r4, r0
 800814e:	000d      	movs	r5, r1
 8008150:	0030      	movs	r0, r6
 8008152:	0039      	movs	r1, r7
 8008154:	2200      	movs	r2, #0
 8008156:	f7f9 fa49 	bl	80015ec <__aeabi_dmul>
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	0006      	movs	r6, r0
 800815e:	000f      	movs	r7, r1
 8008160:	9314      	str	r3, [sp, #80]	; 0x50
 8008162:	e7be      	b.n	80080e2 <_dtoa_r+0x54a>
 8008164:	0020      	movs	r0, r4
 8008166:	0029      	movs	r1, r5
 8008168:	f7f9 fa40 	bl	80015ec <__aeabi_dmul>
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	4694      	mov	ip, r2
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008176:	9014      	str	r0, [sp, #80]	; 0x50
 8008178:	9115      	str	r1, [sp, #84]	; 0x54
 800817a:	4463      	add	r3, ip
 800817c:	9319      	str	r3, [sp, #100]	; 0x64
 800817e:	0030      	movs	r0, r6
 8008180:	0039      	movs	r1, r7
 8008182:	f7fa f895 	bl	80022b0 <__aeabi_d2iz>
 8008186:	9018      	str	r0, [sp, #96]	; 0x60
 8008188:	f7fa f8c8 	bl	800231c <__aeabi_i2d>
 800818c:	0002      	movs	r2, r0
 800818e:	000b      	movs	r3, r1
 8008190:	0030      	movs	r0, r6
 8008192:	0039      	movs	r1, r7
 8008194:	f7f9 fcec 	bl	8001b70 <__aeabi_dsub>
 8008198:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	3630      	adds	r6, #48	; 0x30
 800819e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081a0:	701e      	strb	r6, [r3, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	0004      	movs	r4, r0
 80081a6:	000d      	movs	r5, r1
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d12d      	bne.n	800820a <_dtoa_r+0x672>
 80081ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 80081b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80081b2:	9a06      	ldr	r2, [sp, #24]
 80081b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081b6:	4694      	mov	ip, r2
 80081b8:	4463      	add	r3, ip
 80081ba:	2200      	movs	r2, #0
 80081bc:	9308      	str	r3, [sp, #32]
 80081be:	4b47      	ldr	r3, [pc, #284]	; (80082dc <_dtoa_r+0x744>)
 80081c0:	f7f8 faba 	bl	8000738 <__aeabi_dadd>
 80081c4:	0002      	movs	r2, r0
 80081c6:	000b      	movs	r3, r1
 80081c8:	0020      	movs	r0, r4
 80081ca:	0029      	movs	r1, r5
 80081cc:	f7f8 f956 	bl	800047c <__aeabi_dcmpgt>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d000      	beq.n	80081d6 <_dtoa_r+0x63e>
 80081d4:	e086      	b.n	80082e4 <_dtoa_r+0x74c>
 80081d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081da:	2000      	movs	r0, #0
 80081dc:	493f      	ldr	r1, [pc, #252]	; (80082dc <_dtoa_r+0x744>)
 80081de:	f7f9 fcc7 	bl	8001b70 <__aeabi_dsub>
 80081e2:	0002      	movs	r2, r0
 80081e4:	000b      	movs	r3, r1
 80081e6:	0020      	movs	r0, r4
 80081e8:	0029      	movs	r1, r5
 80081ea:	f7f8 f933 	bl	8000454 <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d100      	bne.n	80081f4 <_dtoa_r+0x65c>
 80081f2:	e716      	b.n	8008022 <_dtoa_r+0x48a>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	001a      	movs	r2, r3
 80081f8:	3a01      	subs	r2, #1
 80081fa:	9208      	str	r2, [sp, #32]
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	2a30      	cmp	r2, #48	; 0x30
 8008200:	d0f8      	beq.n	80081f4 <_dtoa_r+0x65c>
 8008202:	9308      	str	r3, [sp, #32]
 8008204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008206:	9303      	str	r3, [sp, #12]
 8008208:	e046      	b.n	8008298 <_dtoa_r+0x700>
 800820a:	2200      	movs	r2, #0
 800820c:	4b2e      	ldr	r3, [pc, #184]	; (80082c8 <_dtoa_r+0x730>)
 800820e:	f7f9 f9ed 	bl	80015ec <__aeabi_dmul>
 8008212:	0006      	movs	r6, r0
 8008214:	000f      	movs	r7, r1
 8008216:	e7b2      	b.n	800817e <_dtoa_r+0x5e6>
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	9a06      	ldr	r2, [sp, #24]
 800821c:	930a      	str	r3, [sp, #40]	; 0x28
 800821e:	9b07      	ldr	r3, [sp, #28]
 8008220:	9c08      	ldr	r4, [sp, #32]
 8008222:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008224:	3b01      	subs	r3, #1
 8008226:	189b      	adds	r3, r3, r2
 8008228:	930b      	str	r3, [sp, #44]	; 0x2c
 800822a:	0032      	movs	r2, r6
 800822c:	003b      	movs	r3, r7
 800822e:	0020      	movs	r0, r4
 8008230:	0029      	movs	r1, r5
 8008232:	f7f8 fde1 	bl	8000df8 <__aeabi_ddiv>
 8008236:	f7fa f83b 	bl	80022b0 <__aeabi_d2iz>
 800823a:	9007      	str	r0, [sp, #28]
 800823c:	f7fa f86e 	bl	800231c <__aeabi_i2d>
 8008240:	0032      	movs	r2, r6
 8008242:	003b      	movs	r3, r7
 8008244:	f7f9 f9d2 	bl	80015ec <__aeabi_dmul>
 8008248:	0002      	movs	r2, r0
 800824a:	000b      	movs	r3, r1
 800824c:	0020      	movs	r0, r4
 800824e:	0029      	movs	r1, r5
 8008250:	f7f9 fc8e 	bl	8001b70 <__aeabi_dsub>
 8008254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008256:	001a      	movs	r2, r3
 8008258:	3201      	adds	r2, #1
 800825a:	920a      	str	r2, [sp, #40]	; 0x28
 800825c:	9208      	str	r2, [sp, #32]
 800825e:	9a07      	ldr	r2, [sp, #28]
 8008260:	3230      	adds	r2, #48	; 0x30
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008266:	429a      	cmp	r2, r3
 8008268:	d14f      	bne.n	800830a <_dtoa_r+0x772>
 800826a:	0002      	movs	r2, r0
 800826c:	000b      	movs	r3, r1
 800826e:	f7f8 fa63 	bl	8000738 <__aeabi_dadd>
 8008272:	0032      	movs	r2, r6
 8008274:	003b      	movs	r3, r7
 8008276:	0004      	movs	r4, r0
 8008278:	000d      	movs	r5, r1
 800827a:	f7f8 f8ff 	bl	800047c <__aeabi_dcmpgt>
 800827e:	2800      	cmp	r0, #0
 8008280:	d12e      	bne.n	80082e0 <_dtoa_r+0x748>
 8008282:	0032      	movs	r2, r6
 8008284:	003b      	movs	r3, r7
 8008286:	0020      	movs	r0, r4
 8008288:	0029      	movs	r1, r5
 800828a:	f7f8 f8dd 	bl	8000448 <__aeabi_dcmpeq>
 800828e:	2800      	cmp	r0, #0
 8008290:	d002      	beq.n	8008298 <_dtoa_r+0x700>
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	07de      	lsls	r6, r3, #31
 8008296:	d423      	bmi.n	80082e0 <_dtoa_r+0x748>
 8008298:	9905      	ldr	r1, [sp, #20]
 800829a:	9804      	ldr	r0, [sp, #16]
 800829c:	f000 fbd6 	bl	8008a4c <_Bfree>
 80082a0:	2300      	movs	r3, #0
 80082a2:	9a08      	ldr	r2, [sp, #32]
 80082a4:	7013      	strb	r3, [r2, #0]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082aa:	3301      	adds	r3, #1
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d100      	bne.n	80082b6 <_dtoa_r+0x71e>
 80082b4:	e4ba      	b.n	8007c2c <_dtoa_r+0x94>
 80082b6:	9a08      	ldr	r2, [sp, #32]
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e4b7      	b.n	8007c2c <_dtoa_r+0x94>
 80082bc:	08009ff0 	.word	0x08009ff0
 80082c0:	08009fc8 	.word	0x08009fc8
 80082c4:	3ff00000 	.word	0x3ff00000
 80082c8:	40240000 	.word	0x40240000
 80082cc:	401c0000 	.word	0x401c0000
 80082d0:	fcc00000 	.word	0xfcc00000
 80082d4:	40140000 	.word	0x40140000
 80082d8:	7cc00000 	.word	0x7cc00000
 80082dc:	3fe00000 	.word	0x3fe00000
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	930e      	str	r3, [sp, #56]	; 0x38
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	9308      	str	r3, [sp, #32]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	2a39      	cmp	r2, #57	; 0x39
 80082ee:	d108      	bne.n	8008302 <_dtoa_r+0x76a>
 80082f0:	9a06      	ldr	r2, [sp, #24]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d1f7      	bne.n	80082e6 <_dtoa_r+0x74e>
 80082f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082f8:	9906      	ldr	r1, [sp, #24]
 80082fa:	3201      	adds	r2, #1
 80082fc:	920e      	str	r2, [sp, #56]	; 0x38
 80082fe:	2230      	movs	r2, #48	; 0x30
 8008300:	700a      	strb	r2, [r1, #0]
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	3201      	adds	r2, #1
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e77c      	b.n	8008204 <_dtoa_r+0x66c>
 800830a:	2200      	movs	r2, #0
 800830c:	4ba9      	ldr	r3, [pc, #676]	; (80085b4 <_dtoa_r+0xa1c>)
 800830e:	f7f9 f96d 	bl	80015ec <__aeabi_dmul>
 8008312:	2200      	movs	r2, #0
 8008314:	2300      	movs	r3, #0
 8008316:	0004      	movs	r4, r0
 8008318:	000d      	movs	r5, r1
 800831a:	f7f8 f895 	bl	8000448 <__aeabi_dcmpeq>
 800831e:	2800      	cmp	r0, #0
 8008320:	d100      	bne.n	8008324 <_dtoa_r+0x78c>
 8008322:	e782      	b.n	800822a <_dtoa_r+0x692>
 8008324:	e7b8      	b.n	8008298 <_dtoa_r+0x700>
 8008326:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008328:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800832a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800832c:	2f00      	cmp	r7, #0
 800832e:	d012      	beq.n	8008356 <_dtoa_r+0x7be>
 8008330:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008332:	2a01      	cmp	r2, #1
 8008334:	dc6e      	bgt.n	8008414 <_dtoa_r+0x87c>
 8008336:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008338:	2a00      	cmp	r2, #0
 800833a:	d065      	beq.n	8008408 <_dtoa_r+0x870>
 800833c:	4a9e      	ldr	r2, [pc, #632]	; (80085b8 <_dtoa_r+0xa20>)
 800833e:	189b      	adds	r3, r3, r2
 8008340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008342:	2101      	movs	r1, #1
 8008344:	18d2      	adds	r2, r2, r3
 8008346:	920a      	str	r2, [sp, #40]	; 0x28
 8008348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800834a:	9804      	ldr	r0, [sp, #16]
 800834c:	18d3      	adds	r3, r2, r3
 800834e:	930c      	str	r3, [sp, #48]	; 0x30
 8008350:	f000 fc2c 	bl	8008bac <__i2b>
 8008354:	0007      	movs	r7, r0
 8008356:	2c00      	cmp	r4, #0
 8008358:	d00e      	beq.n	8008378 <_dtoa_r+0x7e0>
 800835a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd0b      	ble.n	8008378 <_dtoa_r+0x7e0>
 8008360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008362:	0023      	movs	r3, r4
 8008364:	4294      	cmp	r4, r2
 8008366:	dd00      	ble.n	800836a <_dtoa_r+0x7d2>
 8008368:	0013      	movs	r3, r2
 800836a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800836c:	1ae4      	subs	r4, r4, r3
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	920a      	str	r2, [sp, #40]	; 0x28
 8008372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	930c      	str	r3, [sp, #48]	; 0x30
 8008378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01e      	beq.n	80083bc <_dtoa_r+0x824>
 800837e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d05c      	beq.n	800843e <_dtoa_r+0x8a6>
 8008384:	2d00      	cmp	r5, #0
 8008386:	dd10      	ble.n	80083aa <_dtoa_r+0x812>
 8008388:	0039      	movs	r1, r7
 800838a:	002a      	movs	r2, r5
 800838c:	9804      	ldr	r0, [sp, #16]
 800838e:	f000 fcd5 	bl	8008d3c <__pow5mult>
 8008392:	9a05      	ldr	r2, [sp, #20]
 8008394:	0001      	movs	r1, r0
 8008396:	0007      	movs	r7, r0
 8008398:	9804      	ldr	r0, [sp, #16]
 800839a:	f000 fc1f 	bl	8008bdc <__multiply>
 800839e:	0006      	movs	r6, r0
 80083a0:	9905      	ldr	r1, [sp, #20]
 80083a2:	9804      	ldr	r0, [sp, #16]
 80083a4:	f000 fb52 	bl	8008a4c <_Bfree>
 80083a8:	9605      	str	r6, [sp, #20]
 80083aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ac:	1b5a      	subs	r2, r3, r5
 80083ae:	42ab      	cmp	r3, r5
 80083b0:	d004      	beq.n	80083bc <_dtoa_r+0x824>
 80083b2:	9905      	ldr	r1, [sp, #20]
 80083b4:	9804      	ldr	r0, [sp, #16]
 80083b6:	f000 fcc1 	bl	8008d3c <__pow5mult>
 80083ba:	9005      	str	r0, [sp, #20]
 80083bc:	2101      	movs	r1, #1
 80083be:	9804      	ldr	r0, [sp, #16]
 80083c0:	f000 fbf4 	bl	8008bac <__i2b>
 80083c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083c6:	0006      	movs	r6, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dd3a      	ble.n	8008442 <_dtoa_r+0x8aa>
 80083cc:	001a      	movs	r2, r3
 80083ce:	0001      	movs	r1, r0
 80083d0:	9804      	ldr	r0, [sp, #16]
 80083d2:	f000 fcb3 	bl	8008d3c <__pow5mult>
 80083d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083d8:	0006      	movs	r6, r0
 80083da:	2500      	movs	r5, #0
 80083dc:	2b01      	cmp	r3, #1
 80083de:	dc38      	bgt.n	8008452 <_dtoa_r+0x8ba>
 80083e0:	2500      	movs	r5, #0
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	42ab      	cmp	r3, r5
 80083e6:	d130      	bne.n	800844a <_dtoa_r+0x8b2>
 80083e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ea:	031b      	lsls	r3, r3, #12
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	d12c      	bne.n	800844a <_dtoa_r+0x8b2>
 80083f0:	4b72      	ldr	r3, [pc, #456]	; (80085bc <_dtoa_r+0xa24>)
 80083f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f4:	4213      	tst	r3, r2
 80083f6:	d028      	beq.n	800844a <_dtoa_r+0x8b2>
 80083f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fa:	3501      	adds	r5, #1
 80083fc:	3301      	adds	r3, #1
 80083fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008402:	3301      	adds	r3, #1
 8008404:	930c      	str	r3, [sp, #48]	; 0x30
 8008406:	e020      	b.n	800844a <_dtoa_r+0x8b2>
 8008408:	2336      	movs	r3, #54	; 0x36
 800840a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800840c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800840e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	e795      	b.n	8008340 <_dtoa_r+0x7a8>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	1e5d      	subs	r5, r3, #1
 8008418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841a:	42ab      	cmp	r3, r5
 800841c:	db07      	blt.n	800842e <_dtoa_r+0x896>
 800841e:	1b5d      	subs	r5, r3, r5
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008424:	2b00      	cmp	r3, #0
 8008426:	da8b      	bge.n	8008340 <_dtoa_r+0x7a8>
 8008428:	1ae4      	subs	r4, r4, r3
 800842a:	2300      	movs	r3, #0
 800842c:	e788      	b.n	8008340 <_dtoa_r+0x7a8>
 800842e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008432:	1aeb      	subs	r3, r5, r3
 8008434:	18d3      	adds	r3, r2, r3
 8008436:	950d      	str	r5, [sp, #52]	; 0x34
 8008438:	9313      	str	r3, [sp, #76]	; 0x4c
 800843a:	2500      	movs	r5, #0
 800843c:	e7f0      	b.n	8008420 <_dtoa_r+0x888>
 800843e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008440:	e7b7      	b.n	80083b2 <_dtoa_r+0x81a>
 8008442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008444:	2500      	movs	r5, #0
 8008446:	2b01      	cmp	r3, #1
 8008448:	ddca      	ble.n	80083e0 <_dtoa_r+0x848>
 800844a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800844c:	2001      	movs	r0, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <_dtoa_r+0x8cc>
 8008452:	6933      	ldr	r3, [r6, #16]
 8008454:	3303      	adds	r3, #3
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	18f3      	adds	r3, r6, r3
 800845a:	6858      	ldr	r0, [r3, #4]
 800845c:	f000 fb5e 	bl	8008b1c <__hi0bits>
 8008460:	2320      	movs	r3, #32
 8008462:	1a18      	subs	r0, r3, r0
 8008464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008466:	1818      	adds	r0, r3, r0
 8008468:	0002      	movs	r2, r0
 800846a:	231f      	movs	r3, #31
 800846c:	401a      	ands	r2, r3
 800846e:	4218      	tst	r0, r3
 8008470:	d047      	beq.n	8008502 <_dtoa_r+0x96a>
 8008472:	3301      	adds	r3, #1
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	2b04      	cmp	r3, #4
 8008478:	dd3f      	ble.n	80084fa <_dtoa_r+0x962>
 800847a:	231c      	movs	r3, #28
 800847c:	1a9b      	subs	r3, r3, r2
 800847e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008480:	18e4      	adds	r4, r4, r3
 8008482:	18d2      	adds	r2, r2, r3
 8008484:	920a      	str	r2, [sp, #40]	; 0x28
 8008486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008488:	18d3      	adds	r3, r2, r3
 800848a:	930c      	str	r3, [sp, #48]	; 0x30
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	dd05      	ble.n	800849e <_dtoa_r+0x906>
 8008492:	001a      	movs	r2, r3
 8008494:	9905      	ldr	r1, [sp, #20]
 8008496:	9804      	ldr	r0, [sp, #16]
 8008498:	f000 fcac 	bl	8008df4 <__lshift>
 800849c:	9005      	str	r0, [sp, #20]
 800849e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dd05      	ble.n	80084b0 <_dtoa_r+0x918>
 80084a4:	0031      	movs	r1, r6
 80084a6:	001a      	movs	r2, r3
 80084a8:	9804      	ldr	r0, [sp, #16]
 80084aa:	f000 fca3 	bl	8008df4 <__lshift>
 80084ae:	0006      	movs	r6, r0
 80084b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d027      	beq.n	8008506 <_dtoa_r+0x96e>
 80084b6:	0031      	movs	r1, r6
 80084b8:	9805      	ldr	r0, [sp, #20]
 80084ba:	f000 fd09 	bl	8008ed0 <__mcmp>
 80084be:	2800      	cmp	r0, #0
 80084c0:	da21      	bge.n	8008506 <_dtoa_r+0x96e>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	220a      	movs	r2, #10
 80084c6:	3b01      	subs	r3, #1
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	9905      	ldr	r1, [sp, #20]
 80084cc:	2300      	movs	r3, #0
 80084ce:	9804      	ldr	r0, [sp, #16]
 80084d0:	f000 fae0 	bl	8008a94 <__multadd>
 80084d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084d6:	9005      	str	r0, [sp, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d100      	bne.n	80084de <_dtoa_r+0x946>
 80084dc:	e15d      	b.n	800879a <_dtoa_r+0xc02>
 80084de:	2300      	movs	r3, #0
 80084e0:	0039      	movs	r1, r7
 80084e2:	220a      	movs	r2, #10
 80084e4:	9804      	ldr	r0, [sp, #16]
 80084e6:	f000 fad5 	bl	8008a94 <__multadd>
 80084ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ec:	0007      	movs	r7, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dc49      	bgt.n	8008586 <_dtoa_r+0x9ee>
 80084f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	dc0e      	bgt.n	8008516 <_dtoa_r+0x97e>
 80084f8:	e045      	b.n	8008586 <_dtoa_r+0x9ee>
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d0c6      	beq.n	800848c <_dtoa_r+0x8f4>
 80084fe:	331c      	adds	r3, #28
 8008500:	e7bd      	b.n	800847e <_dtoa_r+0x8e6>
 8008502:	0013      	movs	r3, r2
 8008504:	e7fb      	b.n	80084fe <_dtoa_r+0x966>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	2b00      	cmp	r3, #0
 800850a:	dc36      	bgt.n	800857a <_dtoa_r+0x9e2>
 800850c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800850e:	2b02      	cmp	r3, #2
 8008510:	dd33      	ble.n	800857a <_dtoa_r+0x9e2>
 8008512:	9b07      	ldr	r3, [sp, #28]
 8008514:	930b      	str	r3, [sp, #44]	; 0x2c
 8008516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10c      	bne.n	8008536 <_dtoa_r+0x99e>
 800851c:	0031      	movs	r1, r6
 800851e:	2205      	movs	r2, #5
 8008520:	9804      	ldr	r0, [sp, #16]
 8008522:	f000 fab7 	bl	8008a94 <__multadd>
 8008526:	0006      	movs	r6, r0
 8008528:	0001      	movs	r1, r0
 800852a:	9805      	ldr	r0, [sp, #20]
 800852c:	f000 fcd0 	bl	8008ed0 <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	dd00      	ble.n	8008536 <_dtoa_r+0x99e>
 8008534:	e59f      	b.n	8008076 <_dtoa_r+0x4de>
 8008536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008538:	43db      	mvns	r3, r3
 800853a:	9303      	str	r3, [sp, #12]
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	9308      	str	r3, [sp, #32]
 8008540:	2500      	movs	r5, #0
 8008542:	0031      	movs	r1, r6
 8008544:	9804      	ldr	r0, [sp, #16]
 8008546:	f000 fa81 	bl	8008a4c <_Bfree>
 800854a:	2f00      	cmp	r7, #0
 800854c:	d100      	bne.n	8008550 <_dtoa_r+0x9b8>
 800854e:	e6a3      	b.n	8008298 <_dtoa_r+0x700>
 8008550:	2d00      	cmp	r5, #0
 8008552:	d005      	beq.n	8008560 <_dtoa_r+0x9c8>
 8008554:	42bd      	cmp	r5, r7
 8008556:	d003      	beq.n	8008560 <_dtoa_r+0x9c8>
 8008558:	0029      	movs	r1, r5
 800855a:	9804      	ldr	r0, [sp, #16]
 800855c:	f000 fa76 	bl	8008a4c <_Bfree>
 8008560:	0039      	movs	r1, r7
 8008562:	9804      	ldr	r0, [sp, #16]
 8008564:	f000 fa72 	bl	8008a4c <_Bfree>
 8008568:	e696      	b.n	8008298 <_dtoa_r+0x700>
 800856a:	2600      	movs	r6, #0
 800856c:	0037      	movs	r7, r6
 800856e:	e7e2      	b.n	8008536 <_dtoa_r+0x99e>
 8008570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008572:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	0037      	movs	r7, r6
 8008578:	e57d      	b.n	8008076 <_dtoa_r+0x4de>
 800857a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d100      	bne.n	8008582 <_dtoa_r+0x9ea>
 8008580:	e0c3      	b.n	800870a <_dtoa_r+0xb72>
 8008582:	9b07      	ldr	r3, [sp, #28]
 8008584:	930b      	str	r3, [sp, #44]	; 0x2c
 8008586:	2c00      	cmp	r4, #0
 8008588:	dd05      	ble.n	8008596 <_dtoa_r+0x9fe>
 800858a:	0039      	movs	r1, r7
 800858c:	0022      	movs	r2, r4
 800858e:	9804      	ldr	r0, [sp, #16]
 8008590:	f000 fc30 	bl	8008df4 <__lshift>
 8008594:	0007      	movs	r7, r0
 8008596:	0038      	movs	r0, r7
 8008598:	2d00      	cmp	r5, #0
 800859a:	d024      	beq.n	80085e6 <_dtoa_r+0xa4e>
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	9804      	ldr	r0, [sp, #16]
 80085a0:	f000 fa10 	bl	80089c4 <_Balloc>
 80085a4:	1e04      	subs	r4, r0, #0
 80085a6:	d111      	bne.n	80085cc <_dtoa_r+0xa34>
 80085a8:	0022      	movs	r2, r4
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <_dtoa_r+0xa28>)
 80085ac:	4805      	ldr	r0, [pc, #20]	; (80085c4 <_dtoa_r+0xa2c>)
 80085ae:	4906      	ldr	r1, [pc, #24]	; (80085c8 <_dtoa_r+0xa30>)
 80085b0:	f7ff fb07 	bl	8007bc2 <_dtoa_r+0x2a>
 80085b4:	40240000 	.word	0x40240000
 80085b8:	00000433 	.word	0x00000433
 80085bc:	7ff00000 	.word	0x7ff00000
 80085c0:	08009f5c 	.word	0x08009f5c
 80085c4:	08009f04 	.word	0x08009f04
 80085c8:	000002ef 	.word	0x000002ef
 80085cc:	0039      	movs	r1, r7
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	310c      	adds	r1, #12
 80085d2:	3202      	adds	r2, #2
 80085d4:	0092      	lsls	r2, r2, #2
 80085d6:	300c      	adds	r0, #12
 80085d8:	f000 ffca 	bl	8009570 <memcpy>
 80085dc:	2201      	movs	r2, #1
 80085de:	0021      	movs	r1, r4
 80085e0:	9804      	ldr	r0, [sp, #16]
 80085e2:	f000 fc07 	bl	8008df4 <__lshift>
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	2201      	movs	r2, #1
 80085f2:	003d      	movs	r5, r7
 80085f4:	0007      	movs	r7, r0
 80085f6:	930e      	str	r3, [sp, #56]	; 0x38
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	4013      	ands	r3, r2
 80085fc:	930d      	str	r3, [sp, #52]	; 0x34
 80085fe:	0031      	movs	r1, r6
 8008600:	9805      	ldr	r0, [sp, #20]
 8008602:	f7ff fa39 	bl	8007a78 <quorem>
 8008606:	0029      	movs	r1, r5
 8008608:	0004      	movs	r4, r0
 800860a:	900b      	str	r0, [sp, #44]	; 0x2c
 800860c:	9805      	ldr	r0, [sp, #20]
 800860e:	f000 fc5f 	bl	8008ed0 <__mcmp>
 8008612:	003a      	movs	r2, r7
 8008614:	900c      	str	r0, [sp, #48]	; 0x30
 8008616:	0031      	movs	r1, r6
 8008618:	9804      	ldr	r0, [sp, #16]
 800861a:	f000 fc75 	bl	8008f08 <__mdiff>
 800861e:	2201      	movs	r2, #1
 8008620:	68c3      	ldr	r3, [r0, #12]
 8008622:	3430      	adds	r4, #48	; 0x30
 8008624:	9008      	str	r0, [sp, #32]
 8008626:	920a      	str	r2, [sp, #40]	; 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <_dtoa_r+0xa9e>
 800862c:	0001      	movs	r1, r0
 800862e:	9805      	ldr	r0, [sp, #20]
 8008630:	f000 fc4e 	bl	8008ed0 <__mcmp>
 8008634:	900a      	str	r0, [sp, #40]	; 0x28
 8008636:	9908      	ldr	r1, [sp, #32]
 8008638:	9804      	ldr	r0, [sp, #16]
 800863a:	f000 fa07 	bl	8008a4c <_Bfree>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008642:	3301      	adds	r3, #1
 8008644:	9308      	str	r3, [sp, #32]
 8008646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008648:	4313      	orrs	r3, r2
 800864a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800864c:	4313      	orrs	r3, r2
 800864e:	d109      	bne.n	8008664 <_dtoa_r+0xacc>
 8008650:	2c39      	cmp	r4, #57	; 0x39
 8008652:	d022      	beq.n	800869a <_dtoa_r+0xb02>
 8008654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008656:	2b00      	cmp	r3, #0
 8008658:	dd01      	ble.n	800865e <_dtoa_r+0xac6>
 800865a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800865c:	3431      	adds	r4, #49	; 0x31
 800865e:	9b07      	ldr	r3, [sp, #28]
 8008660:	701c      	strb	r4, [r3, #0]
 8008662:	e76e      	b.n	8008542 <_dtoa_r+0x9aa>
 8008664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008666:	2b00      	cmp	r3, #0
 8008668:	db04      	blt.n	8008674 <_dtoa_r+0xadc>
 800866a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800866c:	4313      	orrs	r3, r2
 800866e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008670:	4313      	orrs	r3, r2
 8008672:	d11e      	bne.n	80086b2 <_dtoa_r+0xb1a>
 8008674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	ddf1      	ble.n	800865e <_dtoa_r+0xac6>
 800867a:	9905      	ldr	r1, [sp, #20]
 800867c:	2201      	movs	r2, #1
 800867e:	9804      	ldr	r0, [sp, #16]
 8008680:	f000 fbb8 	bl	8008df4 <__lshift>
 8008684:	0031      	movs	r1, r6
 8008686:	9005      	str	r0, [sp, #20]
 8008688:	f000 fc22 	bl	8008ed0 <__mcmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	dc02      	bgt.n	8008696 <_dtoa_r+0xafe>
 8008690:	d1e5      	bne.n	800865e <_dtoa_r+0xac6>
 8008692:	07e3      	lsls	r3, r4, #31
 8008694:	d5e3      	bpl.n	800865e <_dtoa_r+0xac6>
 8008696:	2c39      	cmp	r4, #57	; 0x39
 8008698:	d1df      	bne.n	800865a <_dtoa_r+0xac2>
 800869a:	2339      	movs	r3, #57	; 0x39
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	7013      	strb	r3, [r2, #0]
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	9308      	str	r3, [sp, #32]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	2a39      	cmp	r2, #57	; 0x39
 80086aa:	d063      	beq.n	8008774 <_dtoa_r+0xbdc>
 80086ac:	3201      	adds	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e747      	b.n	8008542 <_dtoa_r+0x9aa>
 80086b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd03      	ble.n	80086c0 <_dtoa_r+0xb28>
 80086b8:	2c39      	cmp	r4, #57	; 0x39
 80086ba:	d0ee      	beq.n	800869a <_dtoa_r+0xb02>
 80086bc:	3401      	adds	r4, #1
 80086be:	e7ce      	b.n	800865e <_dtoa_r+0xac6>
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	701c      	strb	r4, [r3, #0]
 80086c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d03e      	beq.n	800874a <_dtoa_r+0xbb2>
 80086cc:	2300      	movs	r3, #0
 80086ce:	220a      	movs	r2, #10
 80086d0:	9905      	ldr	r1, [sp, #20]
 80086d2:	9804      	ldr	r0, [sp, #16]
 80086d4:	f000 f9de 	bl	8008a94 <__multadd>
 80086d8:	2300      	movs	r3, #0
 80086da:	9005      	str	r0, [sp, #20]
 80086dc:	220a      	movs	r2, #10
 80086de:	0029      	movs	r1, r5
 80086e0:	9804      	ldr	r0, [sp, #16]
 80086e2:	42bd      	cmp	r5, r7
 80086e4:	d106      	bne.n	80086f4 <_dtoa_r+0xb5c>
 80086e6:	f000 f9d5 	bl	8008a94 <__multadd>
 80086ea:	0005      	movs	r5, r0
 80086ec:	0007      	movs	r7, r0
 80086ee:	9b08      	ldr	r3, [sp, #32]
 80086f0:	9307      	str	r3, [sp, #28]
 80086f2:	e784      	b.n	80085fe <_dtoa_r+0xa66>
 80086f4:	f000 f9ce 	bl	8008a94 <__multadd>
 80086f8:	0039      	movs	r1, r7
 80086fa:	0005      	movs	r5, r0
 80086fc:	2300      	movs	r3, #0
 80086fe:	220a      	movs	r2, #10
 8008700:	9804      	ldr	r0, [sp, #16]
 8008702:	f000 f9c7 	bl	8008a94 <__multadd>
 8008706:	0007      	movs	r7, r0
 8008708:	e7f1      	b.n	80086ee <_dtoa_r+0xb56>
 800870a:	9b07      	ldr	r3, [sp, #28]
 800870c:	930b      	str	r3, [sp, #44]	; 0x2c
 800870e:	2500      	movs	r5, #0
 8008710:	0031      	movs	r1, r6
 8008712:	9805      	ldr	r0, [sp, #20]
 8008714:	f7ff f9b0 	bl	8007a78 <quorem>
 8008718:	9b06      	ldr	r3, [sp, #24]
 800871a:	3030      	adds	r0, #48	; 0x30
 800871c:	5558      	strb	r0, [r3, r5]
 800871e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008720:	3501      	adds	r5, #1
 8008722:	0004      	movs	r4, r0
 8008724:	42ab      	cmp	r3, r5
 8008726:	dd07      	ble.n	8008738 <_dtoa_r+0xba0>
 8008728:	2300      	movs	r3, #0
 800872a:	220a      	movs	r2, #10
 800872c:	9905      	ldr	r1, [sp, #20]
 800872e:	9804      	ldr	r0, [sp, #16]
 8008730:	f000 f9b0 	bl	8008a94 <__multadd>
 8008734:	9005      	str	r0, [sp, #20]
 8008736:	e7eb      	b.n	8008710 <_dtoa_r+0xb78>
 8008738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800873a:	2301      	movs	r3, #1
 800873c:	2a00      	cmp	r2, #0
 800873e:	dd00      	ble.n	8008742 <_dtoa_r+0xbaa>
 8008740:	0013      	movs	r3, r2
 8008742:	2500      	movs	r5, #0
 8008744:	9a06      	ldr	r2, [sp, #24]
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	9308      	str	r3, [sp, #32]
 800874a:	9905      	ldr	r1, [sp, #20]
 800874c:	2201      	movs	r2, #1
 800874e:	9804      	ldr	r0, [sp, #16]
 8008750:	f000 fb50 	bl	8008df4 <__lshift>
 8008754:	0031      	movs	r1, r6
 8008756:	9005      	str	r0, [sp, #20]
 8008758:	f000 fbba 	bl	8008ed0 <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	dc9f      	bgt.n	80086a0 <_dtoa_r+0xb08>
 8008760:	d101      	bne.n	8008766 <_dtoa_r+0xbce>
 8008762:	07e4      	lsls	r4, r4, #31
 8008764:	d49c      	bmi.n	80086a0 <_dtoa_r+0xb08>
 8008766:	9b08      	ldr	r3, [sp, #32]
 8008768:	9308      	str	r3, [sp, #32]
 800876a:	3b01      	subs	r3, #1
 800876c:	781a      	ldrb	r2, [r3, #0]
 800876e:	2a30      	cmp	r2, #48	; 0x30
 8008770:	d0fa      	beq.n	8008768 <_dtoa_r+0xbd0>
 8008772:	e6e6      	b.n	8008542 <_dtoa_r+0x9aa>
 8008774:	9a06      	ldr	r2, [sp, #24]
 8008776:	429a      	cmp	r2, r3
 8008778:	d193      	bne.n	80086a2 <_dtoa_r+0xb0a>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	3301      	adds	r3, #1
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	2331      	movs	r3, #49	; 0x31
 8008782:	7013      	strb	r3, [r2, #0]
 8008784:	e6dd      	b.n	8008542 <_dtoa_r+0x9aa>
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <_dtoa_r+0xc14>)
 8008788:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800878a:	9306      	str	r3, [sp, #24]
 800878c:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <_dtoa_r+0xc18>)
 800878e:	2a00      	cmp	r2, #0
 8008790:	d001      	beq.n	8008796 <_dtoa_r+0xbfe>
 8008792:	f7ff fa49 	bl	8007c28 <_dtoa_r+0x90>
 8008796:	f7ff fa49 	bl	8007c2c <_dtoa_r+0x94>
 800879a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879c:	2b00      	cmp	r3, #0
 800879e:	dcb6      	bgt.n	800870e <_dtoa_r+0xb76>
 80087a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	dd00      	ble.n	80087a8 <_dtoa_r+0xc10>
 80087a6:	e6b6      	b.n	8008516 <_dtoa_r+0x97e>
 80087a8:	e7b1      	b.n	800870e <_dtoa_r+0xb76>
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	08009ee0 	.word	0x08009ee0
 80087b0:	08009ee8 	.word	0x08009ee8

080087b4 <_free_r>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	0005      	movs	r5, r0
 80087b8:	2900      	cmp	r1, #0
 80087ba:	d010      	beq.n	80087de <_free_r+0x2a>
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da00      	bge.n	80087c6 <_free_r+0x12>
 80087c4:	18e4      	adds	r4, r4, r3
 80087c6:	0028      	movs	r0, r5
 80087c8:	f000 f8ec 	bl	80089a4 <__malloc_lock>
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <_free_r+0x90>)
 80087ce:	6813      	ldr	r3, [r2, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <_free_r+0x2c>
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	6014      	str	r4, [r2, #0]
 80087d8:	0028      	movs	r0, r5
 80087da:	f000 f8eb 	bl	80089b4 <__malloc_unlock>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d908      	bls.n	80087f6 <_free_r+0x42>
 80087e4:	6820      	ldr	r0, [r4, #0]
 80087e6:	1821      	adds	r1, r4, r0
 80087e8:	428b      	cmp	r3, r1
 80087ea:	d1f3      	bne.n	80087d4 <_free_r+0x20>
 80087ec:	6819      	ldr	r1, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	1809      	adds	r1, r1, r0
 80087f2:	6021      	str	r1, [r4, #0]
 80087f4:	e7ee      	b.n	80087d4 <_free_r+0x20>
 80087f6:	001a      	movs	r2, r3
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <_free_r+0x4e>
 80087fe:	42a3      	cmp	r3, r4
 8008800:	d9f9      	bls.n	80087f6 <_free_r+0x42>
 8008802:	6811      	ldr	r1, [r2, #0]
 8008804:	1850      	adds	r0, r2, r1
 8008806:	42a0      	cmp	r0, r4
 8008808:	d10b      	bne.n	8008822 <_free_r+0x6e>
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	1809      	adds	r1, r1, r0
 800880e:	1850      	adds	r0, r2, r1
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	4283      	cmp	r3, r0
 8008814:	d1e0      	bne.n	80087d8 <_free_r+0x24>
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	1841      	adds	r1, r0, r1
 800881c:	6011      	str	r1, [r2, #0]
 800881e:	6053      	str	r3, [r2, #4]
 8008820:	e7da      	b.n	80087d8 <_free_r+0x24>
 8008822:	42a0      	cmp	r0, r4
 8008824:	d902      	bls.n	800882c <_free_r+0x78>
 8008826:	230c      	movs	r3, #12
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	e7d5      	b.n	80087d8 <_free_r+0x24>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	1821      	adds	r1, r4, r0
 8008830:	428b      	cmp	r3, r1
 8008832:	d103      	bne.n	800883c <_free_r+0x88>
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	1809      	adds	r1, r1, r0
 800883a:	6021      	str	r1, [r4, #0]
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	6054      	str	r4, [r2, #4]
 8008840:	e7ca      	b.n	80087d8 <_free_r+0x24>
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	20000524 	.word	0x20000524

08008848 <malloc>:
 8008848:	b510      	push	{r4, lr}
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <malloc+0x10>)
 800884c:	0001      	movs	r1, r0
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	f000 f826 	bl	80088a0 <_malloc_r>
 8008854:	bd10      	pop	{r4, pc}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	2000006c 	.word	0x2000006c

0800885c <sbrk_aligned>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4e0f      	ldr	r6, [pc, #60]	; (800889c <sbrk_aligned+0x40>)
 8008860:	000d      	movs	r5, r1
 8008862:	6831      	ldr	r1, [r6, #0]
 8008864:	0004      	movs	r4, r0
 8008866:	2900      	cmp	r1, #0
 8008868:	d102      	bne.n	8008870 <sbrk_aligned+0x14>
 800886a:	f000 fe6f 	bl	800954c <_sbrk_r>
 800886e:	6030      	str	r0, [r6, #0]
 8008870:	0029      	movs	r1, r5
 8008872:	0020      	movs	r0, r4
 8008874:	f000 fe6a 	bl	800954c <_sbrk_r>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d00a      	beq.n	8008892 <sbrk_aligned+0x36>
 800887c:	2303      	movs	r3, #3
 800887e:	1cc5      	adds	r5, r0, #3
 8008880:	439d      	bics	r5, r3
 8008882:	42a8      	cmp	r0, r5
 8008884:	d007      	beq.n	8008896 <sbrk_aligned+0x3a>
 8008886:	1a29      	subs	r1, r5, r0
 8008888:	0020      	movs	r0, r4
 800888a:	f000 fe5f 	bl	800954c <_sbrk_r>
 800888e:	3001      	adds	r0, #1
 8008890:	d101      	bne.n	8008896 <sbrk_aligned+0x3a>
 8008892:	2501      	movs	r5, #1
 8008894:	426d      	negs	r5, r5
 8008896:	0028      	movs	r0, r5
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	20000528 	.word	0x20000528

080088a0 <_malloc_r>:
 80088a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088a2:	2203      	movs	r2, #3
 80088a4:	1ccb      	adds	r3, r1, #3
 80088a6:	4393      	bics	r3, r2
 80088a8:	3308      	adds	r3, #8
 80088aa:	0006      	movs	r6, r0
 80088ac:	001f      	movs	r7, r3
 80088ae:	2b0c      	cmp	r3, #12
 80088b0:	d238      	bcs.n	8008924 <_malloc_r+0x84>
 80088b2:	270c      	movs	r7, #12
 80088b4:	42b9      	cmp	r1, r7
 80088b6:	d837      	bhi.n	8008928 <_malloc_r+0x88>
 80088b8:	0030      	movs	r0, r6
 80088ba:	f000 f873 	bl	80089a4 <__malloc_lock>
 80088be:	4b38      	ldr	r3, [pc, #224]	; (80089a0 <_malloc_r+0x100>)
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	001c      	movs	r4, r3
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	d133      	bne.n	8008932 <_malloc_r+0x92>
 80088ca:	0039      	movs	r1, r7
 80088cc:	0030      	movs	r0, r6
 80088ce:	f7ff ffc5 	bl	800885c <sbrk_aligned>
 80088d2:	0004      	movs	r4, r0
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d15e      	bne.n	8008996 <_malloc_r+0xf6>
 80088d8:	9b00      	ldr	r3, [sp, #0]
 80088da:	681c      	ldr	r4, [r3, #0]
 80088dc:	0025      	movs	r5, r4
 80088de:	2d00      	cmp	r5, #0
 80088e0:	d14e      	bne.n	8008980 <_malloc_r+0xe0>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	d051      	beq.n	800898a <_malloc_r+0xea>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	0029      	movs	r1, r5
 80088ea:	18e3      	adds	r3, r4, r3
 80088ec:	0030      	movs	r0, r6
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	f000 fe2c 	bl	800954c <_sbrk_r>
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	4283      	cmp	r3, r0
 80088f8:	d147      	bne.n	800898a <_malloc_r+0xea>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	0030      	movs	r0, r6
 80088fe:	1aff      	subs	r7, r7, r3
 8008900:	0039      	movs	r1, r7
 8008902:	f7ff ffab 	bl	800885c <sbrk_aligned>
 8008906:	3001      	adds	r0, #1
 8008908:	d03f      	beq.n	800898a <_malloc_r+0xea>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	19db      	adds	r3, r3, r7
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d040      	beq.n	800899a <_malloc_r+0xfa>
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	42a2      	cmp	r2, r4
 800891c:	d133      	bne.n	8008986 <_malloc_r+0xe6>
 800891e:	2200      	movs	r2, #0
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	e014      	b.n	800894e <_malloc_r+0xae>
 8008924:	2b00      	cmp	r3, #0
 8008926:	dac5      	bge.n	80088b4 <_malloc_r+0x14>
 8008928:	230c      	movs	r3, #12
 800892a:	2500      	movs	r5, #0
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	0028      	movs	r0, r5
 8008930:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008932:	6821      	ldr	r1, [r4, #0]
 8008934:	1bc9      	subs	r1, r1, r7
 8008936:	d420      	bmi.n	800897a <_malloc_r+0xda>
 8008938:	290b      	cmp	r1, #11
 800893a:	d918      	bls.n	800896e <_malloc_r+0xce>
 800893c:	19e2      	adds	r2, r4, r7
 800893e:	6027      	str	r7, [r4, #0]
 8008940:	42a3      	cmp	r3, r4
 8008942:	d112      	bne.n	800896a <_malloc_r+0xca>
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	6011      	str	r1, [r2, #0]
 800894c:	6053      	str	r3, [r2, #4]
 800894e:	0030      	movs	r0, r6
 8008950:	0025      	movs	r5, r4
 8008952:	f000 f82f 	bl	80089b4 <__malloc_unlock>
 8008956:	2207      	movs	r2, #7
 8008958:	350b      	adds	r5, #11
 800895a:	1d23      	adds	r3, r4, #4
 800895c:	4395      	bics	r5, r2
 800895e:	1aea      	subs	r2, r5, r3
 8008960:	429d      	cmp	r5, r3
 8008962:	d0e4      	beq.n	800892e <_malloc_r+0x8e>
 8008964:	1b5b      	subs	r3, r3, r5
 8008966:	50a3      	str	r3, [r4, r2]
 8008968:	e7e1      	b.n	800892e <_malloc_r+0x8e>
 800896a:	605a      	str	r2, [r3, #4]
 800896c:	e7ec      	b.n	8008948 <_malloc_r+0xa8>
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	42a3      	cmp	r3, r4
 8008972:	d1d5      	bne.n	8008920 <_malloc_r+0x80>
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e7e9      	b.n	800894e <_malloc_r+0xae>
 800897a:	0023      	movs	r3, r4
 800897c:	6864      	ldr	r4, [r4, #4]
 800897e:	e7a2      	b.n	80088c6 <_malloc_r+0x26>
 8008980:	002c      	movs	r4, r5
 8008982:	686d      	ldr	r5, [r5, #4]
 8008984:	e7ab      	b.n	80088de <_malloc_r+0x3e>
 8008986:	0013      	movs	r3, r2
 8008988:	e7c4      	b.n	8008914 <_malloc_r+0x74>
 800898a:	230c      	movs	r3, #12
 800898c:	0030      	movs	r0, r6
 800898e:	6033      	str	r3, [r6, #0]
 8008990:	f000 f810 	bl	80089b4 <__malloc_unlock>
 8008994:	e7cb      	b.n	800892e <_malloc_r+0x8e>
 8008996:	6027      	str	r7, [r4, #0]
 8008998:	e7d9      	b.n	800894e <_malloc_r+0xae>
 800899a:	605b      	str	r3, [r3, #4]
 800899c:	deff      	udf	#255	; 0xff
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	20000524 	.word	0x20000524

080089a4 <__malloc_lock>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4802      	ldr	r0, [pc, #8]	; (80089b0 <__malloc_lock+0xc>)
 80089a8:	f7ff f859 	bl	8007a5e <__retarget_lock_acquire_recursive>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	20000520 	.word	0x20000520

080089b4 <__malloc_unlock>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4802      	ldr	r0, [pc, #8]	; (80089c0 <__malloc_unlock+0xc>)
 80089b8:	f7ff f852 	bl	8007a60 <__retarget_lock_release_recursive>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	20000520 	.word	0x20000520

080089c4 <_Balloc>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	69c5      	ldr	r5, [r0, #28]
 80089c8:	0006      	movs	r6, r0
 80089ca:	000c      	movs	r4, r1
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	d10e      	bne.n	80089ee <_Balloc+0x2a>
 80089d0:	2010      	movs	r0, #16
 80089d2:	f7ff ff39 	bl	8008848 <malloc>
 80089d6:	1e02      	subs	r2, r0, #0
 80089d8:	61f0      	str	r0, [r6, #28]
 80089da:	d104      	bne.n	80089e6 <_Balloc+0x22>
 80089dc:	216b      	movs	r1, #107	; 0x6b
 80089de:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <_Balloc+0x80>)
 80089e0:	4819      	ldr	r0, [pc, #100]	; (8008a48 <_Balloc+0x84>)
 80089e2:	f000 fdcf 	bl	8009584 <__assert_func>
 80089e6:	6045      	str	r5, [r0, #4]
 80089e8:	6085      	str	r5, [r0, #8]
 80089ea:	6005      	str	r5, [r0, #0]
 80089ec:	60c5      	str	r5, [r0, #12]
 80089ee:	69f5      	ldr	r5, [r6, #28]
 80089f0:	68eb      	ldr	r3, [r5, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d013      	beq.n	8008a1e <_Balloc+0x5a>
 80089f6:	69f3      	ldr	r3, [r6, #28]
 80089f8:	00a2      	lsls	r2, r4, #2
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d118      	bne.n	8008a36 <_Balloc+0x72>
 8008a04:	2101      	movs	r1, #1
 8008a06:	000d      	movs	r5, r1
 8008a08:	40a5      	lsls	r5, r4
 8008a0a:	1d6a      	adds	r2, r5, #5
 8008a0c:	0030      	movs	r0, r6
 8008a0e:	0092      	lsls	r2, r2, #2
 8008a10:	f000 fdd6 	bl	80095c0 <_calloc_r>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d00c      	beq.n	8008a32 <_Balloc+0x6e>
 8008a18:	6044      	str	r4, [r0, #4]
 8008a1a:	6085      	str	r5, [r0, #8]
 8008a1c:	e00d      	b.n	8008a3a <_Balloc+0x76>
 8008a1e:	2221      	movs	r2, #33	; 0x21
 8008a20:	2104      	movs	r1, #4
 8008a22:	0030      	movs	r0, r6
 8008a24:	f000 fdcc 	bl	80095c0 <_calloc_r>
 8008a28:	69f3      	ldr	r3, [r6, #28]
 8008a2a:	60e8      	str	r0, [r5, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e1      	bne.n	80089f6 <_Balloc+0x32>
 8008a32:	2000      	movs	r0, #0
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	6802      	ldr	r2, [r0, #0]
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6103      	str	r3, [r0, #16]
 8008a3e:	60c3      	str	r3, [r0, #12]
 8008a40:	e7f8      	b.n	8008a34 <_Balloc+0x70>
 8008a42:	46c0      	nop			; (mov r8, r8)
 8008a44:	08009eed 	.word	0x08009eed
 8008a48:	08009f6d 	.word	0x08009f6d

08008a4c <_Bfree>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	69c6      	ldr	r6, [r0, #28]
 8008a50:	0005      	movs	r5, r0
 8008a52:	000c      	movs	r4, r1
 8008a54:	2e00      	cmp	r6, #0
 8008a56:	d10e      	bne.n	8008a76 <_Bfree+0x2a>
 8008a58:	2010      	movs	r0, #16
 8008a5a:	f7ff fef5 	bl	8008848 <malloc>
 8008a5e:	1e02      	subs	r2, r0, #0
 8008a60:	61e8      	str	r0, [r5, #28]
 8008a62:	d104      	bne.n	8008a6e <_Bfree+0x22>
 8008a64:	218f      	movs	r1, #143	; 0x8f
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <_Bfree+0x40>)
 8008a68:	4809      	ldr	r0, [pc, #36]	; (8008a90 <_Bfree+0x44>)
 8008a6a:	f000 fd8b 	bl	8009584 <__assert_func>
 8008a6e:	6046      	str	r6, [r0, #4]
 8008a70:	6086      	str	r6, [r0, #8]
 8008a72:	6006      	str	r6, [r0, #0]
 8008a74:	60c6      	str	r6, [r0, #12]
 8008a76:	2c00      	cmp	r4, #0
 8008a78:	d007      	beq.n	8008a8a <_Bfree+0x3e>
 8008a7a:	69eb      	ldr	r3, [r5, #28]
 8008a7c:	6862      	ldr	r2, [r4, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	189b      	adds	r3, r3, r2
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	6022      	str	r2, [r4, #0]
 8008a88:	601c      	str	r4, [r3, #0]
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	08009eed 	.word	0x08009eed
 8008a90:	08009f6d 	.word	0x08009f6d

08008a94 <__multadd>:
 8008a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a96:	000e      	movs	r6, r1
 8008a98:	9001      	str	r0, [sp, #4]
 8008a9a:	000c      	movs	r4, r1
 8008a9c:	001d      	movs	r5, r3
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	690f      	ldr	r7, [r1, #16]
 8008aa2:	3614      	adds	r6, #20
 8008aa4:	6833      	ldr	r3, [r6, #0]
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	b299      	uxth	r1, r3
 8008aaa:	4351      	muls	r1, r2
 8008aac:	0c1b      	lsrs	r3, r3, #16
 8008aae:	4353      	muls	r3, r2
 8008ab0:	1949      	adds	r1, r1, r5
 8008ab2:	0c0d      	lsrs	r5, r1, #16
 8008ab4:	195b      	adds	r3, r3, r5
 8008ab6:	0c1d      	lsrs	r5, r3, #16
 8008ab8:	b289      	uxth	r1, r1
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	185b      	adds	r3, r3, r1
 8008abe:	c608      	stmia	r6!, {r3}
 8008ac0:	4287      	cmp	r7, r0
 8008ac2:	dcef      	bgt.n	8008aa4 <__multadd+0x10>
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	d022      	beq.n	8008b0e <__multadd+0x7a>
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	42bb      	cmp	r3, r7
 8008acc:	dc19      	bgt.n	8008b02 <__multadd+0x6e>
 8008ace:	6861      	ldr	r1, [r4, #4]
 8008ad0:	9801      	ldr	r0, [sp, #4]
 8008ad2:	3101      	adds	r1, #1
 8008ad4:	f7ff ff76 	bl	80089c4 <_Balloc>
 8008ad8:	1e06      	subs	r6, r0, #0
 8008ada:	d105      	bne.n	8008ae8 <__multadd+0x54>
 8008adc:	0032      	movs	r2, r6
 8008ade:	21ba      	movs	r1, #186	; 0xba
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <__multadd+0x80>)
 8008ae2:	480d      	ldr	r0, [pc, #52]	; (8008b18 <__multadd+0x84>)
 8008ae4:	f000 fd4e 	bl	8009584 <__assert_func>
 8008ae8:	0021      	movs	r1, r4
 8008aea:	6922      	ldr	r2, [r4, #16]
 8008aec:	310c      	adds	r1, #12
 8008aee:	3202      	adds	r2, #2
 8008af0:	0092      	lsls	r2, r2, #2
 8008af2:	300c      	adds	r0, #12
 8008af4:	f000 fd3c 	bl	8009570 <memcpy>
 8008af8:	0021      	movs	r1, r4
 8008afa:	9801      	ldr	r0, [sp, #4]
 8008afc:	f7ff ffa6 	bl	8008a4c <_Bfree>
 8008b00:	0034      	movs	r4, r6
 8008b02:	1d3b      	adds	r3, r7, #4
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	18e3      	adds	r3, r4, r3
 8008b08:	605d      	str	r5, [r3, #4]
 8008b0a:	1c7b      	adds	r3, r7, #1
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	0020      	movs	r0, r4
 8008b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	08009f5c 	.word	0x08009f5c
 8008b18:	08009f6d 	.word	0x08009f6d

08008b1c <__hi0bits>:
 8008b1c:	0003      	movs	r3, r0
 8008b1e:	0c02      	lsrs	r2, r0, #16
 8008b20:	2000      	movs	r0, #0
 8008b22:	4282      	cmp	r2, r0
 8008b24:	d101      	bne.n	8008b2a <__hi0bits+0xe>
 8008b26:	041b      	lsls	r3, r3, #16
 8008b28:	3010      	adds	r0, #16
 8008b2a:	0e1a      	lsrs	r2, r3, #24
 8008b2c:	d101      	bne.n	8008b32 <__hi0bits+0x16>
 8008b2e:	3008      	adds	r0, #8
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	0f1a      	lsrs	r2, r3, #28
 8008b34:	d101      	bne.n	8008b3a <__hi0bits+0x1e>
 8008b36:	3004      	adds	r0, #4
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	0f9a      	lsrs	r2, r3, #30
 8008b3c:	d101      	bne.n	8008b42 <__hi0bits+0x26>
 8008b3e:	3002      	adds	r0, #2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	db03      	blt.n	8008b4e <__hi0bits+0x32>
 8008b46:	3001      	adds	r0, #1
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	d400      	bmi.n	8008b4e <__hi0bits+0x32>
 8008b4c:	2020      	movs	r0, #32
 8008b4e:	4770      	bx	lr

08008b50 <__lo0bits>:
 8008b50:	6803      	ldr	r3, [r0, #0]
 8008b52:	0001      	movs	r1, r0
 8008b54:	2207      	movs	r2, #7
 8008b56:	0018      	movs	r0, r3
 8008b58:	4010      	ands	r0, r2
 8008b5a:	4213      	tst	r3, r2
 8008b5c:	d00d      	beq.n	8008b7a <__lo0bits+0x2a>
 8008b5e:	3a06      	subs	r2, #6
 8008b60:	2000      	movs	r0, #0
 8008b62:	4213      	tst	r3, r2
 8008b64:	d105      	bne.n	8008b72 <__lo0bits+0x22>
 8008b66:	3002      	adds	r0, #2
 8008b68:	4203      	tst	r3, r0
 8008b6a:	d003      	beq.n	8008b74 <__lo0bits+0x24>
 8008b6c:	40d3      	lsrs	r3, r2
 8008b6e:	0010      	movs	r0, r2
 8008b70:	600b      	str	r3, [r1, #0]
 8008b72:	4770      	bx	lr
 8008b74:	089b      	lsrs	r3, r3, #2
 8008b76:	600b      	str	r3, [r1, #0]
 8008b78:	e7fb      	b.n	8008b72 <__lo0bits+0x22>
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d101      	bne.n	8008b84 <__lo0bits+0x34>
 8008b80:	2010      	movs	r0, #16
 8008b82:	0c1b      	lsrs	r3, r3, #16
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	d101      	bne.n	8008b8e <__lo0bits+0x3e>
 8008b8a:	3008      	adds	r0, #8
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	071a      	lsls	r2, r3, #28
 8008b90:	d101      	bne.n	8008b96 <__lo0bits+0x46>
 8008b92:	3004      	adds	r0, #4
 8008b94:	091b      	lsrs	r3, r3, #4
 8008b96:	079a      	lsls	r2, r3, #30
 8008b98:	d101      	bne.n	8008b9e <__lo0bits+0x4e>
 8008b9a:	3002      	adds	r0, #2
 8008b9c:	089b      	lsrs	r3, r3, #2
 8008b9e:	07da      	lsls	r2, r3, #31
 8008ba0:	d4e9      	bmi.n	8008b76 <__lo0bits+0x26>
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	d1e6      	bne.n	8008b76 <__lo0bits+0x26>
 8008ba8:	2020      	movs	r0, #32
 8008baa:	e7e2      	b.n	8008b72 <__lo0bits+0x22>

08008bac <__i2b>:
 8008bac:	b510      	push	{r4, lr}
 8008bae:	000c      	movs	r4, r1
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	f7ff ff07 	bl	80089c4 <_Balloc>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d107      	bne.n	8008bca <__i2b+0x1e>
 8008bba:	2146      	movs	r1, #70	; 0x46
 8008bbc:	4c05      	ldr	r4, [pc, #20]	; (8008bd4 <__i2b+0x28>)
 8008bbe:	0002      	movs	r2, r0
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <__i2b+0x2c>)
 8008bc2:	0020      	movs	r0, r4
 8008bc4:	31ff      	adds	r1, #255	; 0xff
 8008bc6:	f000 fcdd 	bl	8009584 <__assert_func>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	6144      	str	r4, [r0, #20]
 8008bce:	6103      	str	r3, [r0, #16]
 8008bd0:	bd10      	pop	{r4, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	08009f6d 	.word	0x08009f6d
 8008bd8:	08009f5c 	.word	0x08009f5c

08008bdc <__multiply>:
 8008bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bde:	0015      	movs	r5, r2
 8008be0:	690a      	ldr	r2, [r1, #16]
 8008be2:	692b      	ldr	r3, [r5, #16]
 8008be4:	000c      	movs	r4, r1
 8008be6:	b08b      	sub	sp, #44	; 0x2c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	da01      	bge.n	8008bf0 <__multiply+0x14>
 8008bec:	002c      	movs	r4, r5
 8008bee:	000d      	movs	r5, r1
 8008bf0:	6927      	ldr	r7, [r4, #16]
 8008bf2:	692e      	ldr	r6, [r5, #16]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	19bb      	adds	r3, r7, r6
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	68a3      	ldr	r3, [r4, #8]
 8008bfc:	19ba      	adds	r2, r7, r6
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	da00      	bge.n	8008c04 <__multiply+0x28>
 8008c02:	3101      	adds	r1, #1
 8008c04:	f7ff fede 	bl	80089c4 <_Balloc>
 8008c08:	9002      	str	r0, [sp, #8]
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d106      	bne.n	8008c1c <__multiply+0x40>
 8008c0e:	21b1      	movs	r1, #177	; 0xb1
 8008c10:	4b48      	ldr	r3, [pc, #288]	; (8008d34 <__multiply+0x158>)
 8008c12:	4849      	ldr	r0, [pc, #292]	; (8008d38 <__multiply+0x15c>)
 8008c14:	9a02      	ldr	r2, [sp, #8]
 8008c16:	0049      	lsls	r1, r1, #1
 8008c18:	f000 fcb4 	bl	8009584 <__assert_func>
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	3314      	adds	r3, #20
 8008c22:	469c      	mov	ip, r3
 8008c24:	19bb      	adds	r3, r7, r6
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4463      	add	r3, ip
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	4663      	mov	r3, ip
 8008c2e:	9904      	ldr	r1, [sp, #16]
 8008c30:	428b      	cmp	r3, r1
 8008c32:	d32a      	bcc.n	8008c8a <__multiply+0xae>
 8008c34:	0023      	movs	r3, r4
 8008c36:	00bf      	lsls	r7, r7, #2
 8008c38:	3314      	adds	r3, #20
 8008c3a:	3514      	adds	r5, #20
 8008c3c:	9308      	str	r3, [sp, #32]
 8008c3e:	00b6      	lsls	r6, r6, #2
 8008c40:	19db      	adds	r3, r3, r7
 8008c42:	9305      	str	r3, [sp, #20]
 8008c44:	19ab      	adds	r3, r5, r6
 8008c46:	9309      	str	r3, [sp, #36]	; 0x24
 8008c48:	2304      	movs	r3, #4
 8008c4a:	9306      	str	r3, [sp, #24]
 8008c4c:	0023      	movs	r3, r4
 8008c4e:	9a05      	ldr	r2, [sp, #20]
 8008c50:	3315      	adds	r3, #21
 8008c52:	9501      	str	r5, [sp, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d305      	bcc.n	8008c64 <__multiply+0x88>
 8008c58:	1b13      	subs	r3, r2, r4
 8008c5a:	3b15      	subs	r3, #21
 8008c5c:	089b      	lsrs	r3, r3, #2
 8008c5e:	3301      	adds	r3, #1
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	9306      	str	r3, [sp, #24]
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d310      	bcc.n	8008c8e <__multiply+0xb2>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	dd05      	ble.n	8008c7e <__multiply+0xa2>
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	3b04      	subs	r3, #4
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d056      	beq.n	8008d2c <__multiply+0x150>
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	9a03      	ldr	r2, [sp, #12]
 8008c82:	0018      	movs	r0, r3
 8008c84:	611a      	str	r2, [r3, #16]
 8008c86:	b00b      	add	sp, #44	; 0x2c
 8008c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8a:	c304      	stmia	r3!, {r2}
 8008c8c:	e7cf      	b.n	8008c2e <__multiply+0x52>
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	b280      	uxth	r0, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d01e      	beq.n	8008cd6 <__multiply+0xfa>
 8008c98:	4667      	mov	r7, ip
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	9e08      	ldr	r6, [sp, #32]
 8008c9e:	ce02      	ldmia	r6!, {r1}
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	b28b      	uxth	r3, r1
 8008ca6:	4343      	muls	r3, r0
 8008ca8:	001a      	movs	r2, r3
 8008caa:	466b      	mov	r3, sp
 8008cac:	8b9b      	ldrh	r3, [r3, #28]
 8008cae:	18d3      	adds	r3, r2, r3
 8008cb0:	195b      	adds	r3, r3, r5
 8008cb2:	0c0d      	lsrs	r5, r1, #16
 8008cb4:	4345      	muls	r5, r0
 8008cb6:	9a07      	ldr	r2, [sp, #28]
 8008cb8:	0c11      	lsrs	r1, r2, #16
 8008cba:	1869      	adds	r1, r5, r1
 8008cbc:	0c1a      	lsrs	r2, r3, #16
 8008cbe:	188a      	adds	r2, r1, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	0c15      	lsrs	r5, r2, #16
 8008cc4:	0412      	lsls	r2, r2, #16
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	9b05      	ldr	r3, [sp, #20]
 8008cca:	c704      	stmia	r7!, {r2}
 8008ccc:	42b3      	cmp	r3, r6
 8008cce:	d8e6      	bhi.n	8008c9e <__multiply+0xc2>
 8008cd0:	4663      	mov	r3, ip
 8008cd2:	9a06      	ldr	r2, [sp, #24]
 8008cd4:	509d      	str	r5, [r3, r2]
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	0c00      	lsrs	r0, r0, #16
 8008cdc:	d020      	beq.n	8008d20 <__multiply+0x144>
 8008cde:	4663      	mov	r3, ip
 8008ce0:	0025      	movs	r5, r4
 8008ce2:	4661      	mov	r1, ip
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3514      	adds	r5, #20
 8008cea:	682a      	ldr	r2, [r5, #0]
 8008cec:	680e      	ldr	r6, [r1, #0]
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	4342      	muls	r2, r0
 8008cf2:	0c36      	lsrs	r6, r6, #16
 8008cf4:	1992      	adds	r2, r2, r6
 8008cf6:	19d2      	adds	r2, r2, r7
 8008cf8:	0416      	lsls	r6, r2, #16
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	431e      	orrs	r6, r3
 8008cfe:	600e      	str	r6, [r1, #0]
 8008d00:	cd40      	ldmia	r5!, {r6}
 8008d02:	684b      	ldr	r3, [r1, #4]
 8008d04:	0c36      	lsrs	r6, r6, #16
 8008d06:	4346      	muls	r6, r0
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	0c12      	lsrs	r2, r2, #16
 8008d0c:	18f3      	adds	r3, r6, r3
 8008d0e:	189b      	adds	r3, r3, r2
 8008d10:	9a05      	ldr	r2, [sp, #20]
 8008d12:	0c1f      	lsrs	r7, r3, #16
 8008d14:	3104      	adds	r1, #4
 8008d16:	42aa      	cmp	r2, r5
 8008d18:	d8e7      	bhi.n	8008cea <__multiply+0x10e>
 8008d1a:	4662      	mov	r2, ip
 8008d1c:	9906      	ldr	r1, [sp, #24]
 8008d1e:	5053      	str	r3, [r2, r1]
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	2304      	movs	r3, #4
 8008d28:	449c      	add	ip, r3
 8008d2a:	e79b      	b.n	8008c64 <__multiply+0x88>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	9303      	str	r3, [sp, #12]
 8008d32:	e79b      	b.n	8008c6c <__multiply+0x90>
 8008d34:	08009f5c 	.word	0x08009f5c
 8008d38:	08009f6d 	.word	0x08009f6d

08008d3c <__pow5mult>:
 8008d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d3e:	2303      	movs	r3, #3
 8008d40:	0015      	movs	r5, r2
 8008d42:	0007      	movs	r7, r0
 8008d44:	000e      	movs	r6, r1
 8008d46:	401a      	ands	r2, r3
 8008d48:	421d      	tst	r5, r3
 8008d4a:	d008      	beq.n	8008d5e <__pow5mult+0x22>
 8008d4c:	4925      	ldr	r1, [pc, #148]	; (8008de4 <__pow5mult+0xa8>)
 8008d4e:	3a01      	subs	r2, #1
 8008d50:	0092      	lsls	r2, r2, #2
 8008d52:	5852      	ldr	r2, [r2, r1]
 8008d54:	2300      	movs	r3, #0
 8008d56:	0031      	movs	r1, r6
 8008d58:	f7ff fe9c 	bl	8008a94 <__multadd>
 8008d5c:	0006      	movs	r6, r0
 8008d5e:	10ad      	asrs	r5, r5, #2
 8008d60:	d03d      	beq.n	8008dde <__pow5mult+0xa2>
 8008d62:	69fc      	ldr	r4, [r7, #28]
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	d10f      	bne.n	8008d88 <__pow5mult+0x4c>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f7ff fd6d 	bl	8008848 <malloc>
 8008d6e:	1e02      	subs	r2, r0, #0
 8008d70:	61f8      	str	r0, [r7, #28]
 8008d72:	d105      	bne.n	8008d80 <__pow5mult+0x44>
 8008d74:	21b4      	movs	r1, #180	; 0xb4
 8008d76:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <__pow5mult+0xac>)
 8008d78:	481c      	ldr	r0, [pc, #112]	; (8008dec <__pow5mult+0xb0>)
 8008d7a:	31ff      	adds	r1, #255	; 0xff
 8008d7c:	f000 fc02 	bl	8009584 <__assert_func>
 8008d80:	6044      	str	r4, [r0, #4]
 8008d82:	6084      	str	r4, [r0, #8]
 8008d84:	6004      	str	r4, [r0, #0]
 8008d86:	60c4      	str	r4, [r0, #12]
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	689c      	ldr	r4, [r3, #8]
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	d108      	bne.n	8008da4 <__pow5mult+0x68>
 8008d92:	0038      	movs	r0, r7
 8008d94:	4916      	ldr	r1, [pc, #88]	; (8008df0 <__pow5mult+0xb4>)
 8008d96:	f7ff ff09 	bl	8008bac <__i2b>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	0004      	movs	r4, r0
 8008d9e:	6098      	str	r0, [r3, #8]
 8008da0:	2300      	movs	r3, #0
 8008da2:	6003      	str	r3, [r0, #0]
 8008da4:	2301      	movs	r3, #1
 8008da6:	421d      	tst	r5, r3
 8008da8:	d00a      	beq.n	8008dc0 <__pow5mult+0x84>
 8008daa:	0031      	movs	r1, r6
 8008dac:	0022      	movs	r2, r4
 8008dae:	0038      	movs	r0, r7
 8008db0:	f7ff ff14 	bl	8008bdc <__multiply>
 8008db4:	0031      	movs	r1, r6
 8008db6:	9001      	str	r0, [sp, #4]
 8008db8:	0038      	movs	r0, r7
 8008dba:	f7ff fe47 	bl	8008a4c <_Bfree>
 8008dbe:	9e01      	ldr	r6, [sp, #4]
 8008dc0:	106d      	asrs	r5, r5, #1
 8008dc2:	d00c      	beq.n	8008dde <__pow5mult+0xa2>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d107      	bne.n	8008dda <__pow5mult+0x9e>
 8008dca:	0022      	movs	r2, r4
 8008dcc:	0021      	movs	r1, r4
 8008dce:	0038      	movs	r0, r7
 8008dd0:	f7ff ff04 	bl	8008bdc <__multiply>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	0004      	movs	r4, r0
 8008ddc:	e7e2      	b.n	8008da4 <__pow5mult+0x68>
 8008dde:	0030      	movs	r0, r6
 8008de0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	0800a0b8 	.word	0x0800a0b8
 8008de8:	08009eed 	.word	0x08009eed
 8008dec:	08009f6d 	.word	0x08009f6d
 8008df0:	00000271 	.word	0x00000271

08008df4 <__lshift>:
 8008df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df6:	000c      	movs	r4, r1
 8008df8:	0017      	movs	r7, r2
 8008dfa:	6923      	ldr	r3, [r4, #16]
 8008dfc:	1155      	asrs	r5, r2, #5
 8008dfe:	b087      	sub	sp, #28
 8008e00:	18eb      	adds	r3, r5, r3
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	3301      	adds	r3, #1
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	6849      	ldr	r1, [r1, #4]
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	9004      	str	r0, [sp, #16]
 8008e0e:	9a01      	ldr	r2, [sp, #4]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	db10      	blt.n	8008e36 <__lshift+0x42>
 8008e14:	9804      	ldr	r0, [sp, #16]
 8008e16:	f7ff fdd5 	bl	80089c4 <_Balloc>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	0002      	movs	r2, r0
 8008e1e:	0006      	movs	r6, r0
 8008e20:	0019      	movs	r1, r3
 8008e22:	3214      	adds	r2, #20
 8008e24:	4298      	cmp	r0, r3
 8008e26:	d10c      	bne.n	8008e42 <__lshift+0x4e>
 8008e28:	31df      	adds	r1, #223	; 0xdf
 8008e2a:	0032      	movs	r2, r6
 8008e2c:	4b26      	ldr	r3, [pc, #152]	; (8008ec8 <__lshift+0xd4>)
 8008e2e:	4827      	ldr	r0, [pc, #156]	; (8008ecc <__lshift+0xd8>)
 8008e30:	31ff      	adds	r1, #255	; 0xff
 8008e32:	f000 fba7 	bl	8009584 <__assert_func>
 8008e36:	3101      	adds	r1, #1
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	e7e8      	b.n	8008e0e <__lshift+0x1a>
 8008e3c:	0098      	lsls	r0, r3, #2
 8008e3e:	5011      	str	r1, [r2, r0]
 8008e40:	3301      	adds	r3, #1
 8008e42:	42ab      	cmp	r3, r5
 8008e44:	dbfa      	blt.n	8008e3c <__lshift+0x48>
 8008e46:	43eb      	mvns	r3, r5
 8008e48:	17db      	asrs	r3, r3, #31
 8008e4a:	401d      	ands	r5, r3
 8008e4c:	211f      	movs	r1, #31
 8008e4e:	0023      	movs	r3, r4
 8008e50:	0038      	movs	r0, r7
 8008e52:	00ad      	lsls	r5, r5, #2
 8008e54:	1955      	adds	r5, r2, r5
 8008e56:	6922      	ldr	r2, [r4, #16]
 8008e58:	3314      	adds	r3, #20
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	4008      	ands	r0, r1
 8008e5e:	4684      	mov	ip, r0
 8008e60:	189a      	adds	r2, r3, r2
 8008e62:	420f      	tst	r7, r1
 8008e64:	d02a      	beq.n	8008ebc <__lshift+0xc8>
 8008e66:	3101      	adds	r1, #1
 8008e68:	1a09      	subs	r1, r1, r0
 8008e6a:	9105      	str	r1, [sp, #20]
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	9503      	str	r5, [sp, #12]
 8008e70:	4667      	mov	r7, ip
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	40b8      	lsls	r0, r7
 8008e76:	4308      	orrs	r0, r1
 8008e78:	9903      	ldr	r1, [sp, #12]
 8008e7a:	c101      	stmia	r1!, {r0}
 8008e7c:	9103      	str	r1, [sp, #12]
 8008e7e:	9805      	ldr	r0, [sp, #20]
 8008e80:	cb02      	ldmia	r3!, {r1}
 8008e82:	40c1      	lsrs	r1, r0
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d8f3      	bhi.n	8008e70 <__lshift+0x7c>
 8008e88:	0020      	movs	r0, r4
 8008e8a:	3015      	adds	r0, #21
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	4282      	cmp	r2, r0
 8008e90:	d304      	bcc.n	8008e9c <__lshift+0xa8>
 8008e92:	1b13      	subs	r3, r2, r4
 8008e94:	3b15      	subs	r3, #21
 8008e96:	089b      	lsrs	r3, r3, #2
 8008e98:	3301      	adds	r3, #1
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	50e9      	str	r1, [r5, r3]
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	d002      	beq.n	8008ea8 <__lshift+0xb4>
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	9804      	ldr	r0, [sp, #16]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	0021      	movs	r1, r4
 8008eb0:	6133      	str	r3, [r6, #16]
 8008eb2:	f7ff fdcb 	bl	8008a4c <_Bfree>
 8008eb6:	0030      	movs	r0, r6
 8008eb8:	b007      	add	sp, #28
 8008eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ebc:	cb02      	ldmia	r3!, {r1}
 8008ebe:	c502      	stmia	r5!, {r1}
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d8fb      	bhi.n	8008ebc <__lshift+0xc8>
 8008ec4:	e7f0      	b.n	8008ea8 <__lshift+0xb4>
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	08009f5c 	.word	0x08009f5c
 8008ecc:	08009f6d 	.word	0x08009f6d

08008ed0 <__mcmp>:
 8008ed0:	b530      	push	{r4, r5, lr}
 8008ed2:	690b      	ldr	r3, [r1, #16]
 8008ed4:	6904      	ldr	r4, [r0, #16]
 8008ed6:	0002      	movs	r2, r0
 8008ed8:	1ae0      	subs	r0, r4, r3
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d10e      	bne.n	8008efc <__mcmp+0x2c>
 8008ede:	3214      	adds	r2, #20
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	3114      	adds	r1, #20
 8008ee4:	0014      	movs	r4, r2
 8008ee6:	18c9      	adds	r1, r1, r3
 8008ee8:	18d2      	adds	r2, r2, r3
 8008eea:	3a04      	subs	r2, #4
 8008eec:	3904      	subs	r1, #4
 8008eee:	6815      	ldr	r5, [r2, #0]
 8008ef0:	680b      	ldr	r3, [r1, #0]
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	d003      	beq.n	8008efe <__mcmp+0x2e>
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	429d      	cmp	r5, r3
 8008efa:	d303      	bcc.n	8008f04 <__mcmp+0x34>
 8008efc:	bd30      	pop	{r4, r5, pc}
 8008efe:	4294      	cmp	r4, r2
 8008f00:	d3f3      	bcc.n	8008eea <__mcmp+0x1a>
 8008f02:	e7fb      	b.n	8008efc <__mcmp+0x2c>
 8008f04:	4240      	negs	r0, r0
 8008f06:	e7f9      	b.n	8008efc <__mcmp+0x2c>

08008f08 <__mdiff>:
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	000e      	movs	r6, r1
 8008f0c:	0007      	movs	r7, r0
 8008f0e:	0011      	movs	r1, r2
 8008f10:	0030      	movs	r0, r6
 8008f12:	b087      	sub	sp, #28
 8008f14:	0014      	movs	r4, r2
 8008f16:	f7ff ffdb 	bl	8008ed0 <__mcmp>
 8008f1a:	1e05      	subs	r5, r0, #0
 8008f1c:	d110      	bne.n	8008f40 <__mdiff+0x38>
 8008f1e:	0001      	movs	r1, r0
 8008f20:	0038      	movs	r0, r7
 8008f22:	f7ff fd4f 	bl	80089c4 <_Balloc>
 8008f26:	1e02      	subs	r2, r0, #0
 8008f28:	d104      	bne.n	8008f34 <__mdiff+0x2c>
 8008f2a:	4b3f      	ldr	r3, [pc, #252]	; (8009028 <__mdiff+0x120>)
 8008f2c:	483f      	ldr	r0, [pc, #252]	; (800902c <__mdiff+0x124>)
 8008f2e:	4940      	ldr	r1, [pc, #256]	; (8009030 <__mdiff+0x128>)
 8008f30:	f000 fb28 	bl	8009584 <__assert_func>
 8008f34:	2301      	movs	r3, #1
 8008f36:	6145      	str	r5, [r0, #20]
 8008f38:	6103      	str	r3, [r0, #16]
 8008f3a:	0010      	movs	r0, r2
 8008f3c:	b007      	add	sp, #28
 8008f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f40:	2301      	movs	r3, #1
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	2800      	cmp	r0, #0
 8008f46:	db04      	blt.n	8008f52 <__mdiff+0x4a>
 8008f48:	0023      	movs	r3, r4
 8008f4a:	0034      	movs	r4, r6
 8008f4c:	001e      	movs	r6, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	0038      	movs	r0, r7
 8008f54:	6861      	ldr	r1, [r4, #4]
 8008f56:	f7ff fd35 	bl	80089c4 <_Balloc>
 8008f5a:	1e02      	subs	r2, r0, #0
 8008f5c:	d103      	bne.n	8008f66 <__mdiff+0x5e>
 8008f5e:	4b32      	ldr	r3, [pc, #200]	; (8009028 <__mdiff+0x120>)
 8008f60:	4832      	ldr	r0, [pc, #200]	; (800902c <__mdiff+0x124>)
 8008f62:	4934      	ldr	r1, [pc, #208]	; (8009034 <__mdiff+0x12c>)
 8008f64:	e7e4      	b.n	8008f30 <__mdiff+0x28>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	2700      	movs	r7, #0
 8008f6a:	60c3      	str	r3, [r0, #12]
 8008f6c:	6920      	ldr	r0, [r4, #16]
 8008f6e:	3414      	adds	r4, #20
 8008f70:	0083      	lsls	r3, r0, #2
 8008f72:	18e3      	adds	r3, r4, r3
 8008f74:	0021      	movs	r1, r4
 8008f76:	9401      	str	r4, [sp, #4]
 8008f78:	0034      	movs	r4, r6
 8008f7a:	9302      	str	r3, [sp, #8]
 8008f7c:	6933      	ldr	r3, [r6, #16]
 8008f7e:	3414      	adds	r4, #20
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	18e3      	adds	r3, r4, r3
 8008f84:	9303      	str	r3, [sp, #12]
 8008f86:	0013      	movs	r3, r2
 8008f88:	3314      	adds	r3, #20
 8008f8a:	469c      	mov	ip, r3
 8008f8c:	9305      	str	r3, [sp, #20]
 8008f8e:	9104      	str	r1, [sp, #16]
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	cc02      	ldmia	r4!, {r1}
 8008f94:	cb20      	ldmia	r3!, {r5}
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	b2ab      	uxth	r3, r5
 8008f9a:	19df      	adds	r7, r3, r7
 8008f9c:	b28b      	uxth	r3, r1
 8008f9e:	1afb      	subs	r3, r7, r3
 8008fa0:	0c09      	lsrs	r1, r1, #16
 8008fa2:	0c2d      	lsrs	r5, r5, #16
 8008fa4:	1a6d      	subs	r5, r5, r1
 8008fa6:	1419      	asrs	r1, r3, #16
 8008fa8:	1869      	adds	r1, r5, r1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	140f      	asrs	r7, r1, #16
 8008fae:	0409      	lsls	r1, r1, #16
 8008fb0:	4319      	orrs	r1, r3
 8008fb2:	4663      	mov	r3, ip
 8008fb4:	c302      	stmia	r3!, {r1}
 8008fb6:	469c      	mov	ip, r3
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	d8e8      	bhi.n	8008f90 <__mdiff+0x88>
 8008fbe:	0031      	movs	r1, r6
 8008fc0:	9c03      	ldr	r4, [sp, #12]
 8008fc2:	3115      	adds	r1, #21
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	428c      	cmp	r4, r1
 8008fc8:	d304      	bcc.n	8008fd4 <__mdiff+0xcc>
 8008fca:	1ba3      	subs	r3, r4, r6
 8008fcc:	3b15      	subs	r3, #21
 8008fce:	089b      	lsrs	r3, r3, #2
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	9901      	ldr	r1, [sp, #4]
 8008fd6:	18cd      	adds	r5, r1, r3
 8008fd8:	9905      	ldr	r1, [sp, #20]
 8008fda:	002e      	movs	r6, r5
 8008fdc:	18cb      	adds	r3, r1, r3
 8008fde:	469c      	mov	ip, r3
 8008fe0:	9902      	ldr	r1, [sp, #8]
 8008fe2:	428e      	cmp	r6, r1
 8008fe4:	d310      	bcc.n	8009008 <__mdiff+0x100>
 8008fe6:	9e02      	ldr	r6, [sp, #8]
 8008fe8:	1ee9      	subs	r1, r5, #3
 8008fea:	2400      	movs	r4, #0
 8008fec:	428e      	cmp	r6, r1
 8008fee:	d304      	bcc.n	8008ffa <__mdiff+0xf2>
 8008ff0:	0031      	movs	r1, r6
 8008ff2:	3103      	adds	r1, #3
 8008ff4:	1b49      	subs	r1, r1, r5
 8008ff6:	0889      	lsrs	r1, r1, #2
 8008ff8:	008c      	lsls	r4, r1, #2
 8008ffa:	191b      	adds	r3, r3, r4
 8008ffc:	3b04      	subs	r3, #4
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	2900      	cmp	r1, #0
 8009002:	d00f      	beq.n	8009024 <__mdiff+0x11c>
 8009004:	6110      	str	r0, [r2, #16]
 8009006:	e798      	b.n	8008f3a <__mdiff+0x32>
 8009008:	ce02      	ldmia	r6!, {r1}
 800900a:	b28c      	uxth	r4, r1
 800900c:	19e4      	adds	r4, r4, r7
 800900e:	0c0f      	lsrs	r7, r1, #16
 8009010:	1421      	asrs	r1, r4, #16
 8009012:	1879      	adds	r1, r7, r1
 8009014:	b2a4      	uxth	r4, r4
 8009016:	140f      	asrs	r7, r1, #16
 8009018:	0409      	lsls	r1, r1, #16
 800901a:	4321      	orrs	r1, r4
 800901c:	4664      	mov	r4, ip
 800901e:	c402      	stmia	r4!, {r1}
 8009020:	46a4      	mov	ip, r4
 8009022:	e7dd      	b.n	8008fe0 <__mdiff+0xd8>
 8009024:	3801      	subs	r0, #1
 8009026:	e7e9      	b.n	8008ffc <__mdiff+0xf4>
 8009028:	08009f5c 	.word	0x08009f5c
 800902c:	08009f6d 	.word	0x08009f6d
 8009030:	00000237 	.word	0x00000237
 8009034:	00000245 	.word	0x00000245

08009038 <__d2b>:
 8009038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800903a:	2101      	movs	r1, #1
 800903c:	0014      	movs	r4, r2
 800903e:	001d      	movs	r5, r3
 8009040:	9f08      	ldr	r7, [sp, #32]
 8009042:	f7ff fcbf 	bl	80089c4 <_Balloc>
 8009046:	1e06      	subs	r6, r0, #0
 8009048:	d105      	bne.n	8009056 <__d2b+0x1e>
 800904a:	0032      	movs	r2, r6
 800904c:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <__d2b+0xa8>)
 800904e:	4825      	ldr	r0, [pc, #148]	; (80090e4 <__d2b+0xac>)
 8009050:	4925      	ldr	r1, [pc, #148]	; (80090e8 <__d2b+0xb0>)
 8009052:	f000 fa97 	bl	8009584 <__assert_func>
 8009056:	032b      	lsls	r3, r5, #12
 8009058:	006d      	lsls	r5, r5, #1
 800905a:	0b1b      	lsrs	r3, r3, #12
 800905c:	0d6d      	lsrs	r5, r5, #21
 800905e:	d125      	bne.n	80090ac <__d2b+0x74>
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	2c00      	cmp	r4, #0
 8009064:	d028      	beq.n	80090b8 <__d2b+0x80>
 8009066:	4668      	mov	r0, sp
 8009068:	9400      	str	r4, [sp, #0]
 800906a:	f7ff fd71 	bl	8008b50 <__lo0bits>
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	9900      	ldr	r1, [sp, #0]
 8009072:	2800      	cmp	r0, #0
 8009074:	d01e      	beq.n	80090b4 <__d2b+0x7c>
 8009076:	2220      	movs	r2, #32
 8009078:	001c      	movs	r4, r3
 800907a:	1a12      	subs	r2, r2, r0
 800907c:	4094      	lsls	r4, r2
 800907e:	0022      	movs	r2, r4
 8009080:	40c3      	lsrs	r3, r0
 8009082:	430a      	orrs	r2, r1
 8009084:	6172      	str	r2, [r6, #20]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	9c01      	ldr	r4, [sp, #4]
 800908a:	61b4      	str	r4, [r6, #24]
 800908c:	1e63      	subs	r3, r4, #1
 800908e:	419c      	sbcs	r4, r3
 8009090:	3401      	adds	r4, #1
 8009092:	6134      	str	r4, [r6, #16]
 8009094:	2d00      	cmp	r5, #0
 8009096:	d017      	beq.n	80090c8 <__d2b+0x90>
 8009098:	2435      	movs	r4, #53	; 0x35
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <__d2b+0xb4>)
 800909c:	18ed      	adds	r5, r5, r3
 800909e:	182d      	adds	r5, r5, r0
 80090a0:	603d      	str	r5, [r7, #0]
 80090a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a4:	1a24      	subs	r4, r4, r0
 80090a6:	601c      	str	r4, [r3, #0]
 80090a8:	0030      	movs	r0, r6
 80090aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ac:	2280      	movs	r2, #128	; 0x80
 80090ae:	0352      	lsls	r2, r2, #13
 80090b0:	4313      	orrs	r3, r2
 80090b2:	e7d5      	b.n	8009060 <__d2b+0x28>
 80090b4:	6171      	str	r1, [r6, #20]
 80090b6:	e7e7      	b.n	8009088 <__d2b+0x50>
 80090b8:	a801      	add	r0, sp, #4
 80090ba:	f7ff fd49 	bl	8008b50 <__lo0bits>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	2401      	movs	r4, #1
 80090c2:	6173      	str	r3, [r6, #20]
 80090c4:	3020      	adds	r0, #32
 80090c6:	e7e4      	b.n	8009092 <__d2b+0x5a>
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__d2b+0xb8>)
 80090ca:	18c0      	adds	r0, r0, r3
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <__d2b+0xbc>)
 80090ce:	6038      	str	r0, [r7, #0]
 80090d0:	18e3      	adds	r3, r4, r3
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	18f3      	adds	r3, r6, r3
 80090d6:	6958      	ldr	r0, [r3, #20]
 80090d8:	f7ff fd20 	bl	8008b1c <__hi0bits>
 80090dc:	0164      	lsls	r4, r4, #5
 80090de:	e7e0      	b.n	80090a2 <__d2b+0x6a>
 80090e0:	08009f5c 	.word	0x08009f5c
 80090e4:	08009f6d 	.word	0x08009f6d
 80090e8:	0000030f 	.word	0x0000030f
 80090ec:	fffffbcd 	.word	0xfffffbcd
 80090f0:	fffffbce 	.word	0xfffffbce
 80090f4:	3fffffff 	.word	0x3fffffff

080090f8 <__ssputs_r>:
 80090f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fa:	b085      	sub	sp, #20
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	9203      	str	r2, [sp, #12]
 8009100:	688e      	ldr	r6, [r1, #8]
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	0007      	movs	r7, r0
 8009106:	000c      	movs	r4, r1
 8009108:	680b      	ldr	r3, [r1, #0]
 800910a:	4296      	cmp	r6, r2
 800910c:	d831      	bhi.n	8009172 <__ssputs_r+0x7a>
 800910e:	898a      	ldrh	r2, [r1, #12]
 8009110:	2190      	movs	r1, #144	; 0x90
 8009112:	00c9      	lsls	r1, r1, #3
 8009114:	420a      	tst	r2, r1
 8009116:	d029      	beq.n	800916c <__ssputs_r+0x74>
 8009118:	2003      	movs	r0, #3
 800911a:	6921      	ldr	r1, [r4, #16]
 800911c:	1a5b      	subs	r3, r3, r1
 800911e:	9302      	str	r3, [sp, #8]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	4343      	muls	r3, r0
 8009124:	0fdd      	lsrs	r5, r3, #31
 8009126:	18ed      	adds	r5, r5, r3
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	9802      	ldr	r0, [sp, #8]
 800912c:	3301      	adds	r3, #1
 800912e:	181b      	adds	r3, r3, r0
 8009130:	106d      	asrs	r5, r5, #1
 8009132:	42ab      	cmp	r3, r5
 8009134:	d900      	bls.n	8009138 <__ssputs_r+0x40>
 8009136:	001d      	movs	r5, r3
 8009138:	0552      	lsls	r2, r2, #21
 800913a:	d529      	bpl.n	8009190 <__ssputs_r+0x98>
 800913c:	0029      	movs	r1, r5
 800913e:	0038      	movs	r0, r7
 8009140:	f7ff fbae 	bl	80088a0 <_malloc_r>
 8009144:	1e06      	subs	r6, r0, #0
 8009146:	d02d      	beq.n	80091a4 <__ssputs_r+0xac>
 8009148:	9a02      	ldr	r2, [sp, #8]
 800914a:	6921      	ldr	r1, [r4, #16]
 800914c:	f000 fa10 	bl	8009570 <memcpy>
 8009150:	89a2      	ldrh	r2, [r4, #12]
 8009152:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <__ssputs_r+0xc0>)
 8009154:	401a      	ands	r2, r3
 8009156:	2380      	movs	r3, #128	; 0x80
 8009158:	4313      	orrs	r3, r2
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	6126      	str	r6, [r4, #16]
 8009160:	18f6      	adds	r6, r6, r3
 8009162:	6026      	str	r6, [r4, #0]
 8009164:	6165      	str	r5, [r4, #20]
 8009166:	9e01      	ldr	r6, [sp, #4]
 8009168:	1aed      	subs	r5, r5, r3
 800916a:	60a5      	str	r5, [r4, #8]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	429e      	cmp	r6, r3
 8009170:	d900      	bls.n	8009174 <__ssputs_r+0x7c>
 8009172:	9e01      	ldr	r6, [sp, #4]
 8009174:	0032      	movs	r2, r6
 8009176:	9903      	ldr	r1, [sp, #12]
 8009178:	6820      	ldr	r0, [r4, #0]
 800917a:	f000 f9d4 	bl	8009526 <memmove>
 800917e:	2000      	movs	r0, #0
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	1b9b      	subs	r3, r3, r6
 8009184:	60a3      	str	r3, [r4, #8]
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	199b      	adds	r3, r3, r6
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	b005      	add	sp, #20
 800918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009190:	002a      	movs	r2, r5
 8009192:	0038      	movs	r0, r7
 8009194:	f000 fa53 	bl	800963e <_realloc_r>
 8009198:	1e06      	subs	r6, r0, #0
 800919a:	d1df      	bne.n	800915c <__ssputs_r+0x64>
 800919c:	0038      	movs	r0, r7
 800919e:	6921      	ldr	r1, [r4, #16]
 80091a0:	f7ff fb08 	bl	80087b4 <_free_r>
 80091a4:	230c      	movs	r3, #12
 80091a6:	2001      	movs	r0, #1
 80091a8:	603b      	str	r3, [r7, #0]
 80091aa:	89a2      	ldrh	r2, [r4, #12]
 80091ac:	3334      	adds	r3, #52	; 0x34
 80091ae:	4313      	orrs	r3, r2
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	4240      	negs	r0, r0
 80091b4:	e7ea      	b.n	800918c <__ssputs_r+0x94>
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	fffffb7f 	.word	0xfffffb7f

080091bc <_svfiprintf_r>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b0a1      	sub	sp, #132	; 0x84
 80091c0:	9003      	str	r0, [sp, #12]
 80091c2:	001d      	movs	r5, r3
 80091c4:	898b      	ldrh	r3, [r1, #12]
 80091c6:	000f      	movs	r7, r1
 80091c8:	0016      	movs	r6, r2
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	d511      	bpl.n	80091f2 <_svfiprintf_r+0x36>
 80091ce:	690b      	ldr	r3, [r1, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10e      	bne.n	80091f2 <_svfiprintf_r+0x36>
 80091d4:	2140      	movs	r1, #64	; 0x40
 80091d6:	f7ff fb63 	bl	80088a0 <_malloc_r>
 80091da:	6038      	str	r0, [r7, #0]
 80091dc:	6138      	str	r0, [r7, #16]
 80091de:	2800      	cmp	r0, #0
 80091e0:	d105      	bne.n	80091ee <_svfiprintf_r+0x32>
 80091e2:	230c      	movs	r3, #12
 80091e4:	9a03      	ldr	r2, [sp, #12]
 80091e6:	3801      	subs	r0, #1
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	b021      	add	sp, #132	; 0x84
 80091ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	2300      	movs	r3, #0
 80091f4:	ac08      	add	r4, sp, #32
 80091f6:	6163      	str	r3, [r4, #20]
 80091f8:	3320      	adds	r3, #32
 80091fa:	7663      	strb	r3, [r4, #25]
 80091fc:	3310      	adds	r3, #16
 80091fe:	76a3      	strb	r3, [r4, #26]
 8009200:	9507      	str	r5, [sp, #28]
 8009202:	0035      	movs	r5, r6
 8009204:	782b      	ldrb	r3, [r5, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <_svfiprintf_r+0x52>
 800920a:	2b25      	cmp	r3, #37	; 0x25
 800920c:	d148      	bne.n	80092a0 <_svfiprintf_r+0xe4>
 800920e:	1bab      	subs	r3, r5, r6
 8009210:	9305      	str	r3, [sp, #20]
 8009212:	42b5      	cmp	r5, r6
 8009214:	d00b      	beq.n	800922e <_svfiprintf_r+0x72>
 8009216:	0032      	movs	r2, r6
 8009218:	0039      	movs	r1, r7
 800921a:	9803      	ldr	r0, [sp, #12]
 800921c:	f7ff ff6c 	bl	80090f8 <__ssputs_r>
 8009220:	3001      	adds	r0, #1
 8009222:	d100      	bne.n	8009226 <_svfiprintf_r+0x6a>
 8009224:	e0af      	b.n	8009386 <_svfiprintf_r+0x1ca>
 8009226:	6963      	ldr	r3, [r4, #20]
 8009228:	9a05      	ldr	r2, [sp, #20]
 800922a:	189b      	adds	r3, r3, r2
 800922c:	6163      	str	r3, [r4, #20]
 800922e:	782b      	ldrb	r3, [r5, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d100      	bne.n	8009236 <_svfiprintf_r+0x7a>
 8009234:	e0a7      	b.n	8009386 <_svfiprintf_r+0x1ca>
 8009236:	2201      	movs	r2, #1
 8009238:	2300      	movs	r3, #0
 800923a:	4252      	negs	r2, r2
 800923c:	6062      	str	r2, [r4, #4]
 800923e:	a904      	add	r1, sp, #16
 8009240:	3254      	adds	r2, #84	; 0x54
 8009242:	1852      	adds	r2, r2, r1
 8009244:	1c6e      	adds	r6, r5, #1
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	60e3      	str	r3, [r4, #12]
 800924a:	60a3      	str	r3, [r4, #8]
 800924c:	7013      	strb	r3, [r2, #0]
 800924e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009250:	4b55      	ldr	r3, [pc, #340]	; (80093a8 <_svfiprintf_r+0x1ec>)
 8009252:	2205      	movs	r2, #5
 8009254:	0018      	movs	r0, r3
 8009256:	7831      	ldrb	r1, [r6, #0]
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	f7fe fc02 	bl	8007a62 <memchr>
 800925e:	1c75      	adds	r5, r6, #1
 8009260:	2800      	cmp	r0, #0
 8009262:	d11f      	bne.n	80092a4 <_svfiprintf_r+0xe8>
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	06d3      	lsls	r3, r2, #27
 8009268:	d504      	bpl.n	8009274 <_svfiprintf_r+0xb8>
 800926a:	2353      	movs	r3, #83	; 0x53
 800926c:	a904      	add	r1, sp, #16
 800926e:	185b      	adds	r3, r3, r1
 8009270:	2120      	movs	r1, #32
 8009272:	7019      	strb	r1, [r3, #0]
 8009274:	0713      	lsls	r3, r2, #28
 8009276:	d504      	bpl.n	8009282 <_svfiprintf_r+0xc6>
 8009278:	2353      	movs	r3, #83	; 0x53
 800927a:	a904      	add	r1, sp, #16
 800927c:	185b      	adds	r3, r3, r1
 800927e:	212b      	movs	r1, #43	; 0x2b
 8009280:	7019      	strb	r1, [r3, #0]
 8009282:	7833      	ldrb	r3, [r6, #0]
 8009284:	2b2a      	cmp	r3, #42	; 0x2a
 8009286:	d016      	beq.n	80092b6 <_svfiprintf_r+0xfa>
 8009288:	0035      	movs	r5, r6
 800928a:	2100      	movs	r1, #0
 800928c:	200a      	movs	r0, #10
 800928e:	68e3      	ldr	r3, [r4, #12]
 8009290:	782a      	ldrb	r2, [r5, #0]
 8009292:	1c6e      	adds	r6, r5, #1
 8009294:	3a30      	subs	r2, #48	; 0x30
 8009296:	2a09      	cmp	r2, #9
 8009298:	d94e      	bls.n	8009338 <_svfiprintf_r+0x17c>
 800929a:	2900      	cmp	r1, #0
 800929c:	d111      	bne.n	80092c2 <_svfiprintf_r+0x106>
 800929e:	e017      	b.n	80092d0 <_svfiprintf_r+0x114>
 80092a0:	3501      	adds	r5, #1
 80092a2:	e7af      	b.n	8009204 <_svfiprintf_r+0x48>
 80092a4:	9b05      	ldr	r3, [sp, #20]
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	1ac0      	subs	r0, r0, r3
 80092aa:	2301      	movs	r3, #1
 80092ac:	4083      	lsls	r3, r0
 80092ae:	4313      	orrs	r3, r2
 80092b0:	002e      	movs	r6, r5
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	e7cc      	b.n	8009250 <_svfiprintf_r+0x94>
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	1d19      	adds	r1, r3, #4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	9107      	str	r1, [sp, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	db01      	blt.n	80092c6 <_svfiprintf_r+0x10a>
 80092c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c4:	e004      	b.n	80092d0 <_svfiprintf_r+0x114>
 80092c6:	425b      	negs	r3, r3
 80092c8:	60e3      	str	r3, [r4, #12]
 80092ca:	2302      	movs	r3, #2
 80092cc:	4313      	orrs	r3, r2
 80092ce:	6023      	str	r3, [r4, #0]
 80092d0:	782b      	ldrb	r3, [r5, #0]
 80092d2:	2b2e      	cmp	r3, #46	; 0x2e
 80092d4:	d10a      	bne.n	80092ec <_svfiprintf_r+0x130>
 80092d6:	786b      	ldrb	r3, [r5, #1]
 80092d8:	2b2a      	cmp	r3, #42	; 0x2a
 80092da:	d135      	bne.n	8009348 <_svfiprintf_r+0x18c>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	3502      	adds	r5, #2
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	9207      	str	r2, [sp, #28]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	db2b      	blt.n	8009342 <_svfiprintf_r+0x186>
 80092ea:	9309      	str	r3, [sp, #36]	; 0x24
 80092ec:	4e2f      	ldr	r6, [pc, #188]	; (80093ac <_svfiprintf_r+0x1f0>)
 80092ee:	2203      	movs	r2, #3
 80092f0:	0030      	movs	r0, r6
 80092f2:	7829      	ldrb	r1, [r5, #0]
 80092f4:	f7fe fbb5 	bl	8007a62 <memchr>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d006      	beq.n	800930a <_svfiprintf_r+0x14e>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	1b80      	subs	r0, r0, r6
 8009300:	4083      	lsls	r3, r0
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	3501      	adds	r5, #1
 8009306:	4313      	orrs	r3, r2
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	7829      	ldrb	r1, [r5, #0]
 800930c:	2206      	movs	r2, #6
 800930e:	4828      	ldr	r0, [pc, #160]	; (80093b0 <_svfiprintf_r+0x1f4>)
 8009310:	1c6e      	adds	r6, r5, #1
 8009312:	7621      	strb	r1, [r4, #24]
 8009314:	f7fe fba5 	bl	8007a62 <memchr>
 8009318:	2800      	cmp	r0, #0
 800931a:	d03c      	beq.n	8009396 <_svfiprintf_r+0x1da>
 800931c:	4b25      	ldr	r3, [pc, #148]	; (80093b4 <_svfiprintf_r+0x1f8>)
 800931e:	2b00      	cmp	r3, #0
 8009320:	d125      	bne.n	800936e <_svfiprintf_r+0x1b2>
 8009322:	2207      	movs	r2, #7
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	3307      	adds	r3, #7
 8009328:	4393      	bics	r3, r2
 800932a:	3308      	adds	r3, #8
 800932c:	9307      	str	r3, [sp, #28]
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	9a04      	ldr	r2, [sp, #16]
 8009332:	189b      	adds	r3, r3, r2
 8009334:	6163      	str	r3, [r4, #20]
 8009336:	e764      	b.n	8009202 <_svfiprintf_r+0x46>
 8009338:	4343      	muls	r3, r0
 800933a:	0035      	movs	r5, r6
 800933c:	2101      	movs	r1, #1
 800933e:	189b      	adds	r3, r3, r2
 8009340:	e7a6      	b.n	8009290 <_svfiprintf_r+0xd4>
 8009342:	2301      	movs	r3, #1
 8009344:	425b      	negs	r3, r3
 8009346:	e7d0      	b.n	80092ea <_svfiprintf_r+0x12e>
 8009348:	2300      	movs	r3, #0
 800934a:	200a      	movs	r0, #10
 800934c:	001a      	movs	r2, r3
 800934e:	3501      	adds	r5, #1
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	7829      	ldrb	r1, [r5, #0]
 8009354:	1c6e      	adds	r6, r5, #1
 8009356:	3930      	subs	r1, #48	; 0x30
 8009358:	2909      	cmp	r1, #9
 800935a:	d903      	bls.n	8009364 <_svfiprintf_r+0x1a8>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0c5      	beq.n	80092ec <_svfiprintf_r+0x130>
 8009360:	9209      	str	r2, [sp, #36]	; 0x24
 8009362:	e7c3      	b.n	80092ec <_svfiprintf_r+0x130>
 8009364:	4342      	muls	r2, r0
 8009366:	0035      	movs	r5, r6
 8009368:	2301      	movs	r3, #1
 800936a:	1852      	adds	r2, r2, r1
 800936c:	e7f1      	b.n	8009352 <_svfiprintf_r+0x196>
 800936e:	aa07      	add	r2, sp, #28
 8009370:	9200      	str	r2, [sp, #0]
 8009372:	0021      	movs	r1, r4
 8009374:	003a      	movs	r2, r7
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <_svfiprintf_r+0x1fc>)
 8009378:	9803      	ldr	r0, [sp, #12]
 800937a:	f7fd fde5 	bl	8006f48 <_printf_float>
 800937e:	9004      	str	r0, [sp, #16]
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	3301      	adds	r3, #1
 8009384:	d1d3      	bne.n	800932e <_svfiprintf_r+0x172>
 8009386:	89bb      	ldrh	r3, [r7, #12]
 8009388:	980d      	ldr	r0, [sp, #52]	; 0x34
 800938a:	065b      	lsls	r3, r3, #25
 800938c:	d400      	bmi.n	8009390 <_svfiprintf_r+0x1d4>
 800938e:	e72c      	b.n	80091ea <_svfiprintf_r+0x2e>
 8009390:	2001      	movs	r0, #1
 8009392:	4240      	negs	r0, r0
 8009394:	e729      	b.n	80091ea <_svfiprintf_r+0x2e>
 8009396:	aa07      	add	r2, sp, #28
 8009398:	9200      	str	r2, [sp, #0]
 800939a:	0021      	movs	r1, r4
 800939c:	003a      	movs	r2, r7
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <_svfiprintf_r+0x1fc>)
 80093a0:	9803      	ldr	r0, [sp, #12]
 80093a2:	f7fe f897 	bl	80074d4 <_printf_i>
 80093a6:	e7ea      	b.n	800937e <_svfiprintf_r+0x1c2>
 80093a8:	0800a0c4 	.word	0x0800a0c4
 80093ac:	0800a0ca 	.word	0x0800a0ca
 80093b0:	0800a0ce 	.word	0x0800a0ce
 80093b4:	08006f49 	.word	0x08006f49
 80093b8:	080090f9 	.word	0x080090f9

080093bc <__sflush_r>:
 80093bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093be:	898b      	ldrh	r3, [r1, #12]
 80093c0:	0005      	movs	r5, r0
 80093c2:	000c      	movs	r4, r1
 80093c4:	071a      	lsls	r2, r3, #28
 80093c6:	d45c      	bmi.n	8009482 <__sflush_r+0xc6>
 80093c8:	684a      	ldr	r2, [r1, #4]
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	dc04      	bgt.n	80093d8 <__sflush_r+0x1c>
 80093ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	dc01      	bgt.n	80093d8 <__sflush_r+0x1c>
 80093d4:	2000      	movs	r0, #0
 80093d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d0fa      	beq.n	80093d4 <__sflush_r+0x18>
 80093de:	2200      	movs	r2, #0
 80093e0:	2080      	movs	r0, #128	; 0x80
 80093e2:	682e      	ldr	r6, [r5, #0]
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	001a      	movs	r2, r3
 80093e8:	0140      	lsls	r0, r0, #5
 80093ea:	6a21      	ldr	r1, [r4, #32]
 80093ec:	4002      	ands	r2, r0
 80093ee:	4203      	tst	r3, r0
 80093f0:	d034      	beq.n	800945c <__sflush_r+0xa0>
 80093f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	075b      	lsls	r3, r3, #29
 80093f8:	d506      	bpl.n	8009408 <__sflush_r+0x4c>
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	1ac0      	subs	r0, r0, r3
 80093fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <__sflush_r+0x4c>
 8009404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009406:	1ac0      	subs	r0, r0, r3
 8009408:	0002      	movs	r2, r0
 800940a:	2300      	movs	r3, #0
 800940c:	0028      	movs	r0, r5
 800940e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009410:	6a21      	ldr	r1, [r4, #32]
 8009412:	47b8      	blx	r7
 8009414:	89a2      	ldrh	r2, [r4, #12]
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	d106      	bne.n	8009428 <__sflush_r+0x6c>
 800941a:	6829      	ldr	r1, [r5, #0]
 800941c:	291d      	cmp	r1, #29
 800941e:	d82c      	bhi.n	800947a <__sflush_r+0xbe>
 8009420:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <__sflush_r+0x110>)
 8009422:	410b      	asrs	r3, r1
 8009424:	07db      	lsls	r3, r3, #31
 8009426:	d428      	bmi.n	800947a <__sflush_r+0xbe>
 8009428:	2300      	movs	r3, #0
 800942a:	6063      	str	r3, [r4, #4]
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	04d2      	lsls	r2, r2, #19
 8009432:	d505      	bpl.n	8009440 <__sflush_r+0x84>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <__sflush_r+0x82>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d100      	bne.n	8009440 <__sflush_r+0x84>
 800943e:	6560      	str	r0, [r4, #84]	; 0x54
 8009440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009442:	602e      	str	r6, [r5, #0]
 8009444:	2900      	cmp	r1, #0
 8009446:	d0c5      	beq.n	80093d4 <__sflush_r+0x18>
 8009448:	0023      	movs	r3, r4
 800944a:	3344      	adds	r3, #68	; 0x44
 800944c:	4299      	cmp	r1, r3
 800944e:	d002      	beq.n	8009456 <__sflush_r+0x9a>
 8009450:	0028      	movs	r0, r5
 8009452:	f7ff f9af 	bl	80087b4 <_free_r>
 8009456:	2000      	movs	r0, #0
 8009458:	6360      	str	r0, [r4, #52]	; 0x34
 800945a:	e7bc      	b.n	80093d6 <__sflush_r+0x1a>
 800945c:	2301      	movs	r3, #1
 800945e:	0028      	movs	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d1c6      	bne.n	80093f4 <__sflush_r+0x38>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0c3      	beq.n	80093f4 <__sflush_r+0x38>
 800946c:	2b1d      	cmp	r3, #29
 800946e:	d001      	beq.n	8009474 <__sflush_r+0xb8>
 8009470:	2b16      	cmp	r3, #22
 8009472:	d101      	bne.n	8009478 <__sflush_r+0xbc>
 8009474:	602e      	str	r6, [r5, #0]
 8009476:	e7ad      	b.n	80093d4 <__sflush_r+0x18>
 8009478:	89a2      	ldrh	r2, [r4, #12]
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	4313      	orrs	r3, r2
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	e7a9      	b.n	80093d6 <__sflush_r+0x1a>
 8009482:	690e      	ldr	r6, [r1, #16]
 8009484:	2e00      	cmp	r6, #0
 8009486:	d0a5      	beq.n	80093d4 <__sflush_r+0x18>
 8009488:	680f      	ldr	r7, [r1, #0]
 800948a:	600e      	str	r6, [r1, #0]
 800948c:	1bba      	subs	r2, r7, r6
 800948e:	9201      	str	r2, [sp, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	079b      	lsls	r3, r3, #30
 8009494:	d100      	bne.n	8009498 <__sflush_r+0xdc>
 8009496:	694a      	ldr	r2, [r1, #20]
 8009498:	60a2      	str	r2, [r4, #8]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd99      	ble.n	80093d4 <__sflush_r+0x18>
 80094a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094a2:	0032      	movs	r2, r6
 80094a4:	001f      	movs	r7, r3
 80094a6:	0028      	movs	r0, r5
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	6a21      	ldr	r1, [r4, #32]
 80094ac:	47b8      	blx	r7
 80094ae:	2800      	cmp	r0, #0
 80094b0:	dc06      	bgt.n	80094c0 <__sflush_r+0x104>
 80094b2:	2340      	movs	r3, #64	; 0x40
 80094b4:	2001      	movs	r0, #1
 80094b6:	89a2      	ldrh	r2, [r4, #12]
 80094b8:	4240      	negs	r0, r0
 80094ba:	4313      	orrs	r3, r2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e78a      	b.n	80093d6 <__sflush_r+0x1a>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	1836      	adds	r6, r6, r0
 80094c4:	1a1b      	subs	r3, r3, r0
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	e7e7      	b.n	800949a <__sflush_r+0xde>
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	dfbffffe 	.word	0xdfbffffe

080094d0 <_fflush_r>:
 80094d0:	690b      	ldr	r3, [r1, #16]
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	0005      	movs	r5, r0
 80094d6:	000c      	movs	r4, r1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <_fflush_r+0x12>
 80094dc:	2500      	movs	r5, #0
 80094de:	0028      	movs	r0, r5
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d004      	beq.n	80094f0 <_fflush_r+0x20>
 80094e6:	6a03      	ldr	r3, [r0, #32]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <_fflush_r+0x20>
 80094ec:	f7fe f992 	bl	8007814 <__sinit>
 80094f0:	220c      	movs	r2, #12
 80094f2:	5ea3      	ldrsh	r3, [r4, r2]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f1      	beq.n	80094dc <_fflush_r+0xc>
 80094f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094fa:	07d2      	lsls	r2, r2, #31
 80094fc:	d404      	bmi.n	8009508 <_fflush_r+0x38>
 80094fe:	059b      	lsls	r3, r3, #22
 8009500:	d402      	bmi.n	8009508 <_fflush_r+0x38>
 8009502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009504:	f7fe faab 	bl	8007a5e <__retarget_lock_acquire_recursive>
 8009508:	0028      	movs	r0, r5
 800950a:	0021      	movs	r1, r4
 800950c:	f7ff ff56 	bl	80093bc <__sflush_r>
 8009510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009512:	0005      	movs	r5, r0
 8009514:	07db      	lsls	r3, r3, #31
 8009516:	d4e2      	bmi.n	80094de <_fflush_r+0xe>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	059b      	lsls	r3, r3, #22
 800951c:	d4df      	bmi.n	80094de <_fflush_r+0xe>
 800951e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009520:	f7fe fa9e 	bl	8007a60 <__retarget_lock_release_recursive>
 8009524:	e7db      	b.n	80094de <_fflush_r+0xe>

08009526 <memmove>:
 8009526:	b510      	push	{r4, lr}
 8009528:	4288      	cmp	r0, r1
 800952a:	d902      	bls.n	8009532 <memmove+0xc>
 800952c:	188b      	adds	r3, r1, r2
 800952e:	4298      	cmp	r0, r3
 8009530:	d303      	bcc.n	800953a <memmove+0x14>
 8009532:	2300      	movs	r3, #0
 8009534:	e007      	b.n	8009546 <memmove+0x20>
 8009536:	5c8b      	ldrb	r3, [r1, r2]
 8009538:	5483      	strb	r3, [r0, r2]
 800953a:	3a01      	subs	r2, #1
 800953c:	d2fb      	bcs.n	8009536 <memmove+0x10>
 800953e:	bd10      	pop	{r4, pc}
 8009540:	5ccc      	ldrb	r4, [r1, r3]
 8009542:	54c4      	strb	r4, [r0, r3]
 8009544:	3301      	adds	r3, #1
 8009546:	429a      	cmp	r2, r3
 8009548:	d1fa      	bne.n	8009540 <memmove+0x1a>
 800954a:	e7f8      	b.n	800953e <memmove+0x18>

0800954c <_sbrk_r>:
 800954c:	2300      	movs	r3, #0
 800954e:	b570      	push	{r4, r5, r6, lr}
 8009550:	4d06      	ldr	r5, [pc, #24]	; (800956c <_sbrk_r+0x20>)
 8009552:	0004      	movs	r4, r0
 8009554:	0008      	movs	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7fa fa7e 	bl	8003a58 <_sbrk>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d103      	bne.n	8009568 <_sbrk_r+0x1c>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d000      	beq.n	8009568 <_sbrk_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	2000051c 	.word	0x2000051c

08009570 <memcpy>:
 8009570:	2300      	movs	r3, #0
 8009572:	b510      	push	{r4, lr}
 8009574:	429a      	cmp	r2, r3
 8009576:	d100      	bne.n	800957a <memcpy+0xa>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	5ccc      	ldrb	r4, [r1, r3]
 800957c:	54c4      	strb	r4, [r0, r3]
 800957e:	3301      	adds	r3, #1
 8009580:	e7f8      	b.n	8009574 <memcpy+0x4>
	...

08009584 <__assert_func>:
 8009584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009586:	0014      	movs	r4, r2
 8009588:	001a      	movs	r2, r3
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <__assert_func+0x2c>)
 800958c:	0005      	movs	r5, r0
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	000e      	movs	r6, r1
 8009592:	68d8      	ldr	r0, [r3, #12]
 8009594:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <__assert_func+0x30>)
 8009596:	2c00      	cmp	r4, #0
 8009598:	d101      	bne.n	800959e <__assert_func+0x1a>
 800959a:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <__assert_func+0x34>)
 800959c:	001c      	movs	r4, r3
 800959e:	4907      	ldr	r1, [pc, #28]	; (80095bc <__assert_func+0x38>)
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	9402      	str	r4, [sp, #8]
 80095a4:	002b      	movs	r3, r5
 80095a6:	9600      	str	r6, [sp, #0]
 80095a8:	f000 f886 	bl	80096b8 <fiprintf>
 80095ac:	f000 f894 	bl	80096d8 <abort>
 80095b0:	2000006c 	.word	0x2000006c
 80095b4:	0800a0df 	.word	0x0800a0df
 80095b8:	0800a11a 	.word	0x0800a11a
 80095bc:	0800a0ec 	.word	0x0800a0ec

080095c0 <_calloc_r>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	0c0b      	lsrs	r3, r1, #16
 80095c4:	0c15      	lsrs	r5, r2, #16
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d11e      	bne.n	8009608 <_calloc_r+0x48>
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	d10c      	bne.n	80095e8 <_calloc_r+0x28>
 80095ce:	b289      	uxth	r1, r1
 80095d0:	b294      	uxth	r4, r2
 80095d2:	434c      	muls	r4, r1
 80095d4:	0021      	movs	r1, r4
 80095d6:	f7ff f963 	bl	80088a0 <_malloc_r>
 80095da:	1e05      	subs	r5, r0, #0
 80095dc:	d01b      	beq.n	8009616 <_calloc_r+0x56>
 80095de:	0022      	movs	r2, r4
 80095e0:	2100      	movs	r1, #0
 80095e2:	f7fe f9b7 	bl	8007954 <memset>
 80095e6:	e016      	b.n	8009616 <_calloc_r+0x56>
 80095e8:	1c2b      	adds	r3, r5, #0
 80095ea:	1c0c      	adds	r4, r1, #0
 80095ec:	b289      	uxth	r1, r1
 80095ee:	b292      	uxth	r2, r2
 80095f0:	434a      	muls	r2, r1
 80095f2:	b2a1      	uxth	r1, r4
 80095f4:	b29c      	uxth	r4, r3
 80095f6:	434c      	muls	r4, r1
 80095f8:	0c13      	lsrs	r3, r2, #16
 80095fa:	18e4      	adds	r4, r4, r3
 80095fc:	0c23      	lsrs	r3, r4, #16
 80095fe:	d107      	bne.n	8009610 <_calloc_r+0x50>
 8009600:	0424      	lsls	r4, r4, #16
 8009602:	b292      	uxth	r2, r2
 8009604:	4314      	orrs	r4, r2
 8009606:	e7e5      	b.n	80095d4 <_calloc_r+0x14>
 8009608:	2d00      	cmp	r5, #0
 800960a:	d101      	bne.n	8009610 <_calloc_r+0x50>
 800960c:	1c14      	adds	r4, r2, #0
 800960e:	e7ed      	b.n	80095ec <_calloc_r+0x2c>
 8009610:	230c      	movs	r3, #12
 8009612:	2500      	movs	r5, #0
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	0028      	movs	r0, r5
 8009618:	bd70      	pop	{r4, r5, r6, pc}

0800961a <__ascii_mbtowc>:
 800961a:	b082      	sub	sp, #8
 800961c:	2900      	cmp	r1, #0
 800961e:	d100      	bne.n	8009622 <__ascii_mbtowc+0x8>
 8009620:	a901      	add	r1, sp, #4
 8009622:	1e10      	subs	r0, r2, #0
 8009624:	d006      	beq.n	8009634 <__ascii_mbtowc+0x1a>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d006      	beq.n	8009638 <__ascii_mbtowc+0x1e>
 800962a:	7813      	ldrb	r3, [r2, #0]
 800962c:	600b      	str	r3, [r1, #0]
 800962e:	7810      	ldrb	r0, [r2, #0]
 8009630:	1e43      	subs	r3, r0, #1
 8009632:	4198      	sbcs	r0, r3
 8009634:	b002      	add	sp, #8
 8009636:	4770      	bx	lr
 8009638:	2002      	movs	r0, #2
 800963a:	4240      	negs	r0, r0
 800963c:	e7fa      	b.n	8009634 <__ascii_mbtowc+0x1a>

0800963e <_realloc_r>:
 800963e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009640:	0007      	movs	r7, r0
 8009642:	000e      	movs	r6, r1
 8009644:	0014      	movs	r4, r2
 8009646:	2900      	cmp	r1, #0
 8009648:	d105      	bne.n	8009656 <_realloc_r+0x18>
 800964a:	0011      	movs	r1, r2
 800964c:	f7ff f928 	bl	80088a0 <_malloc_r>
 8009650:	0005      	movs	r5, r0
 8009652:	0028      	movs	r0, r5
 8009654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009656:	2a00      	cmp	r2, #0
 8009658:	d103      	bne.n	8009662 <_realloc_r+0x24>
 800965a:	f7ff f8ab 	bl	80087b4 <_free_r>
 800965e:	0025      	movs	r5, r4
 8009660:	e7f7      	b.n	8009652 <_realloc_r+0x14>
 8009662:	f000 f840 	bl	80096e6 <_malloc_usable_size_r>
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	4284      	cmp	r4, r0
 800966a:	d803      	bhi.n	8009674 <_realloc_r+0x36>
 800966c:	0035      	movs	r5, r6
 800966e:	0843      	lsrs	r3, r0, #1
 8009670:	42a3      	cmp	r3, r4
 8009672:	d3ee      	bcc.n	8009652 <_realloc_r+0x14>
 8009674:	0021      	movs	r1, r4
 8009676:	0038      	movs	r0, r7
 8009678:	f7ff f912 	bl	80088a0 <_malloc_r>
 800967c:	1e05      	subs	r5, r0, #0
 800967e:	d0e8      	beq.n	8009652 <_realloc_r+0x14>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	0022      	movs	r2, r4
 8009684:	429c      	cmp	r4, r3
 8009686:	d900      	bls.n	800968a <_realloc_r+0x4c>
 8009688:	001a      	movs	r2, r3
 800968a:	0031      	movs	r1, r6
 800968c:	0028      	movs	r0, r5
 800968e:	f7ff ff6f 	bl	8009570 <memcpy>
 8009692:	0031      	movs	r1, r6
 8009694:	0038      	movs	r0, r7
 8009696:	f7ff f88d 	bl	80087b4 <_free_r>
 800969a:	e7da      	b.n	8009652 <_realloc_r+0x14>

0800969c <__ascii_wctomb>:
 800969c:	0003      	movs	r3, r0
 800969e:	1e08      	subs	r0, r1, #0
 80096a0:	d005      	beq.n	80096ae <__ascii_wctomb+0x12>
 80096a2:	2aff      	cmp	r2, #255	; 0xff
 80096a4:	d904      	bls.n	80096b0 <__ascii_wctomb+0x14>
 80096a6:	228a      	movs	r2, #138	; 0x8a
 80096a8:	2001      	movs	r0, #1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	4240      	negs	r0, r0
 80096ae:	4770      	bx	lr
 80096b0:	2001      	movs	r0, #1
 80096b2:	700a      	strb	r2, [r1, #0]
 80096b4:	e7fb      	b.n	80096ae <__ascii_wctomb+0x12>
	...

080096b8 <fiprintf>:
 80096b8:	b40e      	push	{r1, r2, r3}
 80096ba:	b517      	push	{r0, r1, r2, r4, lr}
 80096bc:	4c05      	ldr	r4, [pc, #20]	; (80096d4 <fiprintf+0x1c>)
 80096be:	ab05      	add	r3, sp, #20
 80096c0:	cb04      	ldmia	r3!, {r2}
 80096c2:	0001      	movs	r1, r0
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	f000 f83c 	bl	8009744 <_vfiprintf_r>
 80096cc:	bc1e      	pop	{r1, r2, r3, r4}
 80096ce:	bc08      	pop	{r3}
 80096d0:	b003      	add	sp, #12
 80096d2:	4718      	bx	r3
 80096d4:	2000006c 	.word	0x2000006c

080096d8 <abort>:
 80096d8:	2006      	movs	r0, #6
 80096da:	b510      	push	{r4, lr}
 80096dc:	f000 fa1e 	bl	8009b1c <raise>
 80096e0:	2001      	movs	r0, #1
 80096e2:	f7fa f948 	bl	8003976 <_exit>

080096e6 <_malloc_usable_size_r>:
 80096e6:	1f0b      	subs	r3, r1, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	1f18      	subs	r0, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da01      	bge.n	80096f4 <_malloc_usable_size_r+0xe>
 80096f0:	580b      	ldr	r3, [r1, r0]
 80096f2:	18c0      	adds	r0, r0, r3
 80096f4:	4770      	bx	lr

080096f6 <__sfputc_r>:
 80096f6:	6893      	ldr	r3, [r2, #8]
 80096f8:	b510      	push	{r4, lr}
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6093      	str	r3, [r2, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	da04      	bge.n	800970c <__sfputc_r+0x16>
 8009702:	6994      	ldr	r4, [r2, #24]
 8009704:	42a3      	cmp	r3, r4
 8009706:	db07      	blt.n	8009718 <__sfputc_r+0x22>
 8009708:	290a      	cmp	r1, #10
 800970a:	d005      	beq.n	8009718 <__sfputc_r+0x22>
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	1c58      	adds	r0, r3, #1
 8009710:	6010      	str	r0, [r2, #0]
 8009712:	7019      	strb	r1, [r3, #0]
 8009714:	0008      	movs	r0, r1
 8009716:	bd10      	pop	{r4, pc}
 8009718:	f000 f930 	bl	800997c <__swbuf_r>
 800971c:	0001      	movs	r1, r0
 800971e:	e7f9      	b.n	8009714 <__sfputc_r+0x1e>

08009720 <__sfputs_r>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	0006      	movs	r6, r0
 8009724:	000f      	movs	r7, r1
 8009726:	0014      	movs	r4, r2
 8009728:	18d5      	adds	r5, r2, r3
 800972a:	42ac      	cmp	r4, r5
 800972c:	d101      	bne.n	8009732 <__sfputs_r+0x12>
 800972e:	2000      	movs	r0, #0
 8009730:	e007      	b.n	8009742 <__sfputs_r+0x22>
 8009732:	7821      	ldrb	r1, [r4, #0]
 8009734:	003a      	movs	r2, r7
 8009736:	0030      	movs	r0, r6
 8009738:	f7ff ffdd 	bl	80096f6 <__sfputc_r>
 800973c:	3401      	adds	r4, #1
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d1f3      	bne.n	800972a <__sfputs_r+0xa>
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009744 <_vfiprintf_r>:
 8009744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009746:	b0a1      	sub	sp, #132	; 0x84
 8009748:	000f      	movs	r7, r1
 800974a:	0015      	movs	r5, r2
 800974c:	001e      	movs	r6, r3
 800974e:	9003      	str	r0, [sp, #12]
 8009750:	2800      	cmp	r0, #0
 8009752:	d004      	beq.n	800975e <_vfiprintf_r+0x1a>
 8009754:	6a03      	ldr	r3, [r0, #32]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <_vfiprintf_r+0x1a>
 800975a:	f7fe f85b 	bl	8007814 <__sinit>
 800975e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009760:	07db      	lsls	r3, r3, #31
 8009762:	d405      	bmi.n	8009770 <_vfiprintf_r+0x2c>
 8009764:	89bb      	ldrh	r3, [r7, #12]
 8009766:	059b      	lsls	r3, r3, #22
 8009768:	d402      	bmi.n	8009770 <_vfiprintf_r+0x2c>
 800976a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800976c:	f7fe f977 	bl	8007a5e <__retarget_lock_acquire_recursive>
 8009770:	89bb      	ldrh	r3, [r7, #12]
 8009772:	071b      	lsls	r3, r3, #28
 8009774:	d502      	bpl.n	800977c <_vfiprintf_r+0x38>
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d113      	bne.n	80097a4 <_vfiprintf_r+0x60>
 800977c:	0039      	movs	r1, r7
 800977e:	9803      	ldr	r0, [sp, #12]
 8009780:	f000 f93e 	bl	8009a00 <__swsetup_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	d00d      	beq.n	80097a4 <_vfiprintf_r+0x60>
 8009788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d503      	bpl.n	8009796 <_vfiprintf_r+0x52>
 800978e:	2001      	movs	r0, #1
 8009790:	4240      	negs	r0, r0
 8009792:	b021      	add	sp, #132	; 0x84
 8009794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009796:	89bb      	ldrh	r3, [r7, #12]
 8009798:	059b      	lsls	r3, r3, #22
 800979a:	d4f8      	bmi.n	800978e <_vfiprintf_r+0x4a>
 800979c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800979e:	f7fe f95f 	bl	8007a60 <__retarget_lock_release_recursive>
 80097a2:	e7f4      	b.n	800978e <_vfiprintf_r+0x4a>
 80097a4:	2300      	movs	r3, #0
 80097a6:	ac08      	add	r4, sp, #32
 80097a8:	6163      	str	r3, [r4, #20]
 80097aa:	3320      	adds	r3, #32
 80097ac:	7663      	strb	r3, [r4, #25]
 80097ae:	3310      	adds	r3, #16
 80097b0:	76a3      	strb	r3, [r4, #26]
 80097b2:	9607      	str	r6, [sp, #28]
 80097b4:	002e      	movs	r6, r5
 80097b6:	7833      	ldrb	r3, [r6, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <_vfiprintf_r+0x7c>
 80097bc:	2b25      	cmp	r3, #37	; 0x25
 80097be:	d148      	bne.n	8009852 <_vfiprintf_r+0x10e>
 80097c0:	1b73      	subs	r3, r6, r5
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	42ae      	cmp	r6, r5
 80097c6:	d00b      	beq.n	80097e0 <_vfiprintf_r+0x9c>
 80097c8:	002a      	movs	r2, r5
 80097ca:	0039      	movs	r1, r7
 80097cc:	9803      	ldr	r0, [sp, #12]
 80097ce:	f7ff ffa7 	bl	8009720 <__sfputs_r>
 80097d2:	3001      	adds	r0, #1
 80097d4:	d100      	bne.n	80097d8 <_vfiprintf_r+0x94>
 80097d6:	e0af      	b.n	8009938 <_vfiprintf_r+0x1f4>
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	9a05      	ldr	r2, [sp, #20]
 80097dc:	189b      	adds	r3, r3, r2
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	7833      	ldrb	r3, [r6, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d100      	bne.n	80097e8 <_vfiprintf_r+0xa4>
 80097e6:	e0a7      	b.n	8009938 <_vfiprintf_r+0x1f4>
 80097e8:	2201      	movs	r2, #1
 80097ea:	2300      	movs	r3, #0
 80097ec:	4252      	negs	r2, r2
 80097ee:	6062      	str	r2, [r4, #4]
 80097f0:	a904      	add	r1, sp, #16
 80097f2:	3254      	adds	r2, #84	; 0x54
 80097f4:	1852      	adds	r2, r2, r1
 80097f6:	1c75      	adds	r5, r6, #1
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	60e3      	str	r3, [r4, #12]
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	7013      	strb	r3, [r2, #0]
 8009800:	65a3      	str	r3, [r4, #88]	; 0x58
 8009802:	4b59      	ldr	r3, [pc, #356]	; (8009968 <_vfiprintf_r+0x224>)
 8009804:	2205      	movs	r2, #5
 8009806:	0018      	movs	r0, r3
 8009808:	7829      	ldrb	r1, [r5, #0]
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	f7fe f929 	bl	8007a62 <memchr>
 8009810:	1c6e      	adds	r6, r5, #1
 8009812:	2800      	cmp	r0, #0
 8009814:	d11f      	bne.n	8009856 <_vfiprintf_r+0x112>
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	06d3      	lsls	r3, r2, #27
 800981a:	d504      	bpl.n	8009826 <_vfiprintf_r+0xe2>
 800981c:	2353      	movs	r3, #83	; 0x53
 800981e:	a904      	add	r1, sp, #16
 8009820:	185b      	adds	r3, r3, r1
 8009822:	2120      	movs	r1, #32
 8009824:	7019      	strb	r1, [r3, #0]
 8009826:	0713      	lsls	r3, r2, #28
 8009828:	d504      	bpl.n	8009834 <_vfiprintf_r+0xf0>
 800982a:	2353      	movs	r3, #83	; 0x53
 800982c:	a904      	add	r1, sp, #16
 800982e:	185b      	adds	r3, r3, r1
 8009830:	212b      	movs	r1, #43	; 0x2b
 8009832:	7019      	strb	r1, [r3, #0]
 8009834:	782b      	ldrb	r3, [r5, #0]
 8009836:	2b2a      	cmp	r3, #42	; 0x2a
 8009838:	d016      	beq.n	8009868 <_vfiprintf_r+0x124>
 800983a:	002e      	movs	r6, r5
 800983c:	2100      	movs	r1, #0
 800983e:	200a      	movs	r0, #10
 8009840:	68e3      	ldr	r3, [r4, #12]
 8009842:	7832      	ldrb	r2, [r6, #0]
 8009844:	1c75      	adds	r5, r6, #1
 8009846:	3a30      	subs	r2, #48	; 0x30
 8009848:	2a09      	cmp	r2, #9
 800984a:	d94e      	bls.n	80098ea <_vfiprintf_r+0x1a6>
 800984c:	2900      	cmp	r1, #0
 800984e:	d111      	bne.n	8009874 <_vfiprintf_r+0x130>
 8009850:	e017      	b.n	8009882 <_vfiprintf_r+0x13e>
 8009852:	3601      	adds	r6, #1
 8009854:	e7af      	b.n	80097b6 <_vfiprintf_r+0x72>
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	6822      	ldr	r2, [r4, #0]
 800985a:	1ac0      	subs	r0, r0, r3
 800985c:	2301      	movs	r3, #1
 800985e:	4083      	lsls	r3, r0
 8009860:	4313      	orrs	r3, r2
 8009862:	0035      	movs	r5, r6
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	e7cc      	b.n	8009802 <_vfiprintf_r+0xbe>
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	1d19      	adds	r1, r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	9107      	str	r1, [sp, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	db01      	blt.n	8009878 <_vfiprintf_r+0x134>
 8009874:	930b      	str	r3, [sp, #44]	; 0x2c
 8009876:	e004      	b.n	8009882 <_vfiprintf_r+0x13e>
 8009878:	425b      	negs	r3, r3
 800987a:	60e3      	str	r3, [r4, #12]
 800987c:	2302      	movs	r3, #2
 800987e:	4313      	orrs	r3, r2
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	7833      	ldrb	r3, [r6, #0]
 8009884:	2b2e      	cmp	r3, #46	; 0x2e
 8009886:	d10a      	bne.n	800989e <_vfiprintf_r+0x15a>
 8009888:	7873      	ldrb	r3, [r6, #1]
 800988a:	2b2a      	cmp	r3, #42	; 0x2a
 800988c:	d135      	bne.n	80098fa <_vfiprintf_r+0x1b6>
 800988e:	9b07      	ldr	r3, [sp, #28]
 8009890:	3602      	adds	r6, #2
 8009892:	1d1a      	adds	r2, r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	9207      	str	r2, [sp, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	db2b      	blt.n	80098f4 <_vfiprintf_r+0x1b0>
 800989c:	9309      	str	r3, [sp, #36]	; 0x24
 800989e:	4d33      	ldr	r5, [pc, #204]	; (800996c <_vfiprintf_r+0x228>)
 80098a0:	2203      	movs	r2, #3
 80098a2:	0028      	movs	r0, r5
 80098a4:	7831      	ldrb	r1, [r6, #0]
 80098a6:	f7fe f8dc 	bl	8007a62 <memchr>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d006      	beq.n	80098bc <_vfiprintf_r+0x178>
 80098ae:	2340      	movs	r3, #64	; 0x40
 80098b0:	1b40      	subs	r0, r0, r5
 80098b2:	4083      	lsls	r3, r0
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	3601      	adds	r6, #1
 80098b8:	4313      	orrs	r3, r2
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	7831      	ldrb	r1, [r6, #0]
 80098be:	2206      	movs	r2, #6
 80098c0:	482b      	ldr	r0, [pc, #172]	; (8009970 <_vfiprintf_r+0x22c>)
 80098c2:	1c75      	adds	r5, r6, #1
 80098c4:	7621      	strb	r1, [r4, #24]
 80098c6:	f7fe f8cc 	bl	8007a62 <memchr>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d043      	beq.n	8009956 <_vfiprintf_r+0x212>
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <_vfiprintf_r+0x230>)
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d125      	bne.n	8009920 <_vfiprintf_r+0x1dc>
 80098d4:	2207      	movs	r2, #7
 80098d6:	9b07      	ldr	r3, [sp, #28]
 80098d8:	3307      	adds	r3, #7
 80098da:	4393      	bics	r3, r2
 80098dc:	3308      	adds	r3, #8
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	6963      	ldr	r3, [r4, #20]
 80098e2:	9a04      	ldr	r2, [sp, #16]
 80098e4:	189b      	adds	r3, r3, r2
 80098e6:	6163      	str	r3, [r4, #20]
 80098e8:	e764      	b.n	80097b4 <_vfiprintf_r+0x70>
 80098ea:	4343      	muls	r3, r0
 80098ec:	002e      	movs	r6, r5
 80098ee:	2101      	movs	r1, #1
 80098f0:	189b      	adds	r3, r3, r2
 80098f2:	e7a6      	b.n	8009842 <_vfiprintf_r+0xfe>
 80098f4:	2301      	movs	r3, #1
 80098f6:	425b      	negs	r3, r3
 80098f8:	e7d0      	b.n	800989c <_vfiprintf_r+0x158>
 80098fa:	2300      	movs	r3, #0
 80098fc:	200a      	movs	r0, #10
 80098fe:	001a      	movs	r2, r3
 8009900:	3601      	adds	r6, #1
 8009902:	6063      	str	r3, [r4, #4]
 8009904:	7831      	ldrb	r1, [r6, #0]
 8009906:	1c75      	adds	r5, r6, #1
 8009908:	3930      	subs	r1, #48	; 0x30
 800990a:	2909      	cmp	r1, #9
 800990c:	d903      	bls.n	8009916 <_vfiprintf_r+0x1d2>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c5      	beq.n	800989e <_vfiprintf_r+0x15a>
 8009912:	9209      	str	r2, [sp, #36]	; 0x24
 8009914:	e7c3      	b.n	800989e <_vfiprintf_r+0x15a>
 8009916:	4342      	muls	r2, r0
 8009918:	002e      	movs	r6, r5
 800991a:	2301      	movs	r3, #1
 800991c:	1852      	adds	r2, r2, r1
 800991e:	e7f1      	b.n	8009904 <_vfiprintf_r+0x1c0>
 8009920:	aa07      	add	r2, sp, #28
 8009922:	9200      	str	r2, [sp, #0]
 8009924:	0021      	movs	r1, r4
 8009926:	003a      	movs	r2, r7
 8009928:	4b13      	ldr	r3, [pc, #76]	; (8009978 <_vfiprintf_r+0x234>)
 800992a:	9803      	ldr	r0, [sp, #12]
 800992c:	f7fd fb0c 	bl	8006f48 <_printf_float>
 8009930:	9004      	str	r0, [sp, #16]
 8009932:	9b04      	ldr	r3, [sp, #16]
 8009934:	3301      	adds	r3, #1
 8009936:	d1d3      	bne.n	80098e0 <_vfiprintf_r+0x19c>
 8009938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800993a:	07db      	lsls	r3, r3, #31
 800993c:	d405      	bmi.n	800994a <_vfiprintf_r+0x206>
 800993e:	89bb      	ldrh	r3, [r7, #12]
 8009940:	059b      	lsls	r3, r3, #22
 8009942:	d402      	bmi.n	800994a <_vfiprintf_r+0x206>
 8009944:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009946:	f7fe f88b 	bl	8007a60 <__retarget_lock_release_recursive>
 800994a:	89bb      	ldrh	r3, [r7, #12]
 800994c:	065b      	lsls	r3, r3, #25
 800994e:	d500      	bpl.n	8009952 <_vfiprintf_r+0x20e>
 8009950:	e71d      	b.n	800978e <_vfiprintf_r+0x4a>
 8009952:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009954:	e71d      	b.n	8009792 <_vfiprintf_r+0x4e>
 8009956:	aa07      	add	r2, sp, #28
 8009958:	9200      	str	r2, [sp, #0]
 800995a:	0021      	movs	r1, r4
 800995c:	003a      	movs	r2, r7
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <_vfiprintf_r+0x234>)
 8009960:	9803      	ldr	r0, [sp, #12]
 8009962:	f7fd fdb7 	bl	80074d4 <_printf_i>
 8009966:	e7e3      	b.n	8009930 <_vfiprintf_r+0x1ec>
 8009968:	0800a0c4 	.word	0x0800a0c4
 800996c:	0800a0ca 	.word	0x0800a0ca
 8009970:	0800a0ce 	.word	0x0800a0ce
 8009974:	08006f49 	.word	0x08006f49
 8009978:	08009721 	.word	0x08009721

0800997c <__swbuf_r>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	0006      	movs	r6, r0
 8009980:	000d      	movs	r5, r1
 8009982:	0014      	movs	r4, r2
 8009984:	2800      	cmp	r0, #0
 8009986:	d004      	beq.n	8009992 <__swbuf_r+0x16>
 8009988:	6a03      	ldr	r3, [r0, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <__swbuf_r+0x16>
 800998e:	f7fd ff41 	bl	8007814 <__sinit>
 8009992:	69a3      	ldr	r3, [r4, #24]
 8009994:	60a3      	str	r3, [r4, #8]
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	071b      	lsls	r3, r3, #28
 800999a:	d528      	bpl.n	80099ee <__swbuf_r+0x72>
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d025      	beq.n	80099ee <__swbuf_r+0x72>
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	b2ef      	uxtb	r7, r5
 80099a8:	1ac0      	subs	r0, r0, r3
 80099aa:	6963      	ldr	r3, [r4, #20]
 80099ac:	b2ed      	uxtb	r5, r5
 80099ae:	4283      	cmp	r3, r0
 80099b0:	dc05      	bgt.n	80099be <__swbuf_r+0x42>
 80099b2:	0021      	movs	r1, r4
 80099b4:	0030      	movs	r0, r6
 80099b6:	f7ff fd8b 	bl	80094d0 <_fflush_r>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d11d      	bne.n	80099fa <__swbuf_r+0x7e>
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	3001      	adds	r0, #1
 80099c2:	3b01      	subs	r3, #1
 80099c4:	60a3      	str	r3, [r4, #8]
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	6022      	str	r2, [r4, #0]
 80099cc:	701f      	strb	r7, [r3, #0]
 80099ce:	6963      	ldr	r3, [r4, #20]
 80099d0:	4283      	cmp	r3, r0
 80099d2:	d004      	beq.n	80099de <__swbuf_r+0x62>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d507      	bpl.n	80099ea <__swbuf_r+0x6e>
 80099da:	2d0a      	cmp	r5, #10
 80099dc:	d105      	bne.n	80099ea <__swbuf_r+0x6e>
 80099de:	0021      	movs	r1, r4
 80099e0:	0030      	movs	r0, r6
 80099e2:	f7ff fd75 	bl	80094d0 <_fflush_r>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d107      	bne.n	80099fa <__swbuf_r+0x7e>
 80099ea:	0028      	movs	r0, r5
 80099ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ee:	0021      	movs	r1, r4
 80099f0:	0030      	movs	r0, r6
 80099f2:	f000 f805 	bl	8009a00 <__swsetup_r>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d0d3      	beq.n	80099a2 <__swbuf_r+0x26>
 80099fa:	2501      	movs	r5, #1
 80099fc:	426d      	negs	r5, r5
 80099fe:	e7f4      	b.n	80099ea <__swbuf_r+0x6e>

08009a00 <__swsetup_r>:
 8009a00:	4b30      	ldr	r3, [pc, #192]	; (8009ac4 <__swsetup_r+0xc4>)
 8009a02:	b570      	push	{r4, r5, r6, lr}
 8009a04:	0005      	movs	r5, r0
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	000c      	movs	r4, r1
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d004      	beq.n	8009a18 <__swsetup_r+0x18>
 8009a0e:	6a03      	ldr	r3, [r0, #32]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <__swsetup_r+0x18>
 8009a14:	f7fd fefe 	bl	8007814 <__sinit>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	5ee2      	ldrsh	r2, [r4, r3]
 8009a1c:	b293      	uxth	r3, r2
 8009a1e:	0711      	lsls	r1, r2, #28
 8009a20:	d423      	bmi.n	8009a6a <__swsetup_r+0x6a>
 8009a22:	06d9      	lsls	r1, r3, #27
 8009a24:	d407      	bmi.n	8009a36 <__swsetup_r+0x36>
 8009a26:	2309      	movs	r3, #9
 8009a28:	2001      	movs	r0, #1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	3337      	adds	r3, #55	; 0x37
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	4240      	negs	r0, r0
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
 8009a36:	075b      	lsls	r3, r3, #29
 8009a38:	d513      	bpl.n	8009a62 <__swsetup_r+0x62>
 8009a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	d008      	beq.n	8009a52 <__swsetup_r+0x52>
 8009a40:	0023      	movs	r3, r4
 8009a42:	3344      	adds	r3, #68	; 0x44
 8009a44:	4299      	cmp	r1, r3
 8009a46:	d002      	beq.n	8009a4e <__swsetup_r+0x4e>
 8009a48:	0028      	movs	r0, r5
 8009a4a:	f7fe feb3 	bl	80087b4 <_free_r>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6363      	str	r3, [r4, #52]	; 0x34
 8009a52:	2224      	movs	r2, #36	; 0x24
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	4393      	bics	r3, r2
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6063      	str	r3, [r4, #4]
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	2308      	movs	r3, #8
 8009a64:	89a2      	ldrh	r2, [r4, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <__swsetup_r+0x88>
 8009a70:	21a0      	movs	r1, #160	; 0xa0
 8009a72:	2280      	movs	r2, #128	; 0x80
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	0089      	lsls	r1, r1, #2
 8009a78:	0092      	lsls	r2, r2, #2
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d003      	beq.n	8009a88 <__swsetup_r+0x88>
 8009a80:	0021      	movs	r1, r4
 8009a82:	0028      	movs	r0, r5
 8009a84:	f000 f892 	bl	8009bac <__smakebuf_r>
 8009a88:	220c      	movs	r2, #12
 8009a8a:	5ea3      	ldrsh	r3, [r4, r2]
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	001a      	movs	r2, r3
 8009a90:	b299      	uxth	r1, r3
 8009a92:	4002      	ands	r2, r0
 8009a94:	4203      	tst	r3, r0
 8009a96:	d00f      	beq.n	8009ab8 <__swsetup_r+0xb8>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60a2      	str	r2, [r4, #8]
 8009a9c:	6962      	ldr	r2, [r4, #20]
 8009a9e:	4252      	negs	r2, r2
 8009aa0:	61a2      	str	r2, [r4, #24]
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	6922      	ldr	r2, [r4, #16]
 8009aa6:	4282      	cmp	r2, r0
 8009aa8:	d1c4      	bne.n	8009a34 <__swsetup_r+0x34>
 8009aaa:	0609      	lsls	r1, r1, #24
 8009aac:	d5c2      	bpl.n	8009a34 <__swsetup_r+0x34>
 8009aae:	2240      	movs	r2, #64	; 0x40
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	3801      	subs	r0, #1
 8009ab6:	e7bd      	b.n	8009a34 <__swsetup_r+0x34>
 8009ab8:	0788      	lsls	r0, r1, #30
 8009aba:	d400      	bmi.n	8009abe <__swsetup_r+0xbe>
 8009abc:	6962      	ldr	r2, [r4, #20]
 8009abe:	60a2      	str	r2, [r4, #8]
 8009ac0:	e7ef      	b.n	8009aa2 <__swsetup_r+0xa2>
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	2000006c 	.word	0x2000006c

08009ac8 <_raise_r>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	0004      	movs	r4, r0
 8009acc:	000d      	movs	r5, r1
 8009ace:	291f      	cmp	r1, #31
 8009ad0:	d904      	bls.n	8009adc <_raise_r+0x14>
 8009ad2:	2316      	movs	r3, #22
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	4240      	negs	r0, r0
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d004      	beq.n	8009aec <_raise_r+0x24>
 8009ae2:	008a      	lsls	r2, r1, #2
 8009ae4:	189b      	adds	r3, r3, r2
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	d108      	bne.n	8009afe <_raise_r+0x36>
 8009aec:	0020      	movs	r0, r4
 8009aee:	f000 f831 	bl	8009b54 <_getpid_r>
 8009af2:	002a      	movs	r2, r5
 8009af4:	0001      	movs	r1, r0
 8009af6:	0020      	movs	r0, r4
 8009af8:	f000 f81a 	bl	8009b30 <_kill_r>
 8009afc:	e7ed      	b.n	8009ada <_raise_r+0x12>
 8009afe:	2000      	movs	r0, #0
 8009b00:	2a01      	cmp	r2, #1
 8009b02:	d0ea      	beq.n	8009ada <_raise_r+0x12>
 8009b04:	1c51      	adds	r1, r2, #1
 8009b06:	d103      	bne.n	8009b10 <_raise_r+0x48>
 8009b08:	2316      	movs	r3, #22
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	e7e4      	b.n	8009ada <_raise_r+0x12>
 8009b10:	2400      	movs	r4, #0
 8009b12:	0028      	movs	r0, r5
 8009b14:	601c      	str	r4, [r3, #0]
 8009b16:	4790      	blx	r2
 8009b18:	0020      	movs	r0, r4
 8009b1a:	e7de      	b.n	8009ada <_raise_r+0x12>

08009b1c <raise>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <raise+0x10>)
 8009b20:	0001      	movs	r1, r0
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	f7ff ffd0 	bl	8009ac8 <_raise_r>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	2000006c 	.word	0x2000006c

08009b30 <_kill_r>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	4d06      	ldr	r5, [pc, #24]	; (8009b50 <_kill_r+0x20>)
 8009b36:	0004      	movs	r4, r0
 8009b38:	0008      	movs	r0, r1
 8009b3a:	0011      	movs	r1, r2
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	f7f9 ff0a 	bl	8003956 <_kill>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d103      	bne.n	8009b4e <_kill_r+0x1e>
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d000      	beq.n	8009b4e <_kill_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	2000051c 	.word	0x2000051c

08009b54 <_getpid_r>:
 8009b54:	b510      	push	{r4, lr}
 8009b56:	f7f9 fef8 	bl	800394a <_getpid>
 8009b5a:	bd10      	pop	{r4, pc}

08009b5c <__swhatbuf_r>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	000e      	movs	r6, r1
 8009b60:	001d      	movs	r5, r3
 8009b62:	230e      	movs	r3, #14
 8009b64:	5ec9      	ldrsh	r1, [r1, r3]
 8009b66:	0014      	movs	r4, r2
 8009b68:	b096      	sub	sp, #88	; 0x58
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	da0c      	bge.n	8009b88 <__swhatbuf_r+0x2c>
 8009b6e:	89b2      	ldrh	r2, [r6, #12]
 8009b70:	2380      	movs	r3, #128	; 0x80
 8009b72:	0011      	movs	r1, r2
 8009b74:	4019      	ands	r1, r3
 8009b76:	421a      	tst	r2, r3
 8009b78:	d013      	beq.n	8009ba2 <__swhatbuf_r+0x46>
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	3b40      	subs	r3, #64	; 0x40
 8009b7e:	2000      	movs	r0, #0
 8009b80:	6029      	str	r1, [r5, #0]
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	b016      	add	sp, #88	; 0x58
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	466a      	mov	r2, sp
 8009b8a:	f000 f84d 	bl	8009c28 <_fstat_r>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	dbed      	blt.n	8009b6e <__swhatbuf_r+0x12>
 8009b92:	23f0      	movs	r3, #240	; 0xf0
 8009b94:	9901      	ldr	r1, [sp, #4]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	4019      	ands	r1, r3
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <__swhatbuf_r+0x4c>)
 8009b9c:	18c9      	adds	r1, r1, r3
 8009b9e:	424b      	negs	r3, r1
 8009ba0:	4159      	adcs	r1, r3
 8009ba2:	2380      	movs	r3, #128	; 0x80
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	e7ea      	b.n	8009b7e <__swhatbuf_r+0x22>
 8009ba8:	ffffe000 	.word	0xffffe000

08009bac <__smakebuf_r>:
 8009bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bae:	2602      	movs	r6, #2
 8009bb0:	898b      	ldrh	r3, [r1, #12]
 8009bb2:	0005      	movs	r5, r0
 8009bb4:	000c      	movs	r4, r1
 8009bb6:	4233      	tst	r3, r6
 8009bb8:	d006      	beq.n	8009bc8 <__smakebuf_r+0x1c>
 8009bba:	0023      	movs	r3, r4
 8009bbc:	3347      	adds	r3, #71	; 0x47
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	6163      	str	r3, [r4, #20]
 8009bc6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009bc8:	466a      	mov	r2, sp
 8009bca:	ab01      	add	r3, sp, #4
 8009bcc:	f7ff ffc6 	bl	8009b5c <__swhatbuf_r>
 8009bd0:	9900      	ldr	r1, [sp, #0]
 8009bd2:	0007      	movs	r7, r0
 8009bd4:	0028      	movs	r0, r5
 8009bd6:	f7fe fe63 	bl	80088a0 <_malloc_r>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d108      	bne.n	8009bf0 <__smakebuf_r+0x44>
 8009bde:	220c      	movs	r2, #12
 8009be0:	5ea3      	ldrsh	r3, [r4, r2]
 8009be2:	059a      	lsls	r2, r3, #22
 8009be4:	d4ef      	bmi.n	8009bc6 <__smakebuf_r+0x1a>
 8009be6:	2203      	movs	r2, #3
 8009be8:	4393      	bics	r3, r2
 8009bea:	431e      	orrs	r6, r3
 8009bec:	81a6      	strh	r6, [r4, #12]
 8009bee:	e7e4      	b.n	8009bba <__smakebuf_r+0xe>
 8009bf0:	2380      	movs	r3, #128	; 0x80
 8009bf2:	89a2      	ldrh	r2, [r4, #12]
 8009bf4:	6020      	str	r0, [r4, #0]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	6120      	str	r0, [r4, #16]
 8009bfe:	6163      	str	r3, [r4, #20]
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <__smakebuf_r+0x74>
 8009c06:	0028      	movs	r0, r5
 8009c08:	230e      	movs	r3, #14
 8009c0a:	5ee1      	ldrsh	r1, [r4, r3]
 8009c0c:	f000 f81e 	bl	8009c4c <_isatty_r>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d005      	beq.n	8009c20 <__smakebuf_r+0x74>
 8009c14:	2303      	movs	r3, #3
 8009c16:	89a2      	ldrh	r2, [r4, #12]
 8009c18:	439a      	bics	r2, r3
 8009c1a:	3b02      	subs	r3, #2
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	433b      	orrs	r3, r7
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	e7ce      	b.n	8009bc6 <__smakebuf_r+0x1a>

08009c28 <_fstat_r>:
 8009c28:	2300      	movs	r3, #0
 8009c2a:	b570      	push	{r4, r5, r6, lr}
 8009c2c:	4d06      	ldr	r5, [pc, #24]	; (8009c48 <_fstat_r+0x20>)
 8009c2e:	0004      	movs	r4, r0
 8009c30:	0008      	movs	r0, r1
 8009c32:	0011      	movs	r1, r2
 8009c34:	602b      	str	r3, [r5, #0]
 8009c36:	f7f9 feed 	bl	8003a14 <_fstat>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d103      	bne.n	8009c46 <_fstat_r+0x1e>
 8009c3e:	682b      	ldr	r3, [r5, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d000      	beq.n	8009c46 <_fstat_r+0x1e>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	2000051c 	.word	0x2000051c

08009c4c <_isatty_r>:
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	b570      	push	{r4, r5, r6, lr}
 8009c50:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_isatty_r+0x20>)
 8009c52:	0004      	movs	r4, r0
 8009c54:	0008      	movs	r0, r1
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	f7f9 feea 	bl	8003a30 <_isatty>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d103      	bne.n	8009c68 <_isatty_r+0x1c>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d000      	beq.n	8009c68 <_isatty_r+0x1c>
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	2000051c 	.word	0x2000051c

08009c70 <_init>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c76:	bc08      	pop	{r3}
 8009c78:	469e      	mov	lr, r3
 8009c7a:	4770      	bx	lr

08009c7c <_fini>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr
