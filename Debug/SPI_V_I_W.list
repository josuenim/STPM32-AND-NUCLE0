
SPI_V_I_W.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c68  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08009d28  08009d28  00019d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2bc  0800a2bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2bc  0800a2bc  0001a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c4  0800a2c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a2cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001dc  0800a4a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800a4a8  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000deba  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff3  00000000  00000000  0002e101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000907  00000000  00000000  00030ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c947  00000000  00000000  000315af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebad  00000000  00000000  0004def6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5743  00000000  00000000  0005caa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b34  00000000  00000000  001121e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00115d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009d0c 	.word	0x08009d0c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	08009d0c 	.word	0x08009d0c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f9c1 	bl	80017c0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f911 	bl	8001670 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f9b3 	bl	80017c0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f9a9 	bl	80017c0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f939 	bl	80016f4 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f92f 	bl	80016f4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f81c 	bl	8000510 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_l2d>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0006      	movs	r6, r0
 80004e8:	0008      	movs	r0, r1
 80004ea:	f002 f865 	bl	80025b8 <__aeabi_i2d>
 80004ee:	2200      	movs	r2, #0
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_l2d+0x28>)
 80004f2:	f001 f9c9 	bl	8001888 <__aeabi_dmul>
 80004f6:	000d      	movs	r5, r1
 80004f8:	0004      	movs	r4, r0
 80004fa:	0030      	movs	r0, r6
 80004fc:	f002 f88c 	bl	8002618 <__aeabi_ui2d>
 8000500:	002b      	movs	r3, r5
 8000502:	0022      	movs	r2, r4
 8000504:	f000 fa66 	bl	80009d4 <__aeabi_dadd>
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41f00000 	.word	0x41f00000

08000510 <__udivmoddi4>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4657      	mov	r7, sl
 8000514:	464e      	mov	r6, r9
 8000516:	4645      	mov	r5, r8
 8000518:	46de      	mov	lr, fp
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0004      	movs	r4, r0
 800051e:	000d      	movs	r5, r1
 8000520:	4692      	mov	sl, r2
 8000522:	4699      	mov	r9, r3
 8000524:	b083      	sub	sp, #12
 8000526:	428b      	cmp	r3, r1
 8000528:	d830      	bhi.n	800058c <__udivmoddi4+0x7c>
 800052a:	d02d      	beq.n	8000588 <__udivmoddi4+0x78>
 800052c:	4649      	mov	r1, r9
 800052e:	4650      	mov	r0, sl
 8000530:	f002 f984 	bl	800283c <__clzdi2>
 8000534:	0029      	movs	r1, r5
 8000536:	0006      	movs	r6, r0
 8000538:	0020      	movs	r0, r4
 800053a:	f002 f97f 	bl	800283c <__clzdi2>
 800053e:	1a33      	subs	r3, r6, r0
 8000540:	4698      	mov	r8, r3
 8000542:	3b20      	subs	r3, #32
 8000544:	d434      	bmi.n	80005b0 <__udivmoddi4+0xa0>
 8000546:	469b      	mov	fp, r3
 8000548:	4653      	mov	r3, sl
 800054a:	465a      	mov	r2, fp
 800054c:	4093      	lsls	r3, r2
 800054e:	4642      	mov	r2, r8
 8000550:	001f      	movs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d83b      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800055c:	42af      	cmp	r7, r5
 800055e:	d100      	bne.n	8000562 <__udivmoddi4+0x52>
 8000560:	e079      	b.n	8000656 <__udivmoddi4+0x146>
 8000562:	465b      	mov	r3, fp
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5e>
 800056c:	e076      	b.n	800065c <__udivmoddi4+0x14c>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	465a      	mov	r2, fp
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4642      	mov	r2, r8
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e029      	b.n	80005dc <__udivmoddi4+0xcc>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9cf      	bls.n	800052c <__udivmoddi4+0x1c>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8e>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b003      	add	sp, #12
 80005a4:	bcf0      	pop	{r4, r5, r6, r7}
 80005a6:	46bb      	mov	fp, r7
 80005a8:	46b2      	mov	sl, r6
 80005aa:	46a9      	mov	r9, r5
 80005ac:	46a0      	mov	r8, r4
 80005ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b0:	4642      	mov	r2, r8
 80005b2:	469b      	mov	fp, r3
 80005b4:	2320      	movs	r3, #32
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	4652      	mov	r2, sl
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	4641      	mov	r1, r8
 80005be:	0013      	movs	r3, r2
 80005c0:	464a      	mov	r2, r9
 80005c2:	408a      	lsls	r2, r1
 80005c4:	0017      	movs	r7, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	431f      	orrs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d9c3      	bls.n	800055c <__udivmoddi4+0x4c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	4643      	mov	r3, r8
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0d8      	beq.n	8000594 <__udivmoddi4+0x84>
 80005e2:	07fb      	lsls	r3, r7, #31
 80005e4:	0872      	lsrs	r2, r6, #1
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4646      	mov	r6, r8
 80005ea:	087b      	lsrs	r3, r7, #1
 80005ec:	e00e      	b.n	800060c <__udivmoddi4+0xfc>
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d101      	bne.n	80005f6 <__udivmoddi4+0xe6>
 80005f2:	42a2      	cmp	r2, r4
 80005f4:	d80c      	bhi.n	8000610 <__udivmoddi4+0x100>
 80005f6:	1aa4      	subs	r4, r4, r2
 80005f8:	419d      	sbcs	r5, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	1924      	adds	r4, r4, r4
 80005fe:	416d      	adcs	r5, r5
 8000600:	2100      	movs	r1, #0
 8000602:	3e01      	subs	r6, #1
 8000604:	1824      	adds	r4, r4, r0
 8000606:	414d      	adcs	r5, r1
 8000608:	2e00      	cmp	r6, #0
 800060a:	d006      	beq.n	800061a <__udivmoddi4+0x10a>
 800060c:	42ab      	cmp	r3, r5
 800060e:	d9ee      	bls.n	80005ee <__udivmoddi4+0xde>
 8000610:	3e01      	subs	r6, #1
 8000612:	1924      	adds	r4, r4, r4
 8000614:	416d      	adcs	r5, r5
 8000616:	2e00      	cmp	r6, #0
 8000618:	d1f8      	bne.n	800060c <__udivmoddi4+0xfc>
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	465b      	mov	r3, fp
 8000620:	1900      	adds	r0, r0, r4
 8000622:	4169      	adcs	r1, r5
 8000624:	2b00      	cmp	r3, #0
 8000626:	db24      	blt.n	8000672 <__udivmoddi4+0x162>
 8000628:	002b      	movs	r3, r5
 800062a:	465a      	mov	r2, fp
 800062c:	4644      	mov	r4, r8
 800062e:	40d3      	lsrs	r3, r2
 8000630:	002a      	movs	r2, r5
 8000632:	40e2      	lsrs	r2, r4
 8000634:	001c      	movs	r4, r3
 8000636:	465b      	mov	r3, fp
 8000638:	0015      	movs	r5, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	db2a      	blt.n	8000694 <__udivmoddi4+0x184>
 800063e:	0026      	movs	r6, r4
 8000640:	409e      	lsls	r6, r3
 8000642:	0033      	movs	r3, r6
 8000644:	0026      	movs	r6, r4
 8000646:	4647      	mov	r7, r8
 8000648:	40be      	lsls	r6, r7
 800064a:	0032      	movs	r2, r6
 800064c:	1a80      	subs	r0, r0, r2
 800064e:	4199      	sbcs	r1, r3
 8000650:	9000      	str	r0, [sp, #0]
 8000652:	9101      	str	r1, [sp, #4]
 8000654:	e79e      	b.n	8000594 <__udivmoddi4+0x84>
 8000656:	42a3      	cmp	r3, r4
 8000658:	d8bc      	bhi.n	80005d4 <__udivmoddi4+0xc4>
 800065a:	e782      	b.n	8000562 <__udivmoddi4+0x52>
 800065c:	4642      	mov	r2, r8
 800065e:	2320      	movs	r3, #32
 8000660:	2100      	movs	r1, #0
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	2201      	movs	r2, #1
 800066c:	40da      	lsrs	r2, r3
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	e785      	b.n	800057e <__udivmoddi4+0x6e>
 8000672:	4642      	mov	r2, r8
 8000674:	2320      	movs	r3, #32
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	4646      	mov	r6, r8
 800067c:	409a      	lsls	r2, r3
 800067e:	0023      	movs	r3, r4
 8000680:	40f3      	lsrs	r3, r6
 8000682:	4644      	mov	r4, r8
 8000684:	4313      	orrs	r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	40e2      	lsrs	r2, r4
 800068a:	001c      	movs	r4, r3
 800068c:	465b      	mov	r3, fp
 800068e:	0015      	movs	r5, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	dad4      	bge.n	800063e <__udivmoddi4+0x12e>
 8000694:	4642      	mov	r2, r8
 8000696:	002f      	movs	r7, r5
 8000698:	2320      	movs	r3, #32
 800069a:	0026      	movs	r6, r4
 800069c:	4097      	lsls	r7, r2
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	40de      	lsrs	r6, r3
 80006a2:	003b      	movs	r3, r7
 80006a4:	4333      	orrs	r3, r6
 80006a6:	e7cd      	b.n	8000644 <__udivmoddi4+0x134>

080006a8 <__aeabi_fmul>:
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	464f      	mov	r7, r9
 80006b0:	4646      	mov	r6, r8
 80006b2:	4699      	mov	r9, r3
 80006b4:	46d6      	mov	lr, sl
 80006b6:	0fc3      	lsrs	r3, r0, #31
 80006b8:	0045      	lsls	r5, r0, #1
 80006ba:	4698      	mov	r8, r3
 80006bc:	b5c0      	push	{r6, r7, lr}
 80006be:	464b      	mov	r3, r9
 80006c0:	1c0f      	adds	r7, r1, #0
 80006c2:	0e2d      	lsrs	r5, r5, #24
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fmul+0x20>
 80006c6:	e0cb      	b.n	8000860 <__aeabi_fmul+0x1b8>
 80006c8:	2dff      	cmp	r5, #255	; 0xff
 80006ca:	d100      	bne.n	80006ce <__aeabi_fmul+0x26>
 80006cc:	e0cf      	b.n	800086e <__aeabi_fmul+0x1c6>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	04d2      	lsls	r2, r2, #19
 80006d4:	431a      	orrs	r2, r3
 80006d6:	2300      	movs	r3, #0
 80006d8:	4691      	mov	r9, r2
 80006da:	2600      	movs	r6, #0
 80006dc:	469a      	mov	sl, r3
 80006de:	3d7f      	subs	r5, #127	; 0x7f
 80006e0:	027c      	lsls	r4, r7, #9
 80006e2:	007b      	lsls	r3, r7, #1
 80006e4:	0a64      	lsrs	r4, r4, #9
 80006e6:	0e1b      	lsrs	r3, r3, #24
 80006e8:	0fff      	lsrs	r7, r7, #31
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fmul+0x48>
 80006ee:	e0a9      	b.n	8000844 <__aeabi_fmul+0x19c>
 80006f0:	2bff      	cmp	r3, #255	; 0xff
 80006f2:	d011      	beq.n	8000718 <__aeabi_fmul+0x70>
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	00e4      	lsls	r4, r4, #3
 80006f8:	04d2      	lsls	r2, r2, #19
 80006fa:	4314      	orrs	r4, r2
 80006fc:	4642      	mov	r2, r8
 80006fe:	3b7f      	subs	r3, #127	; 0x7f
 8000700:	195b      	adds	r3, r3, r5
 8000702:	407a      	eors	r2, r7
 8000704:	2000      	movs	r0, #0
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	1c5d      	adds	r5, r3, #1
 800070a:	2e0a      	cmp	r6, #10
 800070c:	dd13      	ble.n	8000736 <__aeabi_fmul+0x8e>
 800070e:	003a      	movs	r2, r7
 8000710:	2e0b      	cmp	r6, #11
 8000712:	d047      	beq.n	80007a4 <__aeabi_fmul+0xfc>
 8000714:	4647      	mov	r7, r8
 8000716:	e03f      	b.n	8000798 <__aeabi_fmul+0xf0>
 8000718:	002b      	movs	r3, r5
 800071a:	33ff      	adds	r3, #255	; 0xff
 800071c:	2c00      	cmp	r4, #0
 800071e:	d11e      	bne.n	800075e <__aeabi_fmul+0xb6>
 8000720:	2202      	movs	r2, #2
 8000722:	4316      	orrs	r6, r2
 8000724:	4642      	mov	r2, r8
 8000726:	3501      	adds	r5, #1
 8000728:	407a      	eors	r2, r7
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	35ff      	adds	r5, #255	; 0xff
 800072e:	2e0a      	cmp	r6, #10
 8000730:	dd00      	ble.n	8000734 <__aeabi_fmul+0x8c>
 8000732:	e0e4      	b.n	80008fe <__aeabi_fmul+0x256>
 8000734:	2002      	movs	r0, #2
 8000736:	2e02      	cmp	r6, #2
 8000738:	dc1c      	bgt.n	8000774 <__aeabi_fmul+0xcc>
 800073a:	3e01      	subs	r6, #1
 800073c:	2e01      	cmp	r6, #1
 800073e:	d842      	bhi.n	80007c6 <__aeabi_fmul+0x11e>
 8000740:	2802      	cmp	r0, #2
 8000742:	d03d      	beq.n	80007c0 <__aeabi_fmul+0x118>
 8000744:	2801      	cmp	r0, #1
 8000746:	d166      	bne.n	8000816 <__aeabi_fmul+0x16e>
 8000748:	2000      	movs	r0, #0
 800074a:	2100      	movs	r1, #0
 800074c:	05c0      	lsls	r0, r0, #23
 800074e:	4308      	orrs	r0, r1
 8000750:	07d2      	lsls	r2, r2, #31
 8000752:	4310      	orrs	r0, r2
 8000754:	bce0      	pop	{r5, r6, r7}
 8000756:	46ba      	mov	sl, r7
 8000758:	46b1      	mov	r9, r6
 800075a:	46a8      	mov	r8, r5
 800075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075e:	2203      	movs	r2, #3
 8000760:	4316      	orrs	r6, r2
 8000762:	4642      	mov	r2, r8
 8000764:	3501      	adds	r5, #1
 8000766:	407a      	eors	r2, r7
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	35ff      	adds	r5, #255	; 0xff
 800076c:	2e0a      	cmp	r6, #10
 800076e:	dd00      	ble.n	8000772 <__aeabi_fmul+0xca>
 8000770:	e0e4      	b.n	800093c <__aeabi_fmul+0x294>
 8000772:	2003      	movs	r0, #3
 8000774:	2101      	movs	r1, #1
 8000776:	40b1      	lsls	r1, r6
 8000778:	26a6      	movs	r6, #166	; 0xa6
 800077a:	00f6      	lsls	r6, r6, #3
 800077c:	4231      	tst	r1, r6
 800077e:	d10a      	bne.n	8000796 <__aeabi_fmul+0xee>
 8000780:	2690      	movs	r6, #144	; 0x90
 8000782:	00b6      	lsls	r6, r6, #2
 8000784:	4231      	tst	r1, r6
 8000786:	d116      	bne.n	80007b6 <__aeabi_fmul+0x10e>
 8000788:	3eb9      	subs	r6, #185	; 0xb9
 800078a:	3eff      	subs	r6, #255	; 0xff
 800078c:	420e      	tst	r6, r1
 800078e:	d01a      	beq.n	80007c6 <__aeabi_fmul+0x11e>
 8000790:	46a1      	mov	r9, r4
 8000792:	4682      	mov	sl, r0
 8000794:	e000      	b.n	8000798 <__aeabi_fmul+0xf0>
 8000796:	0017      	movs	r7, r2
 8000798:	4653      	mov	r3, sl
 800079a:	003a      	movs	r2, r7
 800079c:	2b02      	cmp	r3, #2
 800079e:	d00f      	beq.n	80007c0 <__aeabi_fmul+0x118>
 80007a0:	464c      	mov	r4, r9
 80007a2:	4650      	mov	r0, sl
 80007a4:	2803      	cmp	r0, #3
 80007a6:	d1cd      	bne.n	8000744 <__aeabi_fmul+0x9c>
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	03c9      	lsls	r1, r1, #15
 80007ac:	4321      	orrs	r1, r4
 80007ae:	0249      	lsls	r1, r1, #9
 80007b0:	20ff      	movs	r0, #255	; 0xff
 80007b2:	0a49      	lsrs	r1, r1, #9
 80007b4:	e7ca      	b.n	800074c <__aeabi_fmul+0xa4>
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	2200      	movs	r2, #0
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	03c9      	lsls	r1, r1, #15
 80007be:	e7c5      	b.n	800074c <__aeabi_fmul+0xa4>
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	2100      	movs	r1, #0
 80007c4:	e7c2      	b.n	800074c <__aeabi_fmul+0xa4>
 80007c6:	0c20      	lsrs	r0, r4, #16
 80007c8:	4649      	mov	r1, r9
 80007ca:	0424      	lsls	r4, r4, #16
 80007cc:	0c24      	lsrs	r4, r4, #16
 80007ce:	0027      	movs	r7, r4
 80007d0:	0c0e      	lsrs	r6, r1, #16
 80007d2:	0409      	lsls	r1, r1, #16
 80007d4:	0c09      	lsrs	r1, r1, #16
 80007d6:	4374      	muls	r4, r6
 80007d8:	434f      	muls	r7, r1
 80007da:	4346      	muls	r6, r0
 80007dc:	4348      	muls	r0, r1
 80007de:	0c39      	lsrs	r1, r7, #16
 80007e0:	1900      	adds	r0, r0, r4
 80007e2:	1809      	adds	r1, r1, r0
 80007e4:	428c      	cmp	r4, r1
 80007e6:	d903      	bls.n	80007f0 <__aeabi_fmul+0x148>
 80007e8:	2080      	movs	r0, #128	; 0x80
 80007ea:	0240      	lsls	r0, r0, #9
 80007ec:	4684      	mov	ip, r0
 80007ee:	4466      	add	r6, ip
 80007f0:	043f      	lsls	r7, r7, #16
 80007f2:	0408      	lsls	r0, r1, #16
 80007f4:	0c3f      	lsrs	r7, r7, #16
 80007f6:	19c0      	adds	r0, r0, r7
 80007f8:	0184      	lsls	r4, r0, #6
 80007fa:	1e67      	subs	r7, r4, #1
 80007fc:	41bc      	sbcs	r4, r7
 80007fe:	0c09      	lsrs	r1, r1, #16
 8000800:	0e80      	lsrs	r0, r0, #26
 8000802:	1989      	adds	r1, r1, r6
 8000804:	4304      	orrs	r4, r0
 8000806:	0189      	lsls	r1, r1, #6
 8000808:	430c      	orrs	r4, r1
 800080a:	0109      	lsls	r1, r1, #4
 800080c:	d571      	bpl.n	80008f2 <__aeabi_fmul+0x24a>
 800080e:	2301      	movs	r3, #1
 8000810:	0861      	lsrs	r1, r4, #1
 8000812:	401c      	ands	r4, r3
 8000814:	430c      	orrs	r4, r1
 8000816:	002b      	movs	r3, r5
 8000818:	337f      	adds	r3, #127	; 0x7f
 800081a:	2b00      	cmp	r3, #0
 800081c:	dd51      	ble.n	80008c2 <__aeabi_fmul+0x21a>
 800081e:	0761      	lsls	r1, r4, #29
 8000820:	d004      	beq.n	800082c <__aeabi_fmul+0x184>
 8000822:	210f      	movs	r1, #15
 8000824:	4021      	ands	r1, r4
 8000826:	2904      	cmp	r1, #4
 8000828:	d000      	beq.n	800082c <__aeabi_fmul+0x184>
 800082a:	3404      	adds	r4, #4
 800082c:	0121      	lsls	r1, r4, #4
 800082e:	d503      	bpl.n	8000838 <__aeabi_fmul+0x190>
 8000830:	4b43      	ldr	r3, [pc, #268]	; (8000940 <__aeabi_fmul+0x298>)
 8000832:	401c      	ands	r4, r3
 8000834:	002b      	movs	r3, r5
 8000836:	3380      	adds	r3, #128	; 0x80
 8000838:	2bfe      	cmp	r3, #254	; 0xfe
 800083a:	dcc1      	bgt.n	80007c0 <__aeabi_fmul+0x118>
 800083c:	01a1      	lsls	r1, r4, #6
 800083e:	0a49      	lsrs	r1, r1, #9
 8000840:	b2d8      	uxtb	r0, r3
 8000842:	e783      	b.n	800074c <__aeabi_fmul+0xa4>
 8000844:	2c00      	cmp	r4, #0
 8000846:	d12c      	bne.n	80008a2 <__aeabi_fmul+0x1fa>
 8000848:	2301      	movs	r3, #1
 800084a:	4642      	mov	r2, r8
 800084c:	431e      	orrs	r6, r3
 800084e:	002b      	movs	r3, r5
 8000850:	407a      	eors	r2, r7
 8000852:	2001      	movs	r0, #1
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	1c5d      	adds	r5, r3, #1
 8000858:	2e0a      	cmp	r6, #10
 800085a:	dd00      	ble.n	800085e <__aeabi_fmul+0x1b6>
 800085c:	e757      	b.n	800070e <__aeabi_fmul+0x66>
 800085e:	e76a      	b.n	8000736 <__aeabi_fmul+0x8e>
 8000860:	2b00      	cmp	r3, #0
 8000862:	d110      	bne.n	8000886 <__aeabi_fmul+0x1de>
 8000864:	2301      	movs	r3, #1
 8000866:	2604      	movs	r6, #4
 8000868:	2500      	movs	r5, #0
 800086a:	469a      	mov	sl, r3
 800086c:	e738      	b.n	80006e0 <__aeabi_fmul+0x38>
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <__aeabi_fmul+0x1d4>
 8000872:	2302      	movs	r3, #2
 8000874:	2608      	movs	r6, #8
 8000876:	25ff      	movs	r5, #255	; 0xff
 8000878:	469a      	mov	sl, r3
 800087a:	e731      	b.n	80006e0 <__aeabi_fmul+0x38>
 800087c:	2303      	movs	r3, #3
 800087e:	260c      	movs	r6, #12
 8000880:	25ff      	movs	r5, #255	; 0xff
 8000882:	469a      	mov	sl, r3
 8000884:	e72c      	b.n	80006e0 <__aeabi_fmul+0x38>
 8000886:	4648      	mov	r0, r9
 8000888:	f001 ffba 	bl	8002800 <__clzsi2>
 800088c:	464a      	mov	r2, r9
 800088e:	1f43      	subs	r3, r0, #5
 8000890:	2576      	movs	r5, #118	; 0x76
 8000892:	409a      	lsls	r2, r3
 8000894:	2300      	movs	r3, #0
 8000896:	426d      	negs	r5, r5
 8000898:	4691      	mov	r9, r2
 800089a:	2600      	movs	r6, #0
 800089c:	469a      	mov	sl, r3
 800089e:	1a2d      	subs	r5, r5, r0
 80008a0:	e71e      	b.n	80006e0 <__aeabi_fmul+0x38>
 80008a2:	0020      	movs	r0, r4
 80008a4:	f001 ffac 	bl	8002800 <__clzsi2>
 80008a8:	4642      	mov	r2, r8
 80008aa:	1f43      	subs	r3, r0, #5
 80008ac:	409c      	lsls	r4, r3
 80008ae:	1a2b      	subs	r3, r5, r0
 80008b0:	3b76      	subs	r3, #118	; 0x76
 80008b2:	407a      	eors	r2, r7
 80008b4:	2000      	movs	r0, #0
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	1c5d      	adds	r5, r3, #1
 80008ba:	2e0a      	cmp	r6, #10
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fmul+0x218>
 80008be:	e726      	b.n	800070e <__aeabi_fmul+0x66>
 80008c0:	e739      	b.n	8000736 <__aeabi_fmul+0x8e>
 80008c2:	2101      	movs	r1, #1
 80008c4:	1acb      	subs	r3, r1, r3
 80008c6:	2b1b      	cmp	r3, #27
 80008c8:	dd00      	ble.n	80008cc <__aeabi_fmul+0x224>
 80008ca:	e73d      	b.n	8000748 <__aeabi_fmul+0xa0>
 80008cc:	359e      	adds	r5, #158	; 0x9e
 80008ce:	0021      	movs	r1, r4
 80008d0:	40ac      	lsls	r4, r5
 80008d2:	40d9      	lsrs	r1, r3
 80008d4:	1e63      	subs	r3, r4, #1
 80008d6:	419c      	sbcs	r4, r3
 80008d8:	4321      	orrs	r1, r4
 80008da:	074b      	lsls	r3, r1, #29
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fmul+0x240>
 80008de:	230f      	movs	r3, #15
 80008e0:	400b      	ands	r3, r1
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fmul+0x240>
 80008e6:	3104      	adds	r1, #4
 80008e8:	014b      	lsls	r3, r1, #5
 80008ea:	d504      	bpl.n	80008f6 <__aeabi_fmul+0x24e>
 80008ec:	2001      	movs	r0, #1
 80008ee:	2100      	movs	r1, #0
 80008f0:	e72c      	b.n	800074c <__aeabi_fmul+0xa4>
 80008f2:	001d      	movs	r5, r3
 80008f4:	e78f      	b.n	8000816 <__aeabi_fmul+0x16e>
 80008f6:	0189      	lsls	r1, r1, #6
 80008f8:	2000      	movs	r0, #0
 80008fa:	0a49      	lsrs	r1, r1, #9
 80008fc:	e726      	b.n	800074c <__aeabi_fmul+0xa4>
 80008fe:	2302      	movs	r3, #2
 8000900:	2e0f      	cmp	r6, #15
 8000902:	d10c      	bne.n	800091e <__aeabi_fmul+0x276>
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	464b      	mov	r3, r9
 8000908:	03c9      	lsls	r1, r1, #15
 800090a:	420b      	tst	r3, r1
 800090c:	d00d      	beq.n	800092a <__aeabi_fmul+0x282>
 800090e:	420c      	tst	r4, r1
 8000910:	d10b      	bne.n	800092a <__aeabi_fmul+0x282>
 8000912:	4321      	orrs	r1, r4
 8000914:	0249      	lsls	r1, r1, #9
 8000916:	003a      	movs	r2, r7
 8000918:	20ff      	movs	r0, #255	; 0xff
 800091a:	0a49      	lsrs	r1, r1, #9
 800091c:	e716      	b.n	800074c <__aeabi_fmul+0xa4>
 800091e:	2e0b      	cmp	r6, #11
 8000920:	d000      	beq.n	8000924 <__aeabi_fmul+0x27c>
 8000922:	e6f7      	b.n	8000714 <__aeabi_fmul+0x6c>
 8000924:	46a1      	mov	r9, r4
 8000926:	469a      	mov	sl, r3
 8000928:	e736      	b.n	8000798 <__aeabi_fmul+0xf0>
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	464b      	mov	r3, r9
 800092e:	03c9      	lsls	r1, r1, #15
 8000930:	4319      	orrs	r1, r3
 8000932:	0249      	lsls	r1, r1, #9
 8000934:	4642      	mov	r2, r8
 8000936:	20ff      	movs	r0, #255	; 0xff
 8000938:	0a49      	lsrs	r1, r1, #9
 800093a:	e707      	b.n	800074c <__aeabi_fmul+0xa4>
 800093c:	2303      	movs	r3, #3
 800093e:	e7df      	b.n	8000900 <__aeabi_fmul+0x258>
 8000940:	f7ffffff 	.word	0xf7ffffff

08000944 <__aeabi_ui2f>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	1e04      	subs	r4, r0, #0
 8000948:	d00e      	beq.n	8000968 <__aeabi_ui2f+0x24>
 800094a:	f001 ff59 	bl	8002800 <__clzsi2>
 800094e:	239e      	movs	r3, #158	; 0x9e
 8000950:	0001      	movs	r1, r0
 8000952:	1a1b      	subs	r3, r3, r0
 8000954:	2b96      	cmp	r3, #150	; 0x96
 8000956:	dc0c      	bgt.n	8000972 <__aeabi_ui2f+0x2e>
 8000958:	2808      	cmp	r0, #8
 800095a:	d02c      	beq.n	80009b6 <__aeabi_ui2f+0x72>
 800095c:	3908      	subs	r1, #8
 800095e:	408c      	lsls	r4, r1
 8000960:	0264      	lsls	r4, r4, #9
 8000962:	0a64      	lsrs	r4, r4, #9
 8000964:	b2d8      	uxtb	r0, r3
 8000966:	e001      	b.n	800096c <__aeabi_ui2f+0x28>
 8000968:	2000      	movs	r0, #0
 800096a:	2400      	movs	r4, #0
 800096c:	05c0      	lsls	r0, r0, #23
 800096e:	4320      	orrs	r0, r4
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	2b99      	cmp	r3, #153	; 0x99
 8000974:	dd0a      	ble.n	800098c <__aeabi_ui2f+0x48>
 8000976:	0002      	movs	r2, r0
 8000978:	0020      	movs	r0, r4
 800097a:	321b      	adds	r2, #27
 800097c:	4090      	lsls	r0, r2
 800097e:	0002      	movs	r2, r0
 8000980:	1e50      	subs	r0, r2, #1
 8000982:	4182      	sbcs	r2, r0
 8000984:	2005      	movs	r0, #5
 8000986:	1a40      	subs	r0, r0, r1
 8000988:	40c4      	lsrs	r4, r0
 800098a:	4314      	orrs	r4, r2
 800098c:	2905      	cmp	r1, #5
 800098e:	dc16      	bgt.n	80009be <__aeabi_ui2f+0x7a>
 8000990:	0022      	movs	r2, r4
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <__aeabi_ui2f+0x8c>)
 8000994:	4002      	ands	r2, r0
 8000996:	0765      	lsls	r5, r4, #29
 8000998:	d009      	beq.n	80009ae <__aeabi_ui2f+0x6a>
 800099a:	250f      	movs	r5, #15
 800099c:	402c      	ands	r4, r5
 800099e:	2c04      	cmp	r4, #4
 80009a0:	d005      	beq.n	80009ae <__aeabi_ui2f+0x6a>
 80009a2:	3204      	adds	r2, #4
 80009a4:	0154      	lsls	r4, r2, #5
 80009a6:	d502      	bpl.n	80009ae <__aeabi_ui2f+0x6a>
 80009a8:	239f      	movs	r3, #159	; 0x9f
 80009aa:	4002      	ands	r2, r0
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	0192      	lsls	r2, r2, #6
 80009b0:	0a54      	lsrs	r4, r2, #9
 80009b2:	b2d8      	uxtb	r0, r3
 80009b4:	e7da      	b.n	800096c <__aeabi_ui2f+0x28>
 80009b6:	0264      	lsls	r4, r4, #9
 80009b8:	2096      	movs	r0, #150	; 0x96
 80009ba:	0a64      	lsrs	r4, r4, #9
 80009bc:	e7d6      	b.n	800096c <__aeabi_ui2f+0x28>
 80009be:	1f4a      	subs	r2, r1, #5
 80009c0:	4094      	lsls	r4, r2
 80009c2:	0022      	movs	r2, r4
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <__aeabi_ui2f+0x8c>)
 80009c6:	4002      	ands	r2, r0
 80009c8:	0765      	lsls	r5, r4, #29
 80009ca:	d0f0      	beq.n	80009ae <__aeabi_ui2f+0x6a>
 80009cc:	e7e5      	b.n	800099a <__aeabi_ui2f+0x56>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	fbffffff 	.word	0xfbffffff

080009d4 <__aeabi_dadd>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	464f      	mov	r7, r9
 80009d8:	4646      	mov	r6, r8
 80009da:	46d6      	mov	lr, sl
 80009dc:	0004      	movs	r4, r0
 80009de:	b5c0      	push	{r6, r7, lr}
 80009e0:	001f      	movs	r7, r3
 80009e2:	030b      	lsls	r3, r1, #12
 80009e4:	0010      	movs	r0, r2
 80009e6:	004e      	lsls	r6, r1, #1
 80009e8:	0a5b      	lsrs	r3, r3, #9
 80009ea:	0fcd      	lsrs	r5, r1, #31
 80009ec:	0f61      	lsrs	r1, r4, #29
 80009ee:	007a      	lsls	r2, r7, #1
 80009f0:	4319      	orrs	r1, r3
 80009f2:	00e3      	lsls	r3, r4, #3
 80009f4:	033c      	lsls	r4, r7, #12
 80009f6:	0fff      	lsrs	r7, r7, #31
 80009f8:	46bc      	mov	ip, r7
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	0f47      	lsrs	r7, r0, #29
 80009fe:	4327      	orrs	r7, r4
 8000a00:	0d76      	lsrs	r6, r6, #21
 8000a02:	0d52      	lsrs	r2, r2, #21
 8000a04:	00c0      	lsls	r0, r0, #3
 8000a06:	46b9      	mov	r9, r7
 8000a08:	4680      	mov	r8, r0
 8000a0a:	1ab7      	subs	r7, r6, r2
 8000a0c:	4565      	cmp	r5, ip
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x3e>
 8000a10:	e09b      	b.n	8000b4a <__aeabi_dadd+0x176>
 8000a12:	2f00      	cmp	r7, #0
 8000a14:	dc00      	bgt.n	8000a18 <__aeabi_dadd+0x44>
 8000a16:	e084      	b.n	8000b22 <__aeabi_dadd+0x14e>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x4a>
 8000a1c:	e0be      	b.n	8000b9c <__aeabi_dadd+0x1c8>
 8000a1e:	4ac8      	ldr	r2, [pc, #800]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000a20:	4296      	cmp	r6, r2
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x52>
 8000a24:	e124      	b.n	8000c70 <__aeabi_dadd+0x29c>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	464c      	mov	r4, r9
 8000a2a:	0412      	lsls	r2, r2, #16
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	46a1      	mov	r9, r4
 8000a30:	2f38      	cmp	r7, #56	; 0x38
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x62>
 8000a34:	e167      	b.n	8000d06 <__aeabi_dadd+0x332>
 8000a36:	2f1f      	cmp	r7, #31
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dadd+0x68>
 8000a3a:	e1d6      	b.n	8000dea <__aeabi_dadd+0x416>
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	464c      	mov	r4, r9
 8000a40:	1bd2      	subs	r2, r2, r7
 8000a42:	4094      	lsls	r4, r2
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4644      	mov	r4, r8
 8000a48:	40fc      	lsrs	r4, r7
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	4654      	mov	r4, sl
 8000a4e:	4304      	orrs	r4, r0
 8000a50:	4640      	mov	r0, r8
 8000a52:	4090      	lsls	r0, r2
 8000a54:	1e42      	subs	r2, r0, #1
 8000a56:	4190      	sbcs	r0, r2
 8000a58:	464a      	mov	r2, r9
 8000a5a:	40fa      	lsrs	r2, r7
 8000a5c:	4304      	orrs	r4, r0
 8000a5e:	1a89      	subs	r1, r1, r2
 8000a60:	1b1c      	subs	r4, r3, r4
 8000a62:	42a3      	cmp	r3, r4
 8000a64:	4192      	sbcs	r2, r2
 8000a66:	4252      	negs	r2, r2
 8000a68:	1a8b      	subs	r3, r1, r2
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	d400      	bmi.n	8000a74 <__aeabi_dadd+0xa0>
 8000a72:	e0d4      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000a74:	4653      	mov	r3, sl
 8000a76:	025a      	lsls	r2, r3, #9
 8000a78:	0a53      	lsrs	r3, r2, #9
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0xb0>
 8000a82:	e104      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000a84:	4650      	mov	r0, sl
 8000a86:	f001 febb 	bl	8002800 <__clzsi2>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	2220      	movs	r2, #32
 8000a90:	0020      	movs	r0, r4
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4651      	mov	r1, sl
 8000a96:	40d0      	lsrs	r0, r2
 8000a98:	4099      	lsls	r1, r3
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	409c      	lsls	r4, r3
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	42b3      	cmp	r3, r6
 8000aa2:	da00      	bge.n	8000aa6 <__aeabi_dadd+0xd2>
 8000aa4:	e102      	b.n	8000cac <__aeabi_dadd+0x2d8>
 8000aa6:	1b9b      	subs	r3, r3, r6
 8000aa8:	1c59      	adds	r1, r3, #1
 8000aaa:	291f      	cmp	r1, #31
 8000aac:	dd00      	ble.n	8000ab0 <__aeabi_dadd+0xdc>
 8000aae:	e0a7      	b.n	8000c00 <__aeabi_dadd+0x22c>
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	0026      	movs	r6, r4
 8000ab6:	1a5b      	subs	r3, r3, r1
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	4098      	lsls	r0, r3
 8000abc:	40ce      	lsrs	r6, r1
 8000abe:	40ca      	lsrs	r2, r1
 8000ac0:	1e63      	subs	r3, r4, #1
 8000ac2:	419c      	sbcs	r4, r3
 8000ac4:	4330      	orrs	r0, r6
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	2600      	movs	r6, #0
 8000aca:	4304      	orrs	r4, r0
 8000acc:	0763      	lsls	r3, r4, #29
 8000ace:	d009      	beq.n	8000ae4 <__aeabi_dadd+0x110>
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	4023      	ands	r3, r4
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d005      	beq.n	8000ae4 <__aeabi_dadd+0x110>
 8000ad8:	1d23      	adds	r3, r4, #4
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	41a4      	sbcs	r4, r4
 8000ade:	4264      	negs	r4, r4
 8000ae0:	44a2      	add	sl, r4
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	4653      	mov	r3, sl
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_dadd+0x118>
 8000aea:	e09b      	b.n	8000c24 <__aeabi_dadd+0x250>
 8000aec:	4b94      	ldr	r3, [pc, #592]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000aee:	3601      	adds	r6, #1
 8000af0:	429e      	cmp	r6, r3
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x122>
 8000af4:	e0b8      	b.n	8000c68 <__aeabi_dadd+0x294>
 8000af6:	4653      	mov	r3, sl
 8000af8:	4992      	ldr	r1, [pc, #584]	; (8000d44 <__aeabi_dadd+0x370>)
 8000afa:	08e4      	lsrs	r4, r4, #3
 8000afc:	400b      	ands	r3, r1
 8000afe:	0019      	movs	r1, r3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4323      	orrs	r3, r4
 8000b04:	0572      	lsls	r2, r6, #21
 8000b06:	024c      	lsls	r4, r1, #9
 8000b08:	0b24      	lsrs	r4, r4, #12
 8000b0a:	0d52      	lsrs	r2, r2, #21
 8000b0c:	0512      	lsls	r2, r2, #20
 8000b0e:	07ed      	lsls	r5, r5, #31
 8000b10:	4322      	orrs	r2, r4
 8000b12:	432a      	orrs	r2, r5
 8000b14:	0018      	movs	r0, r3
 8000b16:	0011      	movs	r1, r2
 8000b18:	bce0      	pop	{r5, r6, r7}
 8000b1a:	46ba      	mov	sl, r7
 8000b1c:	46b1      	mov	r9, r6
 8000b1e:	46a8      	mov	r8, r5
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d048      	beq.n	8000bb8 <__aeabi_dadd+0x1e4>
 8000b26:	1b97      	subs	r7, r2, r6
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x15a>
 8000b2c:	e10e      	b.n	8000d4c <__aeabi_dadd+0x378>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	431c      	orrs	r4, r3
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x162>
 8000b34:	e1b7      	b.n	8000ea6 <__aeabi_dadd+0x4d2>
 8000b36:	1e7c      	subs	r4, r7, #1
 8000b38:	2f01      	cmp	r7, #1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x16a>
 8000b3c:	e226      	b.n	8000f8c <__aeabi_dadd+0x5b8>
 8000b3e:	4d80      	ldr	r5, [pc, #512]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000b40:	42af      	cmp	r7, r5
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x172>
 8000b44:	e1d5      	b.n	8000ef2 <__aeabi_dadd+0x51e>
 8000b46:	0027      	movs	r7, r4
 8000b48:	e107      	b.n	8000d5a <__aeabi_dadd+0x386>
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	dc00      	bgt.n	8000b50 <__aeabi_dadd+0x17c>
 8000b4e:	e0b2      	b.n	8000cb6 <__aeabi_dadd+0x2e2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d047      	beq.n	8000be4 <__aeabi_dadd+0x210>
 8000b54:	4a7a      	ldr	r2, [pc, #488]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000b56:	4296      	cmp	r6, r2
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x188>
 8000b5a:	e089      	b.n	8000c70 <__aeabi_dadd+0x29c>
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	464c      	mov	r4, r9
 8000b60:	0412      	lsls	r2, r2, #16
 8000b62:	4314      	orrs	r4, r2
 8000b64:	46a1      	mov	r9, r4
 8000b66:	2f38      	cmp	r7, #56	; 0x38
 8000b68:	dc6b      	bgt.n	8000c42 <__aeabi_dadd+0x26e>
 8000b6a:	2f1f      	cmp	r7, #31
 8000b6c:	dc00      	bgt.n	8000b70 <__aeabi_dadd+0x19c>
 8000b6e:	e16e      	b.n	8000e4e <__aeabi_dadd+0x47a>
 8000b70:	003a      	movs	r2, r7
 8000b72:	4648      	mov	r0, r9
 8000b74:	3a20      	subs	r2, #32
 8000b76:	40d0      	lsrs	r0, r2
 8000b78:	4684      	mov	ip, r0
 8000b7a:	2f20      	cmp	r7, #32
 8000b7c:	d007      	beq.n	8000b8e <__aeabi_dadd+0x1ba>
 8000b7e:	2240      	movs	r2, #64	; 0x40
 8000b80:	4648      	mov	r0, r9
 8000b82:	1bd2      	subs	r2, r2, r7
 8000b84:	4090      	lsls	r0, r2
 8000b86:	0002      	movs	r2, r0
 8000b88:	4640      	mov	r0, r8
 8000b8a:	4310      	orrs	r0, r2
 8000b8c:	4680      	mov	r8, r0
 8000b8e:	4640      	mov	r0, r8
 8000b90:	1e42      	subs	r2, r0, #1
 8000b92:	4190      	sbcs	r0, r2
 8000b94:	4662      	mov	r2, ip
 8000b96:	0004      	movs	r4, r0
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	e057      	b.n	8000c4c <__aeabi_dadd+0x278>
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	4302      	orrs	r2, r0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x1d0>
 8000ba2:	e103      	b.n	8000dac <__aeabi_dadd+0x3d8>
 8000ba4:	1e7a      	subs	r2, r7, #1
 8000ba6:	2f01      	cmp	r7, #1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x1d8>
 8000baa:	e193      	b.n	8000ed4 <__aeabi_dadd+0x500>
 8000bac:	4c64      	ldr	r4, [pc, #400]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000bae:	42a7      	cmp	r7, r4
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x1e0>
 8000bb2:	e18a      	b.n	8000eca <__aeabi_dadd+0x4f6>
 8000bb4:	0017      	movs	r7, r2
 8000bb6:	e73b      	b.n	8000a30 <__aeabi_dadd+0x5c>
 8000bb8:	4c63      	ldr	r4, [pc, #396]	; (8000d48 <__aeabi_dadd+0x374>)
 8000bba:	1c72      	adds	r2, r6, #1
 8000bbc:	4222      	tst	r2, r4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x1ee>
 8000bc0:	e0e0      	b.n	8000d84 <__aeabi_dadd+0x3b0>
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dadd+0x1f8>
 8000bca:	e174      	b.n	8000eb6 <__aeabi_dadd+0x4e2>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x1fe>
 8000bd0:	e1d0      	b.n	8000f74 <__aeabi_dadd+0x5a0>
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4302      	orrs	r2, r0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x206>
 8000bd8:	e1e3      	b.n	8000fa2 <__aeabi_dadd+0x5ce>
 8000bda:	074a      	lsls	r2, r1, #29
 8000bdc:	08db      	lsrs	r3, r3, #3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	e029      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4302      	orrs	r2, r0
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x218>
 8000bea:	e17d      	b.n	8000ee8 <__aeabi_dadd+0x514>
 8000bec:	1e7a      	subs	r2, r7, #1
 8000bee:	2f01      	cmp	r7, #1
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x220>
 8000bf2:	e0e0      	b.n	8000db6 <__aeabi_dadd+0x3e2>
 8000bf4:	4c52      	ldr	r4, [pc, #328]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000bf6:	42a7      	cmp	r7, r4
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x228>
 8000bfa:	e166      	b.n	8000eca <__aeabi_dadd+0x4f6>
 8000bfc:	0017      	movs	r7, r2
 8000bfe:	e7b2      	b.n	8000b66 <__aeabi_dadd+0x192>
 8000c00:	0010      	movs	r0, r2
 8000c02:	3b1f      	subs	r3, #31
 8000c04:	40d8      	lsrs	r0, r3
 8000c06:	2920      	cmp	r1, #32
 8000c08:	d003      	beq.n	8000c12 <__aeabi_dadd+0x23e>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	4314      	orrs	r4, r2
 8000c12:	1e63      	subs	r3, r4, #1
 8000c14:	419c      	sbcs	r4, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	2600      	movs	r6, #0
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	4304      	orrs	r4, r0
 8000c1e:	0763      	lsls	r3, r4, #29
 8000c20:	d000      	beq.n	8000c24 <__aeabi_dadd+0x250>
 8000c22:	e755      	b.n	8000ad0 <__aeabi_dadd+0xfc>
 8000c24:	4652      	mov	r2, sl
 8000c26:	08e3      	lsrs	r3, r4, #3
 8000c28:	0752      	lsls	r2, r2, #29
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	0037      	movs	r7, r6
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	4a43      	ldr	r2, [pc, #268]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c34:	4297      	cmp	r7, r2
 8000c36:	d01f      	beq.n	8000c78 <__aeabi_dadd+0x2a4>
 8000c38:	0309      	lsls	r1, r1, #12
 8000c3a:	057a      	lsls	r2, r7, #21
 8000c3c:	0b0c      	lsrs	r4, r1, #12
 8000c3e:	0d52      	lsrs	r2, r2, #21
 8000c40:	e764      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c42:	4642      	mov	r2, r8
 8000c44:	464c      	mov	r4, r9
 8000c46:	4314      	orrs	r4, r2
 8000c48:	1e62      	subs	r2, r4, #1
 8000c4a:	4194      	sbcs	r4, r2
 8000c4c:	18e4      	adds	r4, r4, r3
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	4192      	sbcs	r2, r2
 8000c52:	4252      	negs	r2, r2
 8000c54:	4692      	mov	sl, r2
 8000c56:	448a      	add	sl, r1
 8000c58:	4653      	mov	r3, sl
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	d5df      	bpl.n	8000c1e <__aeabi_dadd+0x24a>
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c60:	3601      	adds	r6, #1
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d000      	beq.n	8000c68 <__aeabi_dadd+0x294>
 8000c66:	e0b3      	b.n	8000dd0 <__aeabi_dadd+0x3fc>
 8000c68:	0032      	movs	r2, r6
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e74d      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	001a      	movs	r2, r3
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x2ac>
 8000c7e:	e200      	b.n	8001082 <__aeabi_dadd+0x6ae>
 8000c80:	2480      	movs	r4, #128	; 0x80
 8000c82:	0324      	lsls	r4, r4, #12
 8000c84:	430c      	orrs	r4, r1
 8000c86:	0324      	lsls	r4, r4, #12
 8000c88:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000c8a:	0b24      	lsrs	r4, r4, #12
 8000c8c:	e73e      	b.n	8000b0c <__aeabi_dadd+0x138>
 8000c8e:	0020      	movs	r0, r4
 8000c90:	f001 fdb6 	bl	8002800 <__clzsi2>
 8000c94:	0003      	movs	r3, r0
 8000c96:	3318      	adds	r3, #24
 8000c98:	2b1f      	cmp	r3, #31
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_dadd+0x2ca>
 8000c9c:	e6f7      	b.n	8000a8e <__aeabi_dadd+0xba>
 8000c9e:	0022      	movs	r2, r4
 8000ca0:	3808      	subs	r0, #8
 8000ca2:	4082      	lsls	r2, r0
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	42b3      	cmp	r3, r6
 8000ca8:	db00      	blt.n	8000cac <__aeabi_dadd+0x2d8>
 8000caa:	e6fc      	b.n	8000aa6 <__aeabi_dadd+0xd2>
 8000cac:	1af6      	subs	r6, r6, r3
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <__aeabi_dadd+0x370>)
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4692      	mov	sl, r2
 8000cb4:	e70a      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000cb6:	2f00      	cmp	r7, #0
 8000cb8:	d02b      	beq.n	8000d12 <__aeabi_dadd+0x33e>
 8000cba:	1b97      	subs	r7, r2, r6
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x2ee>
 8000cc0:	e0b8      	b.n	8000e34 <__aeabi_dadd+0x460>
 8000cc2:	4c1f      	ldr	r4, [pc, #124]	; (8000d40 <__aeabi_dadd+0x36c>)
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x2f6>
 8000cc8:	e11c      	b.n	8000f04 <__aeabi_dadd+0x530>
 8000cca:	2480      	movs	r4, #128	; 0x80
 8000ccc:	0424      	lsls	r4, r4, #16
 8000cce:	4321      	orrs	r1, r4
 8000cd0:	2f38      	cmp	r7, #56	; 0x38
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0x302>
 8000cd4:	e11e      	b.n	8000f14 <__aeabi_dadd+0x540>
 8000cd6:	2f1f      	cmp	r7, #31
 8000cd8:	dd00      	ble.n	8000cdc <__aeabi_dadd+0x308>
 8000cda:	e19e      	b.n	800101a <__aeabi_dadd+0x646>
 8000cdc:	2620      	movs	r6, #32
 8000cde:	000c      	movs	r4, r1
 8000ce0:	1bf6      	subs	r6, r6, r7
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	40f8      	lsrs	r0, r7
 8000cea:	1e5e      	subs	r6, r3, #1
 8000cec:	41b3      	sbcs	r3, r6
 8000cee:	40f9      	lsrs	r1, r7
 8000cf0:	4304      	orrs	r4, r0
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	4489      	add	r9, r1
 8000cf6:	4444      	add	r4, r8
 8000cf8:	4544      	cmp	r4, r8
 8000cfa:	419b      	sbcs	r3, r3
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	444b      	add	r3, r9
 8000d00:	469a      	mov	sl, r3
 8000d02:	0016      	movs	r6, r2
 8000d04:	e7a8      	b.n	8000c58 <__aeabi_dadd+0x284>
 8000d06:	4642      	mov	r2, r8
 8000d08:	464c      	mov	r4, r9
 8000d0a:	4314      	orrs	r4, r2
 8000d0c:	1e62      	subs	r2, r4, #1
 8000d0e:	4194      	sbcs	r4, r2
 8000d10:	e6a6      	b.n	8000a60 <__aeabi_dadd+0x8c>
 8000d12:	4c0d      	ldr	r4, [pc, #52]	; (8000d48 <__aeabi_dadd+0x374>)
 8000d14:	1c72      	adds	r2, r6, #1
 8000d16:	4222      	tst	r2, r4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x348>
 8000d1a:	e0a8      	b.n	8000e6e <__aeabi_dadd+0x49a>
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x352>
 8000d24:	e10a      	b.n	8000f3c <__aeabi_dadd+0x568>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x358>
 8000d2a:	e15e      	b.n	8000fea <__aeabi_dadd+0x616>
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dadd+0x360>
 8000d32:	e161      	b.n	8000ff8 <__aeabi_dadd+0x624>
 8000d34:	074a      	lsls	r2, r1, #29
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c9      	lsrs	r1, r1, #3
 8000d3c:	e77c      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	000007ff 	.word	0x000007ff
 8000d44:	ff7fffff 	.word	0xff7fffff
 8000d48:	000007fe 	.word	0x000007fe
 8000d4c:	4ccf      	ldr	r4, [pc, #828]	; (800108c <__aeabi_dadd+0x6b8>)
 8000d4e:	42a2      	cmp	r2, r4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x380>
 8000d52:	e0ce      	b.n	8000ef2 <__aeabi_dadd+0x51e>
 8000d54:	2480      	movs	r4, #128	; 0x80
 8000d56:	0424      	lsls	r4, r4, #16
 8000d58:	4321      	orrs	r1, r4
 8000d5a:	2f38      	cmp	r7, #56	; 0x38
 8000d5c:	dc5b      	bgt.n	8000e16 <__aeabi_dadd+0x442>
 8000d5e:	2f1f      	cmp	r7, #31
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_dadd+0x390>
 8000d62:	e0dc      	b.n	8000f1e <__aeabi_dadd+0x54a>
 8000d64:	2520      	movs	r5, #32
 8000d66:	000c      	movs	r4, r1
 8000d68:	1bed      	subs	r5, r5, r7
 8000d6a:	001e      	movs	r6, r3
 8000d6c:	40ab      	lsls	r3, r5
 8000d6e:	40ac      	lsls	r4, r5
 8000d70:	40fe      	lsrs	r6, r7
 8000d72:	1e5d      	subs	r5, r3, #1
 8000d74:	41ab      	sbcs	r3, r5
 8000d76:	4334      	orrs	r4, r6
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	431c      	orrs	r4, r3
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	1a5b      	subs	r3, r3, r1
 8000d80:	4699      	mov	r9, r3
 8000d82:	e04c      	b.n	8000e1e <__aeabi_dadd+0x44a>
 8000d84:	464a      	mov	r2, r9
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	1a88      	subs	r0, r1, r2
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4192      	sbcs	r2, r2
 8000d8e:	4252      	negs	r2, r2
 8000d90:	4692      	mov	sl, r2
 8000d92:	0002      	movs	r2, r0
 8000d94:	4650      	mov	r0, sl
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d478      	bmi.n	8000e90 <__aeabi_dadd+0x4bc>
 8000d9e:	4653      	mov	r3, sl
 8000da0:	4323      	orrs	r3, r4
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dadd+0x3d2>
 8000da4:	e66a      	b.n	8000a7c <__aeabi_dadd+0xa8>
 8000da6:	2100      	movs	r1, #0
 8000da8:	2500      	movs	r5, #0
 8000daa:	e745      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000dac:	074a      	lsls	r2, r1, #29
 8000dae:	08db      	lsrs	r3, r3, #3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	08c9      	lsrs	r1, r1, #3
 8000db4:	e73d      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000db6:	181c      	adds	r4, r3, r0
 8000db8:	429c      	cmp	r4, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	4449      	add	r1, r9
 8000dbe:	468a      	mov	sl, r1
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	449a      	add	sl, r3
 8000dc4:	4653      	mov	r3, sl
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	d400      	bmi.n	8000dce <__aeabi_dadd+0x3fa>
 8000dcc:	e727      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000dce:	2602      	movs	r6, #2
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	4baf      	ldr	r3, [pc, #700]	; (8001090 <__aeabi_dadd+0x6bc>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	4021      	ands	r1, r4
 8000ddc:	0862      	lsrs	r2, r4, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	07dc      	lsls	r4, r3, #31
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	469a      	mov	sl, r3
 8000de6:	4314      	orrs	r4, r2
 8000de8:	e670      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000dea:	003a      	movs	r2, r7
 8000dec:	464c      	mov	r4, r9
 8000dee:	3a20      	subs	r2, #32
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	46a4      	mov	ip, r4
 8000df4:	2f20      	cmp	r7, #32
 8000df6:	d007      	beq.n	8000e08 <__aeabi_dadd+0x434>
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	4648      	mov	r0, r9
 8000dfc:	1bd2      	subs	r2, r2, r7
 8000dfe:	4090      	lsls	r0, r2
 8000e00:	0002      	movs	r2, r0
 8000e02:	4640      	mov	r0, r8
 8000e04:	4310      	orrs	r0, r2
 8000e06:	4680      	mov	r8, r0
 8000e08:	4640      	mov	r0, r8
 8000e0a:	1e42      	subs	r2, r0, #1
 8000e0c:	4190      	sbcs	r0, r2
 8000e0e:	4662      	mov	r2, ip
 8000e10:	0004      	movs	r4, r0
 8000e12:	4314      	orrs	r4, r2
 8000e14:	e624      	b.n	8000a60 <__aeabi_dadd+0x8c>
 8000e16:	4319      	orrs	r1, r3
 8000e18:	000c      	movs	r4, r1
 8000e1a:	1e63      	subs	r3, r4, #1
 8000e1c:	419c      	sbcs	r4, r3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	1b1c      	subs	r4, r3, r4
 8000e22:	45a0      	cmp	r8, r4
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	4649      	mov	r1, r9
 8000e28:	425b      	negs	r3, r3
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	469a      	mov	sl, r3
 8000e2e:	4665      	mov	r5, ip
 8000e30:	0016      	movs	r6, r2
 8000e32:	e61b      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000e34:	000c      	movs	r4, r1
 8000e36:	431c      	orrs	r4, r3
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x468>
 8000e3a:	e0c7      	b.n	8000fcc <__aeabi_dadd+0x5f8>
 8000e3c:	1e7c      	subs	r4, r7, #1
 8000e3e:	2f01      	cmp	r7, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x470>
 8000e42:	e0f9      	b.n	8001038 <__aeabi_dadd+0x664>
 8000e44:	4e91      	ldr	r6, [pc, #580]	; (800108c <__aeabi_dadd+0x6b8>)
 8000e46:	42b7      	cmp	r7, r6
 8000e48:	d05c      	beq.n	8000f04 <__aeabi_dadd+0x530>
 8000e4a:	0027      	movs	r7, r4
 8000e4c:	e740      	b.n	8000cd0 <__aeabi_dadd+0x2fc>
 8000e4e:	2220      	movs	r2, #32
 8000e50:	464c      	mov	r4, r9
 8000e52:	4640      	mov	r0, r8
 8000e54:	1bd2      	subs	r2, r2, r7
 8000e56:	4094      	lsls	r4, r2
 8000e58:	40f8      	lsrs	r0, r7
 8000e5a:	4304      	orrs	r4, r0
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4090      	lsls	r0, r2
 8000e60:	1e42      	subs	r2, r0, #1
 8000e62:	4190      	sbcs	r0, r2
 8000e64:	464a      	mov	r2, r9
 8000e66:	40fa      	lsrs	r2, r7
 8000e68:	4304      	orrs	r4, r0
 8000e6a:	1889      	adds	r1, r1, r2
 8000e6c:	e6ee      	b.n	8000c4c <__aeabi_dadd+0x278>
 8000e6e:	4c87      	ldr	r4, [pc, #540]	; (800108c <__aeabi_dadd+0x6b8>)
 8000e70:	42a2      	cmp	r2, r4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x4a2>
 8000e74:	e6f9      	b.n	8000c6a <__aeabi_dadd+0x296>
 8000e76:	1818      	adds	r0, r3, r0
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	4449      	add	r1, r9
 8000e7e:	425b      	negs	r3, r3
 8000e80:	18cb      	adds	r3, r1, r3
 8000e82:	07dc      	lsls	r4, r3, #31
 8000e84:	0840      	lsrs	r0, r0, #1
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	469a      	mov	sl, r3
 8000e8a:	0016      	movs	r6, r2
 8000e8c:	4304      	orrs	r4, r0
 8000e8e:	e6c6      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8000e90:	4642      	mov	r2, r8
 8000e92:	1ad4      	subs	r4, r2, r3
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	4180      	sbcs	r0, r0
 8000e98:	464b      	mov	r3, r9
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	1a0b      	subs	r3, r1, r0
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	4665      	mov	r5, ip
 8000ea4:	e5ea      	b.n	8000a7c <__aeabi_dadd+0xa8>
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	075b      	lsls	r3, r3, #29
 8000eae:	4665      	mov	r5, ip
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	08d1      	lsrs	r1, r2, #3
 8000eb4:	e6bd      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dadd+0x4e8>
 8000eba:	e08e      	b.n	8000fda <__aeabi_dadd+0x606>
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	d117      	bne.n	8000ef2 <__aeabi_dadd+0x51e>
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	0309      	lsls	r1, r1, #12
 8000ec8:	e6da      	b.n	8000c80 <__aeabi_dadd+0x2ac>
 8000eca:	074a      	lsls	r2, r1, #29
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	08c9      	lsrs	r1, r1, #3
 8000ed2:	e6d1      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000ed4:	1a1c      	subs	r4, r3, r0
 8000ed6:	464a      	mov	r2, r9
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	1a89      	subs	r1, r1, r2
 8000ede:	425b      	negs	r3, r3
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2601      	movs	r6, #1
 8000ee6:	e5c1      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000ee8:	074a      	lsls	r2, r1, #29
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	08c9      	lsrs	r1, r1, #3
 8000ef0:	e69f      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	08d8      	lsrs	r0, r3, #3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	464a      	mov	r2, r9
 8000efa:	075b      	lsls	r3, r3, #29
 8000efc:	4665      	mov	r5, ip
 8000efe:	4303      	orrs	r3, r0
 8000f00:	08d1      	lsrs	r1, r2, #3
 8000f02:	e6b9      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f04:	4643      	mov	r3, r8
 8000f06:	08d8      	lsrs	r0, r3, #3
 8000f08:	464b      	mov	r3, r9
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	075b      	lsls	r3, r3, #29
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	08d1      	lsrs	r1, r2, #3
 8000f12:	e6b1      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f14:	4319      	orrs	r1, r3
 8000f16:	000c      	movs	r4, r1
 8000f18:	1e63      	subs	r3, r4, #1
 8000f1a:	419c      	sbcs	r4, r3
 8000f1c:	e6eb      	b.n	8000cf6 <__aeabi_dadd+0x322>
 8000f1e:	003c      	movs	r4, r7
 8000f20:	000d      	movs	r5, r1
 8000f22:	3c20      	subs	r4, #32
 8000f24:	40e5      	lsrs	r5, r4
 8000f26:	2f20      	cmp	r7, #32
 8000f28:	d003      	beq.n	8000f32 <__aeabi_dadd+0x55e>
 8000f2a:	2440      	movs	r4, #64	; 0x40
 8000f2c:	1be4      	subs	r4, r4, r7
 8000f2e:	40a1      	lsls	r1, r4
 8000f30:	430b      	orrs	r3, r1
 8000f32:	001c      	movs	r4, r3
 8000f34:	1e63      	subs	r3, r4, #1
 8000f36:	419c      	sbcs	r4, r3
 8000f38:	432c      	orrs	r4, r5
 8000f3a:	e770      	b.n	8000e1e <__aeabi_dadd+0x44a>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d0e1      	beq.n	8000f04 <__aeabi_dadd+0x530>
 8000f40:	464a      	mov	r2, r9
 8000f42:	4302      	orrs	r2, r0
 8000f44:	d0c1      	beq.n	8000eca <__aeabi_dadd+0x4f6>
 8000f46:	074a      	lsls	r2, r1, #29
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	08c9      	lsrs	r1, r1, #3
 8000f50:	0312      	lsls	r2, r2, #12
 8000f52:	4211      	tst	r1, r2
 8000f54:	d008      	beq.n	8000f68 <__aeabi_dadd+0x594>
 8000f56:	4648      	mov	r0, r9
 8000f58:	08c4      	lsrs	r4, r0, #3
 8000f5a:	4214      	tst	r4, r2
 8000f5c:	d104      	bne.n	8000f68 <__aeabi_dadd+0x594>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0021      	movs	r1, r4
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	0742      	lsls	r2, r0, #29
 8000f66:	4313      	orrs	r3, r2
 8000f68:	0f5a      	lsrs	r2, r3, #29
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	0752      	lsls	r2, r2, #29
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	e681      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000f74:	464b      	mov	r3, r9
 8000f76:	4303      	orrs	r3, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x5a8>
 8000f7a:	e714      	b.n	8000da6 <__aeabi_dadd+0x3d2>
 8000f7c:	464b      	mov	r3, r9
 8000f7e:	464a      	mov	r2, r9
 8000f80:	08c0      	lsrs	r0, r0, #3
 8000f82:	075b      	lsls	r3, r3, #29
 8000f84:	4665      	mov	r5, ip
 8000f86:	4303      	orrs	r3, r0
 8000f88:	08d1      	lsrs	r1, r2, #3
 8000f8a:	e655      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000f8c:	1ac4      	subs	r4, r0, r3
 8000f8e:	45a0      	cmp	r8, r4
 8000f90:	4180      	sbcs	r0, r0
 8000f92:	464b      	mov	r3, r9
 8000f94:	4240      	negs	r0, r0
 8000f96:	1a59      	subs	r1, r3, r1
 8000f98:	1a0b      	subs	r3, r1, r0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	2601      	movs	r6, #1
 8000fa0:	e564      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000fa2:	1a1c      	subs	r4, r3, r0
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	4180      	sbcs	r0, r0
 8000faa:	1a8a      	subs	r2, r1, r2
 8000fac:	4240      	negs	r0, r0
 8000fae:	1a12      	subs	r2, r2, r0
 8000fb0:	4692      	mov	sl, r2
 8000fb2:	0212      	lsls	r2, r2, #8
 8000fb4:	d549      	bpl.n	800104a <__aeabi_dadd+0x676>
 8000fb6:	4642      	mov	r2, r8
 8000fb8:	1ad4      	subs	r4, r2, r3
 8000fba:	45a0      	cmp	r8, r4
 8000fbc:	4180      	sbcs	r0, r0
 8000fbe:	464b      	mov	r3, r9
 8000fc0:	4240      	negs	r0, r0
 8000fc2:	1a59      	subs	r1, r3, r1
 8000fc4:	1a0b      	subs	r3, r1, r0
 8000fc6:	469a      	mov	sl, r3
 8000fc8:	4665      	mov	r5, ip
 8000fca:	e57f      	b.n	8000acc <__aeabi_dadd+0xf8>
 8000fcc:	464b      	mov	r3, r9
 8000fce:	464a      	mov	r2, r9
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	075b      	lsls	r3, r3, #29
 8000fd4:	4303      	orrs	r3, r0
 8000fd6:	08d1      	lsrs	r1, r2, #3
 8000fd8:	e62b      	b.n	8000c32 <__aeabi_dadd+0x25e>
 8000fda:	464a      	mov	r2, r9
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	4302      	orrs	r2, r0
 8000fe0:	d138      	bne.n	8001054 <__aeabi_dadd+0x680>
 8000fe2:	074a      	lsls	r2, r1, #29
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	08c9      	lsrs	r1, r1, #3
 8000fe8:	e646      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8000fea:	464b      	mov	r3, r9
 8000fec:	464a      	mov	r2, r9
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	075b      	lsls	r3, r3, #29
 8000ff2:	4303      	orrs	r3, r0
 8000ff4:	08d1      	lsrs	r1, r2, #3
 8000ff6:	e61f      	b.n	8000c38 <__aeabi_dadd+0x264>
 8000ff8:	181c      	adds	r4, r3, r0
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	4449      	add	r1, r9
 8001000:	468a      	mov	sl, r1
 8001002:	425b      	negs	r3, r3
 8001004:	449a      	add	sl, r3
 8001006:	4653      	mov	r3, sl
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	d400      	bmi.n	800100e <__aeabi_dadd+0x63a>
 800100c:	e607      	b.n	8000c1e <__aeabi_dadd+0x24a>
 800100e:	4652      	mov	r2, sl
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <__aeabi_dadd+0x6bc>)
 8001012:	2601      	movs	r6, #1
 8001014:	401a      	ands	r2, r3
 8001016:	4692      	mov	sl, r2
 8001018:	e601      	b.n	8000c1e <__aeabi_dadd+0x24a>
 800101a:	003c      	movs	r4, r7
 800101c:	000e      	movs	r6, r1
 800101e:	3c20      	subs	r4, #32
 8001020:	40e6      	lsrs	r6, r4
 8001022:	2f20      	cmp	r7, #32
 8001024:	d003      	beq.n	800102e <__aeabi_dadd+0x65a>
 8001026:	2440      	movs	r4, #64	; 0x40
 8001028:	1be4      	subs	r4, r4, r7
 800102a:	40a1      	lsls	r1, r4
 800102c:	430b      	orrs	r3, r1
 800102e:	001c      	movs	r4, r3
 8001030:	1e63      	subs	r3, r4, #1
 8001032:	419c      	sbcs	r4, r3
 8001034:	4334      	orrs	r4, r6
 8001036:	e65e      	b.n	8000cf6 <__aeabi_dadd+0x322>
 8001038:	4443      	add	r3, r8
 800103a:	4283      	cmp	r3, r0
 800103c:	4180      	sbcs	r0, r0
 800103e:	4449      	add	r1, r9
 8001040:	468a      	mov	sl, r1
 8001042:	4240      	negs	r0, r0
 8001044:	001c      	movs	r4, r3
 8001046:	4482      	add	sl, r0
 8001048:	e6bc      	b.n	8000dc4 <__aeabi_dadd+0x3f0>
 800104a:	4653      	mov	r3, sl
 800104c:	4323      	orrs	r3, r4
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x67e>
 8001050:	e6a9      	b.n	8000da6 <__aeabi_dadd+0x3d2>
 8001052:	e5e4      	b.n	8000c1e <__aeabi_dadd+0x24a>
 8001054:	074a      	lsls	r2, r1, #29
 8001056:	4313      	orrs	r3, r2
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	0312      	lsls	r2, r2, #12
 800105e:	4211      	tst	r1, r2
 8001060:	d009      	beq.n	8001076 <__aeabi_dadd+0x6a2>
 8001062:	4648      	mov	r0, r9
 8001064:	08c4      	lsrs	r4, r0, #3
 8001066:	4214      	tst	r4, r2
 8001068:	d105      	bne.n	8001076 <__aeabi_dadd+0x6a2>
 800106a:	4643      	mov	r3, r8
 800106c:	4665      	mov	r5, ip
 800106e:	0021      	movs	r1, r4
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	0742      	lsls	r2, r0, #29
 8001074:	4313      	orrs	r3, r2
 8001076:	0f5a      	lsrs	r2, r3, #29
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	0752      	lsls	r2, r2, #29
 800107e:	4313      	orrs	r3, r2
 8001080:	e5fa      	b.n	8000c78 <__aeabi_dadd+0x2a4>
 8001082:	2300      	movs	r3, #0
 8001084:	4a01      	ldr	r2, [pc, #4]	; (800108c <__aeabi_dadd+0x6b8>)
 8001086:	001c      	movs	r4, r3
 8001088:	e540      	b.n	8000b0c <__aeabi_dadd+0x138>
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	000007ff 	.word	0x000007ff
 8001090:	ff7fffff 	.word	0xff7fffff

08001094 <__aeabi_ddiv>:
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	4657      	mov	r7, sl
 8001098:	464e      	mov	r6, r9
 800109a:	4645      	mov	r5, r8
 800109c:	46de      	mov	lr, fp
 800109e:	b5e0      	push	{r5, r6, r7, lr}
 80010a0:	030c      	lsls	r4, r1, #12
 80010a2:	001f      	movs	r7, r3
 80010a4:	004b      	lsls	r3, r1, #1
 80010a6:	4681      	mov	r9, r0
 80010a8:	4692      	mov	sl, r2
 80010aa:	0005      	movs	r5, r0
 80010ac:	b085      	sub	sp, #20
 80010ae:	0b24      	lsrs	r4, r4, #12
 80010b0:	0d5b      	lsrs	r3, r3, #21
 80010b2:	0fce      	lsrs	r6, r1, #31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_ddiv+0x26>
 80010b8:	e152      	b.n	8001360 <__aeabi_ddiv+0x2cc>
 80010ba:	4ad2      	ldr	r2, [pc, #840]	; (8001404 <__aeabi_ddiv+0x370>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x2e>
 80010c0:	e16e      	b.n	80013a0 <__aeabi_ddiv+0x30c>
 80010c2:	0f42      	lsrs	r2, r0, #29
 80010c4:	00e4      	lsls	r4, r4, #3
 80010c6:	4314      	orrs	r4, r2
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	0412      	lsls	r2, r2, #16
 80010cc:	4322      	orrs	r2, r4
 80010ce:	4690      	mov	r8, r2
 80010d0:	4acd      	ldr	r2, [pc, #820]	; (8001408 <__aeabi_ddiv+0x374>)
 80010d2:	00c5      	lsls	r5, r0, #3
 80010d4:	4693      	mov	fp, r2
 80010d6:	449b      	add	fp, r3
 80010d8:	2300      	movs	r3, #0
 80010da:	4699      	mov	r9, r3
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	033c      	lsls	r4, r7, #12
 80010e0:	007b      	lsls	r3, r7, #1
 80010e2:	4650      	mov	r0, sl
 80010e4:	0b24      	lsrs	r4, r4, #12
 80010e6:	0d5b      	lsrs	r3, r3, #21
 80010e8:	0fff      	lsrs	r7, r7, #31
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x5c>
 80010ee:	e11a      	b.n	8001326 <__aeabi_ddiv+0x292>
 80010f0:	4ac4      	ldr	r2, [pc, #784]	; (8001404 <__aeabi_ddiv+0x370>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d100      	bne.n	80010f8 <__aeabi_ddiv+0x64>
 80010f6:	e15e      	b.n	80013b6 <__aeabi_ddiv+0x322>
 80010f8:	0f42      	lsrs	r2, r0, #29
 80010fa:	00e4      	lsls	r4, r4, #3
 80010fc:	4322      	orrs	r2, r4
 80010fe:	2480      	movs	r4, #128	; 0x80
 8001100:	0424      	lsls	r4, r4, #16
 8001102:	4314      	orrs	r4, r2
 8001104:	4ac0      	ldr	r2, [pc, #768]	; (8001408 <__aeabi_ddiv+0x374>)
 8001106:	00c1      	lsls	r1, r0, #3
 8001108:	4694      	mov	ip, r2
 800110a:	465a      	mov	r2, fp
 800110c:	4463      	add	r3, ip
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	469b      	mov	fp, r3
 8001112:	2000      	movs	r0, #0
 8001114:	0033      	movs	r3, r6
 8001116:	407b      	eors	r3, r7
 8001118:	469a      	mov	sl, r3
 800111a:	464b      	mov	r3, r9
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d827      	bhi.n	8001170 <__aeabi_ddiv+0xdc>
 8001120:	4aba      	ldr	r2, [pc, #744]	; (800140c <__aeabi_ddiv+0x378>)
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	469f      	mov	pc, r3
 8001128:	46b2      	mov	sl, r6
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d016      	beq.n	800115e <__aeabi_ddiv+0xca>
 8001130:	2b03      	cmp	r3, #3
 8001132:	d100      	bne.n	8001136 <__aeabi_ddiv+0xa2>
 8001134:	e287      	b.n	8001646 <__aeabi_ddiv+0x5b2>
 8001136:	2b01      	cmp	r3, #1
 8001138:	d000      	beq.n	800113c <__aeabi_ddiv+0xa8>
 800113a:	e0d5      	b.n	80012e8 <__aeabi_ddiv+0x254>
 800113c:	2300      	movs	r3, #0
 800113e:	2200      	movs	r2, #0
 8001140:	2500      	movs	r5, #0
 8001142:	051b      	lsls	r3, r3, #20
 8001144:	4313      	orrs	r3, r2
 8001146:	4652      	mov	r2, sl
 8001148:	07d2      	lsls	r2, r2, #31
 800114a:	4313      	orrs	r3, r2
 800114c:	0028      	movs	r0, r5
 800114e:	0019      	movs	r1, r3
 8001150:	b005      	add	sp, #20
 8001152:	bcf0      	pop	{r4, r5, r6, r7}
 8001154:	46bb      	mov	fp, r7
 8001156:	46b2      	mov	sl, r6
 8001158:	46a9      	mov	r9, r5
 800115a:	46a0      	mov	r8, r4
 800115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115e:	2200      	movs	r2, #0
 8001160:	2500      	movs	r5, #0
 8001162:	4ba8      	ldr	r3, [pc, #672]	; (8001404 <__aeabi_ddiv+0x370>)
 8001164:	e7ed      	b.n	8001142 <__aeabi_ddiv+0xae>
 8001166:	46ba      	mov	sl, r7
 8001168:	46a0      	mov	r8, r4
 800116a:	000d      	movs	r5, r1
 800116c:	9000      	str	r0, [sp, #0]
 800116e:	e7dc      	b.n	800112a <__aeabi_ddiv+0x96>
 8001170:	4544      	cmp	r4, r8
 8001172:	d200      	bcs.n	8001176 <__aeabi_ddiv+0xe2>
 8001174:	e1c4      	b.n	8001500 <__aeabi_ddiv+0x46c>
 8001176:	d100      	bne.n	800117a <__aeabi_ddiv+0xe6>
 8001178:	e1bf      	b.n	80014fa <__aeabi_ddiv+0x466>
 800117a:	2301      	movs	r3, #1
 800117c:	425b      	negs	r3, r3
 800117e:	469c      	mov	ip, r3
 8001180:	002e      	movs	r6, r5
 8001182:	4640      	mov	r0, r8
 8001184:	2500      	movs	r5, #0
 8001186:	44e3      	add	fp, ip
 8001188:	0223      	lsls	r3, r4, #8
 800118a:	0e0c      	lsrs	r4, r1, #24
 800118c:	431c      	orrs	r4, r3
 800118e:	0c1b      	lsrs	r3, r3, #16
 8001190:	4699      	mov	r9, r3
 8001192:	0423      	lsls	r3, r4, #16
 8001194:	020a      	lsls	r2, r1, #8
 8001196:	0c1f      	lsrs	r7, r3, #16
 8001198:	4649      	mov	r1, r9
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	9701      	str	r7, [sp, #4]
 800119e:	f7ff f853 	bl	8000248 <__aeabi_uidivmod>
 80011a2:	0002      	movs	r2, r0
 80011a4:	437a      	muls	r2, r7
 80011a6:	040b      	lsls	r3, r1, #16
 80011a8:	0c31      	lsrs	r1, r6, #16
 80011aa:	4680      	mov	r8, r0
 80011ac:	4319      	orrs	r1, r3
 80011ae:	428a      	cmp	r2, r1
 80011b0:	d907      	bls.n	80011c2 <__aeabi_ddiv+0x12e>
 80011b2:	2301      	movs	r3, #1
 80011b4:	425b      	negs	r3, r3
 80011b6:	469c      	mov	ip, r3
 80011b8:	1909      	adds	r1, r1, r4
 80011ba:	44e0      	add	r8, ip
 80011bc:	428c      	cmp	r4, r1
 80011be:	d800      	bhi.n	80011c2 <__aeabi_ddiv+0x12e>
 80011c0:	e201      	b.n	80015c6 <__aeabi_ddiv+0x532>
 80011c2:	1a88      	subs	r0, r1, r2
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff f83f 	bl	8000248 <__aeabi_uidivmod>
 80011ca:	9a01      	ldr	r2, [sp, #4]
 80011cc:	0436      	lsls	r6, r6, #16
 80011ce:	4342      	muls	r2, r0
 80011d0:	0409      	lsls	r1, r1, #16
 80011d2:	0c36      	lsrs	r6, r6, #16
 80011d4:	0003      	movs	r3, r0
 80011d6:	430e      	orrs	r6, r1
 80011d8:	42b2      	cmp	r2, r6
 80011da:	d904      	bls.n	80011e6 <__aeabi_ddiv+0x152>
 80011dc:	1936      	adds	r6, r6, r4
 80011de:	3b01      	subs	r3, #1
 80011e0:	42b4      	cmp	r4, r6
 80011e2:	d800      	bhi.n	80011e6 <__aeabi_ddiv+0x152>
 80011e4:	e1e9      	b.n	80015ba <__aeabi_ddiv+0x526>
 80011e6:	1ab0      	subs	r0, r6, r2
 80011e8:	4642      	mov	r2, r8
 80011ea:	9e00      	ldr	r6, [sp, #0]
 80011ec:	0412      	lsls	r2, r2, #16
 80011ee:	431a      	orrs	r2, r3
 80011f0:	0c33      	lsrs	r3, r6, #16
 80011f2:	001f      	movs	r7, r3
 80011f4:	0c11      	lsrs	r1, r2, #16
 80011f6:	4690      	mov	r8, r2
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	0413      	lsls	r3, r2, #16
 80011fc:	0432      	lsls	r2, r6, #16
 80011fe:	0c16      	lsrs	r6, r2, #16
 8001200:	0032      	movs	r2, r6
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	435a      	muls	r2, r3
 8001206:	9603      	str	r6, [sp, #12]
 8001208:	437b      	muls	r3, r7
 800120a:	434e      	muls	r6, r1
 800120c:	4379      	muls	r1, r7
 800120e:	0c17      	lsrs	r7, r2, #16
 8001210:	46bc      	mov	ip, r7
 8001212:	199b      	adds	r3, r3, r6
 8001214:	4463      	add	r3, ip
 8001216:	429e      	cmp	r6, r3
 8001218:	d903      	bls.n	8001222 <__aeabi_ddiv+0x18e>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	0276      	lsls	r6, r6, #9
 800121e:	46b4      	mov	ip, r6
 8001220:	4461      	add	r1, ip
 8001222:	0c1e      	lsrs	r6, r3, #16
 8001224:	1871      	adds	r1, r6, r1
 8001226:	0416      	lsls	r6, r2, #16
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	0c36      	lsrs	r6, r6, #16
 800122c:	199e      	adds	r6, r3, r6
 800122e:	4288      	cmp	r0, r1
 8001230:	d302      	bcc.n	8001238 <__aeabi_ddiv+0x1a4>
 8001232:	d112      	bne.n	800125a <__aeabi_ddiv+0x1c6>
 8001234:	42b5      	cmp	r5, r6
 8001236:	d210      	bcs.n	800125a <__aeabi_ddiv+0x1c6>
 8001238:	4643      	mov	r3, r8
 800123a:	1e5a      	subs	r2, r3, #1
 800123c:	9b00      	ldr	r3, [sp, #0]
 800123e:	469c      	mov	ip, r3
 8001240:	4465      	add	r5, ip
 8001242:	001f      	movs	r7, r3
 8001244:	429d      	cmp	r5, r3
 8001246:	419b      	sbcs	r3, r3
 8001248:	425b      	negs	r3, r3
 800124a:	191b      	adds	r3, r3, r4
 800124c:	18c0      	adds	r0, r0, r3
 800124e:	4284      	cmp	r4, r0
 8001250:	d200      	bcs.n	8001254 <__aeabi_ddiv+0x1c0>
 8001252:	e19e      	b.n	8001592 <__aeabi_ddiv+0x4fe>
 8001254:	d100      	bne.n	8001258 <__aeabi_ddiv+0x1c4>
 8001256:	e199      	b.n	800158c <__aeabi_ddiv+0x4f8>
 8001258:	4690      	mov	r8, r2
 800125a:	1bae      	subs	r6, r5, r6
 800125c:	42b5      	cmp	r5, r6
 800125e:	41ad      	sbcs	r5, r5
 8001260:	1a40      	subs	r0, r0, r1
 8001262:	426d      	negs	r5, r5
 8001264:	1b40      	subs	r0, r0, r5
 8001266:	4284      	cmp	r4, r0
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x1d8>
 800126a:	e1d2      	b.n	8001612 <__aeabi_ddiv+0x57e>
 800126c:	4649      	mov	r1, r9
 800126e:	f7fe ffeb 	bl	8000248 <__aeabi_uidivmod>
 8001272:	9a01      	ldr	r2, [sp, #4]
 8001274:	040b      	lsls	r3, r1, #16
 8001276:	4342      	muls	r2, r0
 8001278:	0c31      	lsrs	r1, r6, #16
 800127a:	0005      	movs	r5, r0
 800127c:	4319      	orrs	r1, r3
 800127e:	428a      	cmp	r2, r1
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x1f0>
 8001282:	e16c      	b.n	800155e <__aeabi_ddiv+0x4ca>
 8001284:	1a88      	subs	r0, r1, r2
 8001286:	4649      	mov	r1, r9
 8001288:	f7fe ffde 	bl	8000248 <__aeabi_uidivmod>
 800128c:	9a01      	ldr	r2, [sp, #4]
 800128e:	0436      	lsls	r6, r6, #16
 8001290:	4342      	muls	r2, r0
 8001292:	0409      	lsls	r1, r1, #16
 8001294:	0c36      	lsrs	r6, r6, #16
 8001296:	0003      	movs	r3, r0
 8001298:	430e      	orrs	r6, r1
 800129a:	42b2      	cmp	r2, r6
 800129c:	d900      	bls.n	80012a0 <__aeabi_ddiv+0x20c>
 800129e:	e153      	b.n	8001548 <__aeabi_ddiv+0x4b4>
 80012a0:	9803      	ldr	r0, [sp, #12]
 80012a2:	1ab6      	subs	r6, r6, r2
 80012a4:	0002      	movs	r2, r0
 80012a6:	042d      	lsls	r5, r5, #16
 80012a8:	431d      	orrs	r5, r3
 80012aa:	9f02      	ldr	r7, [sp, #8]
 80012ac:	042b      	lsls	r3, r5, #16
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	435a      	muls	r2, r3
 80012b2:	437b      	muls	r3, r7
 80012b4:	469c      	mov	ip, r3
 80012b6:	0c29      	lsrs	r1, r5, #16
 80012b8:	4348      	muls	r0, r1
 80012ba:	0c13      	lsrs	r3, r2, #16
 80012bc:	4484      	add	ip, r0
 80012be:	4463      	add	r3, ip
 80012c0:	4379      	muls	r1, r7
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d903      	bls.n	80012ce <__aeabi_ddiv+0x23a>
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0240      	lsls	r0, r0, #9
 80012ca:	4684      	mov	ip, r0
 80012cc:	4461      	add	r1, ip
 80012ce:	0c18      	lsrs	r0, r3, #16
 80012d0:	0412      	lsls	r2, r2, #16
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	0c12      	lsrs	r2, r2, #16
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	4286      	cmp	r6, r0
 80012dc:	d200      	bcs.n	80012e0 <__aeabi_ddiv+0x24c>
 80012de:	e100      	b.n	80014e2 <__aeabi_ddiv+0x44e>
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x250>
 80012e2:	e0fb      	b.n	80014dc <__aeabi_ddiv+0x448>
 80012e4:	2301      	movs	r3, #1
 80012e6:	431d      	orrs	r5, r3
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <__aeabi_ddiv+0x37c>)
 80012ea:	445b      	add	r3, fp
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_ddiv+0x25e>
 80012f0:	e0aa      	b.n	8001448 <__aeabi_ddiv+0x3b4>
 80012f2:	076a      	lsls	r2, r5, #29
 80012f4:	d000      	beq.n	80012f8 <__aeabi_ddiv+0x264>
 80012f6:	e13d      	b.n	8001574 <__aeabi_ddiv+0x4e0>
 80012f8:	08e9      	lsrs	r1, r5, #3
 80012fa:	4642      	mov	r2, r8
 80012fc:	01d2      	lsls	r2, r2, #7
 80012fe:	d506      	bpl.n	800130e <__aeabi_ddiv+0x27a>
 8001300:	4642      	mov	r2, r8
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <__aeabi_ddiv+0x380>)
 8001304:	401a      	ands	r2, r3
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	4690      	mov	r8, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	445b      	add	r3, fp
 800130e:	4a42      	ldr	r2, [pc, #264]	; (8001418 <__aeabi_ddiv+0x384>)
 8001310:	4293      	cmp	r3, r2
 8001312:	dd00      	ble.n	8001316 <__aeabi_ddiv+0x282>
 8001314:	e723      	b.n	800115e <__aeabi_ddiv+0xca>
 8001316:	4642      	mov	r2, r8
 8001318:	055b      	lsls	r3, r3, #21
 800131a:	0755      	lsls	r5, r2, #29
 800131c:	0252      	lsls	r2, r2, #9
 800131e:	430d      	orrs	r5, r1
 8001320:	0b12      	lsrs	r2, r2, #12
 8001322:	0d5b      	lsrs	r3, r3, #21
 8001324:	e70d      	b.n	8001142 <__aeabi_ddiv+0xae>
 8001326:	4651      	mov	r1, sl
 8001328:	4321      	orrs	r1, r4
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0x29a>
 800132c:	e07c      	b.n	8001428 <__aeabi_ddiv+0x394>
 800132e:	2c00      	cmp	r4, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x2a0>
 8001332:	e0fb      	b.n	800152c <__aeabi_ddiv+0x498>
 8001334:	0020      	movs	r0, r4
 8001336:	f001 fa63 	bl	8002800 <__clzsi2>
 800133a:	0002      	movs	r2, r0
 800133c:	3a0b      	subs	r2, #11
 800133e:	231d      	movs	r3, #29
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	4652      	mov	r2, sl
 8001344:	0001      	movs	r1, r0
 8001346:	40da      	lsrs	r2, r3
 8001348:	4653      	mov	r3, sl
 800134a:	3908      	subs	r1, #8
 800134c:	408b      	lsls	r3, r1
 800134e:	408c      	lsls	r4, r1
 8001350:	0019      	movs	r1, r3
 8001352:	4314      	orrs	r4, r2
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <__aeabi_ddiv+0x388>)
 8001356:	4458      	add	r0, fp
 8001358:	469b      	mov	fp, r3
 800135a:	4483      	add	fp, r0
 800135c:	2000      	movs	r0, #0
 800135e:	e6d9      	b.n	8001114 <__aeabi_ddiv+0x80>
 8001360:	0003      	movs	r3, r0
 8001362:	4323      	orrs	r3, r4
 8001364:	4698      	mov	r8, r3
 8001366:	d044      	beq.n	80013f2 <__aeabi_ddiv+0x35e>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x2da>
 800136c:	e0cf      	b.n	800150e <__aeabi_ddiv+0x47a>
 800136e:	0020      	movs	r0, r4
 8001370:	f001 fa46 	bl	8002800 <__clzsi2>
 8001374:	0001      	movs	r1, r0
 8001376:	0002      	movs	r2, r0
 8001378:	390b      	subs	r1, #11
 800137a:	231d      	movs	r3, #29
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	4649      	mov	r1, r9
 8001380:	0010      	movs	r0, r2
 8001382:	40d9      	lsrs	r1, r3
 8001384:	3808      	subs	r0, #8
 8001386:	4084      	lsls	r4, r0
 8001388:	000b      	movs	r3, r1
 800138a:	464d      	mov	r5, r9
 800138c:	4323      	orrs	r3, r4
 800138e:	4698      	mov	r8, r3
 8001390:	4085      	lsls	r5, r0
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <__aeabi_ddiv+0x38c>)
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	469b      	mov	fp, r3
 8001398:	2300      	movs	r3, #0
 800139a:	4699      	mov	r9, r3
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	e69e      	b.n	80010de <__aeabi_ddiv+0x4a>
 80013a0:	0002      	movs	r2, r0
 80013a2:	4322      	orrs	r2, r4
 80013a4:	4690      	mov	r8, r2
 80013a6:	d11d      	bne.n	80013e4 <__aeabi_ddiv+0x350>
 80013a8:	2208      	movs	r2, #8
 80013aa:	469b      	mov	fp, r3
 80013ac:	2302      	movs	r3, #2
 80013ae:	2500      	movs	r5, #0
 80013b0:	4691      	mov	r9, r2
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	e693      	b.n	80010de <__aeabi_ddiv+0x4a>
 80013b6:	4651      	mov	r1, sl
 80013b8:	4321      	orrs	r1, r4
 80013ba:	d109      	bne.n	80013d0 <__aeabi_ddiv+0x33c>
 80013bc:	2302      	movs	r3, #2
 80013be:	464a      	mov	r2, r9
 80013c0:	431a      	orrs	r2, r3
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <__aeabi_ddiv+0x390>)
 80013c4:	4691      	mov	r9, r2
 80013c6:	469c      	mov	ip, r3
 80013c8:	2400      	movs	r4, #0
 80013ca:	2002      	movs	r0, #2
 80013cc:	44e3      	add	fp, ip
 80013ce:	e6a1      	b.n	8001114 <__aeabi_ddiv+0x80>
 80013d0:	2303      	movs	r3, #3
 80013d2:	464a      	mov	r2, r9
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <__aeabi_ddiv+0x390>)
 80013d8:	4691      	mov	r9, r2
 80013da:	469c      	mov	ip, r3
 80013dc:	4651      	mov	r1, sl
 80013de:	2003      	movs	r0, #3
 80013e0:	44e3      	add	fp, ip
 80013e2:	e697      	b.n	8001114 <__aeabi_ddiv+0x80>
 80013e4:	220c      	movs	r2, #12
 80013e6:	469b      	mov	fp, r3
 80013e8:	2303      	movs	r3, #3
 80013ea:	46a0      	mov	r8, r4
 80013ec:	4691      	mov	r9, r2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	e675      	b.n	80010de <__aeabi_ddiv+0x4a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	4699      	mov	r9, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	469b      	mov	fp, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	2500      	movs	r5, #0
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	e66d      	b.n	80010de <__aeabi_ddiv+0x4a>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007ff 	.word	0x000007ff
 8001408:	fffffc01 	.word	0xfffffc01
 800140c:	08009e84 	.word	0x08009e84
 8001410:	000003ff 	.word	0x000003ff
 8001414:	feffffff 	.word	0xfeffffff
 8001418:	000007fe 	.word	0x000007fe
 800141c:	000003f3 	.word	0x000003f3
 8001420:	fffffc0d 	.word	0xfffffc0d
 8001424:	fffff801 	.word	0xfffff801
 8001428:	464a      	mov	r2, r9
 800142a:	2301      	movs	r3, #1
 800142c:	431a      	orrs	r2, r3
 800142e:	4691      	mov	r9, r2
 8001430:	2400      	movs	r4, #0
 8001432:	2001      	movs	r0, #1
 8001434:	e66e      	b.n	8001114 <__aeabi_ddiv+0x80>
 8001436:	2300      	movs	r3, #0
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	469a      	mov	sl, r3
 800143c:	2500      	movs	r5, #0
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <__aeabi_ddiv+0x5cc>)
 8001440:	0312      	lsls	r2, r2, #12
 8001442:	e67e      	b.n	8001142 <__aeabi_ddiv+0xae>
 8001444:	2501      	movs	r5, #1
 8001446:	426d      	negs	r5, r5
 8001448:	2201      	movs	r2, #1
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	2a38      	cmp	r2, #56	; 0x38
 800144e:	dd00      	ble.n	8001452 <__aeabi_ddiv+0x3be>
 8001450:	e674      	b.n	800113c <__aeabi_ddiv+0xa8>
 8001452:	2a1f      	cmp	r2, #31
 8001454:	dc00      	bgt.n	8001458 <__aeabi_ddiv+0x3c4>
 8001456:	e0bd      	b.n	80015d4 <__aeabi_ddiv+0x540>
 8001458:	211f      	movs	r1, #31
 800145a:	4249      	negs	r1, r1
 800145c:	1acb      	subs	r3, r1, r3
 800145e:	4641      	mov	r1, r8
 8001460:	40d9      	lsrs	r1, r3
 8001462:	000b      	movs	r3, r1
 8001464:	2a20      	cmp	r2, #32
 8001466:	d004      	beq.n	8001472 <__aeabi_ddiv+0x3de>
 8001468:	4641      	mov	r1, r8
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <__aeabi_ddiv+0x5d0>)
 800146c:	445a      	add	r2, fp
 800146e:	4091      	lsls	r1, r2
 8001470:	430d      	orrs	r5, r1
 8001472:	0029      	movs	r1, r5
 8001474:	1e4a      	subs	r2, r1, #1
 8001476:	4191      	sbcs	r1, r2
 8001478:	4319      	orrs	r1, r3
 800147a:	2307      	movs	r3, #7
 800147c:	001d      	movs	r5, r3
 800147e:	2200      	movs	r2, #0
 8001480:	400d      	ands	r5, r1
 8001482:	420b      	tst	r3, r1
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x3f4>
 8001486:	e0d0      	b.n	800162a <__aeabi_ddiv+0x596>
 8001488:	220f      	movs	r2, #15
 800148a:	2300      	movs	r3, #0
 800148c:	400a      	ands	r2, r1
 800148e:	2a04      	cmp	r2, #4
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x400>
 8001492:	e0c7      	b.n	8001624 <__aeabi_ddiv+0x590>
 8001494:	1d0a      	adds	r2, r1, #4
 8001496:	428a      	cmp	r2, r1
 8001498:	4189      	sbcs	r1, r1
 800149a:	4249      	negs	r1, r1
 800149c:	185b      	adds	r3, r3, r1
 800149e:	0011      	movs	r1, r2
 80014a0:	021a      	lsls	r2, r3, #8
 80014a2:	d400      	bmi.n	80014a6 <__aeabi_ddiv+0x412>
 80014a4:	e0be      	b.n	8001624 <__aeabi_ddiv+0x590>
 80014a6:	2301      	movs	r3, #1
 80014a8:	2200      	movs	r2, #0
 80014aa:	2500      	movs	r5, #0
 80014ac:	e649      	b.n	8001142 <__aeabi_ddiv+0xae>
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	4643      	mov	r3, r8
 80014b2:	0312      	lsls	r2, r2, #12
 80014b4:	4213      	tst	r3, r2
 80014b6:	d008      	beq.n	80014ca <__aeabi_ddiv+0x436>
 80014b8:	4214      	tst	r4, r2
 80014ba:	d106      	bne.n	80014ca <__aeabi_ddiv+0x436>
 80014bc:	4322      	orrs	r2, r4
 80014be:	0312      	lsls	r2, r2, #12
 80014c0:	46ba      	mov	sl, r7
 80014c2:	000d      	movs	r5, r1
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <__aeabi_ddiv+0x5cc>)
 80014c6:	0b12      	lsrs	r2, r2, #12
 80014c8:	e63b      	b.n	8001142 <__aeabi_ddiv+0xae>
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	4643      	mov	r3, r8
 80014ce:	0312      	lsls	r2, r2, #12
 80014d0:	431a      	orrs	r2, r3
 80014d2:	0312      	lsls	r2, r2, #12
 80014d4:	46b2      	mov	sl, r6
 80014d6:	4b62      	ldr	r3, [pc, #392]	; (8001660 <__aeabi_ddiv+0x5cc>)
 80014d8:	0b12      	lsrs	r2, r2, #12
 80014da:	e632      	b.n	8001142 <__aeabi_ddiv+0xae>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d100      	bne.n	80014e2 <__aeabi_ddiv+0x44e>
 80014e0:	e702      	b.n	80012e8 <__aeabi_ddiv+0x254>
 80014e2:	19a6      	adds	r6, r4, r6
 80014e4:	1e6a      	subs	r2, r5, #1
 80014e6:	42a6      	cmp	r6, r4
 80014e8:	d200      	bcs.n	80014ec <__aeabi_ddiv+0x458>
 80014ea:	e089      	b.n	8001600 <__aeabi_ddiv+0x56c>
 80014ec:	4286      	cmp	r6, r0
 80014ee:	d200      	bcs.n	80014f2 <__aeabi_ddiv+0x45e>
 80014f0:	e09f      	b.n	8001632 <__aeabi_ddiv+0x59e>
 80014f2:	d100      	bne.n	80014f6 <__aeabi_ddiv+0x462>
 80014f4:	e0af      	b.n	8001656 <__aeabi_ddiv+0x5c2>
 80014f6:	0015      	movs	r5, r2
 80014f8:	e6f4      	b.n	80012e4 <__aeabi_ddiv+0x250>
 80014fa:	42a9      	cmp	r1, r5
 80014fc:	d900      	bls.n	8001500 <__aeabi_ddiv+0x46c>
 80014fe:	e63c      	b.n	800117a <__aeabi_ddiv+0xe6>
 8001500:	4643      	mov	r3, r8
 8001502:	07de      	lsls	r6, r3, #31
 8001504:	0858      	lsrs	r0, r3, #1
 8001506:	086b      	lsrs	r3, r5, #1
 8001508:	431e      	orrs	r6, r3
 800150a:	07ed      	lsls	r5, r5, #31
 800150c:	e63c      	b.n	8001188 <__aeabi_ddiv+0xf4>
 800150e:	f001 f977 	bl	8002800 <__clzsi2>
 8001512:	0001      	movs	r1, r0
 8001514:	0002      	movs	r2, r0
 8001516:	3115      	adds	r1, #21
 8001518:	3220      	adds	r2, #32
 800151a:	291c      	cmp	r1, #28
 800151c:	dc00      	bgt.n	8001520 <__aeabi_ddiv+0x48c>
 800151e:	e72c      	b.n	800137a <__aeabi_ddiv+0x2e6>
 8001520:	464b      	mov	r3, r9
 8001522:	3808      	subs	r0, #8
 8001524:	4083      	lsls	r3, r0
 8001526:	2500      	movs	r5, #0
 8001528:	4698      	mov	r8, r3
 800152a:	e732      	b.n	8001392 <__aeabi_ddiv+0x2fe>
 800152c:	f001 f968 	bl	8002800 <__clzsi2>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	3215      	adds	r2, #21
 8001536:	3020      	adds	r0, #32
 8001538:	2a1c      	cmp	r2, #28
 800153a:	dc00      	bgt.n	800153e <__aeabi_ddiv+0x4aa>
 800153c:	e6ff      	b.n	800133e <__aeabi_ddiv+0x2aa>
 800153e:	4654      	mov	r4, sl
 8001540:	3b08      	subs	r3, #8
 8001542:	2100      	movs	r1, #0
 8001544:	409c      	lsls	r4, r3
 8001546:	e705      	b.n	8001354 <__aeabi_ddiv+0x2c0>
 8001548:	1936      	adds	r6, r6, r4
 800154a:	3b01      	subs	r3, #1
 800154c:	42b4      	cmp	r4, r6
 800154e:	d900      	bls.n	8001552 <__aeabi_ddiv+0x4be>
 8001550:	e6a6      	b.n	80012a0 <__aeabi_ddiv+0x20c>
 8001552:	42b2      	cmp	r2, r6
 8001554:	d800      	bhi.n	8001558 <__aeabi_ddiv+0x4c4>
 8001556:	e6a3      	b.n	80012a0 <__aeabi_ddiv+0x20c>
 8001558:	1e83      	subs	r3, r0, #2
 800155a:	1936      	adds	r6, r6, r4
 800155c:	e6a0      	b.n	80012a0 <__aeabi_ddiv+0x20c>
 800155e:	1909      	adds	r1, r1, r4
 8001560:	3d01      	subs	r5, #1
 8001562:	428c      	cmp	r4, r1
 8001564:	d900      	bls.n	8001568 <__aeabi_ddiv+0x4d4>
 8001566:	e68d      	b.n	8001284 <__aeabi_ddiv+0x1f0>
 8001568:	428a      	cmp	r2, r1
 800156a:	d800      	bhi.n	800156e <__aeabi_ddiv+0x4da>
 800156c:	e68a      	b.n	8001284 <__aeabi_ddiv+0x1f0>
 800156e:	1e85      	subs	r5, r0, #2
 8001570:	1909      	adds	r1, r1, r4
 8001572:	e687      	b.n	8001284 <__aeabi_ddiv+0x1f0>
 8001574:	220f      	movs	r2, #15
 8001576:	402a      	ands	r2, r5
 8001578:	2a04      	cmp	r2, #4
 800157a:	d100      	bne.n	800157e <__aeabi_ddiv+0x4ea>
 800157c:	e6bc      	b.n	80012f8 <__aeabi_ddiv+0x264>
 800157e:	1d29      	adds	r1, r5, #4
 8001580:	42a9      	cmp	r1, r5
 8001582:	41ad      	sbcs	r5, r5
 8001584:	426d      	negs	r5, r5
 8001586:	08c9      	lsrs	r1, r1, #3
 8001588:	44a8      	add	r8, r5
 800158a:	e6b6      	b.n	80012fa <__aeabi_ddiv+0x266>
 800158c:	42af      	cmp	r7, r5
 800158e:	d900      	bls.n	8001592 <__aeabi_ddiv+0x4fe>
 8001590:	e662      	b.n	8001258 <__aeabi_ddiv+0x1c4>
 8001592:	4281      	cmp	r1, r0
 8001594:	d804      	bhi.n	80015a0 <__aeabi_ddiv+0x50c>
 8001596:	d000      	beq.n	800159a <__aeabi_ddiv+0x506>
 8001598:	e65e      	b.n	8001258 <__aeabi_ddiv+0x1c4>
 800159a:	42ae      	cmp	r6, r5
 800159c:	d800      	bhi.n	80015a0 <__aeabi_ddiv+0x50c>
 800159e:	e65b      	b.n	8001258 <__aeabi_ddiv+0x1c4>
 80015a0:	2302      	movs	r3, #2
 80015a2:	425b      	negs	r3, r3
 80015a4:	469c      	mov	ip, r3
 80015a6:	9b00      	ldr	r3, [sp, #0]
 80015a8:	44e0      	add	r8, ip
 80015aa:	469c      	mov	ip, r3
 80015ac:	4465      	add	r5, ip
 80015ae:	429d      	cmp	r5, r3
 80015b0:	419b      	sbcs	r3, r3
 80015b2:	425b      	negs	r3, r3
 80015b4:	191b      	adds	r3, r3, r4
 80015b6:	18c0      	adds	r0, r0, r3
 80015b8:	e64f      	b.n	800125a <__aeabi_ddiv+0x1c6>
 80015ba:	42b2      	cmp	r2, r6
 80015bc:	d800      	bhi.n	80015c0 <__aeabi_ddiv+0x52c>
 80015be:	e612      	b.n	80011e6 <__aeabi_ddiv+0x152>
 80015c0:	1e83      	subs	r3, r0, #2
 80015c2:	1936      	adds	r6, r6, r4
 80015c4:	e60f      	b.n	80011e6 <__aeabi_ddiv+0x152>
 80015c6:	428a      	cmp	r2, r1
 80015c8:	d800      	bhi.n	80015cc <__aeabi_ddiv+0x538>
 80015ca:	e5fa      	b.n	80011c2 <__aeabi_ddiv+0x12e>
 80015cc:	1e83      	subs	r3, r0, #2
 80015ce:	4698      	mov	r8, r3
 80015d0:	1909      	adds	r1, r1, r4
 80015d2:	e5f6      	b.n	80011c2 <__aeabi_ddiv+0x12e>
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <__aeabi_ddiv+0x5d4>)
 80015d6:	0028      	movs	r0, r5
 80015d8:	445b      	add	r3, fp
 80015da:	4641      	mov	r1, r8
 80015dc:	409d      	lsls	r5, r3
 80015de:	4099      	lsls	r1, r3
 80015e0:	40d0      	lsrs	r0, r2
 80015e2:	1e6b      	subs	r3, r5, #1
 80015e4:	419d      	sbcs	r5, r3
 80015e6:	4643      	mov	r3, r8
 80015e8:	4301      	orrs	r1, r0
 80015ea:	4329      	orrs	r1, r5
 80015ec:	40d3      	lsrs	r3, r2
 80015ee:	074a      	lsls	r2, r1, #29
 80015f0:	d100      	bne.n	80015f4 <__aeabi_ddiv+0x560>
 80015f2:	e755      	b.n	80014a0 <__aeabi_ddiv+0x40c>
 80015f4:	220f      	movs	r2, #15
 80015f6:	400a      	ands	r2, r1
 80015f8:	2a04      	cmp	r2, #4
 80015fa:	d000      	beq.n	80015fe <__aeabi_ddiv+0x56a>
 80015fc:	e74a      	b.n	8001494 <__aeabi_ddiv+0x400>
 80015fe:	e74f      	b.n	80014a0 <__aeabi_ddiv+0x40c>
 8001600:	0015      	movs	r5, r2
 8001602:	4286      	cmp	r6, r0
 8001604:	d000      	beq.n	8001608 <__aeabi_ddiv+0x574>
 8001606:	e66d      	b.n	80012e4 <__aeabi_ddiv+0x250>
 8001608:	9a00      	ldr	r2, [sp, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d000      	beq.n	8001610 <__aeabi_ddiv+0x57c>
 800160e:	e669      	b.n	80012e4 <__aeabi_ddiv+0x250>
 8001610:	e66a      	b.n	80012e8 <__aeabi_ddiv+0x254>
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <__aeabi_ddiv+0x5d8>)
 8001614:	445b      	add	r3, fp
 8001616:	2b00      	cmp	r3, #0
 8001618:	dc00      	bgt.n	800161c <__aeabi_ddiv+0x588>
 800161a:	e713      	b.n	8001444 <__aeabi_ddiv+0x3b0>
 800161c:	2501      	movs	r5, #1
 800161e:	2100      	movs	r1, #0
 8001620:	44a8      	add	r8, r5
 8001622:	e66a      	b.n	80012fa <__aeabi_ddiv+0x266>
 8001624:	075d      	lsls	r5, r3, #29
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	0b1a      	lsrs	r2, r3, #12
 800162a:	08c9      	lsrs	r1, r1, #3
 800162c:	2300      	movs	r3, #0
 800162e:	430d      	orrs	r5, r1
 8001630:	e587      	b.n	8001142 <__aeabi_ddiv+0xae>
 8001632:	9900      	ldr	r1, [sp, #0]
 8001634:	3d02      	subs	r5, #2
 8001636:	004a      	lsls	r2, r1, #1
 8001638:	428a      	cmp	r2, r1
 800163a:	41bf      	sbcs	r7, r7
 800163c:	427f      	negs	r7, r7
 800163e:	193f      	adds	r7, r7, r4
 8001640:	19f6      	adds	r6, r6, r7
 8001642:	9200      	str	r2, [sp, #0]
 8001644:	e7dd      	b.n	8001602 <__aeabi_ddiv+0x56e>
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	4643      	mov	r3, r8
 800164a:	0312      	lsls	r2, r2, #12
 800164c:	431a      	orrs	r2, r3
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <__aeabi_ddiv+0x5cc>)
 8001652:	0b12      	lsrs	r2, r2, #12
 8001654:	e575      	b.n	8001142 <__aeabi_ddiv+0xae>
 8001656:	9900      	ldr	r1, [sp, #0]
 8001658:	4299      	cmp	r1, r3
 800165a:	d3ea      	bcc.n	8001632 <__aeabi_ddiv+0x59e>
 800165c:	0015      	movs	r5, r2
 800165e:	e7d3      	b.n	8001608 <__aeabi_ddiv+0x574>
 8001660:	000007ff 	.word	0x000007ff
 8001664:	0000043e 	.word	0x0000043e
 8001668:	0000041e 	.word	0x0000041e
 800166c:	000003ff 	.word	0x000003ff

08001670 <__eqdf2>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	464e      	mov	r6, r9
 8001674:	4645      	mov	r5, r8
 8001676:	46de      	mov	lr, fp
 8001678:	4657      	mov	r7, sl
 800167a:	4690      	mov	r8, r2
 800167c:	b5e0      	push	{r5, r6, r7, lr}
 800167e:	0017      	movs	r7, r2
 8001680:	031a      	lsls	r2, r3, #12
 8001682:	0b12      	lsrs	r2, r2, #12
 8001684:	0005      	movs	r5, r0
 8001686:	4684      	mov	ip, r0
 8001688:	4819      	ldr	r0, [pc, #100]	; (80016f0 <__eqdf2+0x80>)
 800168a:	030e      	lsls	r6, r1, #12
 800168c:	004c      	lsls	r4, r1, #1
 800168e:	4691      	mov	r9, r2
 8001690:	005a      	lsls	r2, r3, #1
 8001692:	0fdb      	lsrs	r3, r3, #31
 8001694:	469b      	mov	fp, r3
 8001696:	0b36      	lsrs	r6, r6, #12
 8001698:	0d64      	lsrs	r4, r4, #21
 800169a:	0fc9      	lsrs	r1, r1, #31
 800169c:	0d52      	lsrs	r2, r2, #21
 800169e:	4284      	cmp	r4, r0
 80016a0:	d019      	beq.n	80016d6 <__eqdf2+0x66>
 80016a2:	4282      	cmp	r2, r0
 80016a4:	d010      	beq.n	80016c8 <__eqdf2+0x58>
 80016a6:	2001      	movs	r0, #1
 80016a8:	4294      	cmp	r4, r2
 80016aa:	d10e      	bne.n	80016ca <__eqdf2+0x5a>
 80016ac:	454e      	cmp	r6, r9
 80016ae:	d10c      	bne.n	80016ca <__eqdf2+0x5a>
 80016b0:	2001      	movs	r0, #1
 80016b2:	45c4      	cmp	ip, r8
 80016b4:	d109      	bne.n	80016ca <__eqdf2+0x5a>
 80016b6:	4559      	cmp	r1, fp
 80016b8:	d017      	beq.n	80016ea <__eqdf2+0x7a>
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d105      	bne.n	80016ca <__eqdf2+0x5a>
 80016be:	0030      	movs	r0, r6
 80016c0:	4328      	orrs	r0, r5
 80016c2:	1e43      	subs	r3, r0, #1
 80016c4:	4198      	sbcs	r0, r3
 80016c6:	e000      	b.n	80016ca <__eqdf2+0x5a>
 80016c8:	2001      	movs	r0, #1
 80016ca:	bcf0      	pop	{r4, r5, r6, r7}
 80016cc:	46bb      	mov	fp, r7
 80016ce:	46b2      	mov	sl, r6
 80016d0:	46a9      	mov	r9, r5
 80016d2:	46a0      	mov	r8, r4
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	0033      	movs	r3, r6
 80016d8:	2001      	movs	r0, #1
 80016da:	432b      	orrs	r3, r5
 80016dc:	d1f5      	bne.n	80016ca <__eqdf2+0x5a>
 80016de:	42a2      	cmp	r2, r4
 80016e0:	d1f3      	bne.n	80016ca <__eqdf2+0x5a>
 80016e2:	464b      	mov	r3, r9
 80016e4:	433b      	orrs	r3, r7
 80016e6:	d1f0      	bne.n	80016ca <__eqdf2+0x5a>
 80016e8:	e7e2      	b.n	80016b0 <__eqdf2+0x40>
 80016ea:	2000      	movs	r0, #0
 80016ec:	e7ed      	b.n	80016ca <__eqdf2+0x5a>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	000007ff 	.word	0x000007ff

080016f4 <__gedf2>:
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	4647      	mov	r7, r8
 80016f8:	46ce      	mov	lr, r9
 80016fa:	0004      	movs	r4, r0
 80016fc:	0018      	movs	r0, r3
 80016fe:	0016      	movs	r6, r2
 8001700:	031b      	lsls	r3, r3, #12
 8001702:	0b1b      	lsrs	r3, r3, #12
 8001704:	4d2d      	ldr	r5, [pc, #180]	; (80017bc <__gedf2+0xc8>)
 8001706:	004a      	lsls	r2, r1, #1
 8001708:	4699      	mov	r9, r3
 800170a:	b580      	push	{r7, lr}
 800170c:	0043      	lsls	r3, r0, #1
 800170e:	030f      	lsls	r7, r1, #12
 8001710:	46a4      	mov	ip, r4
 8001712:	46b0      	mov	r8, r6
 8001714:	0b3f      	lsrs	r7, r7, #12
 8001716:	0d52      	lsrs	r2, r2, #21
 8001718:	0fc9      	lsrs	r1, r1, #31
 800171a:	0d5b      	lsrs	r3, r3, #21
 800171c:	0fc0      	lsrs	r0, r0, #31
 800171e:	42aa      	cmp	r2, r5
 8001720:	d021      	beq.n	8001766 <__gedf2+0x72>
 8001722:	42ab      	cmp	r3, r5
 8001724:	d013      	beq.n	800174e <__gedf2+0x5a>
 8001726:	2a00      	cmp	r2, #0
 8001728:	d122      	bne.n	8001770 <__gedf2+0x7c>
 800172a:	433c      	orrs	r4, r7
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <__gedf2+0x42>
 8001730:	464d      	mov	r5, r9
 8001732:	432e      	orrs	r6, r5
 8001734:	d022      	beq.n	800177c <__gedf2+0x88>
 8001736:	2c00      	cmp	r4, #0
 8001738:	d010      	beq.n	800175c <__gedf2+0x68>
 800173a:	4281      	cmp	r1, r0
 800173c:	d022      	beq.n	8001784 <__gedf2+0x90>
 800173e:	2002      	movs	r0, #2
 8001740:	3901      	subs	r1, #1
 8001742:	4008      	ands	r0, r1
 8001744:	3801      	subs	r0, #1
 8001746:	bcc0      	pop	{r6, r7}
 8001748:	46b9      	mov	r9, r7
 800174a:	46b0      	mov	r8, r6
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174e:	464d      	mov	r5, r9
 8001750:	432e      	orrs	r6, r5
 8001752:	d129      	bne.n	80017a8 <__gedf2+0xb4>
 8001754:	2a00      	cmp	r2, #0
 8001756:	d1f0      	bne.n	800173a <__gedf2+0x46>
 8001758:	433c      	orrs	r4, r7
 800175a:	d1ee      	bne.n	800173a <__gedf2+0x46>
 800175c:	2800      	cmp	r0, #0
 800175e:	d1f2      	bne.n	8001746 <__gedf2+0x52>
 8001760:	2001      	movs	r0, #1
 8001762:	4240      	negs	r0, r0
 8001764:	e7ef      	b.n	8001746 <__gedf2+0x52>
 8001766:	003d      	movs	r5, r7
 8001768:	4325      	orrs	r5, r4
 800176a:	d11d      	bne.n	80017a8 <__gedf2+0xb4>
 800176c:	4293      	cmp	r3, r2
 800176e:	d0ee      	beq.n	800174e <__gedf2+0x5a>
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e2      	bne.n	800173a <__gedf2+0x46>
 8001774:	464c      	mov	r4, r9
 8001776:	4326      	orrs	r6, r4
 8001778:	d1df      	bne.n	800173a <__gedf2+0x46>
 800177a:	e7e0      	b.n	800173e <__gedf2+0x4a>
 800177c:	2000      	movs	r0, #0
 800177e:	2c00      	cmp	r4, #0
 8001780:	d0e1      	beq.n	8001746 <__gedf2+0x52>
 8001782:	e7dc      	b.n	800173e <__gedf2+0x4a>
 8001784:	429a      	cmp	r2, r3
 8001786:	dc0a      	bgt.n	800179e <__gedf2+0xaa>
 8001788:	dbe8      	blt.n	800175c <__gedf2+0x68>
 800178a:	454f      	cmp	r7, r9
 800178c:	d8d7      	bhi.n	800173e <__gedf2+0x4a>
 800178e:	d00e      	beq.n	80017ae <__gedf2+0xba>
 8001790:	2000      	movs	r0, #0
 8001792:	454f      	cmp	r7, r9
 8001794:	d2d7      	bcs.n	8001746 <__gedf2+0x52>
 8001796:	2900      	cmp	r1, #0
 8001798:	d0e2      	beq.n	8001760 <__gedf2+0x6c>
 800179a:	0008      	movs	r0, r1
 800179c:	e7d3      	b.n	8001746 <__gedf2+0x52>
 800179e:	4243      	negs	r3, r0
 80017a0:	4158      	adcs	r0, r3
 80017a2:	0040      	lsls	r0, r0, #1
 80017a4:	3801      	subs	r0, #1
 80017a6:	e7ce      	b.n	8001746 <__gedf2+0x52>
 80017a8:	2002      	movs	r0, #2
 80017aa:	4240      	negs	r0, r0
 80017ac:	e7cb      	b.n	8001746 <__gedf2+0x52>
 80017ae:	45c4      	cmp	ip, r8
 80017b0:	d8c5      	bhi.n	800173e <__gedf2+0x4a>
 80017b2:	2000      	movs	r0, #0
 80017b4:	45c4      	cmp	ip, r8
 80017b6:	d2c6      	bcs.n	8001746 <__gedf2+0x52>
 80017b8:	e7ed      	b.n	8001796 <__gedf2+0xa2>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	000007ff 	.word	0x000007ff

080017c0 <__ledf2>:
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	4647      	mov	r7, r8
 80017c4:	46ce      	mov	lr, r9
 80017c6:	0004      	movs	r4, r0
 80017c8:	0018      	movs	r0, r3
 80017ca:	0016      	movs	r6, r2
 80017cc:	031b      	lsls	r3, r3, #12
 80017ce:	0b1b      	lsrs	r3, r3, #12
 80017d0:	4d2c      	ldr	r5, [pc, #176]	; (8001884 <__ledf2+0xc4>)
 80017d2:	004a      	lsls	r2, r1, #1
 80017d4:	4699      	mov	r9, r3
 80017d6:	b580      	push	{r7, lr}
 80017d8:	0043      	lsls	r3, r0, #1
 80017da:	030f      	lsls	r7, r1, #12
 80017dc:	46a4      	mov	ip, r4
 80017de:	46b0      	mov	r8, r6
 80017e0:	0b3f      	lsrs	r7, r7, #12
 80017e2:	0d52      	lsrs	r2, r2, #21
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	0d5b      	lsrs	r3, r3, #21
 80017e8:	0fc0      	lsrs	r0, r0, #31
 80017ea:	42aa      	cmp	r2, r5
 80017ec:	d00d      	beq.n	800180a <__ledf2+0x4a>
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	d010      	beq.n	8001814 <__ledf2+0x54>
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d127      	bne.n	8001846 <__ledf2+0x86>
 80017f6:	433c      	orrs	r4, r7
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d111      	bne.n	8001820 <__ledf2+0x60>
 80017fc:	464d      	mov	r5, r9
 80017fe:	432e      	orrs	r6, r5
 8001800:	d10e      	bne.n	8001820 <__ledf2+0x60>
 8001802:	2000      	movs	r0, #0
 8001804:	2c00      	cmp	r4, #0
 8001806:	d015      	beq.n	8001834 <__ledf2+0x74>
 8001808:	e00e      	b.n	8001828 <__ledf2+0x68>
 800180a:	003d      	movs	r5, r7
 800180c:	4325      	orrs	r5, r4
 800180e:	d110      	bne.n	8001832 <__ledf2+0x72>
 8001810:	4293      	cmp	r3, r2
 8001812:	d118      	bne.n	8001846 <__ledf2+0x86>
 8001814:	464d      	mov	r5, r9
 8001816:	432e      	orrs	r6, r5
 8001818:	d10b      	bne.n	8001832 <__ledf2+0x72>
 800181a:	2a00      	cmp	r2, #0
 800181c:	d102      	bne.n	8001824 <__ledf2+0x64>
 800181e:	433c      	orrs	r4, r7
 8001820:	2c00      	cmp	r4, #0
 8001822:	d00b      	beq.n	800183c <__ledf2+0x7c>
 8001824:	4281      	cmp	r1, r0
 8001826:	d014      	beq.n	8001852 <__ledf2+0x92>
 8001828:	2002      	movs	r0, #2
 800182a:	3901      	subs	r1, #1
 800182c:	4008      	ands	r0, r1
 800182e:	3801      	subs	r0, #1
 8001830:	e000      	b.n	8001834 <__ledf2+0x74>
 8001832:	2002      	movs	r0, #2
 8001834:	bcc0      	pop	{r6, r7}
 8001836:	46b9      	mov	r9, r7
 8001838:	46b0      	mov	r8, r6
 800183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183c:	2800      	cmp	r0, #0
 800183e:	d1f9      	bne.n	8001834 <__ledf2+0x74>
 8001840:	2001      	movs	r0, #1
 8001842:	4240      	negs	r0, r0
 8001844:	e7f6      	b.n	8001834 <__ledf2+0x74>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ec      	bne.n	8001824 <__ledf2+0x64>
 800184a:	464c      	mov	r4, r9
 800184c:	4326      	orrs	r6, r4
 800184e:	d1e9      	bne.n	8001824 <__ledf2+0x64>
 8001850:	e7ea      	b.n	8001828 <__ledf2+0x68>
 8001852:	429a      	cmp	r2, r3
 8001854:	dd04      	ble.n	8001860 <__ledf2+0xa0>
 8001856:	4243      	negs	r3, r0
 8001858:	4158      	adcs	r0, r3
 800185a:	0040      	lsls	r0, r0, #1
 800185c:	3801      	subs	r0, #1
 800185e:	e7e9      	b.n	8001834 <__ledf2+0x74>
 8001860:	429a      	cmp	r2, r3
 8001862:	dbeb      	blt.n	800183c <__ledf2+0x7c>
 8001864:	454f      	cmp	r7, r9
 8001866:	d8df      	bhi.n	8001828 <__ledf2+0x68>
 8001868:	d006      	beq.n	8001878 <__ledf2+0xb8>
 800186a:	2000      	movs	r0, #0
 800186c:	454f      	cmp	r7, r9
 800186e:	d2e1      	bcs.n	8001834 <__ledf2+0x74>
 8001870:	2900      	cmp	r1, #0
 8001872:	d0e5      	beq.n	8001840 <__ledf2+0x80>
 8001874:	0008      	movs	r0, r1
 8001876:	e7dd      	b.n	8001834 <__ledf2+0x74>
 8001878:	45c4      	cmp	ip, r8
 800187a:	d8d5      	bhi.n	8001828 <__ledf2+0x68>
 800187c:	2000      	movs	r0, #0
 800187e:	45c4      	cmp	ip, r8
 8001880:	d2d8      	bcs.n	8001834 <__ledf2+0x74>
 8001882:	e7f5      	b.n	8001870 <__ledf2+0xb0>
 8001884:	000007ff 	.word	0x000007ff

08001888 <__aeabi_dmul>:
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	4645      	mov	r5, r8
 800188c:	46de      	mov	lr, fp
 800188e:	4657      	mov	r7, sl
 8001890:	464e      	mov	r6, r9
 8001892:	b5e0      	push	{r5, r6, r7, lr}
 8001894:	001f      	movs	r7, r3
 8001896:	030b      	lsls	r3, r1, #12
 8001898:	0b1b      	lsrs	r3, r3, #12
 800189a:	469b      	mov	fp, r3
 800189c:	004d      	lsls	r5, r1, #1
 800189e:	0fcb      	lsrs	r3, r1, #31
 80018a0:	0004      	movs	r4, r0
 80018a2:	4691      	mov	r9, r2
 80018a4:	4698      	mov	r8, r3
 80018a6:	b087      	sub	sp, #28
 80018a8:	0d6d      	lsrs	r5, r5, #21
 80018aa:	d100      	bne.n	80018ae <__aeabi_dmul+0x26>
 80018ac:	e1cd      	b.n	8001c4a <__aeabi_dmul+0x3c2>
 80018ae:	4bce      	ldr	r3, [pc, #824]	; (8001be8 <__aeabi_dmul+0x360>)
 80018b0:	429d      	cmp	r5, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dmul+0x2e>
 80018b4:	e1e9      	b.n	8001c8a <__aeabi_dmul+0x402>
 80018b6:	465a      	mov	r2, fp
 80018b8:	0f43      	lsrs	r3, r0, #29
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	4313      	orrs	r3, r2
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0412      	lsls	r2, r2, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	00c3      	lsls	r3, r0, #3
 80018c6:	469a      	mov	sl, r3
 80018c8:	4bc8      	ldr	r3, [pc, #800]	; (8001bec <__aeabi_dmul+0x364>)
 80018ca:	4693      	mov	fp, r2
 80018cc:	469c      	mov	ip, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	2600      	movs	r6, #0
 80018d2:	4465      	add	r5, ip
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	033c      	lsls	r4, r7, #12
 80018d8:	007b      	lsls	r3, r7, #1
 80018da:	4648      	mov	r0, r9
 80018dc:	0b24      	lsrs	r4, r4, #12
 80018de:	0d5b      	lsrs	r3, r3, #21
 80018e0:	0fff      	lsrs	r7, r7, #31
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dmul+0x60>
 80018e6:	e189      	b.n	8001bfc <__aeabi_dmul+0x374>
 80018e8:	4abf      	ldr	r2, [pc, #764]	; (8001be8 <__aeabi_dmul+0x360>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <__aeabi_dmul+0x9a>
 80018ee:	0f42      	lsrs	r2, r0, #29
 80018f0:	00e4      	lsls	r4, r4, #3
 80018f2:	4322      	orrs	r2, r4
 80018f4:	2480      	movs	r4, #128	; 0x80
 80018f6:	0424      	lsls	r4, r4, #16
 80018f8:	4314      	orrs	r4, r2
 80018fa:	4abc      	ldr	r2, [pc, #752]	; (8001bec <__aeabi_dmul+0x364>)
 80018fc:	2100      	movs	r1, #0
 80018fe:	4694      	mov	ip, r2
 8001900:	4642      	mov	r2, r8
 8001902:	4463      	add	r3, ip
 8001904:	195b      	adds	r3, r3, r5
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	9b01      	ldr	r3, [sp, #4]
 800190a:	407a      	eors	r2, r7
 800190c:	3301      	adds	r3, #1
 800190e:	00c0      	lsls	r0, r0, #3
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2e0a      	cmp	r6, #10
 8001916:	dd1c      	ble.n	8001952 <__aeabi_dmul+0xca>
 8001918:	003a      	movs	r2, r7
 800191a:	2e0b      	cmp	r6, #11
 800191c:	d05e      	beq.n	80019dc <__aeabi_dmul+0x154>
 800191e:	4647      	mov	r7, r8
 8001920:	e056      	b.n	80019d0 <__aeabi_dmul+0x148>
 8001922:	4649      	mov	r1, r9
 8001924:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <__aeabi_dmul+0x360>)
 8001926:	4321      	orrs	r1, r4
 8001928:	18eb      	adds	r3, r5, r3
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2900      	cmp	r1, #0
 800192e:	d12a      	bne.n	8001986 <__aeabi_dmul+0xfe>
 8001930:	2080      	movs	r0, #128	; 0x80
 8001932:	2202      	movs	r2, #2
 8001934:	0100      	lsls	r0, r0, #4
 8001936:	002b      	movs	r3, r5
 8001938:	4684      	mov	ip, r0
 800193a:	4316      	orrs	r6, r2
 800193c:	4642      	mov	r2, r8
 800193e:	4463      	add	r3, ip
 8001940:	407a      	eors	r2, r7
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2e0a      	cmp	r6, #10
 8001948:	dd00      	ble.n	800194c <__aeabi_dmul+0xc4>
 800194a:	e231      	b.n	8001db0 <__aeabi_dmul+0x528>
 800194c:	2000      	movs	r0, #0
 800194e:	2400      	movs	r4, #0
 8001950:	2102      	movs	r1, #2
 8001952:	2e02      	cmp	r6, #2
 8001954:	dc26      	bgt.n	80019a4 <__aeabi_dmul+0x11c>
 8001956:	3e01      	subs	r6, #1
 8001958:	2e01      	cmp	r6, #1
 800195a:	d852      	bhi.n	8001a02 <__aeabi_dmul+0x17a>
 800195c:	2902      	cmp	r1, #2
 800195e:	d04c      	beq.n	80019fa <__aeabi_dmul+0x172>
 8001960:	2901      	cmp	r1, #1
 8001962:	d000      	beq.n	8001966 <__aeabi_dmul+0xde>
 8001964:	e118      	b.n	8001b98 <__aeabi_dmul+0x310>
 8001966:	2300      	movs	r3, #0
 8001968:	2400      	movs	r4, #0
 800196a:	2500      	movs	r5, #0
 800196c:	051b      	lsls	r3, r3, #20
 800196e:	4323      	orrs	r3, r4
 8001970:	07d2      	lsls	r2, r2, #31
 8001972:	4313      	orrs	r3, r2
 8001974:	0028      	movs	r0, r5
 8001976:	0019      	movs	r1, r3
 8001978:	b007      	add	sp, #28
 800197a:	bcf0      	pop	{r4, r5, r6, r7}
 800197c:	46bb      	mov	fp, r7
 800197e:	46b2      	mov	sl, r6
 8001980:	46a9      	mov	r9, r5
 8001982:	46a0      	mov	r8, r4
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	2203      	movs	r2, #3
 800198a:	0109      	lsls	r1, r1, #4
 800198c:	002b      	movs	r3, r5
 800198e:	468c      	mov	ip, r1
 8001990:	4316      	orrs	r6, r2
 8001992:	4642      	mov	r2, r8
 8001994:	4463      	add	r3, ip
 8001996:	407a      	eors	r2, r7
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2e0a      	cmp	r6, #10
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dmul+0x11a>
 80019a0:	e228      	b.n	8001df4 <__aeabi_dmul+0x56c>
 80019a2:	2103      	movs	r1, #3
 80019a4:	2501      	movs	r5, #1
 80019a6:	40b5      	lsls	r5, r6
 80019a8:	46ac      	mov	ip, r5
 80019aa:	26a6      	movs	r6, #166	; 0xa6
 80019ac:	4663      	mov	r3, ip
 80019ae:	00f6      	lsls	r6, r6, #3
 80019b0:	4035      	ands	r5, r6
 80019b2:	4233      	tst	r3, r6
 80019b4:	d10b      	bne.n	80019ce <__aeabi_dmul+0x146>
 80019b6:	2690      	movs	r6, #144	; 0x90
 80019b8:	00b6      	lsls	r6, r6, #2
 80019ba:	4233      	tst	r3, r6
 80019bc:	d118      	bne.n	80019f0 <__aeabi_dmul+0x168>
 80019be:	3eb9      	subs	r6, #185	; 0xb9
 80019c0:	3eff      	subs	r6, #255	; 0xff
 80019c2:	421e      	tst	r6, r3
 80019c4:	d01d      	beq.n	8001a02 <__aeabi_dmul+0x17a>
 80019c6:	46a3      	mov	fp, r4
 80019c8:	4682      	mov	sl, r0
 80019ca:	9100      	str	r1, [sp, #0]
 80019cc:	e000      	b.n	80019d0 <__aeabi_dmul+0x148>
 80019ce:	0017      	movs	r7, r2
 80019d0:	9900      	ldr	r1, [sp, #0]
 80019d2:	003a      	movs	r2, r7
 80019d4:	2902      	cmp	r1, #2
 80019d6:	d010      	beq.n	80019fa <__aeabi_dmul+0x172>
 80019d8:	465c      	mov	r4, fp
 80019da:	4650      	mov	r0, sl
 80019dc:	2903      	cmp	r1, #3
 80019de:	d1bf      	bne.n	8001960 <__aeabi_dmul+0xd8>
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	031b      	lsls	r3, r3, #12
 80019e4:	431c      	orrs	r4, r3
 80019e6:	0324      	lsls	r4, r4, #12
 80019e8:	0005      	movs	r5, r0
 80019ea:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <__aeabi_dmul+0x360>)
 80019ec:	0b24      	lsrs	r4, r4, #12
 80019ee:	e7bd      	b.n	800196c <__aeabi_dmul+0xe4>
 80019f0:	2480      	movs	r4, #128	; 0x80
 80019f2:	2200      	movs	r2, #0
 80019f4:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <__aeabi_dmul+0x360>)
 80019f6:	0324      	lsls	r4, r4, #12
 80019f8:	e7b8      	b.n	800196c <__aeabi_dmul+0xe4>
 80019fa:	2400      	movs	r4, #0
 80019fc:	2500      	movs	r5, #0
 80019fe:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <__aeabi_dmul+0x360>)
 8001a00:	e7b4      	b.n	800196c <__aeabi_dmul+0xe4>
 8001a02:	4653      	mov	r3, sl
 8001a04:	041e      	lsls	r6, r3, #16
 8001a06:	0c36      	lsrs	r6, r6, #16
 8001a08:	0c1f      	lsrs	r7, r3, #16
 8001a0a:	0033      	movs	r3, r6
 8001a0c:	0c01      	lsrs	r1, r0, #16
 8001a0e:	0400      	lsls	r0, r0, #16
 8001a10:	0c00      	lsrs	r0, r0, #16
 8001a12:	4343      	muls	r3, r0
 8001a14:	4698      	mov	r8, r3
 8001a16:	0003      	movs	r3, r0
 8001a18:	437b      	muls	r3, r7
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	0033      	movs	r3, r6
 8001a1e:	434b      	muls	r3, r1
 8001a20:	469c      	mov	ip, r3
 8001a22:	4643      	mov	r3, r8
 8001a24:	000d      	movs	r5, r1
 8001a26:	0c1b      	lsrs	r3, r3, #16
 8001a28:	469a      	mov	sl, r3
 8001a2a:	437d      	muls	r5, r7
 8001a2c:	44cc      	add	ip, r9
 8001a2e:	44d4      	add	ip, sl
 8001a30:	9500      	str	r5, [sp, #0]
 8001a32:	45e1      	cmp	r9, ip
 8001a34:	d904      	bls.n	8001a40 <__aeabi_dmul+0x1b8>
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	444d      	add	r5, r9
 8001a3e:	9500      	str	r5, [sp, #0]
 8001a40:	4663      	mov	r3, ip
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	001d      	movs	r5, r3
 8001a46:	4663      	mov	r3, ip
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	4643      	mov	r3, r8
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	4698      	mov	r8, r3
 8001a54:	4663      	mov	r3, ip
 8001a56:	4443      	add	r3, r8
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	0c23      	lsrs	r3, r4, #16
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	0033      	movs	r3, r6
 8001a60:	0424      	lsls	r4, r4, #16
 8001a62:	0c24      	lsrs	r4, r4, #16
 8001a64:	4363      	muls	r3, r4
 8001a66:	469c      	mov	ip, r3
 8001a68:	0023      	movs	r3, r4
 8001a6a:	437b      	muls	r3, r7
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	4643      	mov	r3, r8
 8001a70:	435e      	muls	r6, r3
 8001a72:	435f      	muls	r7, r3
 8001a74:	444e      	add	r6, r9
 8001a76:	4663      	mov	r3, ip
 8001a78:	46b2      	mov	sl, r6
 8001a7a:	0c1e      	lsrs	r6, r3, #16
 8001a7c:	4456      	add	r6, sl
 8001a7e:	45b1      	cmp	r9, r6
 8001a80:	d903      	bls.n	8001a8a <__aeabi_dmul+0x202>
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	4699      	mov	r9, r3
 8001a88:	444f      	add	r7, r9
 8001a8a:	0c33      	lsrs	r3, r6, #16
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	003b      	movs	r3, r7
 8001a90:	444b      	add	r3, r9
 8001a92:	9305      	str	r3, [sp, #20]
 8001a94:	4663      	mov	r3, ip
 8001a96:	46ac      	mov	ip, r5
 8001a98:	041f      	lsls	r7, r3, #16
 8001a9a:	0c3f      	lsrs	r7, r7, #16
 8001a9c:	0436      	lsls	r6, r6, #16
 8001a9e:	19f6      	adds	r6, r6, r7
 8001aa0:	44b4      	add	ip, r6
 8001aa2:	4663      	mov	r3, ip
 8001aa4:	9304      	str	r3, [sp, #16]
 8001aa6:	465b      	mov	r3, fp
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	469c      	mov	ip, r3
 8001aac:	465b      	mov	r3, fp
 8001aae:	041f      	lsls	r7, r3, #16
 8001ab0:	0c3f      	lsrs	r7, r7, #16
 8001ab2:	003b      	movs	r3, r7
 8001ab4:	4343      	muls	r3, r0
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	4663      	mov	r3, ip
 8001aba:	4343      	muls	r3, r0
 8001abc:	469a      	mov	sl, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	4660      	mov	r0, ip
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	469b      	mov	fp, r3
 8001ac6:	4348      	muls	r0, r1
 8001ac8:	4379      	muls	r1, r7
 8001aca:	4451      	add	r1, sl
 8001acc:	4459      	add	r1, fp
 8001ace:	458a      	cmp	sl, r1
 8001ad0:	d903      	bls.n	8001ada <__aeabi_dmul+0x252>
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	469a      	mov	sl, r3
 8001ad8:	4450      	add	r0, sl
 8001ada:	0c0b      	lsrs	r3, r1, #16
 8001adc:	469a      	mov	sl, r3
 8001ade:	464b      	mov	r3, r9
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	003b      	movs	r3, r7
 8001ae8:	4363      	muls	r3, r4
 8001aea:	0409      	lsls	r1, r1, #16
 8001aec:	4645      	mov	r5, r8
 8001aee:	4449      	add	r1, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4663      	mov	r3, ip
 8001af4:	435c      	muls	r4, r3
 8001af6:	436b      	muls	r3, r5
 8001af8:	469c      	mov	ip, r3
 8001afa:	464b      	mov	r3, r9
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	4698      	mov	r8, r3
 8001b00:	436f      	muls	r7, r5
 8001b02:	193f      	adds	r7, r7, r4
 8001b04:	4447      	add	r7, r8
 8001b06:	4450      	add	r0, sl
 8001b08:	42bc      	cmp	r4, r7
 8001b0a:	d903      	bls.n	8001b14 <__aeabi_dmul+0x28c>
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	4698      	mov	r8, r3
 8001b12:	44c4      	add	ip, r8
 8001b14:	9b04      	ldr	r3, [sp, #16]
 8001b16:	9d00      	ldr	r5, [sp, #0]
 8001b18:	4698      	mov	r8, r3
 8001b1a:	4445      	add	r5, r8
 8001b1c:	42b5      	cmp	r5, r6
 8001b1e:	41b6      	sbcs	r6, r6
 8001b20:	4273      	negs	r3, r6
 8001b22:	4698      	mov	r8, r3
 8001b24:	464b      	mov	r3, r9
 8001b26:	041e      	lsls	r6, r3, #16
 8001b28:	9b05      	ldr	r3, [sp, #20]
 8001b2a:	043c      	lsls	r4, r7, #16
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	0c36      	lsrs	r6, r6, #16
 8001b30:	19a4      	adds	r4, r4, r6
 8001b32:	444c      	add	r4, r9
 8001b34:	46a1      	mov	r9, r4
 8001b36:	4683      	mov	fp, r0
 8001b38:	186e      	adds	r6, r5, r1
 8001b3a:	44c1      	add	r9, r8
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	4189      	sbcs	r1, r1
 8001b40:	44cb      	add	fp, r9
 8001b42:	465d      	mov	r5, fp
 8001b44:	4249      	negs	r1, r1
 8001b46:	186d      	adds	r5, r5, r1
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	41a4      	sbcs	r4, r4
 8001b4c:	45c1      	cmp	r9, r8
 8001b4e:	419b      	sbcs	r3, r3
 8001b50:	4583      	cmp	fp, r0
 8001b52:	4180      	sbcs	r0, r0
 8001b54:	428d      	cmp	r5, r1
 8001b56:	4189      	sbcs	r1, r1
 8001b58:	425b      	negs	r3, r3
 8001b5a:	4264      	negs	r4, r4
 8001b5c:	431c      	orrs	r4, r3
 8001b5e:	4240      	negs	r0, r0
 8001b60:	9b03      	ldr	r3, [sp, #12]
 8001b62:	4249      	negs	r1, r1
 8001b64:	4301      	orrs	r1, r0
 8001b66:	0270      	lsls	r0, r6, #9
 8001b68:	0c3f      	lsrs	r7, r7, #16
 8001b6a:	4318      	orrs	r0, r3
 8001b6c:	19e4      	adds	r4, r4, r7
 8001b6e:	1e47      	subs	r7, r0, #1
 8001b70:	41b8      	sbcs	r0, r7
 8001b72:	1864      	adds	r4, r4, r1
 8001b74:	4464      	add	r4, ip
 8001b76:	0df6      	lsrs	r6, r6, #23
 8001b78:	0261      	lsls	r1, r4, #9
 8001b7a:	4330      	orrs	r0, r6
 8001b7c:	0dec      	lsrs	r4, r5, #23
 8001b7e:	026e      	lsls	r6, r5, #9
 8001b80:	430c      	orrs	r4, r1
 8001b82:	4330      	orrs	r0, r6
 8001b84:	01c9      	lsls	r1, r1, #7
 8001b86:	d400      	bmi.n	8001b8a <__aeabi_dmul+0x302>
 8001b88:	e0f1      	b.n	8001d6e <__aeabi_dmul+0x4e6>
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	0843      	lsrs	r3, r0, #1
 8001b8e:	4001      	ands	r1, r0
 8001b90:	430b      	orrs	r3, r1
 8001b92:	07e0      	lsls	r0, r4, #31
 8001b94:	4318      	orrs	r0, r3
 8001b96:	0864      	lsrs	r4, r4, #1
 8001b98:	4915      	ldr	r1, [pc, #84]	; (8001bf0 <__aeabi_dmul+0x368>)
 8001b9a:	9b02      	ldr	r3, [sp, #8]
 8001b9c:	468c      	mov	ip, r1
 8001b9e:	4463      	add	r3, ip
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dc00      	bgt.n	8001ba6 <__aeabi_dmul+0x31e>
 8001ba4:	e097      	b.n	8001cd6 <__aeabi_dmul+0x44e>
 8001ba6:	0741      	lsls	r1, r0, #29
 8001ba8:	d009      	beq.n	8001bbe <__aeabi_dmul+0x336>
 8001baa:	210f      	movs	r1, #15
 8001bac:	4001      	ands	r1, r0
 8001bae:	2904      	cmp	r1, #4
 8001bb0:	d005      	beq.n	8001bbe <__aeabi_dmul+0x336>
 8001bb2:	1d01      	adds	r1, r0, #4
 8001bb4:	4281      	cmp	r1, r0
 8001bb6:	4180      	sbcs	r0, r0
 8001bb8:	4240      	negs	r0, r0
 8001bba:	1824      	adds	r4, r4, r0
 8001bbc:	0008      	movs	r0, r1
 8001bbe:	01e1      	lsls	r1, r4, #7
 8001bc0:	d506      	bpl.n	8001bd0 <__aeabi_dmul+0x348>
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	00c9      	lsls	r1, r1, #3
 8001bc6:	468c      	mov	ip, r1
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <__aeabi_dmul+0x36c>)
 8001bca:	401c      	ands	r4, r3
 8001bcc:	9b02      	ldr	r3, [sp, #8]
 8001bce:	4463      	add	r3, ip
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <__aeabi_dmul+0x370>)
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dmul+0x350>
 8001bd6:	e710      	b.n	80019fa <__aeabi_dmul+0x172>
 8001bd8:	0761      	lsls	r1, r4, #29
 8001bda:	08c5      	lsrs	r5, r0, #3
 8001bdc:	0264      	lsls	r4, r4, #9
 8001bde:	055b      	lsls	r3, r3, #21
 8001be0:	430d      	orrs	r5, r1
 8001be2:	0b24      	lsrs	r4, r4, #12
 8001be4:	0d5b      	lsrs	r3, r3, #21
 8001be6:	e6c1      	b.n	800196c <__aeabi_dmul+0xe4>
 8001be8:	000007ff 	.word	0x000007ff
 8001bec:	fffffc01 	.word	0xfffffc01
 8001bf0:	000003ff 	.word	0x000003ff
 8001bf4:	feffffff 	.word	0xfeffffff
 8001bf8:	000007fe 	.word	0x000007fe
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	d059      	beq.n	8001cb6 <__aeabi_dmul+0x42e>
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dmul+0x380>
 8001c06:	e0a3      	b.n	8001d50 <__aeabi_dmul+0x4c8>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f000 fdf9 	bl	8002800 <__clzsi2>
 8001c0e:	0001      	movs	r1, r0
 8001c10:	0003      	movs	r3, r0
 8001c12:	390b      	subs	r1, #11
 8001c14:	221d      	movs	r2, #29
 8001c16:	1a52      	subs	r2, r2, r1
 8001c18:	4649      	mov	r1, r9
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	40d1      	lsrs	r1, r2
 8001c1e:	464a      	mov	r2, r9
 8001c20:	3808      	subs	r0, #8
 8001c22:	4082      	lsls	r2, r0
 8001c24:	4084      	lsls	r4, r0
 8001c26:	0010      	movs	r0, r2
 8001c28:	430c      	orrs	r4, r1
 8001c2a:	4a74      	ldr	r2, [pc, #464]	; (8001dfc <__aeabi_dmul+0x574>)
 8001c2c:	1aeb      	subs	r3, r5, r3
 8001c2e:	4694      	mov	ip, r2
 8001c30:	4642      	mov	r2, r8
 8001c32:	4463      	add	r3, ip
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	407a      	eors	r2, r7
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	2e0a      	cmp	r6, #10
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dmul+0x3c0>
 8001c46:	e667      	b.n	8001918 <__aeabi_dmul+0x90>
 8001c48:	e683      	b.n	8001952 <__aeabi_dmul+0xca>
 8001c4a:	465b      	mov	r3, fp
 8001c4c:	4303      	orrs	r3, r0
 8001c4e:	469a      	mov	sl, r3
 8001c50:	d02a      	beq.n	8001ca8 <__aeabi_dmul+0x420>
 8001c52:	465b      	mov	r3, fp
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d06d      	beq.n	8001d34 <__aeabi_dmul+0x4ac>
 8001c58:	4658      	mov	r0, fp
 8001c5a:	f000 fdd1 	bl	8002800 <__clzsi2>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	0003      	movs	r3, r0
 8001c62:	390b      	subs	r1, #11
 8001c64:	221d      	movs	r2, #29
 8001c66:	1a52      	subs	r2, r2, r1
 8001c68:	0021      	movs	r1, r4
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	40d1      	lsrs	r1, r2
 8001c70:	3808      	subs	r0, #8
 8001c72:	4085      	lsls	r5, r0
 8001c74:	000a      	movs	r2, r1
 8001c76:	4084      	lsls	r4, r0
 8001c78:	432a      	orrs	r2, r5
 8001c7a:	4693      	mov	fp, r2
 8001c7c:	46a2      	mov	sl, r4
 8001c7e:	4d5f      	ldr	r5, [pc, #380]	; (8001dfc <__aeabi_dmul+0x574>)
 8001c80:	2600      	movs	r6, #0
 8001c82:	1aed      	subs	r5, r5, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	e625      	b.n	80018d6 <__aeabi_dmul+0x4e>
 8001c8a:	465b      	mov	r3, fp
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	469a      	mov	sl, r3
 8001c90:	d105      	bne.n	8001c9e <__aeabi_dmul+0x416>
 8001c92:	2300      	movs	r3, #0
 8001c94:	469b      	mov	fp, r3
 8001c96:	3302      	adds	r3, #2
 8001c98:	2608      	movs	r6, #8
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	e61b      	b.n	80018d6 <__aeabi_dmul+0x4e>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	4682      	mov	sl, r0
 8001ca2:	260c      	movs	r6, #12
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	e616      	b.n	80018d6 <__aeabi_dmul+0x4e>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	469b      	mov	fp, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	2604      	movs	r6, #4
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	e60f      	b.n	80018d6 <__aeabi_dmul+0x4e>
 8001cb6:	4642      	mov	r2, r8
 8001cb8:	3301      	adds	r3, #1
 8001cba:	9501      	str	r5, [sp, #4]
 8001cbc:	431e      	orrs	r6, r3
 8001cbe:	9b01      	ldr	r3, [sp, #4]
 8001cc0:	407a      	eors	r2, r7
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	2101      	movs	r1, #1
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2e0a      	cmp	r6, #10
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dmul+0x44c>
 8001cd2:	e621      	b.n	8001918 <__aeabi_dmul+0x90>
 8001cd4:	e63d      	b.n	8001952 <__aeabi_dmul+0xca>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	1ac9      	subs	r1, r1, r3
 8001cda:	2938      	cmp	r1, #56	; 0x38
 8001cdc:	dd00      	ble.n	8001ce0 <__aeabi_dmul+0x458>
 8001cde:	e642      	b.n	8001966 <__aeabi_dmul+0xde>
 8001ce0:	291f      	cmp	r1, #31
 8001ce2:	dd47      	ble.n	8001d74 <__aeabi_dmul+0x4ec>
 8001ce4:	261f      	movs	r6, #31
 8001ce6:	0025      	movs	r5, r4
 8001ce8:	4276      	negs	r6, r6
 8001cea:	1af3      	subs	r3, r6, r3
 8001cec:	40dd      	lsrs	r5, r3
 8001cee:	002b      	movs	r3, r5
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	d005      	beq.n	8001d00 <__aeabi_dmul+0x478>
 8001cf4:	4942      	ldr	r1, [pc, #264]	; (8001e00 <__aeabi_dmul+0x578>)
 8001cf6:	9d02      	ldr	r5, [sp, #8]
 8001cf8:	468c      	mov	ip, r1
 8001cfa:	4465      	add	r5, ip
 8001cfc:	40ac      	lsls	r4, r5
 8001cfe:	4320      	orrs	r0, r4
 8001d00:	1e41      	subs	r1, r0, #1
 8001d02:	4188      	sbcs	r0, r1
 8001d04:	4318      	orrs	r0, r3
 8001d06:	2307      	movs	r3, #7
 8001d08:	001d      	movs	r5, r3
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	4005      	ands	r5, r0
 8001d0e:	4203      	tst	r3, r0
 8001d10:	d04a      	beq.n	8001da8 <__aeabi_dmul+0x520>
 8001d12:	230f      	movs	r3, #15
 8001d14:	2400      	movs	r4, #0
 8001d16:	4003      	ands	r3, r0
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d042      	beq.n	8001da2 <__aeabi_dmul+0x51a>
 8001d1c:	1d03      	adds	r3, r0, #4
 8001d1e:	4283      	cmp	r3, r0
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	4240      	negs	r0, r0
 8001d24:	1824      	adds	r4, r4, r0
 8001d26:	0018      	movs	r0, r3
 8001d28:	0223      	lsls	r3, r4, #8
 8001d2a:	d53a      	bpl.n	8001da2 <__aeabi_dmul+0x51a>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2400      	movs	r4, #0
 8001d30:	2500      	movs	r5, #0
 8001d32:	e61b      	b.n	800196c <__aeabi_dmul+0xe4>
 8001d34:	f000 fd64 	bl	8002800 <__clzsi2>
 8001d38:	0001      	movs	r1, r0
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	3115      	adds	r1, #21
 8001d3e:	3320      	adds	r3, #32
 8001d40:	291c      	cmp	r1, #28
 8001d42:	dd8f      	ble.n	8001c64 <__aeabi_dmul+0x3dc>
 8001d44:	3808      	subs	r0, #8
 8001d46:	2200      	movs	r2, #0
 8001d48:	4084      	lsls	r4, r0
 8001d4a:	4692      	mov	sl, r2
 8001d4c:	46a3      	mov	fp, r4
 8001d4e:	e796      	b.n	8001c7e <__aeabi_dmul+0x3f6>
 8001d50:	f000 fd56 	bl	8002800 <__clzsi2>
 8001d54:	0001      	movs	r1, r0
 8001d56:	0003      	movs	r3, r0
 8001d58:	3115      	adds	r1, #21
 8001d5a:	3320      	adds	r3, #32
 8001d5c:	291c      	cmp	r1, #28
 8001d5e:	dc00      	bgt.n	8001d62 <__aeabi_dmul+0x4da>
 8001d60:	e758      	b.n	8001c14 <__aeabi_dmul+0x38c>
 8001d62:	0002      	movs	r2, r0
 8001d64:	464c      	mov	r4, r9
 8001d66:	3a08      	subs	r2, #8
 8001d68:	2000      	movs	r0, #0
 8001d6a:	4094      	lsls	r4, r2
 8001d6c:	e75d      	b.n	8001c2a <__aeabi_dmul+0x3a2>
 8001d6e:	9b01      	ldr	r3, [sp, #4]
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	e711      	b.n	8001b98 <__aeabi_dmul+0x310>
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <__aeabi_dmul+0x57c>)
 8001d76:	0026      	movs	r6, r4
 8001d78:	469c      	mov	ip, r3
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	9d02      	ldr	r5, [sp, #8]
 8001d7e:	40cb      	lsrs	r3, r1
 8001d80:	4465      	add	r5, ip
 8001d82:	40ae      	lsls	r6, r5
 8001d84:	431e      	orrs	r6, r3
 8001d86:	0003      	movs	r3, r0
 8001d88:	40ab      	lsls	r3, r5
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	4183      	sbcs	r3, r0
 8001d8e:	0030      	movs	r0, r6
 8001d90:	4318      	orrs	r0, r3
 8001d92:	40cc      	lsrs	r4, r1
 8001d94:	0743      	lsls	r3, r0, #29
 8001d96:	d0c7      	beq.n	8001d28 <__aeabi_dmul+0x4a0>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d1bd      	bne.n	8001d1c <__aeabi_dmul+0x494>
 8001da0:	e7c2      	b.n	8001d28 <__aeabi_dmul+0x4a0>
 8001da2:	0765      	lsls	r5, r4, #29
 8001da4:	0264      	lsls	r4, r4, #9
 8001da6:	0b24      	lsrs	r4, r4, #12
 8001da8:	08c0      	lsrs	r0, r0, #3
 8001daa:	2300      	movs	r3, #0
 8001dac:	4305      	orrs	r5, r0
 8001dae:	e5dd      	b.n	800196c <__aeabi_dmul+0xe4>
 8001db0:	2500      	movs	r5, #0
 8001db2:	2302      	movs	r3, #2
 8001db4:	2e0f      	cmp	r6, #15
 8001db6:	d10c      	bne.n	8001dd2 <__aeabi_dmul+0x54a>
 8001db8:	2480      	movs	r4, #128	; 0x80
 8001dba:	465b      	mov	r3, fp
 8001dbc:	0324      	lsls	r4, r4, #12
 8001dbe:	4223      	tst	r3, r4
 8001dc0:	d00e      	beq.n	8001de0 <__aeabi_dmul+0x558>
 8001dc2:	4221      	tst	r1, r4
 8001dc4:	d10c      	bne.n	8001de0 <__aeabi_dmul+0x558>
 8001dc6:	430c      	orrs	r4, r1
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	003a      	movs	r2, r7
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <__aeabi_dmul+0x580>)
 8001dce:	0b24      	lsrs	r4, r4, #12
 8001dd0:	e5cc      	b.n	800196c <__aeabi_dmul+0xe4>
 8001dd2:	2e0b      	cmp	r6, #11
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dmul+0x550>
 8001dd6:	e5a2      	b.n	800191e <__aeabi_dmul+0x96>
 8001dd8:	468b      	mov	fp, r1
 8001dda:	46aa      	mov	sl, r5
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	e5f7      	b.n	80019d0 <__aeabi_dmul+0x148>
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	465b      	mov	r3, fp
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	431c      	orrs	r4, r3
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	4642      	mov	r2, r8
 8001dec:	4655      	mov	r5, sl
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <__aeabi_dmul+0x580>)
 8001df0:	0b24      	lsrs	r4, r4, #12
 8001df2:	e5bb      	b.n	800196c <__aeabi_dmul+0xe4>
 8001df4:	464d      	mov	r5, r9
 8001df6:	0021      	movs	r1, r4
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e7db      	b.n	8001db4 <__aeabi_dmul+0x52c>
 8001dfc:	fffffc0d 	.word	0xfffffc0d
 8001e00:	0000043e 	.word	0x0000043e
 8001e04:	0000041e 	.word	0x0000041e
 8001e08:	000007ff 	.word	0x000007ff

08001e0c <__aeabi_dsub>:
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	4657      	mov	r7, sl
 8001e10:	464e      	mov	r6, r9
 8001e12:	4645      	mov	r5, r8
 8001e14:	46de      	mov	lr, fp
 8001e16:	b5e0      	push	{r5, r6, r7, lr}
 8001e18:	000d      	movs	r5, r1
 8001e1a:	0004      	movs	r4, r0
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	0010      	movs	r0, r2
 8001e20:	032b      	lsls	r3, r5, #12
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	0f62      	lsrs	r2, r4, #29
 8001e26:	431a      	orrs	r2, r3
 8001e28:	00e3      	lsls	r3, r4, #3
 8001e2a:	030c      	lsls	r4, r1, #12
 8001e2c:	0a64      	lsrs	r4, r4, #9
 8001e2e:	0f47      	lsrs	r7, r0, #29
 8001e30:	4327      	orrs	r7, r4
 8001e32:	4cd0      	ldr	r4, [pc, #832]	; (8002174 <__aeabi_dsub+0x368>)
 8001e34:	006e      	lsls	r6, r5, #1
 8001e36:	4691      	mov	r9, r2
 8001e38:	b083      	sub	sp, #12
 8001e3a:	004a      	lsls	r2, r1, #1
 8001e3c:	00c0      	lsls	r0, r0, #3
 8001e3e:	4698      	mov	r8, r3
 8001e40:	46a2      	mov	sl, r4
 8001e42:	0d76      	lsrs	r6, r6, #21
 8001e44:	0fed      	lsrs	r5, r5, #31
 8001e46:	0d52      	lsrs	r2, r2, #21
 8001e48:	0fc9      	lsrs	r1, r1, #31
 8001e4a:	9001      	str	r0, [sp, #4]
 8001e4c:	42a2      	cmp	r2, r4
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x46>
 8001e50:	e0b9      	b.n	8001fc6 <__aeabi_dsub+0x1ba>
 8001e52:	2401      	movs	r4, #1
 8001e54:	4061      	eors	r1, r4
 8001e56:	468b      	mov	fp, r1
 8001e58:	428d      	cmp	r5, r1
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x52>
 8001e5c:	e08d      	b.n	8001f7a <__aeabi_dsub+0x16e>
 8001e5e:	1ab4      	subs	r4, r6, r2
 8001e60:	46a4      	mov	ip, r4
 8001e62:	2c00      	cmp	r4, #0
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_dsub+0x5c>
 8001e66:	e0b7      	b.n	8001fd8 <__aeabi_dsub+0x1cc>
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x62>
 8001e6c:	e0cb      	b.n	8002006 <__aeabi_dsub+0x1fa>
 8001e6e:	4ac1      	ldr	r2, [pc, #772]	; (8002174 <__aeabi_dsub+0x368>)
 8001e70:	4296      	cmp	r6, r2
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x6a>
 8001e74:	e186      	b.n	8002184 <__aeabi_dsub+0x378>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0412      	lsls	r2, r2, #16
 8001e7a:	4317      	orrs	r7, r2
 8001e7c:	4662      	mov	r2, ip
 8001e7e:	2a38      	cmp	r2, #56	; 0x38
 8001e80:	dd00      	ble.n	8001e84 <__aeabi_dsub+0x78>
 8001e82:	e1a4      	b.n	80021ce <__aeabi_dsub+0x3c2>
 8001e84:	2a1f      	cmp	r2, #31
 8001e86:	dd00      	ble.n	8001e8a <__aeabi_dsub+0x7e>
 8001e88:	e21d      	b.n	80022c6 <__aeabi_dsub+0x4ba>
 8001e8a:	4661      	mov	r1, ip
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	003c      	movs	r4, r7
 8001e90:	1a52      	subs	r2, r2, r1
 8001e92:	0001      	movs	r1, r0
 8001e94:	4090      	lsls	r0, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	1e42      	subs	r2, r0, #1
 8001e9a:	4190      	sbcs	r0, r2
 8001e9c:	4662      	mov	r2, ip
 8001e9e:	46a0      	mov	r8, r4
 8001ea0:	4664      	mov	r4, ip
 8001ea2:	40d7      	lsrs	r7, r2
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	40e1      	lsrs	r1, r4
 8001ea8:	4644      	mov	r4, r8
 8001eaa:	1bd2      	subs	r2, r2, r7
 8001eac:	4691      	mov	r9, r2
 8001eae:	430c      	orrs	r4, r1
 8001eb0:	4304      	orrs	r4, r0
 8001eb2:	1b1c      	subs	r4, r3, r4
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	464b      	mov	r3, r9
 8001eba:	4252      	negs	r2, r2
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	469a      	mov	sl, r3
 8001ec0:	4653      	mov	r3, sl
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	d400      	bmi.n	8001ec8 <__aeabi_dsub+0xbc>
 8001ec6:	e12b      	b.n	8002120 <__aeabi_dsub+0x314>
 8001ec8:	4653      	mov	r3, sl
 8001eca:	025a      	lsls	r2, r3, #9
 8001ecc:	0a53      	lsrs	r3, r2, #9
 8001ece:	469a      	mov	sl, r3
 8001ed0:	4653      	mov	r3, sl
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0xcc>
 8001ed6:	e166      	b.n	80021a6 <__aeabi_dsub+0x39a>
 8001ed8:	4650      	mov	r0, sl
 8001eda:	f000 fc91 	bl	8002800 <__clzsi2>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	3b08      	subs	r3, #8
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	0020      	movs	r0, r4
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	4651      	mov	r1, sl
 8001eea:	40d0      	lsrs	r0, r2
 8001eec:	4099      	lsls	r1, r3
 8001eee:	0002      	movs	r2, r0
 8001ef0:	409c      	lsls	r4, r3
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	429e      	cmp	r6, r3
 8001ef6:	dd00      	ble.n	8001efa <__aeabi_dsub+0xee>
 8001ef8:	e164      	b.n	80021c4 <__aeabi_dsub+0x3b8>
 8001efa:	1b9b      	subs	r3, r3, r6
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	291f      	cmp	r1, #31
 8001f00:	dd00      	ble.n	8001f04 <__aeabi_dsub+0xf8>
 8001f02:	e0fe      	b.n	8002102 <__aeabi_dsub+0x2f6>
 8001f04:	2320      	movs	r3, #32
 8001f06:	0010      	movs	r0, r2
 8001f08:	0026      	movs	r6, r4
 8001f0a:	1a5b      	subs	r3, r3, r1
 8001f0c:	409c      	lsls	r4, r3
 8001f0e:	4098      	lsls	r0, r3
 8001f10:	40ce      	lsrs	r6, r1
 8001f12:	40ca      	lsrs	r2, r1
 8001f14:	1e63      	subs	r3, r4, #1
 8001f16:	419c      	sbcs	r4, r3
 8001f18:	4330      	orrs	r0, r6
 8001f1a:	4692      	mov	sl, r2
 8001f1c:	2600      	movs	r6, #0
 8001f1e:	4304      	orrs	r4, r0
 8001f20:	0763      	lsls	r3, r4, #29
 8001f22:	d009      	beq.n	8001f38 <__aeabi_dsub+0x12c>
 8001f24:	230f      	movs	r3, #15
 8001f26:	4023      	ands	r3, r4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <__aeabi_dsub+0x12c>
 8001f2c:	1d23      	adds	r3, r4, #4
 8001f2e:	42a3      	cmp	r3, r4
 8001f30:	41a4      	sbcs	r4, r4
 8001f32:	4264      	negs	r4, r4
 8001f34:	44a2      	add	sl, r4
 8001f36:	001c      	movs	r4, r3
 8001f38:	4653      	mov	r3, sl
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	d400      	bmi.n	8001f40 <__aeabi_dsub+0x134>
 8001f3e:	e0f2      	b.n	8002126 <__aeabi_dsub+0x31a>
 8001f40:	4b8c      	ldr	r3, [pc, #560]	; (8002174 <__aeabi_dsub+0x368>)
 8001f42:	3601      	adds	r6, #1
 8001f44:	429e      	cmp	r6, r3
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x13e>
 8001f48:	e10f      	b.n	800216a <__aeabi_dsub+0x35e>
 8001f4a:	4653      	mov	r3, sl
 8001f4c:	498a      	ldr	r1, [pc, #552]	; (8002178 <__aeabi_dsub+0x36c>)
 8001f4e:	08e4      	lsrs	r4, r4, #3
 8001f50:	400b      	ands	r3, r1
 8001f52:	0019      	movs	r1, r3
 8001f54:	075b      	lsls	r3, r3, #29
 8001f56:	4323      	orrs	r3, r4
 8001f58:	0572      	lsls	r2, r6, #21
 8001f5a:	024c      	lsls	r4, r1, #9
 8001f5c:	0b24      	lsrs	r4, r4, #12
 8001f5e:	0d52      	lsrs	r2, r2, #21
 8001f60:	0512      	lsls	r2, r2, #20
 8001f62:	4322      	orrs	r2, r4
 8001f64:	07ed      	lsls	r5, r5, #31
 8001f66:	432a      	orrs	r2, r5
 8001f68:	0018      	movs	r0, r3
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	b003      	add	sp, #12
 8001f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f70:	46bb      	mov	fp, r7
 8001f72:	46b2      	mov	sl, r6
 8001f74:	46a9      	mov	r9, r5
 8001f76:	46a0      	mov	r8, r4
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7a:	1ab4      	subs	r4, r6, r2
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	dd59      	ble.n	8002036 <__aeabi_dsub+0x22a>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x17c>
 8001f86:	e0b0      	b.n	80020ea <__aeabi_dsub+0x2de>
 8001f88:	4556      	cmp	r6, sl
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x182>
 8001f8c:	e0fa      	b.n	8002184 <__aeabi_dsub+0x378>
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	0412      	lsls	r2, r2, #16
 8001f92:	4317      	orrs	r7, r2
 8001f94:	4662      	mov	r2, ip
 8001f96:	2a38      	cmp	r2, #56	; 0x38
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dsub+0x190>
 8001f9a:	e0d4      	b.n	8002146 <__aeabi_dsub+0x33a>
 8001f9c:	2a1f      	cmp	r2, #31
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_dsub+0x196>
 8001fa0:	e1c0      	b.n	8002324 <__aeabi_dsub+0x518>
 8001fa2:	0039      	movs	r1, r7
 8001fa4:	3a20      	subs	r2, #32
 8001fa6:	40d1      	lsrs	r1, r2
 8001fa8:	4662      	mov	r2, ip
 8001faa:	2a20      	cmp	r2, #32
 8001fac:	d006      	beq.n	8001fbc <__aeabi_dsub+0x1b0>
 8001fae:	4664      	mov	r4, ip
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	1b12      	subs	r2, r2, r4
 8001fb4:	003c      	movs	r4, r7
 8001fb6:	4094      	lsls	r4, r2
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	9401      	str	r4, [sp, #4]
 8001fbc:	9c01      	ldr	r4, [sp, #4]
 8001fbe:	1e62      	subs	r2, r4, #1
 8001fc0:	4194      	sbcs	r4, r2
 8001fc2:	430c      	orrs	r4, r1
 8001fc4:	e0c3      	b.n	800214e <__aeabi_dsub+0x342>
 8001fc6:	003c      	movs	r4, r7
 8001fc8:	4304      	orrs	r4, r0
 8001fca:	d02b      	beq.n	8002024 <__aeabi_dsub+0x218>
 8001fcc:	468b      	mov	fp, r1
 8001fce:	428d      	cmp	r5, r1
 8001fd0:	d02e      	beq.n	8002030 <__aeabi_dsub+0x224>
 8001fd2:	4c6a      	ldr	r4, [pc, #424]	; (800217c <__aeabi_dsub+0x370>)
 8001fd4:	46a4      	mov	ip, r4
 8001fd6:	44b4      	add	ip, r6
 8001fd8:	4664      	mov	r4, ip
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d05f      	beq.n	800209e <__aeabi_dsub+0x292>
 8001fde:	1b94      	subs	r4, r2, r6
 8001fe0:	46a4      	mov	ip, r4
 8001fe2:	2e00      	cmp	r6, #0
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_dsub+0x1dc>
 8001fe6:	e120      	b.n	800222a <__aeabi_dsub+0x41e>
 8001fe8:	464c      	mov	r4, r9
 8001fea:	431c      	orrs	r4, r3
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x1e4>
 8001fee:	e1c7      	b.n	8002380 <__aeabi_dsub+0x574>
 8001ff0:	4661      	mov	r1, ip
 8001ff2:	1e4c      	subs	r4, r1, #1
 8001ff4:	2901      	cmp	r1, #1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x1ee>
 8001ff8:	e223      	b.n	8002442 <__aeabi_dsub+0x636>
 8001ffa:	4d5e      	ldr	r5, [pc, #376]	; (8002174 <__aeabi_dsub+0x368>)
 8001ffc:	45ac      	cmp	ip, r5
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x1f6>
 8002000:	e1d8      	b.n	80023b4 <__aeabi_dsub+0x5a8>
 8002002:	46a4      	mov	ip, r4
 8002004:	e11a      	b.n	800223c <__aeabi_dsub+0x430>
 8002006:	003a      	movs	r2, r7
 8002008:	4302      	orrs	r2, r0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x202>
 800200c:	e0e4      	b.n	80021d8 <__aeabi_dsub+0x3cc>
 800200e:	0022      	movs	r2, r4
 8002010:	3a01      	subs	r2, #1
 8002012:	2c01      	cmp	r4, #1
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x20c>
 8002016:	e1c3      	b.n	80023a0 <__aeabi_dsub+0x594>
 8002018:	4956      	ldr	r1, [pc, #344]	; (8002174 <__aeabi_dsub+0x368>)
 800201a:	428c      	cmp	r4, r1
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x214>
 800201e:	e0b1      	b.n	8002184 <__aeabi_dsub+0x378>
 8002020:	4694      	mov	ip, r2
 8002022:	e72b      	b.n	8001e7c <__aeabi_dsub+0x70>
 8002024:	2401      	movs	r4, #1
 8002026:	4061      	eors	r1, r4
 8002028:	468b      	mov	fp, r1
 800202a:	428d      	cmp	r5, r1
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x224>
 800202e:	e716      	b.n	8001e5e <__aeabi_dsub+0x52>
 8002030:	4952      	ldr	r1, [pc, #328]	; (800217c <__aeabi_dsub+0x370>)
 8002032:	468c      	mov	ip, r1
 8002034:	44b4      	add	ip, r6
 8002036:	4664      	mov	r4, ip
 8002038:	2c00      	cmp	r4, #0
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x232>
 800203c:	e0d3      	b.n	80021e6 <__aeabi_dsub+0x3da>
 800203e:	1b91      	subs	r1, r2, r6
 8002040:	468c      	mov	ip, r1
 8002042:	2e00      	cmp	r6, #0
 8002044:	d100      	bne.n	8002048 <__aeabi_dsub+0x23c>
 8002046:	e15e      	b.n	8002306 <__aeabi_dsub+0x4fa>
 8002048:	494a      	ldr	r1, [pc, #296]	; (8002174 <__aeabi_dsub+0x368>)
 800204a:	428a      	cmp	r2, r1
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x244>
 800204e:	e1be      	b.n	80023ce <__aeabi_dsub+0x5c2>
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	464c      	mov	r4, r9
 8002054:	0409      	lsls	r1, r1, #16
 8002056:	430c      	orrs	r4, r1
 8002058:	46a1      	mov	r9, r4
 800205a:	4661      	mov	r1, ip
 800205c:	2938      	cmp	r1, #56	; 0x38
 800205e:	dd00      	ble.n	8002062 <__aeabi_dsub+0x256>
 8002060:	e1ba      	b.n	80023d8 <__aeabi_dsub+0x5cc>
 8002062:	291f      	cmp	r1, #31
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0x25c>
 8002066:	e227      	b.n	80024b8 <__aeabi_dsub+0x6ac>
 8002068:	2420      	movs	r4, #32
 800206a:	1a64      	subs	r4, r4, r1
 800206c:	4649      	mov	r1, r9
 800206e:	40a1      	lsls	r1, r4
 8002070:	001e      	movs	r6, r3
 8002072:	4688      	mov	r8, r1
 8002074:	4661      	mov	r1, ip
 8002076:	40a3      	lsls	r3, r4
 8002078:	40ce      	lsrs	r6, r1
 800207a:	4641      	mov	r1, r8
 800207c:	1e5c      	subs	r4, r3, #1
 800207e:	41a3      	sbcs	r3, r4
 8002080:	4331      	orrs	r1, r6
 8002082:	4319      	orrs	r1, r3
 8002084:	000c      	movs	r4, r1
 8002086:	4663      	mov	r3, ip
 8002088:	4649      	mov	r1, r9
 800208a:	40d9      	lsrs	r1, r3
 800208c:	187f      	adds	r7, r7, r1
 800208e:	1824      	adds	r4, r4, r0
 8002090:	4284      	cmp	r4, r0
 8002092:	419b      	sbcs	r3, r3
 8002094:	425b      	negs	r3, r3
 8002096:	469a      	mov	sl, r3
 8002098:	0016      	movs	r6, r2
 800209a:	44ba      	add	sl, r7
 800209c:	e05d      	b.n	800215a <__aeabi_dsub+0x34e>
 800209e:	4c38      	ldr	r4, [pc, #224]	; (8002180 <__aeabi_dsub+0x374>)
 80020a0:	1c72      	adds	r2, r6, #1
 80020a2:	4222      	tst	r2, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dsub+0x29c>
 80020a6:	e0df      	b.n	8002268 <__aeabi_dsub+0x45c>
 80020a8:	464a      	mov	r2, r9
 80020aa:	431a      	orrs	r2, r3
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	d000      	beq.n	80020b2 <__aeabi_dsub+0x2a6>
 80020b0:	e15c      	b.n	800236c <__aeabi_dsub+0x560>
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x2ac>
 80020b6:	e1cf      	b.n	8002458 <__aeabi_dsub+0x64c>
 80020b8:	003a      	movs	r2, r7
 80020ba:	4302      	orrs	r2, r0
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x2b4>
 80020be:	e17f      	b.n	80023c0 <__aeabi_dsub+0x5b4>
 80020c0:	1a1c      	subs	r4, r3, r0
 80020c2:	464a      	mov	r2, r9
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	4189      	sbcs	r1, r1
 80020c8:	1bd2      	subs	r2, r2, r7
 80020ca:	4249      	negs	r1, r1
 80020cc:	1a52      	subs	r2, r2, r1
 80020ce:	4692      	mov	sl, r2
 80020d0:	0212      	lsls	r2, r2, #8
 80020d2:	d400      	bmi.n	80020d6 <__aeabi_dsub+0x2ca>
 80020d4:	e20a      	b.n	80024ec <__aeabi_dsub+0x6e0>
 80020d6:	1ac4      	subs	r4, r0, r3
 80020d8:	42a0      	cmp	r0, r4
 80020da:	4180      	sbcs	r0, r0
 80020dc:	464b      	mov	r3, r9
 80020de:	4240      	negs	r0, r0
 80020e0:	1aff      	subs	r7, r7, r3
 80020e2:	1a3b      	subs	r3, r7, r0
 80020e4:	469a      	mov	sl, r3
 80020e6:	465d      	mov	r5, fp
 80020e8:	e71a      	b.n	8001f20 <__aeabi_dsub+0x114>
 80020ea:	003a      	movs	r2, r7
 80020ec:	4302      	orrs	r2, r0
 80020ee:	d073      	beq.n	80021d8 <__aeabi_dsub+0x3cc>
 80020f0:	0022      	movs	r2, r4
 80020f2:	3a01      	subs	r2, #1
 80020f4:	2c01      	cmp	r4, #1
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x2ee>
 80020f8:	e0cb      	b.n	8002292 <__aeabi_dsub+0x486>
 80020fa:	4554      	cmp	r4, sl
 80020fc:	d042      	beq.n	8002184 <__aeabi_dsub+0x378>
 80020fe:	4694      	mov	ip, r2
 8002100:	e748      	b.n	8001f94 <__aeabi_dsub+0x188>
 8002102:	0010      	movs	r0, r2
 8002104:	3b1f      	subs	r3, #31
 8002106:	40d8      	lsrs	r0, r3
 8002108:	2920      	cmp	r1, #32
 800210a:	d003      	beq.n	8002114 <__aeabi_dsub+0x308>
 800210c:	2340      	movs	r3, #64	; 0x40
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	409a      	lsls	r2, r3
 8002112:	4314      	orrs	r4, r2
 8002114:	1e63      	subs	r3, r4, #1
 8002116:	419c      	sbcs	r4, r3
 8002118:	2300      	movs	r3, #0
 800211a:	2600      	movs	r6, #0
 800211c:	469a      	mov	sl, r3
 800211e:	4304      	orrs	r4, r0
 8002120:	0763      	lsls	r3, r4, #29
 8002122:	d000      	beq.n	8002126 <__aeabi_dsub+0x31a>
 8002124:	e6fe      	b.n	8001f24 <__aeabi_dsub+0x118>
 8002126:	4652      	mov	r2, sl
 8002128:	08e3      	lsrs	r3, r4, #3
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	4313      	orrs	r3, r2
 800212e:	4652      	mov	r2, sl
 8002130:	46b4      	mov	ip, r6
 8002132:	08d2      	lsrs	r2, r2, #3
 8002134:	490f      	ldr	r1, [pc, #60]	; (8002174 <__aeabi_dsub+0x368>)
 8002136:	458c      	cmp	ip, r1
 8002138:	d02a      	beq.n	8002190 <__aeabi_dsub+0x384>
 800213a:	0312      	lsls	r2, r2, #12
 800213c:	0b14      	lsrs	r4, r2, #12
 800213e:	4662      	mov	r2, ip
 8002140:	0552      	lsls	r2, r2, #21
 8002142:	0d52      	lsrs	r2, r2, #21
 8002144:	e70c      	b.n	8001f60 <__aeabi_dsub+0x154>
 8002146:	003c      	movs	r4, r7
 8002148:	4304      	orrs	r4, r0
 800214a:	1e62      	subs	r2, r4, #1
 800214c:	4194      	sbcs	r4, r2
 800214e:	18e4      	adds	r4, r4, r3
 8002150:	429c      	cmp	r4, r3
 8002152:	4192      	sbcs	r2, r2
 8002154:	4252      	negs	r2, r2
 8002156:	444a      	add	r2, r9
 8002158:	4692      	mov	sl, r2
 800215a:	4653      	mov	r3, sl
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	d5df      	bpl.n	8002120 <__aeabi_dsub+0x314>
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__aeabi_dsub+0x368>)
 8002162:	3601      	adds	r6, #1
 8002164:	429e      	cmp	r6, r3
 8002166:	d000      	beq.n	800216a <__aeabi_dsub+0x35e>
 8002168:	e0a0      	b.n	80022ac <__aeabi_dsub+0x4a0>
 800216a:	0032      	movs	r2, r6
 800216c:	2400      	movs	r4, #0
 800216e:	2300      	movs	r3, #0
 8002170:	e6f6      	b.n	8001f60 <__aeabi_dsub+0x154>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	000007ff 	.word	0x000007ff
 8002178:	ff7fffff 	.word	0xff7fffff
 800217c:	fffff801 	.word	0xfffff801
 8002180:	000007fe 	.word	0x000007fe
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	464a      	mov	r2, r9
 8002188:	0752      	lsls	r2, r2, #29
 800218a:	4313      	orrs	r3, r2
 800218c:	464a      	mov	r2, r9
 800218e:	08d2      	lsrs	r2, r2, #3
 8002190:	0019      	movs	r1, r3
 8002192:	4311      	orrs	r1, r2
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x38c>
 8002196:	e1b5      	b.n	8002504 <__aeabi_dsub+0x6f8>
 8002198:	2480      	movs	r4, #128	; 0x80
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	4314      	orrs	r4, r2
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	4ad5      	ldr	r2, [pc, #852]	; (80024f8 <__aeabi_dsub+0x6ec>)
 80021a2:	0b24      	lsrs	r4, r4, #12
 80021a4:	e6dc      	b.n	8001f60 <__aeabi_dsub+0x154>
 80021a6:	0020      	movs	r0, r4
 80021a8:	f000 fb2a 	bl	8002800 <__clzsi2>
 80021ac:	0003      	movs	r3, r0
 80021ae:	3318      	adds	r3, #24
 80021b0:	2b1f      	cmp	r3, #31
 80021b2:	dc00      	bgt.n	80021b6 <__aeabi_dsub+0x3aa>
 80021b4:	e695      	b.n	8001ee2 <__aeabi_dsub+0xd6>
 80021b6:	0022      	movs	r2, r4
 80021b8:	3808      	subs	r0, #8
 80021ba:	4082      	lsls	r2, r0
 80021bc:	2400      	movs	r4, #0
 80021be:	429e      	cmp	r6, r3
 80021c0:	dc00      	bgt.n	80021c4 <__aeabi_dsub+0x3b8>
 80021c2:	e69a      	b.n	8001efa <__aeabi_dsub+0xee>
 80021c4:	1af6      	subs	r6, r6, r3
 80021c6:	4bcd      	ldr	r3, [pc, #820]	; (80024fc <__aeabi_dsub+0x6f0>)
 80021c8:	401a      	ands	r2, r3
 80021ca:	4692      	mov	sl, r2
 80021cc:	e6a8      	b.n	8001f20 <__aeabi_dsub+0x114>
 80021ce:	003c      	movs	r4, r7
 80021d0:	4304      	orrs	r4, r0
 80021d2:	1e62      	subs	r2, r4, #1
 80021d4:	4194      	sbcs	r4, r2
 80021d6:	e66c      	b.n	8001eb2 <__aeabi_dsub+0xa6>
 80021d8:	464a      	mov	r2, r9
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	0752      	lsls	r2, r2, #29
 80021de:	4313      	orrs	r3, r2
 80021e0:	464a      	mov	r2, r9
 80021e2:	08d2      	lsrs	r2, r2, #3
 80021e4:	e7a6      	b.n	8002134 <__aeabi_dsub+0x328>
 80021e6:	4cc6      	ldr	r4, [pc, #792]	; (8002500 <__aeabi_dsub+0x6f4>)
 80021e8:	1c72      	adds	r2, r6, #1
 80021ea:	4222      	tst	r2, r4
 80021ec:	d000      	beq.n	80021f0 <__aeabi_dsub+0x3e4>
 80021ee:	e0ac      	b.n	800234a <__aeabi_dsub+0x53e>
 80021f0:	464a      	mov	r2, r9
 80021f2:	431a      	orrs	r2, r3
 80021f4:	2e00      	cmp	r6, #0
 80021f6:	d000      	beq.n	80021fa <__aeabi_dsub+0x3ee>
 80021f8:	e105      	b.n	8002406 <__aeabi_dsub+0x5fa>
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x3f4>
 80021fe:	e156      	b.n	80024ae <__aeabi_dsub+0x6a2>
 8002200:	003a      	movs	r2, r7
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x3fc>
 8002206:	e0db      	b.n	80023c0 <__aeabi_dsub+0x5b4>
 8002208:	181c      	adds	r4, r3, r0
 800220a:	429c      	cmp	r4, r3
 800220c:	419b      	sbcs	r3, r3
 800220e:	444f      	add	r7, r9
 8002210:	46ba      	mov	sl, r7
 8002212:	425b      	negs	r3, r3
 8002214:	449a      	add	sl, r3
 8002216:	4653      	mov	r3, sl
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	d400      	bmi.n	800221e <__aeabi_dsub+0x412>
 800221c:	e780      	b.n	8002120 <__aeabi_dsub+0x314>
 800221e:	4652      	mov	r2, sl
 8002220:	4bb6      	ldr	r3, [pc, #728]	; (80024fc <__aeabi_dsub+0x6f0>)
 8002222:	2601      	movs	r6, #1
 8002224:	401a      	ands	r2, r3
 8002226:	4692      	mov	sl, r2
 8002228:	e77a      	b.n	8002120 <__aeabi_dsub+0x314>
 800222a:	4cb3      	ldr	r4, [pc, #716]	; (80024f8 <__aeabi_dsub+0x6ec>)
 800222c:	42a2      	cmp	r2, r4
 800222e:	d100      	bne.n	8002232 <__aeabi_dsub+0x426>
 8002230:	e0c0      	b.n	80023b4 <__aeabi_dsub+0x5a8>
 8002232:	2480      	movs	r4, #128	; 0x80
 8002234:	464d      	mov	r5, r9
 8002236:	0424      	lsls	r4, r4, #16
 8002238:	4325      	orrs	r5, r4
 800223a:	46a9      	mov	r9, r5
 800223c:	4664      	mov	r4, ip
 800223e:	2c38      	cmp	r4, #56	; 0x38
 8002240:	dc53      	bgt.n	80022ea <__aeabi_dsub+0x4de>
 8002242:	4661      	mov	r1, ip
 8002244:	2c1f      	cmp	r4, #31
 8002246:	dd00      	ble.n	800224a <__aeabi_dsub+0x43e>
 8002248:	e0cd      	b.n	80023e6 <__aeabi_dsub+0x5da>
 800224a:	2520      	movs	r5, #32
 800224c:	001e      	movs	r6, r3
 800224e:	1b2d      	subs	r5, r5, r4
 8002250:	464c      	mov	r4, r9
 8002252:	40ab      	lsls	r3, r5
 8002254:	40ac      	lsls	r4, r5
 8002256:	40ce      	lsrs	r6, r1
 8002258:	1e5d      	subs	r5, r3, #1
 800225a:	41ab      	sbcs	r3, r5
 800225c:	4334      	orrs	r4, r6
 800225e:	4323      	orrs	r3, r4
 8002260:	464c      	mov	r4, r9
 8002262:	40cc      	lsrs	r4, r1
 8002264:	1b3f      	subs	r7, r7, r4
 8002266:	e045      	b.n	80022f4 <__aeabi_dsub+0x4e8>
 8002268:	464a      	mov	r2, r9
 800226a:	1a1c      	subs	r4, r3, r0
 800226c:	1bd1      	subs	r1, r2, r7
 800226e:	42a3      	cmp	r3, r4
 8002270:	4192      	sbcs	r2, r2
 8002272:	4252      	negs	r2, r2
 8002274:	4692      	mov	sl, r2
 8002276:	000a      	movs	r2, r1
 8002278:	4651      	mov	r1, sl
 800227a:	1a52      	subs	r2, r2, r1
 800227c:	4692      	mov	sl, r2
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	d500      	bpl.n	8002284 <__aeabi_dsub+0x478>
 8002282:	e083      	b.n	800238c <__aeabi_dsub+0x580>
 8002284:	4653      	mov	r3, sl
 8002286:	4323      	orrs	r3, r4
 8002288:	d000      	beq.n	800228c <__aeabi_dsub+0x480>
 800228a:	e621      	b.n	8001ed0 <__aeabi_dsub+0xc4>
 800228c:	2200      	movs	r2, #0
 800228e:	2500      	movs	r5, #0
 8002290:	e753      	b.n	800213a <__aeabi_dsub+0x32e>
 8002292:	181c      	adds	r4, r3, r0
 8002294:	429c      	cmp	r4, r3
 8002296:	419b      	sbcs	r3, r3
 8002298:	444f      	add	r7, r9
 800229a:	46ba      	mov	sl, r7
 800229c:	425b      	negs	r3, r3
 800229e:	449a      	add	sl, r3
 80022a0:	4653      	mov	r3, sl
 80022a2:	2601      	movs	r6, #1
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	d400      	bmi.n	80022aa <__aeabi_dsub+0x49e>
 80022a8:	e73a      	b.n	8002120 <__aeabi_dsub+0x314>
 80022aa:	2602      	movs	r6, #2
 80022ac:	4652      	mov	r2, sl
 80022ae:	4b93      	ldr	r3, [pc, #588]	; (80024fc <__aeabi_dsub+0x6f0>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	401a      	ands	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	4021      	ands	r1, r4
 80022b8:	0862      	lsrs	r2, r4, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	07dc      	lsls	r4, r3, #31
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	469a      	mov	sl, r3
 80022c2:	4314      	orrs	r4, r2
 80022c4:	e62c      	b.n	8001f20 <__aeabi_dsub+0x114>
 80022c6:	0039      	movs	r1, r7
 80022c8:	3a20      	subs	r2, #32
 80022ca:	40d1      	lsrs	r1, r2
 80022cc:	4662      	mov	r2, ip
 80022ce:	2a20      	cmp	r2, #32
 80022d0:	d006      	beq.n	80022e0 <__aeabi_dsub+0x4d4>
 80022d2:	4664      	mov	r4, ip
 80022d4:	2240      	movs	r2, #64	; 0x40
 80022d6:	1b12      	subs	r2, r2, r4
 80022d8:	003c      	movs	r4, r7
 80022da:	4094      	lsls	r4, r2
 80022dc:	4304      	orrs	r4, r0
 80022de:	9401      	str	r4, [sp, #4]
 80022e0:	9c01      	ldr	r4, [sp, #4]
 80022e2:	1e62      	subs	r2, r4, #1
 80022e4:	4194      	sbcs	r4, r2
 80022e6:	430c      	orrs	r4, r1
 80022e8:	e5e3      	b.n	8001eb2 <__aeabi_dsub+0xa6>
 80022ea:	4649      	mov	r1, r9
 80022ec:	4319      	orrs	r1, r3
 80022ee:	000b      	movs	r3, r1
 80022f0:	1e5c      	subs	r4, r3, #1
 80022f2:	41a3      	sbcs	r3, r4
 80022f4:	1ac4      	subs	r4, r0, r3
 80022f6:	42a0      	cmp	r0, r4
 80022f8:	419b      	sbcs	r3, r3
 80022fa:	425b      	negs	r3, r3
 80022fc:	1afb      	subs	r3, r7, r3
 80022fe:	469a      	mov	sl, r3
 8002300:	465d      	mov	r5, fp
 8002302:	0016      	movs	r6, r2
 8002304:	e5dc      	b.n	8001ec0 <__aeabi_dsub+0xb4>
 8002306:	4649      	mov	r1, r9
 8002308:	4319      	orrs	r1, r3
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x502>
 800230c:	e0ae      	b.n	800246c <__aeabi_dsub+0x660>
 800230e:	4661      	mov	r1, ip
 8002310:	4664      	mov	r4, ip
 8002312:	3901      	subs	r1, #1
 8002314:	2c01      	cmp	r4, #1
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x50e>
 8002318:	e0e0      	b.n	80024dc <__aeabi_dsub+0x6d0>
 800231a:	4c77      	ldr	r4, [pc, #476]	; (80024f8 <__aeabi_dsub+0x6ec>)
 800231c:	45a4      	cmp	ip, r4
 800231e:	d056      	beq.n	80023ce <__aeabi_dsub+0x5c2>
 8002320:	468c      	mov	ip, r1
 8002322:	e69a      	b.n	800205a <__aeabi_dsub+0x24e>
 8002324:	4661      	mov	r1, ip
 8002326:	2220      	movs	r2, #32
 8002328:	003c      	movs	r4, r7
 800232a:	1a52      	subs	r2, r2, r1
 800232c:	4094      	lsls	r4, r2
 800232e:	0001      	movs	r1, r0
 8002330:	4090      	lsls	r0, r2
 8002332:	46a0      	mov	r8, r4
 8002334:	4664      	mov	r4, ip
 8002336:	1e42      	subs	r2, r0, #1
 8002338:	4190      	sbcs	r0, r2
 800233a:	4662      	mov	r2, ip
 800233c:	40e1      	lsrs	r1, r4
 800233e:	4644      	mov	r4, r8
 8002340:	40d7      	lsrs	r7, r2
 8002342:	430c      	orrs	r4, r1
 8002344:	4304      	orrs	r4, r0
 8002346:	44b9      	add	r9, r7
 8002348:	e701      	b.n	800214e <__aeabi_dsub+0x342>
 800234a:	496b      	ldr	r1, [pc, #428]	; (80024f8 <__aeabi_dsub+0x6ec>)
 800234c:	428a      	cmp	r2, r1
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x546>
 8002350:	e70c      	b.n	800216c <__aeabi_dsub+0x360>
 8002352:	1818      	adds	r0, r3, r0
 8002354:	4298      	cmp	r0, r3
 8002356:	419b      	sbcs	r3, r3
 8002358:	444f      	add	r7, r9
 800235a:	425b      	negs	r3, r3
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	07dc      	lsls	r4, r3, #31
 8002360:	0840      	lsrs	r0, r0, #1
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	469a      	mov	sl, r3
 8002366:	0016      	movs	r6, r2
 8002368:	4304      	orrs	r4, r0
 800236a:	e6d9      	b.n	8002120 <__aeabi_dsub+0x314>
 800236c:	2a00      	cmp	r2, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x566>
 8002370:	e081      	b.n	8002476 <__aeabi_dsub+0x66a>
 8002372:	003b      	movs	r3, r7
 8002374:	4303      	orrs	r3, r0
 8002376:	d11d      	bne.n	80023b4 <__aeabi_dsub+0x5a8>
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	2500      	movs	r5, #0
 800237c:	0312      	lsls	r2, r2, #12
 800237e:	e70b      	b.n	8002198 <__aeabi_dsub+0x38c>
 8002380:	08c0      	lsrs	r0, r0, #3
 8002382:	077b      	lsls	r3, r7, #29
 8002384:	465d      	mov	r5, fp
 8002386:	4303      	orrs	r3, r0
 8002388:	08fa      	lsrs	r2, r7, #3
 800238a:	e6d3      	b.n	8002134 <__aeabi_dsub+0x328>
 800238c:	1ac4      	subs	r4, r0, r3
 800238e:	42a0      	cmp	r0, r4
 8002390:	4180      	sbcs	r0, r0
 8002392:	464b      	mov	r3, r9
 8002394:	4240      	negs	r0, r0
 8002396:	1aff      	subs	r7, r7, r3
 8002398:	1a3b      	subs	r3, r7, r0
 800239a:	469a      	mov	sl, r3
 800239c:	465d      	mov	r5, fp
 800239e:	e597      	b.n	8001ed0 <__aeabi_dsub+0xc4>
 80023a0:	1a1c      	subs	r4, r3, r0
 80023a2:	464a      	mov	r2, r9
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	419b      	sbcs	r3, r3
 80023a8:	1bd7      	subs	r7, r2, r7
 80023aa:	425b      	negs	r3, r3
 80023ac:	1afb      	subs	r3, r7, r3
 80023ae:	469a      	mov	sl, r3
 80023b0:	2601      	movs	r6, #1
 80023b2:	e585      	b.n	8001ec0 <__aeabi_dsub+0xb4>
 80023b4:	08c0      	lsrs	r0, r0, #3
 80023b6:	077b      	lsls	r3, r7, #29
 80023b8:	465d      	mov	r5, fp
 80023ba:	4303      	orrs	r3, r0
 80023bc:	08fa      	lsrs	r2, r7, #3
 80023be:	e6e7      	b.n	8002190 <__aeabi_dsub+0x384>
 80023c0:	464a      	mov	r2, r9
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	0752      	lsls	r2, r2, #29
 80023c6:	4313      	orrs	r3, r2
 80023c8:	464a      	mov	r2, r9
 80023ca:	08d2      	lsrs	r2, r2, #3
 80023cc:	e6b5      	b.n	800213a <__aeabi_dsub+0x32e>
 80023ce:	08c0      	lsrs	r0, r0, #3
 80023d0:	077b      	lsls	r3, r7, #29
 80023d2:	4303      	orrs	r3, r0
 80023d4:	08fa      	lsrs	r2, r7, #3
 80023d6:	e6db      	b.n	8002190 <__aeabi_dsub+0x384>
 80023d8:	4649      	mov	r1, r9
 80023da:	4319      	orrs	r1, r3
 80023dc:	000b      	movs	r3, r1
 80023de:	1e59      	subs	r1, r3, #1
 80023e0:	418b      	sbcs	r3, r1
 80023e2:	001c      	movs	r4, r3
 80023e4:	e653      	b.n	800208e <__aeabi_dsub+0x282>
 80023e6:	464d      	mov	r5, r9
 80023e8:	3c20      	subs	r4, #32
 80023ea:	40e5      	lsrs	r5, r4
 80023ec:	2920      	cmp	r1, #32
 80023ee:	d005      	beq.n	80023fc <__aeabi_dsub+0x5f0>
 80023f0:	2440      	movs	r4, #64	; 0x40
 80023f2:	1a64      	subs	r4, r4, r1
 80023f4:	4649      	mov	r1, r9
 80023f6:	40a1      	lsls	r1, r4
 80023f8:	430b      	orrs	r3, r1
 80023fa:	4698      	mov	r8, r3
 80023fc:	4643      	mov	r3, r8
 80023fe:	1e5c      	subs	r4, r3, #1
 8002400:	41a3      	sbcs	r3, r4
 8002402:	432b      	orrs	r3, r5
 8002404:	e776      	b.n	80022f4 <__aeabi_dsub+0x4e8>
 8002406:	2a00      	cmp	r2, #0
 8002408:	d0e1      	beq.n	80023ce <__aeabi_dsub+0x5c2>
 800240a:	003a      	movs	r2, r7
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	4302      	orrs	r2, r0
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x608>
 8002412:	e6b8      	b.n	8002186 <__aeabi_dsub+0x37a>
 8002414:	464a      	mov	r2, r9
 8002416:	0752      	lsls	r2, r2, #29
 8002418:	2480      	movs	r4, #128	; 0x80
 800241a:	4313      	orrs	r3, r2
 800241c:	464a      	mov	r2, r9
 800241e:	0324      	lsls	r4, r4, #12
 8002420:	08d2      	lsrs	r2, r2, #3
 8002422:	4222      	tst	r2, r4
 8002424:	d007      	beq.n	8002436 <__aeabi_dsub+0x62a>
 8002426:	08fe      	lsrs	r6, r7, #3
 8002428:	4226      	tst	r6, r4
 800242a:	d104      	bne.n	8002436 <__aeabi_dsub+0x62a>
 800242c:	465d      	mov	r5, fp
 800242e:	0032      	movs	r2, r6
 8002430:	08c3      	lsrs	r3, r0, #3
 8002432:	077f      	lsls	r7, r7, #29
 8002434:	433b      	orrs	r3, r7
 8002436:	0f59      	lsrs	r1, r3, #29
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	0749      	lsls	r1, r1, #29
 800243c:	08db      	lsrs	r3, r3, #3
 800243e:	430b      	orrs	r3, r1
 8002440:	e6a6      	b.n	8002190 <__aeabi_dsub+0x384>
 8002442:	1ac4      	subs	r4, r0, r3
 8002444:	42a0      	cmp	r0, r4
 8002446:	4180      	sbcs	r0, r0
 8002448:	464b      	mov	r3, r9
 800244a:	4240      	negs	r0, r0
 800244c:	1aff      	subs	r7, r7, r3
 800244e:	1a3b      	subs	r3, r7, r0
 8002450:	469a      	mov	sl, r3
 8002452:	465d      	mov	r5, fp
 8002454:	2601      	movs	r6, #1
 8002456:	e533      	b.n	8001ec0 <__aeabi_dsub+0xb4>
 8002458:	003b      	movs	r3, r7
 800245a:	4303      	orrs	r3, r0
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x654>
 800245e:	e715      	b.n	800228c <__aeabi_dsub+0x480>
 8002460:	08c0      	lsrs	r0, r0, #3
 8002462:	077b      	lsls	r3, r7, #29
 8002464:	465d      	mov	r5, fp
 8002466:	4303      	orrs	r3, r0
 8002468:	08fa      	lsrs	r2, r7, #3
 800246a:	e666      	b.n	800213a <__aeabi_dsub+0x32e>
 800246c:	08c0      	lsrs	r0, r0, #3
 800246e:	077b      	lsls	r3, r7, #29
 8002470:	4303      	orrs	r3, r0
 8002472:	08fa      	lsrs	r2, r7, #3
 8002474:	e65e      	b.n	8002134 <__aeabi_dsub+0x328>
 8002476:	003a      	movs	r2, r7
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	4302      	orrs	r2, r0
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x674>
 800247e:	e682      	b.n	8002186 <__aeabi_dsub+0x37a>
 8002480:	464a      	mov	r2, r9
 8002482:	0752      	lsls	r2, r2, #29
 8002484:	2480      	movs	r4, #128	; 0x80
 8002486:	4313      	orrs	r3, r2
 8002488:	464a      	mov	r2, r9
 800248a:	0324      	lsls	r4, r4, #12
 800248c:	08d2      	lsrs	r2, r2, #3
 800248e:	4222      	tst	r2, r4
 8002490:	d007      	beq.n	80024a2 <__aeabi_dsub+0x696>
 8002492:	08fe      	lsrs	r6, r7, #3
 8002494:	4226      	tst	r6, r4
 8002496:	d104      	bne.n	80024a2 <__aeabi_dsub+0x696>
 8002498:	465d      	mov	r5, fp
 800249a:	0032      	movs	r2, r6
 800249c:	08c3      	lsrs	r3, r0, #3
 800249e:	077f      	lsls	r7, r7, #29
 80024a0:	433b      	orrs	r3, r7
 80024a2:	0f59      	lsrs	r1, r3, #29
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0749      	lsls	r1, r1, #29
 80024aa:	430b      	orrs	r3, r1
 80024ac:	e670      	b.n	8002190 <__aeabi_dsub+0x384>
 80024ae:	08c0      	lsrs	r0, r0, #3
 80024b0:	077b      	lsls	r3, r7, #29
 80024b2:	4303      	orrs	r3, r0
 80024b4:	08fa      	lsrs	r2, r7, #3
 80024b6:	e640      	b.n	800213a <__aeabi_dsub+0x32e>
 80024b8:	464c      	mov	r4, r9
 80024ba:	3920      	subs	r1, #32
 80024bc:	40cc      	lsrs	r4, r1
 80024be:	4661      	mov	r1, ip
 80024c0:	2920      	cmp	r1, #32
 80024c2:	d006      	beq.n	80024d2 <__aeabi_dsub+0x6c6>
 80024c4:	4666      	mov	r6, ip
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	1b89      	subs	r1, r1, r6
 80024ca:	464e      	mov	r6, r9
 80024cc:	408e      	lsls	r6, r1
 80024ce:	4333      	orrs	r3, r6
 80024d0:	4698      	mov	r8, r3
 80024d2:	4643      	mov	r3, r8
 80024d4:	1e59      	subs	r1, r3, #1
 80024d6:	418b      	sbcs	r3, r1
 80024d8:	431c      	orrs	r4, r3
 80024da:	e5d8      	b.n	800208e <__aeabi_dsub+0x282>
 80024dc:	181c      	adds	r4, r3, r0
 80024de:	4284      	cmp	r4, r0
 80024e0:	4180      	sbcs	r0, r0
 80024e2:	444f      	add	r7, r9
 80024e4:	46ba      	mov	sl, r7
 80024e6:	4240      	negs	r0, r0
 80024e8:	4482      	add	sl, r0
 80024ea:	e6d9      	b.n	80022a0 <__aeabi_dsub+0x494>
 80024ec:	4653      	mov	r3, sl
 80024ee:	4323      	orrs	r3, r4
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x6e8>
 80024f2:	e6cb      	b.n	800228c <__aeabi_dsub+0x480>
 80024f4:	e614      	b.n	8002120 <__aeabi_dsub+0x314>
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	000007ff 	.word	0x000007ff
 80024fc:	ff7fffff 	.word	0xff7fffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	2300      	movs	r3, #0
 8002506:	4a01      	ldr	r2, [pc, #4]	; (800250c <__aeabi_dsub+0x700>)
 8002508:	001c      	movs	r4, r3
 800250a:	e529      	b.n	8001f60 <__aeabi_dsub+0x154>
 800250c:	000007ff 	.word	0x000007ff

08002510 <__aeabi_dcmpun>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	0005      	movs	r5, r0
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <__aeabi_dcmpun+0x38>)
 8002516:	031c      	lsls	r4, r3, #12
 8002518:	0016      	movs	r6, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	030a      	lsls	r2, r1, #12
 800251e:	0049      	lsls	r1, r1, #1
 8002520:	0b12      	lsrs	r2, r2, #12
 8002522:	0d49      	lsrs	r1, r1, #21
 8002524:	0b24      	lsrs	r4, r4, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	4281      	cmp	r1, r0
 800252a:	d008      	beq.n	800253e <__aeabi_dcmpun+0x2e>
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <__aeabi_dcmpun+0x38>)
 800252e:	2000      	movs	r0, #0
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <__aeabi_dcmpun+0x2c>
 8002534:	0020      	movs	r0, r4
 8002536:	4330      	orrs	r0, r6
 8002538:	1e43      	subs	r3, r0, #1
 800253a:	4198      	sbcs	r0, r3
 800253c:	bd70      	pop	{r4, r5, r6, pc}
 800253e:	2001      	movs	r0, #1
 8002540:	432a      	orrs	r2, r5
 8002542:	d1fb      	bne.n	800253c <__aeabi_dcmpun+0x2c>
 8002544:	e7f2      	b.n	800252c <__aeabi_dcmpun+0x1c>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	000007ff 	.word	0x000007ff

0800254c <__aeabi_d2iz>:
 800254c:	000a      	movs	r2, r1
 800254e:	b530      	push	{r4, r5, lr}
 8002550:	4c13      	ldr	r4, [pc, #76]	; (80025a0 <__aeabi_d2iz+0x54>)
 8002552:	0053      	lsls	r3, r2, #1
 8002554:	0309      	lsls	r1, r1, #12
 8002556:	0005      	movs	r5, r0
 8002558:	0b09      	lsrs	r1, r1, #12
 800255a:	2000      	movs	r0, #0
 800255c:	0d5b      	lsrs	r3, r3, #21
 800255e:	0fd2      	lsrs	r2, r2, #31
 8002560:	42a3      	cmp	r3, r4
 8002562:	dd04      	ble.n	800256e <__aeabi_d2iz+0x22>
 8002564:	480f      	ldr	r0, [pc, #60]	; (80025a4 <__aeabi_d2iz+0x58>)
 8002566:	4283      	cmp	r3, r0
 8002568:	dd02      	ble.n	8002570 <__aeabi_d2iz+0x24>
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <__aeabi_d2iz+0x5c>)
 800256c:	18d0      	adds	r0, r2, r3
 800256e:	bd30      	pop	{r4, r5, pc}
 8002570:	2080      	movs	r0, #128	; 0x80
 8002572:	0340      	lsls	r0, r0, #13
 8002574:	4301      	orrs	r1, r0
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <__aeabi_d2iz+0x60>)
 8002578:	1ac0      	subs	r0, r0, r3
 800257a:	281f      	cmp	r0, #31
 800257c:	dd08      	ble.n	8002590 <__aeabi_d2iz+0x44>
 800257e:	480c      	ldr	r0, [pc, #48]	; (80025b0 <__aeabi_d2iz+0x64>)
 8002580:	1ac3      	subs	r3, r0, r3
 8002582:	40d9      	lsrs	r1, r3
 8002584:	000b      	movs	r3, r1
 8002586:	4258      	negs	r0, r3
 8002588:	2a00      	cmp	r2, #0
 800258a:	d1f0      	bne.n	800256e <__aeabi_d2iz+0x22>
 800258c:	0018      	movs	r0, r3
 800258e:	e7ee      	b.n	800256e <__aeabi_d2iz+0x22>
 8002590:	4c08      	ldr	r4, [pc, #32]	; (80025b4 <__aeabi_d2iz+0x68>)
 8002592:	40c5      	lsrs	r5, r0
 8002594:	46a4      	mov	ip, r4
 8002596:	4463      	add	r3, ip
 8002598:	4099      	lsls	r1, r3
 800259a:	000b      	movs	r3, r1
 800259c:	432b      	orrs	r3, r5
 800259e:	e7f2      	b.n	8002586 <__aeabi_d2iz+0x3a>
 80025a0:	000003fe 	.word	0x000003fe
 80025a4:	0000041d 	.word	0x0000041d
 80025a8:	7fffffff 	.word	0x7fffffff
 80025ac:	00000433 	.word	0x00000433
 80025b0:	00000413 	.word	0x00000413
 80025b4:	fffffbed 	.word	0xfffffbed

080025b8 <__aeabi_i2d>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d016      	beq.n	80025ec <__aeabi_i2d+0x34>
 80025be:	17c3      	asrs	r3, r0, #31
 80025c0:	18c5      	adds	r5, r0, r3
 80025c2:	405d      	eors	r5, r3
 80025c4:	0fc4      	lsrs	r4, r0, #31
 80025c6:	0028      	movs	r0, r5
 80025c8:	f000 f91a 	bl	8002800 <__clzsi2>
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <__aeabi_i2d+0x5c>)
 80025ce:	1a1b      	subs	r3, r3, r0
 80025d0:	280a      	cmp	r0, #10
 80025d2:	dc16      	bgt.n	8002602 <__aeabi_i2d+0x4a>
 80025d4:	0002      	movs	r2, r0
 80025d6:	002e      	movs	r6, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4096      	lsls	r6, r2
 80025dc:	220b      	movs	r2, #11
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	40d5      	lsrs	r5, r2
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	0d5b      	lsrs	r3, r3, #21
 80025ea:	e003      	b.n	80025f4 <__aeabi_i2d+0x3c>
 80025ec:	2400      	movs	r4, #0
 80025ee:	2300      	movs	r3, #0
 80025f0:	2500      	movs	r5, #0
 80025f2:	2600      	movs	r6, #0
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	432b      	orrs	r3, r5
 80025f8:	07e4      	lsls	r4, r4, #31
 80025fa:	4323      	orrs	r3, r4
 80025fc:	0030      	movs	r0, r6
 80025fe:	0019      	movs	r1, r3
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	380b      	subs	r0, #11
 8002604:	4085      	lsls	r5, r0
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	032d      	lsls	r5, r5, #12
 800260a:	2600      	movs	r6, #0
 800260c:	0b2d      	lsrs	r5, r5, #12
 800260e:	0d5b      	lsrs	r3, r3, #21
 8002610:	e7f0      	b.n	80025f4 <__aeabi_i2d+0x3c>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	0000041e 	.word	0x0000041e

08002618 <__aeabi_ui2d>:
 8002618:	b510      	push	{r4, lr}
 800261a:	1e04      	subs	r4, r0, #0
 800261c:	d010      	beq.n	8002640 <__aeabi_ui2d+0x28>
 800261e:	f000 f8ef 	bl	8002800 <__clzsi2>
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <__aeabi_ui2d+0x48>)
 8002624:	1a1b      	subs	r3, r3, r0
 8002626:	280a      	cmp	r0, #10
 8002628:	dc11      	bgt.n	800264e <__aeabi_ui2d+0x36>
 800262a:	220b      	movs	r2, #11
 800262c:	0021      	movs	r1, r4
 800262e:	1a12      	subs	r2, r2, r0
 8002630:	40d1      	lsrs	r1, r2
 8002632:	3015      	adds	r0, #21
 8002634:	030a      	lsls	r2, r1, #12
 8002636:	055b      	lsls	r3, r3, #21
 8002638:	4084      	lsls	r4, r0
 800263a:	0b12      	lsrs	r2, r2, #12
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	e001      	b.n	8002644 <__aeabi_ui2d+0x2c>
 8002640:	2300      	movs	r3, #0
 8002642:	2200      	movs	r2, #0
 8002644:	051b      	lsls	r3, r3, #20
 8002646:	4313      	orrs	r3, r2
 8002648:	0020      	movs	r0, r4
 800264a:	0019      	movs	r1, r3
 800264c:	bd10      	pop	{r4, pc}
 800264e:	0022      	movs	r2, r4
 8002650:	380b      	subs	r0, #11
 8002652:	4082      	lsls	r2, r0
 8002654:	055b      	lsls	r3, r3, #21
 8002656:	0312      	lsls	r2, r2, #12
 8002658:	2400      	movs	r4, #0
 800265a:	0b12      	lsrs	r2, r2, #12
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	e7f1      	b.n	8002644 <__aeabi_ui2d+0x2c>
 8002660:	0000041e 	.word	0x0000041e

08002664 <__aeabi_f2d>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	0242      	lsls	r2, r0, #9
 8002668:	0043      	lsls	r3, r0, #1
 800266a:	0fc4      	lsrs	r4, r0, #31
 800266c:	20fe      	movs	r0, #254	; 0xfe
 800266e:	0e1b      	lsrs	r3, r3, #24
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	0a55      	lsrs	r5, r2, #9
 8002674:	4208      	tst	r0, r1
 8002676:	d00c      	beq.n	8002692 <__aeabi_f2d+0x2e>
 8002678:	21e0      	movs	r1, #224	; 0xe0
 800267a:	0089      	lsls	r1, r1, #2
 800267c:	468c      	mov	ip, r1
 800267e:	076d      	lsls	r5, r5, #29
 8002680:	0b12      	lsrs	r2, r2, #12
 8002682:	4463      	add	r3, ip
 8002684:	051b      	lsls	r3, r3, #20
 8002686:	4313      	orrs	r3, r2
 8002688:	07e4      	lsls	r4, r4, #31
 800268a:	4323      	orrs	r3, r4
 800268c:	0028      	movs	r0, r5
 800268e:	0019      	movs	r1, r3
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <__aeabi_f2d+0x5c>
 8002696:	2d00      	cmp	r5, #0
 8002698:	d01b      	beq.n	80026d2 <__aeabi_f2d+0x6e>
 800269a:	0028      	movs	r0, r5
 800269c:	f000 f8b0 	bl	8002800 <__clzsi2>
 80026a0:	280a      	cmp	r0, #10
 80026a2:	dc1c      	bgt.n	80026de <__aeabi_f2d+0x7a>
 80026a4:	230b      	movs	r3, #11
 80026a6:	002a      	movs	r2, r5
 80026a8:	1a1b      	subs	r3, r3, r0
 80026aa:	40da      	lsrs	r2, r3
 80026ac:	0003      	movs	r3, r0
 80026ae:	3315      	adds	r3, #21
 80026b0:	409d      	lsls	r5, r3
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <__aeabi_f2d+0x88>)
 80026b4:	0312      	lsls	r2, r2, #12
 80026b6:	1a1b      	subs	r3, r3, r0
 80026b8:	055b      	lsls	r3, r3, #21
 80026ba:	0b12      	lsrs	r2, r2, #12
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	e7e1      	b.n	8002684 <__aeabi_f2d+0x20>
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	d009      	beq.n	80026d8 <__aeabi_f2d+0x74>
 80026c4:	0b13      	lsrs	r3, r2, #12
 80026c6:	2280      	movs	r2, #128	; 0x80
 80026c8:	0312      	lsls	r2, r2, #12
 80026ca:	431a      	orrs	r2, r3
 80026cc:	076d      	lsls	r5, r5, #29
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <__aeabi_f2d+0x8c>)
 80026d0:	e7d8      	b.n	8002684 <__aeabi_f2d+0x20>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2200      	movs	r2, #0
 80026d6:	e7d5      	b.n	8002684 <__aeabi_f2d+0x20>
 80026d8:	2200      	movs	r2, #0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <__aeabi_f2d+0x8c>)
 80026dc:	e7d2      	b.n	8002684 <__aeabi_f2d+0x20>
 80026de:	0003      	movs	r3, r0
 80026e0:	002a      	movs	r2, r5
 80026e2:	3b0b      	subs	r3, #11
 80026e4:	409a      	lsls	r2, r3
 80026e6:	2500      	movs	r5, #0
 80026e8:	e7e3      	b.n	80026b2 <__aeabi_f2d+0x4e>
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	00000389 	.word	0x00000389
 80026f0:	000007ff 	.word	0x000007ff

080026f4 <__aeabi_d2f>:
 80026f4:	0002      	movs	r2, r0
 80026f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f8:	004b      	lsls	r3, r1, #1
 80026fa:	030d      	lsls	r5, r1, #12
 80026fc:	0f40      	lsrs	r0, r0, #29
 80026fe:	0d5b      	lsrs	r3, r3, #21
 8002700:	0fcc      	lsrs	r4, r1, #31
 8002702:	0a6d      	lsrs	r5, r5, #9
 8002704:	493a      	ldr	r1, [pc, #232]	; (80027f0 <__aeabi_d2f+0xfc>)
 8002706:	4305      	orrs	r5, r0
 8002708:	1c58      	adds	r0, r3, #1
 800270a:	00d7      	lsls	r7, r2, #3
 800270c:	4208      	tst	r0, r1
 800270e:	d00a      	beq.n	8002726 <__aeabi_d2f+0x32>
 8002710:	4938      	ldr	r1, [pc, #224]	; (80027f4 <__aeabi_d2f+0x100>)
 8002712:	1859      	adds	r1, r3, r1
 8002714:	29fe      	cmp	r1, #254	; 0xfe
 8002716:	dd16      	ble.n	8002746 <__aeabi_d2f+0x52>
 8002718:	20ff      	movs	r0, #255	; 0xff
 800271a:	2200      	movs	r2, #0
 800271c:	05c0      	lsls	r0, r0, #23
 800271e:	4310      	orrs	r0, r2
 8002720:	07e4      	lsls	r4, r4, #31
 8002722:	4320      	orrs	r0, r4
 8002724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <__aeabi_d2f+0x44>
 800272a:	433d      	orrs	r5, r7
 800272c:	d026      	beq.n	800277c <__aeabi_d2f+0x88>
 800272e:	2205      	movs	r2, #5
 8002730:	0192      	lsls	r2, r2, #6
 8002732:	0a52      	lsrs	r2, r2, #9
 8002734:	b2d8      	uxtb	r0, r3
 8002736:	e7f1      	b.n	800271c <__aeabi_d2f+0x28>
 8002738:	432f      	orrs	r7, r5
 800273a:	d0ed      	beq.n	8002718 <__aeabi_d2f+0x24>
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	03d2      	lsls	r2, r2, #15
 8002740:	20ff      	movs	r0, #255	; 0xff
 8002742:	432a      	orrs	r2, r5
 8002744:	e7ea      	b.n	800271c <__aeabi_d2f+0x28>
 8002746:	2900      	cmp	r1, #0
 8002748:	dd1b      	ble.n	8002782 <__aeabi_d2f+0x8e>
 800274a:	0192      	lsls	r2, r2, #6
 800274c:	1e50      	subs	r0, r2, #1
 800274e:	4182      	sbcs	r2, r0
 8002750:	00ed      	lsls	r5, r5, #3
 8002752:	0f7f      	lsrs	r7, r7, #29
 8002754:	432a      	orrs	r2, r5
 8002756:	433a      	orrs	r2, r7
 8002758:	0753      	lsls	r3, r2, #29
 800275a:	d047      	beq.n	80027ec <__aeabi_d2f+0xf8>
 800275c:	230f      	movs	r3, #15
 800275e:	4013      	ands	r3, r2
 8002760:	2b04      	cmp	r3, #4
 8002762:	d000      	beq.n	8002766 <__aeabi_d2f+0x72>
 8002764:	3204      	adds	r2, #4
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	04db      	lsls	r3, r3, #19
 800276a:	4013      	ands	r3, r2
 800276c:	d03e      	beq.n	80027ec <__aeabi_d2f+0xf8>
 800276e:	1c48      	adds	r0, r1, #1
 8002770:	29fe      	cmp	r1, #254	; 0xfe
 8002772:	d0d1      	beq.n	8002718 <__aeabi_d2f+0x24>
 8002774:	0192      	lsls	r2, r2, #6
 8002776:	0a52      	lsrs	r2, r2, #9
 8002778:	b2c0      	uxtb	r0, r0
 800277a:	e7cf      	b.n	800271c <__aeabi_d2f+0x28>
 800277c:	2000      	movs	r0, #0
 800277e:	2200      	movs	r2, #0
 8002780:	e7cc      	b.n	800271c <__aeabi_d2f+0x28>
 8002782:	000a      	movs	r2, r1
 8002784:	3217      	adds	r2, #23
 8002786:	db2f      	blt.n	80027e8 <__aeabi_d2f+0xf4>
 8002788:	2680      	movs	r6, #128	; 0x80
 800278a:	0436      	lsls	r6, r6, #16
 800278c:	432e      	orrs	r6, r5
 800278e:	251e      	movs	r5, #30
 8002790:	1a6d      	subs	r5, r5, r1
 8002792:	2d1f      	cmp	r5, #31
 8002794:	dd11      	ble.n	80027ba <__aeabi_d2f+0xc6>
 8002796:	2202      	movs	r2, #2
 8002798:	4252      	negs	r2, r2
 800279a:	1a52      	subs	r2, r2, r1
 800279c:	0031      	movs	r1, r6
 800279e:	40d1      	lsrs	r1, r2
 80027a0:	2d20      	cmp	r5, #32
 80027a2:	d004      	beq.n	80027ae <__aeabi_d2f+0xba>
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <__aeabi_d2f+0x104>)
 80027a6:	4694      	mov	ip, r2
 80027a8:	4463      	add	r3, ip
 80027aa:	409e      	lsls	r6, r3
 80027ac:	4337      	orrs	r7, r6
 80027ae:	003a      	movs	r2, r7
 80027b0:	1e53      	subs	r3, r2, #1
 80027b2:	419a      	sbcs	r2, r3
 80027b4:	430a      	orrs	r2, r1
 80027b6:	2100      	movs	r1, #0
 80027b8:	e7ce      	b.n	8002758 <__aeabi_d2f+0x64>
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <__aeabi_d2f+0x108>)
 80027bc:	0038      	movs	r0, r7
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	4098      	lsls	r0, r3
 80027c4:	003a      	movs	r2, r7
 80027c6:	1e41      	subs	r1, r0, #1
 80027c8:	4188      	sbcs	r0, r1
 80027ca:	409e      	lsls	r6, r3
 80027cc:	40ea      	lsrs	r2, r5
 80027ce:	4330      	orrs	r0, r6
 80027d0:	4302      	orrs	r2, r0
 80027d2:	2100      	movs	r1, #0
 80027d4:	0753      	lsls	r3, r2, #29
 80027d6:	d1c1      	bne.n	800275c <__aeabi_d2f+0x68>
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0013      	movs	r3, r2
 80027dc:	04c9      	lsls	r1, r1, #19
 80027de:	2001      	movs	r0, #1
 80027e0:	400b      	ands	r3, r1
 80027e2:	420a      	tst	r2, r1
 80027e4:	d1c6      	bne.n	8002774 <__aeabi_d2f+0x80>
 80027e6:	e7a3      	b.n	8002730 <__aeabi_d2f+0x3c>
 80027e8:	2300      	movs	r3, #0
 80027ea:	e7a0      	b.n	800272e <__aeabi_d2f+0x3a>
 80027ec:	000b      	movs	r3, r1
 80027ee:	e79f      	b.n	8002730 <__aeabi_d2f+0x3c>
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	fffffc80 	.word	0xfffffc80
 80027f8:	fffffca2 	.word	0xfffffca2
 80027fc:	fffffc82 	.word	0xfffffc82

08002800 <__clzsi2>:
 8002800:	211c      	movs	r1, #28
 8002802:	2301      	movs	r3, #1
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	4298      	cmp	r0, r3
 8002808:	d301      	bcc.n	800280e <__clzsi2+0xe>
 800280a:	0c00      	lsrs	r0, r0, #16
 800280c:	3910      	subs	r1, #16
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	4298      	cmp	r0, r3
 8002812:	d301      	bcc.n	8002818 <__clzsi2+0x18>
 8002814:	0a00      	lsrs	r0, r0, #8
 8002816:	3908      	subs	r1, #8
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	4298      	cmp	r0, r3
 800281c:	d301      	bcc.n	8002822 <__clzsi2+0x22>
 800281e:	0900      	lsrs	r0, r0, #4
 8002820:	3904      	subs	r1, #4
 8002822:	a202      	add	r2, pc, #8	; (adr r2, 800282c <__clzsi2+0x2c>)
 8002824:	5c10      	ldrb	r0, [r2, r0]
 8002826:	1840      	adds	r0, r0, r1
 8002828:	4770      	bx	lr
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	02020304 	.word	0x02020304
 8002830:	01010101 	.word	0x01010101
	...

0800283c <__clzdi2>:
 800283c:	b510      	push	{r4, lr}
 800283e:	2900      	cmp	r1, #0
 8002840:	d103      	bne.n	800284a <__clzdi2+0xe>
 8002842:	f7ff ffdd 	bl	8002800 <__clzsi2>
 8002846:	3020      	adds	r0, #32
 8002848:	e002      	b.n	8002850 <__clzdi2+0x14>
 800284a:	0008      	movs	r0, r1
 800284c:	f7ff ffd8 	bl	8002800 <__clzsi2>
 8002850:	bd10      	pop	{r4, pc}
 8002852:	46c0      	nop			; (mov r8, r8)

08002854 <main>:
double Ks = 2.35e-3;



int main(void)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002856:	b0b1      	sub	sp, #196	; 0xc4
 8002858:	af00      	add	r7, sp, #0
  HAL_Init();
 800285a:	f001 f9b1 	bl	8003bc0 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800285e:	f000 fe47 	bl	80034f0 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002862:	f000 ff19 	bl	8003698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002866:	f000 fec9 	bl	80035fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800286a:	f000 fe89 	bl	8003580 <MX_SPI1_Init>


 char *texto = "\n\r Reinicio ... \n";
 800286e:	4bd9      	ldr	r3, [pc, #868]	; (8002bd4 <main+0x380>)
 8002870:	24b0      	movs	r4, #176	; 0xb0
 8002872:	193a      	adds	r2, r7, r4
 8002874:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)texto, strlen(texto), HAL_MAX_DELAY);
 8002876:	193b      	adds	r3, r7, r4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f7fd fc42 	bl	8000104 <strlen>
 8002880:	0003      	movs	r3, r0
 8002882:	b29a      	uxth	r2, r3
 8002884:	2301      	movs	r3, #1
 8002886:	425b      	negs	r3, r3
 8002888:	1939      	adds	r1, r7, r4
 800288a:	6809      	ldr	r1, [r1, #0]
 800288c:	48d2      	ldr	r0, [pc, #840]	; (8002bd8 <main+0x384>)
 800288e:	f003 fbb9 	bl	8006004 <HAL_UART_Transmit>
  /*Pin CS down para bloquear la eleccion de protocolo SPI*/
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002892:	4bd2      	ldr	r3, [pc, #840]	; (8002bdc <main+0x388>)
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	0018      	movs	r0, r3
 800289a:	f001 fc8e 	bl	80041ba <HAL_GPIO_WritePin>
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, BUTTON_Pin) == GPIO_PIN_RESET && trama_enviada == 0) {
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	4acf      	ldr	r2, [pc, #828]	; (8002be0 <main+0x38c>)
 80028a4:	0019      	movs	r1, r3
 80028a6:	0010      	movs	r0, r2
 80028a8:	f001 fc6a 	bl	8004180 <HAL_GPIO_ReadPin>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d1f6      	bne.n	800289e <main+0x4a>
 80028b0:	4bcc      	ldr	r3, [pc, #816]	; (8002be4 <main+0x390>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f2      	bne.n	800289e <main+0x4a>

    //Pin PA_9 pulso para encender la placa de medicion atraves de circuito mosfet.
	 HAL_GPIO_WritePin(GPIOA, OUT3_3V_Pin ,GPIO_PIN_SET);
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	23a0      	movs	r3, #160	; 0xa0
 80028be:	05db      	lsls	r3, r3, #23
 80028c0:	2201      	movs	r2, #1
 80028c2:	0018      	movs	r0, r3
 80028c4:	f001 fc79 	bl	80041ba <HAL_GPIO_WritePin>

	  reinicioRegistro1();
 80028c8:	f000 fa18 	bl	8002cfc <reinicioRegistro1>

	  for(int j=0;j<16;j++){
 80028cc:	2300      	movs	r3, #0
 80028ce:	22bc      	movs	r2, #188	; 0xbc
 80028d0:	18ba      	adds	r2, r7, r2
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e1db      	b.n	8002c8e <main+0x43a>
      capturaDatos();
 80028d6:	f000 fa4b 	bl	8002d70 <capturaDatos>
	  /*CS Inicio de comunicacion */
      HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028da:	4bc0      	ldr	r3, [pc, #768]	; (8002bdc <main+0x388>)
 80028dc:	2200      	movs	r2, #0
 80028de:	2101      	movs	r1, #1
 80028e0:	0018      	movs	r0, r3
 80028e2:	f001 fc6a 	bl	80041ba <HAL_GPIO_WritePin>

      //LED ON
      HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 80028e6:	23a0      	movs	r3, #160	; 0xa0
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	2201      	movs	r2, #1
 80028ec:	2120      	movs	r1, #32
 80028ee:	0018      	movs	r0, r3
 80028f0:	f001 fc63 	bl	80041ba <HAL_GPIO_WritePin>
      /*---------------------    Solicitud direccion de lectura direccion 0x48 fila 36  --------------------------*/
      uint8_t data1[5] = {0x48, 0xFF, 0xFF, 0xFF, 0x00};
 80028f4:	246c      	movs	r4, #108	; 0x6c
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	4abb      	ldr	r2, [pc, #748]	; (8002be8 <main+0x394>)
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	711a      	strb	r2, [r3, #4]
      /* Calculate CRC */
      data1[4] = calculate_crc(data1, 4);
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2104      	movs	r1, #4
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fdce 	bl	80034a8 <calculate_crc>
 800290c:	0003      	movs	r3, r0
 800290e:	001a      	movs	r2, r3
 8002910:	0021      	movs	r1, r4
 8002912:	187b      	adds	r3, r7, r1
 8002914:	711a      	strb	r2, [r3, #4]
      /* Transmit data + CRC */
      HAL_SPI_Transmit(&hspi1, data1, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 8002916:	2301      	movs	r3, #1
 8002918:	425b      	negs	r3, r3
 800291a:	1879      	adds	r1, r7, r1
 800291c:	48b3      	ldr	r0, [pc, #716]	; (8002bec <main+0x398>)
 800291e:	2205      	movs	r2, #5
 8002920:	f002 fcb2 	bl	8005288 <HAL_SPI_Transmit>
 /*--------------------Recepcion de datos de la direccion 48 (32-bit data + CRC)-------------- */
      HAL_SPI_Receive(&hspi1, rx_data1, sizeof(rx_data1), HAL_MAX_DELAY);
 8002924:	2301      	movs	r3, #1
 8002926:	425b      	negs	r3, r3
 8002928:	49b1      	ldr	r1, [pc, #708]	; (8002bf0 <main+0x39c>)
 800292a:	48b0      	ldr	r0, [pc, #704]	; (8002bec <main+0x398>)
 800292c:	2205      	movs	r2, #5
 800292e:	f002 fe0b 	bl	8005548 <HAL_SPI_Receive>

      if(trama_enviada == 0){
 8002932:	4bac      	ldr	r3, [pc, #688]	; (8002be4 <main+0x390>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d14e      	bne.n	80029d8 <main+0x184>
    	  char *texto1 = "Trama enviada por SPI \n";
 800293a:	4bae      	ldr	r3, [pc, #696]	; (8002bf4 <main+0x3a0>)
 800293c:	24a8      	movs	r4, #168	; 0xa8
 800293e:	193a      	adds	r2, r7, r4
 8002940:	6013      	str	r3, [r2, #0]
    	  HAL_UART_Transmit(&huart2, (uint8_t*)texto1, strlen(texto1), HAL_MAX_DELAY);
 8002942:	193b      	adds	r3, r7, r4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0018      	movs	r0, r3
 8002948:	f7fd fbdc 	bl	8000104 <strlen>
 800294c:	0003      	movs	r3, r0
 800294e:	b29a      	uxth	r2, r3
 8002950:	2301      	movs	r3, #1
 8002952:	425b      	negs	r3, r3
 8002954:	1939      	adds	r1, r7, r4
 8002956:	6809      	ldr	r1, [r1, #0]
 8002958:	489f      	ldr	r0, [pc, #636]	; (8002bd8 <main+0x384>)
 800295a:	f003 fb53 	bl	8006004 <HAL_UART_Transmit>
      // Enviar datos por UART en formato hexadecimal
      for (int i = 0; i < sizeof(data1); i++) {
 800295e:	2300      	movs	r3, #0
 8002960:	22b8      	movs	r2, #184	; 0xb8
 8002962:	18ba      	adds	r2, r7, r2
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <main+0x150>
    	  sprintf(buf_tx, "%02X ", data1[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002968:	236c      	movs	r3, #108	; 0x6c
 800296a:	18fa      	adds	r2, r7, r3
 800296c:	24b8      	movs	r4, #184	; 0xb8
 800296e:	193b      	adds	r3, r7, r4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	18d3      	adds	r3, r2, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	001a      	movs	r2, r3
 8002978:	499f      	ldr	r1, [pc, #636]	; (8002bf8 <main+0x3a4>)
 800297a:	4ba0      	ldr	r3, [pc, #640]	; (8002bfc <main+0x3a8>)
 800297c:	0018      	movs	r0, r3
 800297e:	f004 ffcb 	bl	8007918 <siprintf>
    	  HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx, strlen(buf_tx), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002982:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <main+0x3a8>)
 8002984:	0018      	movs	r0, r3
 8002986:	f7fd fbbd 	bl	8000104 <strlen>
 800298a:	0003      	movs	r3, r0
 800298c:	b29a      	uxth	r2, r3
 800298e:	2301      	movs	r3, #1
 8002990:	425b      	negs	r3, r3
 8002992:	499a      	ldr	r1, [pc, #616]	; (8002bfc <main+0x3a8>)
 8002994:	4890      	ldr	r0, [pc, #576]	; (8002bd8 <main+0x384>)
 8002996:	f003 fb35 	bl	8006004 <HAL_UART_Transmit>
      for (int i = 0; i < sizeof(data1); i++) {
 800299a:	193b      	adds	r3, r7, r4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	23b8      	movs	r3, #184	; 0xb8
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d9dc      	bls.n	8002968 <main+0x114>
      }
      	  char *texto1_1 = "\n Vrms y Irms  direccion registro 0x48 \n";
 80029ae:	4b94      	ldr	r3, [pc, #592]	; (8002c00 <main+0x3ac>)
 80029b0:	24a4      	movs	r4, #164	; 0xa4
 80029b2:	193a      	adds	r2, r7, r4
 80029b4:	6013      	str	r3, [r2, #0]
      	  HAL_UART_Transmit(&huart2, (uint8_t*)texto1_1, strlen(texto1_1), HAL_MAX_DELAY);
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7fd fba2 	bl	8000104 <strlen>
 80029c0:	0003      	movs	r3, r0
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	2301      	movs	r3, #1
 80029c6:	425b      	negs	r3, r3
 80029c8:	1939      	adds	r1, r7, r4
 80029ca:	6809      	ldr	r1, [r1, #0]
 80029cc:	4882      	ldr	r0, [pc, #520]	; (8002bd8 <main+0x384>)
 80029ce:	f003 fb19 	bl	8006004 <HAL_UART_Transmit>
      	  trama_enviada=1;
 80029d2:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <main+0x390>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
      }
      for (int i = sizeof(rx_data1) - 1; i >= 0; i--) {
 80029d8:	2304      	movs	r3, #4
 80029da:	22b4      	movs	r2, #180	; 0xb4
 80029dc:	18ba      	adds	r2, r7, r2
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e01c      	b.n	8002a1c <main+0x1c8>
    	  sprintf(buf_tx2, "%02X ", rx_data1[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 80029e2:	4a83      	ldr	r2, [pc, #524]	; (8002bf0 <main+0x39c>)
 80029e4:	24b4      	movs	r4, #180	; 0xb4
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	18d3      	adds	r3, r2, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	001a      	movs	r2, r3
 80029f0:	4981      	ldr	r1, [pc, #516]	; (8002bf8 <main+0x3a4>)
 80029f2:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <main+0x3b0>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f004 ff8f 	bl	8007918 <siprintf>
    	  HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx2, strlen(buf_tx2), HAL_MAX_DELAY); // Transmitir el byte por UART
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <main+0x3b0>)
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7fd fb81 	bl	8000104 <strlen>
 8002a02:	0003      	movs	r3, r0
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2301      	movs	r3, #1
 8002a08:	425b      	negs	r3, r3
 8002a0a:	497e      	ldr	r1, [pc, #504]	; (8002c04 <main+0x3b0>)
 8002a0c:	4872      	ldr	r0, [pc, #456]	; (8002bd8 <main+0x384>)
 8002a0e:	f003 faf9 	bl	8006004 <HAL_UART_Transmit>
      for (int i = sizeof(rx_data1) - 1; i >= 0; i--) {
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	193a      	adds	r2, r7, r4
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	23b4      	movs	r3, #180	; 0xb4
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	dadd      	bge.n	80029e2 <main+0x18e>
      }

      /*---Conversion de los registros a valores reales ----*/
			  uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 8002a26:	4b72      	ldr	r3, [pc, #456]	; (8002bf0 <main+0x39c>)
 8002a28:	78db      	ldrb	r3, [r3, #3]
 8002a2a:	061a      	lsls	r2, r3, #24
									  (uint32_t)rx_data1[2] << 16 |
 8002a2c:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <main+0x39c>)
 8002a2e:	789b      	ldrb	r3, [r3, #2]
 8002a30:	041b      	lsls	r3, r3, #16
			  uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 8002a32:	431a      	orrs	r2, r3
									  (uint32_t)rx_data1[1] << 8 |
 8002a34:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <main+0x39c>)
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	021b      	lsls	r3, r3, #8
									  (uint32_t)rx_data1[2] << 16 |
 8002a3a:	4313      	orrs	r3, r2
									  (uint32_t)rx_data1[0];
 8002a3c:	4a6c      	ldr	r2, [pc, #432]	; (8002bf0 <main+0x39c>)
 8002a3e:	7812      	ldrb	r2, [r2, #0]
			  uint32_t received_data = (uint32_t)rx_data1[3] << 24 |
 8002a40:	4313      	orrs	r3, r2
 8002a42:	26a0      	movs	r6, #160	; 0xa0
 8002a44:	19ba      	adds	r2, r7, r6
 8002a46:	6013      	str	r3, [r2, #0]
				  // Bytes [14:0] para calcular Vrms
				  uint32_t vrms_bytes = received_data & 0x7FFF; // Máscara para obtener los primeros 15 bits
 8002a48:	19bb      	adds	r3, r7, r6
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	045b      	lsls	r3, r3, #17
 8002a4e:	0c5b      	lsrs	r3, r3, #17
 8002a50:	219c      	movs	r1, #156	; 0x9c
 8002a52:	187a      	adds	r2, r7, r1
 8002a54:	6013      	str	r3, [r2, #0]
				  // Calcular el valor VRMS
				  long long int potencia = pow(2,15);
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	0212      	lsls	r2, r2, #8
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2090      	movs	r0, #144	; 0x90
 8002a5e:	183c      	adds	r4, r7, r0
 8002a60:	6022      	str	r2, [r4, #0]
 8002a62:	6063      	str	r3, [r4, #4]
				  float vrms_decimal = ((float)vrms_bytes * 1.2 * (1 + 810000.0 / 470)) / (0.875 * 2 * potencia);
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f7fd ff6c 	bl	8000944 <__aeabi_ui2f>
 8002a6c:	1c03      	adds	r3, r0, #0
 8002a6e:	1c18      	adds	r0, r3, #0
 8002a70:	f7ff fdf8 	bl	8002664 <__aeabi_f2d>
 8002a74:	4a64      	ldr	r2, [pc, #400]	; (8002c08 <main+0x3b4>)
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <main+0x3b8>)
 8002a78:	f7fe ff06 	bl	8001888 <__aeabi_dmul>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	000b      	movs	r3, r1
 8002a80:	0010      	movs	r0, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	4a62      	ldr	r2, [pc, #392]	; (8002c10 <main+0x3bc>)
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <main+0x3c0>)
 8002a88:	f7fe fefe 	bl	8001888 <__aeabi_dmul>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	000b      	movs	r3, r1
 8002a90:	0014      	movs	r4, r2
 8002a92:	001d      	movs	r5, r3
 8002a94:	2090      	movs	r0, #144	; 0x90
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	f7fd fd22 	bl	80004e4 <__aeabi_l2d>
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <main+0x3c4>)
 8002aa4:	f7fe fef0 	bl	8001888 <__aeabi_dmul>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	000b      	movs	r3, r1
 8002aac:	0020      	movs	r0, r4
 8002aae:	0029      	movs	r1, r5
 8002ab0:	f7fe faf0 	bl	8001094 <__aeabi_ddiv>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0010      	movs	r0, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	f7ff fe1a 	bl	80026f4 <__aeabi_d2f>
 8002ac0:	1c03      	adds	r3, r0, #0
 8002ac2:	228c      	movs	r2, #140	; 0x8c
 8002ac4:	18b9      	adds	r1, r7, r2
 8002ac6:	600b      	str	r3, [r1, #0]

				  // Obtener los bytes [31:15] para calcular Irms
				  uint32_t irms_bytes = received_data >> 15;
 8002ac8:	19bb      	adds	r3, r7, r6
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0bdb      	lsrs	r3, r3, #15
 8002ace:	2188      	movs	r1, #136	; 0x88
 8002ad0:	1878      	adds	r0, r7, r1
 8002ad2:	6003      	str	r3, [r0, #0]
				  long long int potencia2 = pow(2,17);
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	0292      	lsls	r2, r2, #10
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2680      	movs	r6, #128	; 0x80
 8002adc:	19b8      	adds	r0, r7, r6
 8002ade:	6002      	str	r2, [r0, #0]
 8002ae0:	6043      	str	r3, [r0, #4]
				  float irms_decimal = ((float)irms_bytes * 1.2)/ (0.875*16* potencia2 *Ks*1);
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	f7fd ff2d 	bl	8000944 <__aeabi_ui2f>
 8002aea:	1c03      	adds	r3, r0, #0
 8002aec:	1c18      	adds	r0, r3, #0
 8002aee:	f7ff fdb9 	bl	8002664 <__aeabi_f2d>
 8002af2:	4a45      	ldr	r2, [pc, #276]	; (8002c08 <main+0x3b4>)
 8002af4:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <main+0x3b8>)
 8002af6:	f7fe fec7 	bl	8001888 <__aeabi_dmul>
 8002afa:	0002      	movs	r2, r0
 8002afc:	000b      	movs	r3, r1
 8002afe:	0014      	movs	r4, r2
 8002b00:	001d      	movs	r5, r3
 8002b02:	19bb      	adds	r3, r7, r6
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	f7fd fcec 	bl	80004e4 <__aeabi_l2d>
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <main+0x3c8>)
 8002b10:	f7fe feba 	bl	8001888 <__aeabi_dmul>
 8002b14:	0002      	movs	r2, r0
 8002b16:	000b      	movs	r3, r1
 8002b18:	0010      	movs	r0, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <main+0x3cc>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f7fe feb1 	bl	8001888 <__aeabi_dmul>
 8002b26:	0002      	movs	r2, r0
 8002b28:	000b      	movs	r3, r1
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	0029      	movs	r1, r5
 8002b2e:	f7fe fab1 	bl	8001094 <__aeabi_ddiv>
 8002b32:	0002      	movs	r2, r0
 8002b34:	000b      	movs	r3, r1
 8002b36:	0010      	movs	r0, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	f7ff fddb 	bl	80026f4 <__aeabi_d2f>
 8002b3e:	1c03      	adds	r3, r0, #0
 8002b40:	67fb      	str	r3, [r7, #124]	; 0x7c

	  /*Deteccion de errores utilizando el metodo CRC*/
	  uint8_t calculated_crc = calculate_crc(rx_data1, 4);
 8002b42:	257b      	movs	r5, #123	; 0x7b
 8002b44:	197c      	adds	r4, r7, r5
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <main+0x39c>)
 8002b48:	2104      	movs	r1, #4
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fcac 	bl	80034a8 <calculate_crc>
 8002b50:	0003      	movs	r3, r0
 8002b52:	7023      	strb	r3, [r4, #0]
		if (calculated_crc == rx_data1[4]) {
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <main+0x39c>)
 8002b56:	791b      	ldrb	r3, [r3, #4]
 8002b58:	197a      	adds	r2, r7, r5
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d16d      	bne.n	8002c3c <main+0x3e8>
			 char texto3[50];
			 char texto4[50];

			 sprintf(buf_tx3, "%.2f",(float)vrms_decimal);
 8002b60:	228c      	movs	r2, #140	; 0x8c
 8002b62:	18bb      	adds	r3, r7, r2
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f7ff fd7d 	bl	8002664 <__aeabi_f2d>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	000b      	movs	r3, r1
 8002b6e:	492d      	ldr	r1, [pc, #180]	; (8002c24 <main+0x3d0>)
 8002b70:	482d      	ldr	r0, [pc, #180]	; (8002c28 <main+0x3d4>)
 8002b72:	f004 fed1 	bl	8007918 <siprintf>
			 sprintf(texto3, "-> Vrms (%s) ", buf_tx3);
 8002b76:	4a2c      	ldr	r2, [pc, #176]	; (8002c28 <main+0x3d4>)
 8002b78:	492c      	ldr	r1, [pc, #176]	; (8002c2c <main+0x3d8>)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f004 fecb 	bl	8007918 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto3, strlen(texto3), HAL_MAX_DELAY);
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fd fabd 	bl	8000104 <strlen>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	2301      	movs	r3, #1
 8002b90:	425b      	negs	r3, r3
 8002b92:	1d39      	adds	r1, r7, #4
 8002b94:	4810      	ldr	r0, [pc, #64]	; (8002bd8 <main+0x384>)
 8002b96:	f003 fa35 	bl	8006004 <HAL_UART_Transmit>

			 sprintf(buf_tx4, "%.5f",(float)irms_decimal);
 8002b9a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002b9c:	f7ff fd62 	bl	8002664 <__aeabi_f2d>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	000b      	movs	r3, r1
 8002ba4:	4922      	ldr	r1, [pc, #136]	; (8002c30 <main+0x3dc>)
 8002ba6:	4823      	ldr	r0, [pc, #140]	; (8002c34 <main+0x3e0>)
 8002ba8:	f004 feb6 	bl	8007918 <siprintf>
			 sprintf(texto4, " Irms (%s) \n", buf_tx4);
 8002bac:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <main+0x3e0>)
 8002bae:	4922      	ldr	r1, [pc, #136]	; (8002c38 <main+0x3e4>)
 8002bb0:	2438      	movs	r4, #56	; 0x38
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f004 feaf 	bl	8007918 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto4, strlen(texto4), HAL_MAX_DELAY);
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fd faa1 	bl	8000104 <strlen>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	425b      	negs	r3, r3
 8002bca:	1939      	adds	r1, r7, r4
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <main+0x384>)
 8002bce:	f003 fa19 	bl	8006004 <HAL_UART_Transmit>
 8002bd2:	e041      	b.n	8002c58 <main+0x404>
 8002bd4:	08009d28 	.word	0x08009d28
 8002bd8:	2000025c 	.word	0x2000025c
 8002bdc:	50000400 	.word	0x50000400
 8002be0:	50000800 	.word	0x50000800
 8002be4:	200003b4 	.word	0x200003b4
 8002be8:	08009de4 	.word	0x08009de4
 8002bec:	200001f8 	.word	0x200001f8
 8002bf0:	200003b8 	.word	0x200003b8
 8002bf4:	08009d3c 	.word	0x08009d3c
 8002bf8:	08009d54 	.word	0x08009d54
 8002bfc:	200002f4 	.word	0x200002f4
 8002c00:	08009d5c 	.word	0x08009d5c
 8002c04:	20000308 	.word	0x20000308
 8002c08:	33333333 	.word	0x33333333
 8002c0c:	3ff33333 	.word	0x3ff33333
 8002c10:	f51b3bea 	.word	0xf51b3bea
 8002c14:	409af19d 	.word	0x409af19d
 8002c18:	3ffc0000 	.word	0x3ffc0000
 8002c1c:	402c0000 	.word	0x402c0000
 8002c20:	20000000 	.word	0x20000000
 8002c24:	08009d88 	.word	0x08009d88
 8002c28:	20000314 	.word	0x20000314
 8002c2c:	08009d90 	.word	0x08009d90
 8002c30:	08009da0 	.word	0x08009da0
 8002c34:	20000328 	.word	0x20000328
 8002c38:	08009da8 	.word	0x08009da8

		} else {
			 char *texto5 = "->Incorrect CRC\r\n	";
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <main+0x494>)
 8002c3e:	677b      	str	r3, [r7, #116]	; 0x74
			 HAL_UART_Transmit(&huart2, (uint8_t*)texto5, strlen(texto5), HAL_MAX_DELAY);
 8002c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7fd fa5e 	bl	8000104 <strlen>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	425b      	negs	r3, r3
 8002c50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002c52:	4826      	ldr	r0, [pc, #152]	; (8002cec <main+0x498>)
 8002c54:	f003 f9d6 	bl	8006004 <HAL_UART_Transmit>
		}


			 calculated_crc = 0;
 8002c58:	237b      	movs	r3, #123	; 0x7b
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
			 memset(rx_data1, 0, sizeof(rx_data1));
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <main+0x49c>)
 8002c62:	2205      	movs	r2, #5
 8002c64:	2100      	movs	r1, #0
 8002c66:	0018      	movs	r0, r3
 8002c68:	f004 fec2 	bl	80079f0 <memset>
			 /* Se cierra la comunicacion SCS --> up */
			 HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <main+0x4a0>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2101      	movs	r1, #1
 8002c72:	0018      	movs	r0, r3
 8002c74:	f001 faa1 	bl	80041ba <HAL_GPIO_WritePin>
			 delay_ms(500);
 8002c78:	23fa      	movs	r3, #250	; 0xfa
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f8b1 	bl	8002de4 <delay_ms>
	  for(int j=0;j<16;j++){
 8002c82:	22bc      	movs	r2, #188	; 0xbc
 8002c84:	18bb      	adds	r3, r7, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	18ba      	adds	r2, r7, r2
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	23bc      	movs	r3, #188	; 0xbc
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	dc00      	bgt.n	8002c9a <main+0x446>
 8002c98:	e61d      	b.n	80028d6 <main+0x82>

	  	  }//-->end for
	  delay_ms(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f000 f8a2 	bl	8002de4 <delay_ms>
	  activEnergy();
 8002ca0:	f000 f8ac 	bl	8002dfc <activEnergy>
	  delay_ms(200);
 8002ca4:	20c8      	movs	r0, #200	; 0xc8
 8002ca6:	f000 f89d 	bl	8002de4 <delay_ms>
	  activePower();
 8002caa:	f000 fa31 	bl	8003110 <activePower>


	  	  // LED OFF
	  	 HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002cae:	23a0      	movs	r3, #160	; 0xa0
 8002cb0:	05db      	lsls	r3, r3, #23
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2120      	movs	r1, #32
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f001 fa7f 	bl	80041ba <HAL_GPIO_WritePin>
	  	 char *texto_fin = "FIN de comunicacion \n";
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <main+0x4a4>)
 8002cbe:	24ac      	movs	r4, #172	; 0xac
 8002cc0:	193a      	adds	r2, r7, r4
 8002cc2:	6013      	str	r3, [r2, #0]
		 HAL_UART_Transmit(&huart2, (uint8_t*)texto_fin, strlen(texto_fin), HAL_MAX_DELAY);
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fa1b 	bl	8000104 <strlen>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	1939      	adds	r1, r7, r4
 8002cd8:	6809      	ldr	r1, [r1, #0]
 8002cda:	4804      	ldr	r0, [pc, #16]	; (8002cec <main+0x498>)
 8002cdc:	f003 f992 	bl	8006004 <HAL_UART_Transmit>
		 delay_ms(10);
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f000 f87f 	bl	8002de4 <delay_ms>
	  if (HAL_GPIO_ReadPin(GPIOC, BUTTON_Pin) == GPIO_PIN_RESET && trama_enviada == 0) {
 8002ce6:	e5da      	b.n	800289e <main+0x4a>
 8002ce8:	08009db8 	.word	0x08009db8
 8002cec:	2000025c 	.word	0x2000025c
 8002cf0:	200003b8 	.word	0x200003b8
 8002cf4:	50000400 	.word	0x50000400
 8002cf8:	08009dcc 	.word	0x08009dcc

08002cfc <reinicioRegistro1>:
  }
}



void reinicioRegistro1(void) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
/* Pull SYN pin up for 25ms */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <reinicioRegistro1+0x6c>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f001 fa56 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(25);
 8002d0e:	2019      	movs	r0, #25
 8002d10:	f000 f868 	bl	8002de4 <delay_ms>
/* Tiempo para bloquear la elección de la interfaz */
HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <reinicioRegistro1+0x70>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	2101      	movs	r1, #1
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f001 fa4d 	bl	80041ba <HAL_GPIO_WritePin>
//Tiempo entre el encendido y el reset del pin(SYN)
delay_ms (25);
 8002d20:	2019      	movs	r0, #25
 8002d22:	f000 f85f 	bl	8002de4 <delay_ms>
/*----------------- Pulsos de reinicio de registros STPM32-------------------*/

/* Generate 2 pulses on SYN pin  */
/*Restablecimiento de registros de medición y reinicio de contadores*/
for (int i = 0; i < 2; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e014      	b.n	8002d56 <reinicioRegistro1+0x5a>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <reinicioRegistro1+0x6c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0018      	movs	r0, r3
 8002d34:	f001 fa41 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(1);
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f000 f853 	bl	8002de4 <delay_ms>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <reinicioRegistro1+0x6c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	0018      	movs	r0, r3
 8002d46:	f001 fa38 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(1);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f000 f84a 	bl	8002de4 <delay_ms>
for (int i = 0; i < 2; i++) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	dde7      	ble.n	8002d2c <reinicioRegistro1+0x30>
}
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	50000800 	.word	0x50000800
 8002d6c:	50000400 	.word	0x50000400

08002d70 <capturaDatos>:

void capturaDatos(void){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
/* Pull SYN pin up for 25ms */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <capturaDatos+0x6c>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f001 fa1c 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(25);
 8002d82:	2019      	movs	r0, #25
 8002d84:	f000 f82e 	bl	8002de4 <delay_ms>
/* Tiempo para bloquear la elección de la interfaz */
HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <capturaDatos+0x70>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 fa13 	bl	80041ba <HAL_GPIO_WritePin>
//Tiempo entre el encendido y el reset del pin(SYN)
delay_ms (25);
 8002d94:	2019      	movs	r0, #25
 8002d96:	f000 f825 	bl	8002de4 <delay_ms>
/* Generate 1 pulses on SYN pin  */
/*Para la captura de datos*/
for (int i = 0; i < 1; i++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	e014      	b.n	8002dca <capturaDatos+0x5a>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <capturaDatos+0x6c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0018      	movs	r0, r3
 8002da8:	f001 fa07 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f000 f819 	bl	8002de4 <delay_ms>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <capturaDatos+0x6c>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0018      	movs	r0, r3
 8002dba:	f001 f9fe 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(1);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 f810 	bl	8002de4 <delay_ms>
for (int i = 0; i < 1; i++) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	dde7      	ble.n	8002da0 <capturaDatos+0x30>
}
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	50000800 	.word	0x50000800
 8002de0:	50000400 	.word	0x50000400

08002de4 <delay_ms>:
  	   delay_ms(1);//Reset pulse width
  	   HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
}

void delay_ms(uint32_t ms)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 ff6c 	bl	8003ccc <HAL_Delay>
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <activEnergy>:


void activEnergy (void){
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b0a1      	sub	sp, #132	; 0x84
 8002e00:	af00      	add	r7, sp, #0
for(int q=0;q<7;q++){
 8002e02:	2300      	movs	r3, #0
 8002e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e06:	e14d      	b.n	80030a4 <activEnergy+0x2a8>
capturaDatos();
 8002e08:	f7ff ffb2 	bl	8002d70 <capturaDatos>
/*CS Inicio de comunicacion */
HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e0c:	4baa      	ldr	r3, [pc, #680]	; (80030b8 <activEnergy+0x2bc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2101      	movs	r1, #1
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 f9d1 	bl	80041ba <HAL_GPIO_WritePin>

//LED ON
HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8002e18:	23a0      	movs	r3, #160	; 0xa0
 8002e1a:	05db      	lsls	r3, r3, #23
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2120      	movs	r1, #32
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 f9ca 	bl	80041ba <HAL_GPIO_WritePin>

/*------------------- Solicitud direccion 0x56 Fila 42  PH1 Active Energy [31:0]-------------*/
uint8_t data3[5] = {0x56, 0xFF, 0xFF, 0xFF, 0x00};
 8002e26:	2438      	movs	r4, #56	; 0x38
 8002e28:	2508      	movs	r5, #8
 8002e2a:	1963      	adds	r3, r4, r5
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	4aa3      	ldr	r2, [pc, #652]	; (80030bc <activEnergy+0x2c0>)
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	6019      	str	r1, [r3, #0]
 8002e34:	7912      	ldrb	r2, [r2, #4]
 8002e36:	711a      	strb	r2, [r3, #4]
/* Calculate CRC */
data3[4] = calculate_crc(data2, 4);
 8002e38:	4ba1      	ldr	r3, [pc, #644]	; (80030c0 <activEnergy+0x2c4>)
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fb33 	bl	80034a8 <calculate_crc>
 8002e42:	0003      	movs	r3, r0
 8002e44:	001a      	movs	r2, r3
 8002e46:	1963      	adds	r3, r4, r5
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	711a      	strb	r2, [r3, #4]
/* Transmit data + CRC */
HAL_SPI_Transmit(&hspi1, data3, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	425b      	negs	r3, r3
 8002e50:	1962      	adds	r2, r4, r5
 8002e52:	19d1      	adds	r1, r2, r7
 8002e54:	489b      	ldr	r0, [pc, #620]	; (80030c4 <activEnergy+0x2c8>)
 8002e56:	2205      	movs	r2, #5
 8002e58:	f002 fa16 	bl	8005288 <HAL_SPI_Transmit>
/*--------------------Recepcion de datos de la direccion 5C (32-bit data + CRC)-------------- */
HAL_SPI_Receive(&hspi1, rx_data3, sizeof(rx_data3), HAL_MAX_DELAY);
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	425b      	negs	r3, r3
 8002e60:	4999      	ldr	r1, [pc, #612]	; (80030c8 <activEnergy+0x2cc>)
 8002e62:	4898      	ldr	r0, [pc, #608]	; (80030c4 <activEnergy+0x2c8>)
 8002e64:	2205      	movs	r2, #5
 8002e66:	f002 fb6f 	bl	8005548 <HAL_SPI_Receive>

if(trama_enviada == 1){
 8002e6a:	4b98      	ldr	r3, [pc, #608]	; (80030cc <activEnergy+0x2d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d140      	bne.n	8002ef4 <activEnergy+0xf8>
char *texto9 = "Trama enviada por SPI \n";
 8002e72:	4b97      	ldr	r3, [pc, #604]	; (80030d0 <activEnergy+0x2d4>)
 8002e74:	673b      	str	r3, [r7, #112]	; 0x70
HAL_UART_Transmit(&huart2, (uint8_t*)texto9, strlen(texto9), HAL_MAX_DELAY);
 8002e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fd f943 	bl	8000104 <strlen>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	2301      	movs	r3, #1
 8002e84:	425b      	negs	r3, r3
 8002e86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002e88:	4892      	ldr	r0, [pc, #584]	; (80030d4 <activEnergy+0x2d8>)
 8002e8a:	f003 f8bb 	bl	8006004 <HAL_UART_Transmit>
// Enviar datos por UART en formato hexadecimal
for (int i = 0; i < sizeof(data3); i++) {
 8002e8e:	2300      	movs	r3, #0
 8002e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e92:	e01b      	b.n	8002ecc <activEnergy+0xd0>
sprintf(buf_tx8, "%02X ", data3[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002e94:	2338      	movs	r3, #56	; 0x38
 8002e96:	2208      	movs	r2, #8
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	19da      	adds	r2, r3, r7
 8002e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9e:	18d3      	adds	r3, r2, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	498c      	ldr	r1, [pc, #560]	; (80030d8 <activEnergy+0x2dc>)
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <activEnergy+0x2e0>)
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f004 fd35 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx8, strlen(buf_tx8), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <activEnergy+0x2e0>)
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd f927 	bl	8000104 <strlen>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	2301      	movs	r3, #1
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	4987      	ldr	r1, [pc, #540]	; (80030dc <activEnergy+0x2e0>)
 8002ec0:	4884      	ldr	r0, [pc, #528]	; (80030d4 <activEnergy+0x2d8>)
 8002ec2:	f003 f89f 	bl	8006004 <HAL_UART_Transmit>
for (int i = 0; i < sizeof(data3); i++) {
 8002ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec8:	3301      	adds	r3, #1
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d9e0      	bls.n	8002e94 <activEnergy+0x98>
}
char *texto9_1 = "\n Energia Activa direccion registro 0x56 \n";
 8002ed2:	4b83      	ldr	r3, [pc, #524]	; (80030e0 <activEnergy+0x2e4>)
 8002ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
HAL_UART_Transmit(&huart2, (uint8_t*)texto9_1, strlen(texto9_1), HAL_MAX_DELAY);
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd f913 	bl	8000104 <strlen>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002ee8:	487a      	ldr	r0, [pc, #488]	; (80030d4 <activEnergy+0x2d8>)
 8002eea:	f003 f88b 	bl	8006004 <HAL_UART_Transmit>
trama_enviada=2;
 8002eee:	4b77      	ldr	r3, [pc, #476]	; (80030cc <activEnergy+0x2d0>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	601a      	str	r2, [r3, #0]
}

for (int i = sizeof(rx_data3) - 1; i >= 0; i--) {
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ef8:	e018      	b.n	8002f2c <activEnergy+0x130>
sprintf(buf_tx9, "%02X ", rx_data3[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8002efa:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <activEnergy+0x2cc>)
 8002efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	001a      	movs	r2, r3
 8002f04:	4974      	ldr	r1, [pc, #464]	; (80030d8 <activEnergy+0x2dc>)
 8002f06:	4b77      	ldr	r3, [pc, #476]	; (80030e4 <activEnergy+0x2e8>)
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f004 fd05 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx9, strlen(buf_tx9), HAL_MAX_DELAY); // Transmitir el byte por UART
 8002f0e:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <activEnergy+0x2e8>)
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd f8f7 	bl	8000104 <strlen>
 8002f16:	0003      	movs	r3, r0
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	4971      	ldr	r1, [pc, #452]	; (80030e4 <activEnergy+0x2e8>)
 8002f20:	486c      	ldr	r0, [pc, #432]	; (80030d4 <activEnergy+0x2d8>)
 8002f22:	f003 f86f 	bl	8006004 <HAL_UART_Transmit>
for (int i = sizeof(rx_data3) - 1; i >= 0; i--) {
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	dae3      	bge.n	8002efa <activEnergy+0xfe>
}
uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <activEnergy+0x2cc>)
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	061a      	lsls	r2, r3, #24
	  (uint32_t)rx_data3[2] << 16 |
 8002f38:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <activEnergy+0x2cc>)
 8002f3a:	789b      	ldrb	r3, [r3, #2]
 8002f3c:	041b      	lsls	r3, r3, #16
uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 8002f3e:	431a      	orrs	r2, r3
	  (uint32_t)rx_data3[1] << 8 |
 8002f40:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <activEnergy+0x2cc>)
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	021b      	lsls	r3, r3, #8
	  (uint32_t)rx_data3[2] << 16 |
 8002f46:	4313      	orrs	r3, r2
	  (uint32_t)rx_data3[0];
 8002f48:	4a5f      	ldr	r2, [pc, #380]	; (80030c8 <activEnergy+0x2cc>)
 8002f4a:	7812      	ldrb	r2, [r2, #0]
uint32_t received_data_EA =   (uint32_t)rx_data3[3] << 24 |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	66bb      	str	r3, [r7, #104]	; 0x68

// Bytes [28:0] para calcular LSBp
uint32_t LSBe_bytes = received_data_EA & 0xFFFFFFF; // Esta máscara tiene los primeros 28 bits
 8002f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	667b      	str	r3, [r7, #100]	; 0x64
// Calcular LSBp según la ecuación dada
long long int potencia3 = pow(2,17);
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	0292      	lsls	r2, r2, #10
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f60:	65fb      	str	r3, [r7, #92]	; 0x5c
float Vref_2 = pow(1.2,2);
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <activEnergy+0x2ec>)
 8002f64:	657b      	str	r3, [r7, #84]	; 0x54
float LSBe_decimal = ((float)LSBe_bytes * Vref_2 * (1 + 810000.0 / 470)) / (1*3600*7812.5*2*16*Ks*0.875*0.875* potencia3);
 8002f66:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002f68:	f7fd fcec 	bl	8000944 <__aeabi_ui2f>
 8002f6c:	1c03      	adds	r3, r0, #0
 8002f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f70:	1c18      	adds	r0, r3, #0
 8002f72:	f7fd fb99 	bl	80006a8 <__aeabi_fmul>
 8002f76:	1c03      	adds	r3, r0, #0
 8002f78:	1c18      	adds	r0, r3, #0
 8002f7a:	f7ff fb73 	bl	8002664 <__aeabi_f2d>
 8002f7e:	4a5b      	ldr	r2, [pc, #364]	; (80030ec <activEnergy+0x2f0>)
 8002f80:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <activEnergy+0x2f4>)
 8002f82:	f7fe fc81 	bl	8001888 <__aeabi_dmul>
 8002f86:	0002      	movs	r2, r0
 8002f88:	000b      	movs	r3, r1
 8002f8a:	0014      	movs	r4, r2
 8002f8c:	001d      	movs	r5, r3
 8002f8e:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <activEnergy+0x2f8>)
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0612      	lsls	r2, r2, #24
 8002f98:	4b57      	ldr	r3, [pc, #348]	; (80030f8 <activEnergy+0x2fc>)
 8002f9a:	f7fe fc75 	bl	8001888 <__aeabi_dmul>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	000b      	movs	r3, r1
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4b54      	ldr	r3, [pc, #336]	; (80030fc <activEnergy+0x300>)
 8002faa:	f7fe fc6d 	bl	8001888 <__aeabi_dmul>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	000b      	movs	r3, r1
 8002fb2:	0010      	movs	r0, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <activEnergy+0x300>)
 8002fba:	f7fe fc65 	bl	8001888 <__aeabi_dmul>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	603a      	str	r2, [r7, #0]
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002fc8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002fca:	f7fd fa8b 	bl	80004e4 <__aeabi_l2d>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	f7fe fc57 	bl	8001888 <__aeabi_dmul>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	000b      	movs	r3, r1
 8002fde:	0020      	movs	r0, r4
 8002fe0:	0029      	movs	r1, r5
 8002fe2:	f7fe f857 	bl	8001094 <__aeabi_ddiv>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	000b      	movs	r3, r1
 8002fea:	0010      	movs	r0, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	f7ff fb81 	bl	80026f4 <__aeabi_d2f>
 8002ff2:	1c03      	adds	r3, r0, #0
 8002ff4:	653b      	str	r3, [r7, #80]	; 0x50

uint8_t calculated_crc3 = calculate_crc(rx_data3, 4);
 8002ff6:	2547      	movs	r5, #71	; 0x47
 8002ff8:	2608      	movs	r6, #8
 8002ffa:	19ab      	adds	r3, r5, r6
 8002ffc:	19dc      	adds	r4, r3, r7
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <activEnergy+0x2cc>)
 8003000:	2104      	movs	r1, #4
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fa50 	bl	80034a8 <calculate_crc>
 8003008:	0003      	movs	r3, r0
 800300a:	7023      	strb	r3, [r4, #0]
if (calculated_crc3 == rx_data3[4]) {
 800300c:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <activEnergy+0x2cc>)
 800300e:	791b      	ldrb	r3, [r3, #4]
 8003010:	19aa      	adds	r2, r5, r6
 8003012:	19d2      	adds	r2, r2, r7
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d11c      	bne.n	8003054 <activEnergy+0x258>
char texto10[50];

sprintf(buf_tx10, "%.6f",(float)LSBe_decimal);
 800301a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800301c:	f7ff fb22 	bl	8002664 <__aeabi_f2d>
 8003020:	0002      	movs	r2, r0
 8003022:	000b      	movs	r3, r1
 8003024:	4936      	ldr	r1, [pc, #216]	; (8003100 <activEnergy+0x304>)
 8003026:	4837      	ldr	r0, [pc, #220]	; (8003104 <activEnergy+0x308>)
 8003028:	f004 fc76 	bl	8007918 <siprintf>
sprintf(texto10, "-> LSBe (%s)[Wh] \n ", buf_tx10);
 800302c:	4a35      	ldr	r2, [pc, #212]	; (8003104 <activEnergy+0x308>)
 800302e:	4936      	ldr	r1, [pc, #216]	; (8003108 <activEnergy+0x30c>)
 8003030:	240c      	movs	r4, #12
 8003032:	193b      	adds	r3, r7, r4
 8003034:	0018      	movs	r0, r3
 8003036:	f004 fc6f 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)texto10, strlen(texto10), HAL_MAX_DELAY);
 800303a:	193b      	adds	r3, r7, r4
 800303c:	0018      	movs	r0, r3
 800303e:	f7fd f861 	bl	8000104 <strlen>
 8003042:	0003      	movs	r3, r0
 8003044:	b29a      	uxth	r2, r3
 8003046:	2301      	movs	r3, #1
 8003048:	425b      	negs	r3, r3
 800304a:	1939      	adds	r1, r7, r4
 800304c:	4821      	ldr	r0, [pc, #132]	; (80030d4 <activEnergy+0x2d8>)
 800304e:	f002 ffd9 	bl	8006004 <HAL_UART_Transmit>
 8003052:	e00d      	b.n	8003070 <activEnergy+0x274>

} else {
char *texto11 = "->Incorrect CRC\r\n	";
 8003054:	4b2d      	ldr	r3, [pc, #180]	; (800310c <activEnergy+0x310>)
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
HAL_UART_Transmit(&huart2, (uint8_t*)texto11, strlen(texto11), HAL_MAX_DELAY);
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd f852 	bl	8000104 <strlen>
 8003060:	0003      	movs	r3, r0
 8003062:	b29a      	uxth	r2, r3
 8003064:	2301      	movs	r3, #1
 8003066:	425b      	negs	r3, r3
 8003068:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800306a:	481a      	ldr	r0, [pc, #104]	; (80030d4 <activEnergy+0x2d8>)
 800306c:	f002 ffca 	bl	8006004 <HAL_UART_Transmit>
}
calculated_crc3 = 0;
 8003070:	2347      	movs	r3, #71	; 0x47
 8003072:	2208      	movs	r2, #8
 8003074:	189b      	adds	r3, r3, r2
 8003076:	19db      	adds	r3, r3, r7
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
memset(rx_data3, 0, sizeof(rx_data3));
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <activEnergy+0x2cc>)
 800307e:	2205      	movs	r2, #5
 8003080:	2100      	movs	r1, #0
 8003082:	0018      	movs	r0, r3
 8003084:	f004 fcb4 	bl	80079f0 <memset>
/* Se cierra la comunicacion SCS --> up */
HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <activEnergy+0x2bc>)
 800308a:	2201      	movs	r2, #1
 800308c:	2101      	movs	r1, #1
 800308e:	0018      	movs	r0, r3
 8003090:	f001 f893 	bl	80041ba <HAL_GPIO_WritePin>
delay_ms(800);
 8003094:	23c8      	movs	r3, #200	; 0xc8
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff fea3 	bl	8002de4 <delay_ms>
for(int q=0;q<7;q++){
 800309e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a0:	3301      	adds	r3, #1
 80030a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	dc00      	bgt.n	80030ac <activEnergy+0x2b0>
 80030aa:	e6ad      	b.n	8002e08 <activEnergy+0xc>
}//--> end for q
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b021      	add	sp, #132	; 0x84
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	50000400 	.word	0x50000400
 80030bc:	08009e34 	.word	0x08009e34
 80030c0:	200003d0 	.word	0x200003d0
 80030c4:	200001f8 	.word	0x200001f8
 80030c8:	200003c8 	.word	0x200003c8
 80030cc:	200003b4 	.word	0x200003b4
 80030d0:	08009d3c 	.word	0x08009d3c
 80030d4:	2000025c 	.word	0x2000025c
 80030d8:	08009d54 	.word	0x08009d54
 80030dc:	20000378 	.word	0x20000378
 80030e0:	08009dec 	.word	0x08009dec
 80030e4:	2000038c 	.word	0x2000038c
 80030e8:	3fb851ec 	.word	0x3fb851ec
 80030ec:	f51b3bea 	.word	0xf51b3bea
 80030f0:	409af19d 	.word	0x409af19d
 80030f4:	20000000 	.word	0x20000000
 80030f8:	41cad274 	.word	0x41cad274
 80030fc:	3fec0000 	.word	0x3fec0000
 8003100:	08009e18 	.word	0x08009e18
 8003104:	200003a0 	.word	0x200003a0
 8003108:	08009e20 	.word	0x08009e20
 800310c:	08009db8 	.word	0x08009db8

08003110 <activePower>:


void activePower(void){
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b0a1      	sub	sp, #132	; 0x84
 8003114:	af00      	add	r7, sp, #0
	  for(int p=0;p<7;p++){
 8003116:	2300      	movs	r3, #0
 8003118:	67fb      	str	r3, [r7, #124]	; 0x7c
 800311a:	e153      	b.n	80033c4 <activePower+0x2b4>
		  capturaDatos();
 800311c:	f7ff fe28 	bl	8002d70 <capturaDatos>
/*CS Inicio de comunicacion */
HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003120:	4bad      	ldr	r3, [pc, #692]	; (80033d8 <activePower+0x2c8>)
 8003122:	2200      	movs	r2, #0
 8003124:	2101      	movs	r1, #1
 8003126:	0018      	movs	r0, r3
 8003128:	f001 f847 	bl	80041ba <HAL_GPIO_WritePin>

//LED ON
HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 800312c:	23a0      	movs	r3, #160	; 0xa0
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	2201      	movs	r2, #1
 8003132:	2120      	movs	r1, #32
 8003134:	0018      	movs	r0, r3
 8003136:	f001 f840 	bl	80041ba <HAL_GPIO_WritePin>

/*------------------- Solicitud direccion 0x5C Fila 46  PH1 ActivePower [28:0]-------------*/
uint8_t data2[5] = {0x5C, 0xFF, 0xFF, 0xFF, 0x00};
 800313a:	2434      	movs	r4, #52	; 0x34
 800313c:	2508      	movs	r5, #8
 800313e:	1963      	adds	r3, r4, r5
 8003140:	19db      	adds	r3, r3, r7
 8003142:	4aa6      	ldr	r2, [pc, #664]	; (80033dc <activePower+0x2cc>)
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	6019      	str	r1, [r3, #0]
 8003148:	7912      	ldrb	r2, [r2, #4]
 800314a:	711a      	strb	r2, [r3, #4]
/* Calculate CRC */
data2[4] = calculate_crc(data2, 4);
 800314c:	1963      	adds	r3, r4, r5
 800314e:	19db      	adds	r3, r3, r7
 8003150:	2104      	movs	r1, #4
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f9a8 	bl	80034a8 <calculate_crc>
 8003158:	0003      	movs	r3, r0
 800315a:	001a      	movs	r2, r3
 800315c:	0021      	movs	r1, r4
 800315e:	0028      	movs	r0, r5
 8003160:	180b      	adds	r3, r1, r0
 8003162:	19db      	adds	r3, r3, r7
 8003164:	711a      	strb	r2, [r3, #4]
/* Transmit data + CRC */
HAL_SPI_Transmit(&hspi1, data2, STPM3x_FRAME_LEN + 1, HAL_MAX_DELAY); // Transmitir la trama completa (datos + CRC)
 8003166:	2301      	movs	r3, #1
 8003168:	425b      	negs	r3, r3
 800316a:	180a      	adds	r2, r1, r0
 800316c:	19d1      	adds	r1, r2, r7
 800316e:	489c      	ldr	r0, [pc, #624]	; (80033e0 <activePower+0x2d0>)
 8003170:	2205      	movs	r2, #5
 8003172:	f002 f889 	bl	8005288 <HAL_SPI_Transmit>
/*--------------------Recepcion de datos de la direccion 5C (32-bit data + CRC)-------------- */
HAL_SPI_Receive(&hspi1, rx_data2, sizeof(rx_data2), HAL_MAX_DELAY);
 8003176:	2301      	movs	r3, #1
 8003178:	425b      	negs	r3, r3
 800317a:	499a      	ldr	r1, [pc, #616]	; (80033e4 <activePower+0x2d4>)
 800317c:	4898      	ldr	r0, [pc, #608]	; (80033e0 <activePower+0x2d0>)
 800317e:	2205      	movs	r2, #5
 8003180:	f002 f9e2 	bl	8005548 <HAL_SPI_Receive>

if(trama_enviada == 2){
 8003184:	4b98      	ldr	r3, [pc, #608]	; (80033e8 <activePower+0x2d8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d140      	bne.n	800320e <activePower+0xfe>
char *texto6 = "Trama enviada por SPI \n";
 800318c:	4b97      	ldr	r3, [pc, #604]	; (80033ec <activePower+0x2dc>)
 800318e:	673b      	str	r3, [r7, #112]	; 0x70
HAL_UART_Transmit(&huart2, (uint8_t*)texto6, strlen(texto6), HAL_MAX_DELAY);
 8003190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003192:	0018      	movs	r0, r3
 8003194:	f7fc ffb6 	bl	8000104 <strlen>
 8003198:	0003      	movs	r3, r0
 800319a:	b29a      	uxth	r2, r3
 800319c:	2301      	movs	r3, #1
 800319e:	425b      	negs	r3, r3
 80031a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031a2:	4893      	ldr	r0, [pc, #588]	; (80033f0 <activePower+0x2e0>)
 80031a4:	f002 ff2e 	bl	8006004 <HAL_UART_Transmit>
// Enviar datos por UART en formato hexadecimal
for (int i = 0; i < sizeof(data2); i++) {
 80031a8:	2300      	movs	r3, #0
 80031aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ac:	e01b      	b.n	80031e6 <activePower+0xd6>
sprintf(buf_tx5, "%02X ", data2[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 80031ae:	2334      	movs	r3, #52	; 0x34
 80031b0:	2208      	movs	r2, #8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	19da      	adds	r2, r3, r7
 80031b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	001a      	movs	r2, r3
 80031be:	498d      	ldr	r1, [pc, #564]	; (80033f4 <activePower+0x2e4>)
 80031c0:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <activePower+0x2e8>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f004 fba8 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx5, strlen(buf_tx5), HAL_MAX_DELAY); // Transmitir el byte por UART
 80031c8:	4b8b      	ldr	r3, [pc, #556]	; (80033f8 <activePower+0x2e8>)
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7fc ff9a 	bl	8000104 <strlen>
 80031d0:	0003      	movs	r3, r0
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	425b      	negs	r3, r3
 80031d8:	4987      	ldr	r1, [pc, #540]	; (80033f8 <activePower+0x2e8>)
 80031da:	4885      	ldr	r0, [pc, #532]	; (80033f0 <activePower+0x2e0>)
 80031dc:	f002 ff12 	bl	8006004 <HAL_UART_Transmit>
for (int i = 0; i < sizeof(data2); i++) {
 80031e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e2:	3301      	adds	r3, #1
 80031e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d9e0      	bls.n	80031ae <activePower+0x9e>
}
char *texto6_1 = "\n Potecia Activa direccion registro 0x5C \n";
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <activePower+0x2ec>)
 80031ee:	66fb      	str	r3, [r7, #108]	; 0x6c
HAL_UART_Transmit(&huart2, (uint8_t*)texto6_1, strlen(texto6_1), HAL_MAX_DELAY);
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fc ff86 	bl	8000104 <strlen>
 80031f8:	0003      	movs	r3, r0
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	2301      	movs	r3, #1
 80031fe:	425b      	negs	r3, r3
 8003200:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003202:	487b      	ldr	r0, [pc, #492]	; (80033f0 <activePower+0x2e0>)
 8003204:	f002 fefe 	bl	8006004 <HAL_UART_Transmit>
trama_enviada=3;
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <activePower+0x2d8>)
 800320a:	2203      	movs	r2, #3
 800320c:	601a      	str	r2, [r3, #0]
}

for (int i = sizeof(rx_data2) - 1; i >= 0; i--) {
 800320e:	2304      	movs	r3, #4
 8003210:	677b      	str	r3, [r7, #116]	; 0x74
 8003212:	e018      	b.n	8003246 <activePower+0x136>
sprintf(buf_tx6, "%02X ", rx_data2[i]); // Convertir el byte a formato hexadecimal y guardarlo en el buffer
 8003214:	4a73      	ldr	r2, [pc, #460]	; (80033e4 <activePower+0x2d4>)
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	18d3      	adds	r3, r2, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	001a      	movs	r2, r3
 800321e:	4975      	ldr	r1, [pc, #468]	; (80033f4 <activePower+0x2e4>)
 8003220:	4b77      	ldr	r3, [pc, #476]	; (8003400 <activePower+0x2f0>)
 8003222:	0018      	movs	r0, r3
 8003224:	f004 fb78 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)buf_tx6, strlen(buf_tx6), HAL_MAX_DELAY); // Transmitir el byte por UART
 8003228:	4b75      	ldr	r3, [pc, #468]	; (8003400 <activePower+0x2f0>)
 800322a:	0018      	movs	r0, r3
 800322c:	f7fc ff6a 	bl	8000104 <strlen>
 8003230:	0003      	movs	r3, r0
 8003232:	b29a      	uxth	r2, r3
 8003234:	2301      	movs	r3, #1
 8003236:	425b      	negs	r3, r3
 8003238:	4971      	ldr	r1, [pc, #452]	; (8003400 <activePower+0x2f0>)
 800323a:	486d      	ldr	r0, [pc, #436]	; (80033f0 <activePower+0x2e0>)
 800323c:	f002 fee2 	bl	8006004 <HAL_UART_Transmit>
for (int i = sizeof(rx_data2) - 1; i >= 0; i--) {
 8003240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003242:	3b01      	subs	r3, #1
 8003244:	677b      	str	r3, [r7, #116]	; 0x74
 8003246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003248:	2b00      	cmp	r3, #0
 800324a:	dae3      	bge.n	8003214 <activePower+0x104>
}
uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 800324c:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <activePower+0x2d4>)
 800324e:	78db      	ldrb	r3, [r3, #3]
 8003250:	061a      	lsls	r2, r3, #24
						  (uint32_t)rx_data2[2] << 16 |
 8003252:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <activePower+0x2d4>)
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	041b      	lsls	r3, r3, #16
uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 8003258:	431a      	orrs	r2, r3
						  (uint32_t)rx_data2[1] << 8 |
 800325a:	4b62      	ldr	r3, [pc, #392]	; (80033e4 <activePower+0x2d4>)
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	021b      	lsls	r3, r3, #8
						  (uint32_t)rx_data2[2] << 16 |
 8003260:	4313      	orrs	r3, r2
						  (uint32_t)rx_data2[0];
 8003262:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <activePower+0x2d4>)
 8003264:	7812      	ldrb	r2, [r2, #0]
uint32_t received_data_PA =   (uint32_t)rx_data2[3] << 24 |
 8003266:	4313      	orrs	r3, r2
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68

// Bytes [28:0] para calcular LSBp
uint32_t LSBp_bytes = received_data_PA & 0x0FFFFFFF; // Esta máscara tiene los primeros 28 bits
 800326a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	667b      	str	r3, [r7, #100]	; 0x64
// Calcular LSBp según la ecuación dada
long long int potencia2 = pow(2,28);
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	0552      	lsls	r2, r2, #21
 8003276:	2300      	movs	r3, #0
 8003278:	65ba      	str	r2, [r7, #88]	; 0x58
 800327a:	65fb      	str	r3, [r7, #92]	; 0x5c
double Vref2 = pow(1.2,2);
 800327c:	4a61      	ldr	r2, [pc, #388]	; (8003404 <activePower+0x2f4>)
 800327e:	4b62      	ldr	r3, [pc, #392]	; (8003408 <activePower+0x2f8>)
 8003280:	653a      	str	r2, [r7, #80]	; 0x50
 8003282:	657b      	str	r3, [r7, #84]	; 0x54
float LSBp_decimal = ((float)LSBp_bytes * Vref2 * (1 + 810000.0 / 470)) / (1*2*16*Ks*0.875*0.875* potencia2);
 8003284:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003286:	f7fd fb5d 	bl	8000944 <__aeabi_ui2f>
 800328a:	1c03      	adds	r3, r0, #0
 800328c:	1c18      	adds	r0, r3, #0
 800328e:	f7ff f9e9 	bl	8002664 <__aeabi_f2d>
 8003292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003296:	f7fe faf7 	bl	8001888 <__aeabi_dmul>
 800329a:	0002      	movs	r2, r0
 800329c:	000b      	movs	r3, r1
 800329e:	0010      	movs	r0, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <activePower+0x2fc>)
 80032a4:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <activePower+0x300>)
 80032a6:	f7fe faef 	bl	8001888 <__aeabi_dmul>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	0014      	movs	r4, r2
 80032b0:	001d      	movs	r5, r3
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <activePower+0x304>)
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <activePower+0x308>)
 80032bc:	f7fe fae4 	bl	8001888 <__aeabi_dmul>
 80032c0:	0002      	movs	r2, r0
 80032c2:	000b      	movs	r3, r1
 80032c4:	0010      	movs	r0, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	2200      	movs	r2, #0
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <activePower+0x30c>)
 80032cc:	f7fe fadc 	bl	8001888 <__aeabi_dmul>
 80032d0:	0002      	movs	r2, r0
 80032d2:	000b      	movs	r3, r1
 80032d4:	0010      	movs	r0, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	4b50      	ldr	r3, [pc, #320]	; (800341c <activePower+0x30c>)
 80032dc:	f7fe fad4 	bl	8001888 <__aeabi_dmul>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	603a      	str	r2, [r7, #0]
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80032ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80032ec:	f7fd f8fa 	bl	80004e4 <__aeabi_l2d>
 80032f0:	0002      	movs	r2, r0
 80032f2:	000b      	movs	r3, r1
 80032f4:	6838      	ldr	r0, [r7, #0]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	f7fe fac6 	bl	8001888 <__aeabi_dmul>
 80032fc:	0002      	movs	r2, r0
 80032fe:	000b      	movs	r3, r1
 8003300:	0020      	movs	r0, r4
 8003302:	0029      	movs	r1, r5
 8003304:	f7fd fec6 	bl	8001094 <__aeabi_ddiv>
 8003308:	0002      	movs	r2, r0
 800330a:	000b      	movs	r3, r1
 800330c:	0010      	movs	r0, r2
 800330e:	0019      	movs	r1, r3
 8003310:	f7ff f9f0 	bl	80026f4 <__aeabi_d2f>
 8003314:	1c03      	adds	r3, r0, #0
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c

uint8_t calculated_crc2 = calculate_crc(rx_data2, 4);
 8003318:	2543      	movs	r5, #67	; 0x43
 800331a:	2608      	movs	r6, #8
 800331c:	19ab      	adds	r3, r5, r6
 800331e:	19dc      	adds	r4, r3, r7
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <activePower+0x2d4>)
 8003322:	2104      	movs	r1, #4
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f8bf 	bl	80034a8 <calculate_crc>
 800332a:	0003      	movs	r3, r0
 800332c:	7023      	strb	r3, [r4, #0]
if (calculated_crc2 == rx_data2[4]) {
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <activePower+0x2d4>)
 8003330:	791b      	ldrb	r3, [r3, #4]
 8003332:	19aa      	adds	r2, r5, r6
 8003334:	19d2      	adds	r2, r2, r7
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d11b      	bne.n	8003374 <activePower+0x264>
char texto7[50];
//char texto7_1[50];

sprintf(buf_tx7, "%.5f",(float)LSBp_decimal);
 800333c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800333e:	f7ff f991 	bl	8002664 <__aeabi_f2d>
 8003342:	0002      	movs	r2, r0
 8003344:	000b      	movs	r3, r1
 8003346:	4936      	ldr	r1, [pc, #216]	; (8003420 <activePower+0x310>)
 8003348:	4836      	ldr	r0, [pc, #216]	; (8003424 <activePower+0x314>)
 800334a:	f004 fae5 	bl	8007918 <siprintf>
sprintf(texto7, "-> LSBp (%s)[W] \n ", buf_tx7);
 800334e:	4a35      	ldr	r2, [pc, #212]	; (8003424 <activePower+0x314>)
 8003350:	4935      	ldr	r1, [pc, #212]	; (8003428 <activePower+0x318>)
 8003352:	19bb      	adds	r3, r7, r6
 8003354:	0018      	movs	r0, r3
 8003356:	f004 fadf 	bl	8007918 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)texto7, strlen(texto7), HAL_MAX_DELAY);
 800335a:	19bb      	adds	r3, r7, r6
 800335c:	0018      	movs	r0, r3
 800335e:	f7fc fed1 	bl	8000104 <strlen>
 8003362:	0003      	movs	r3, r0
 8003364:	b29a      	uxth	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	425b      	negs	r3, r3
 800336a:	19b9      	adds	r1, r7, r6
 800336c:	4820      	ldr	r0, [pc, #128]	; (80033f0 <activePower+0x2e0>)
 800336e:	f002 fe49 	bl	8006004 <HAL_UART_Transmit>
 8003372:	e00d      	b.n	8003390 <activePower+0x280>
/* sprintf(buf_tx7, "%.5f",(float)irms_decimal);
sprintf(texto7_1, " Irms (%s) \n", buf_tx7);
HAL_UART_Transmit(&huart2, (uint8_t*)texto7_1, strlen(texto7_1), HAL_MAX_DELAY);*/

} else {
char *texto8 = "->Incorrect CRC\r\n	";
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <activePower+0x31c>)
 8003376:	647b      	str	r3, [r7, #68]	; 0x44
HAL_UART_Transmit(&huart2, (uint8_t*)texto8, strlen(texto8), HAL_MAX_DELAY);
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec2 	bl	8000104 <strlen>
 8003380:	0003      	movs	r3, r0
 8003382:	b29a      	uxth	r2, r3
 8003384:	2301      	movs	r3, #1
 8003386:	425b      	negs	r3, r3
 8003388:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800338a:	4819      	ldr	r0, [pc, #100]	; (80033f0 <activePower+0x2e0>)
 800338c:	f002 fe3a 	bl	8006004 <HAL_UART_Transmit>
}

			 calculated_crc2 = 0;
 8003390:	2343      	movs	r3, #67	; 0x43
 8003392:	2208      	movs	r2, #8
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
			 memset(rx_data2, 0, sizeof(rx_data1));
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <activePower+0x2d4>)
 800339e:	2205      	movs	r2, #5
 80033a0:	2100      	movs	r1, #0
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 fb24 	bl	80079f0 <memset>
			 /* Se cierra la comunicacion SCS --> up */
			 HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin, GPIO_PIN_SET);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <activePower+0x2c8>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	2101      	movs	r1, #1
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 ff03 	bl	80041ba <HAL_GPIO_WritePin>
			 delay_ms(400);
 80033b4:	23c8      	movs	r3, #200	; 0xc8
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff fd13 	bl	8002de4 <delay_ms>
	  for(int p=0;p<7;p++){
 80033be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c0:	3301      	adds	r3, #1
 80033c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	dc00      	bgt.n	80033cc <activePower+0x2bc>
 80033ca:	e6a7      	b.n	800311c <activePower+0xc>
		  }//--> end for int p
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b021      	add	sp, #132	; 0x84
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	50000400 	.word	0x50000400
 80033dc:	08009e7c 	.word	0x08009e7c
 80033e0:	200001f8 	.word	0x200001f8
 80033e4:	200003c0 	.word	0x200003c0
 80033e8:	200003b4 	.word	0x200003b4
 80033ec:	08009d3c 	.word	0x08009d3c
 80033f0:	2000025c 	.word	0x2000025c
 80033f4:	08009d54 	.word	0x08009d54
 80033f8:	2000033c 	.word	0x2000033c
 80033fc:	08009e3c 	.word	0x08009e3c
 8003400:	20000350 	.word	0x20000350
 8003404:	70a3d70a 	.word	0x70a3d70a
 8003408:	3ff70a3d 	.word	0x3ff70a3d
 800340c:	f51b3bea 	.word	0xf51b3bea
 8003410:	409af19d 	.word	0x409af19d
 8003414:	20000000 	.word	0x20000000
 8003418:	40400000 	.word	0x40400000
 800341c:	3fec0000 	.word	0x3fec0000
 8003420:	08009da0 	.word	0x08009da0
 8003424:	20000364 	.word	0x20000364
 8003428:	08009e68 	.word	0x08009e68
 800342c:	08009db8 	.word	0x08009db8

08003430 <Crc8Calc>:


/* -----------------  CRC calculation function  ----------------------- */
// Función para calcular el CRC
static void Crc8Calc(uint8_t u8Data)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	0002      	movs	r2, r0
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	701a      	strb	r2, [r3, #0]
    uint8_t loc_u8Idx;
    uint8_t loc_u8Temp;
    loc_u8Idx = 0;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
    while (loc_u8Idx < 8)
 8003444:	e024      	b.n	8003490 <Crc8Calc+0x60>
    {
        loc_u8Temp = u8Data ^ CRC_u8Checksum;
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <Crc8Calc+0x74>)
 8003448:	7819      	ldrb	r1, [r3, #0]
 800344a:	200e      	movs	r0, #14
 800344c:	183b      	adds	r3, r7, r0
 800344e:	1dfa      	adds	r2, r7, #7
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	404a      	eors	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]
        CRC_u8Checksum <<= 1;
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <Crc8Calc+0x74>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	18db      	adds	r3, r3, r3
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <Crc8Calc+0x74>)
 8003460:	701a      	strb	r2, [r3, #0]
        if (loc_u8Temp & 0x80)
 8003462:	183b      	adds	r3, r7, r0
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b25b      	sxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	da06      	bge.n	800347a <Crc8Calc+0x4a>
        {
            CRC_u8Checksum ^= CRC_8;
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <Crc8Calc+0x74>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2207      	movs	r2, #7
 8003472:	4053      	eors	r3, r2
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <Crc8Calc+0x74>)
 8003478:	701a      	strb	r2, [r3, #0]
        }
        u8Data <<= 1;
 800347a:	1dfa      	adds	r2, r7, #7
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	18db      	adds	r3, r3, r3
 8003482:	7013      	strb	r3, [r2, #0]
        loc_u8Idx++;
 8003484:	210f      	movs	r1, #15
 8003486:	187b      	adds	r3, r7, r1
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	187b      	adds	r3, r7, r1
 800348c:	3201      	adds	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
    while (loc_u8Idx < 8)
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b07      	cmp	r3, #7
 8003498:	d9d5      	bls.n	8003446 <Crc8Calc+0x16>
    }
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200002f0 	.word	0x200002f0

080034a8 <calculate_crc>:

// Función para calcular el CRC de una trama de datos
uint8_t calculate_crc(uint8_t *data, uint8_t length)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	000a      	movs	r2, r1
 80034b2:	1cfb      	adds	r3, r7, #3
 80034b4:	701a      	strb	r2, [r3, #0]
    CRC_u8Checksum = 0x00;
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <calculate_crc+0x44>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e009      	b.n	80034d6 <calculate_crc+0x2e>
    {
        Crc8Calc(data[i]);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	18d3      	adds	r3, r2, r3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff ffb0 	bl	8003430 <Crc8Calc>
    for (int i = 0; i < length; i++)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	1cfb      	adds	r3, r7, #3
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	dbf0      	blt.n	80034c2 <calculate_crc+0x1a>
    }
    return CRC_u8Checksum;
 80034e0:	4b02      	ldr	r3, [pc, #8]	; (80034ec <calculate_crc+0x44>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b004      	add	sp, #16
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200002f0 	.word	0x200002f0

080034f0 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b095      	sub	sp, #84	; 0x54
 80034f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034f6:	2414      	movs	r4, #20
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	0018      	movs	r0, r3
 80034fc:	233c      	movs	r3, #60	; 0x3c
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f004 fa75 	bl	80079f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	0018      	movs	r0, r3
 800350a:	2310      	movs	r3, #16
 800350c:	001a      	movs	r2, r3
 800350e:	2100      	movs	r1, #0
 8003510:	f004 fa6e 	bl	80079f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	0018      	movs	r0, r3
 800351a:	f000 fe6b 	bl	80041f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800351e:	193b      	adds	r3, r7, r4
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003524:	193b      	adds	r3, r7, r4
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0052      	lsls	r2, r2, #1
 800352a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800352c:	193b      	adds	r3, r7, r4
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	2240      	movs	r2, #64	; 0x40
 8003536:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003538:	193b      	adds	r3, r7, r4
 800353a:	2200      	movs	r2, #0
 800353c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fea3 	bl	800428c <HAL_RCC_OscConfig>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d001      	beq.n	800354e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800354a:	f000 f95d 	bl	8003808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	2200      	movs	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	2100      	movs	r1, #0
 800356a:	0018      	movs	r0, r3
 800356c:	f001 f9ee 	bl	800494c <HAL_RCC_ClockConfig>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d001      	beq.n	8003578 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003574:	f000 f948 	bl	8003808 <Error_Handler>
  }
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b015      	add	sp, #84	; 0x54
 800357e:	bd90      	pop	{r4, r7, pc}

08003580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <MX_SPI1_Init+0x74>)
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <MX_SPI1_Init+0x78>)
 8003588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_SPI1_Init+0x74>)
 800358c:	2282      	movs	r2, #130	; 0x82
 800358e:	0052      	lsls	r2, r2, #1
 8003590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_SPI1_Init+0x74>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <MX_SPI1_Init+0x74>)
 800359a:	22e0      	movs	r2, #224	; 0xe0
 800359c:	00d2      	lsls	r2, r2, #3
 800359e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035a2:	2202      	movs	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035b6:	2208      	movs	r2, #8
 80035b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035bc:	2200      	movs	r2, #0
 80035be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035ce:	2207      	movs	r2, #7
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035da:	2200      	movs	r2, #0
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <MX_SPI1_Init+0x74>)
 80035e0:	0018      	movs	r0, r3
 80035e2:	f001 fd99 	bl	8005118 <HAL_SPI_Init>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d001      	beq.n	80035ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035ea:	f000 f90d 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	200001f8 	.word	0x200001f8
 80035f8:	40013000 	.word	0x40013000

080035fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003602:	4a24      	ldr	r2, [pc, #144]	; (8003694 <MX_USART2_UART_Init+0x98>)
 8003604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003608:	22e1      	movs	r2, #225	; 0xe1
 800360a:	0252      	lsls	r2, r2, #9
 800360c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003616:	2200      	movs	r2, #0
 8003618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <MX_USART2_UART_Init+0x94>)
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003622:	220c      	movs	r2, #12
 8003624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <MX_USART2_UART_Init+0x94>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003634:	2200      	movs	r2, #0
 8003636:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <MX_USART2_UART_Init+0x94>)
 800363a:	2200      	movs	r2, #0
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003640:	2200      	movs	r2, #0
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003646:	0018      	movs	r0, r3
 8003648:	f002 fc86 	bl	8005f58 <HAL_UART_Init>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003650:	f000 f8da 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003656:	2100      	movs	r1, #0
 8003658:	0018      	movs	r0, r3
 800365a:	f003 fb3b 	bl	8006cd4 <HAL_UARTEx_SetTxFifoThreshold>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003662:	f000 f8d1 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <MX_USART2_UART_Init+0x94>)
 8003668:	2100      	movs	r1, #0
 800366a:	0018      	movs	r0, r3
 800366c:	f003 fb72 	bl	8006d54 <HAL_UARTEx_SetRxFifoThreshold>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003674:	f000 f8c8 	bl	8003808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <MX_USART2_UART_Init+0x94>)
 800367a:	0018      	movs	r0, r3
 800367c:	f003 faf0 	bl	8006c60 <HAL_UARTEx_DisableFifoMode>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003684:	f000 f8c0 	bl	8003808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	2000025c 	.word	0x2000025c
 8003694:	40004400 	.word	0x40004400

08003698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b08b      	sub	sp, #44	; 0x2c
 800369c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369e:	2414      	movs	r4, #20
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	0018      	movs	r0, r3
 80036a4:	2314      	movs	r3, #20
 80036a6:	001a      	movs	r2, r3
 80036a8:	2100      	movs	r1, #0
 80036aa:	f004 f9a1 	bl	80079f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <MX_GPIO_Init+0x164>)
 80036b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b2:	4b52      	ldr	r3, [pc, #328]	; (80037fc <MX_GPIO_Init+0x164>)
 80036b4:	2104      	movs	r1, #4
 80036b6:	430a      	orrs	r2, r1
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
 80036ba:	4b50      	ldr	r3, [pc, #320]	; (80037fc <MX_GPIO_Init+0x164>)
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	2204      	movs	r2, #4
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036c6:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <MX_GPIO_Init+0x164>)
 80036c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ca:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <MX_GPIO_Init+0x164>)
 80036cc:	2120      	movs	r1, #32
 80036ce:	430a      	orrs	r2, r1
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <MX_GPIO_Init+0x164>)
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	2220      	movs	r2, #32
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <MX_GPIO_Init+0x164>)
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	4b46      	ldr	r3, [pc, #280]	; (80037fc <MX_GPIO_Init+0x164>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34
 80036ea:	4b44      	ldr	r3, [pc, #272]	; (80037fc <MX_GPIO_Init+0x164>)
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <MX_GPIO_Init+0x164>)
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <MX_GPIO_Init+0x164>)
 80036fc:	2102      	movs	r1, #2
 80036fe:	430a      	orrs	r2, r1
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <MX_GPIO_Init+0x164>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	2202      	movs	r2, #2
 8003708:	4013      	ands	r3, r2
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|OUT3_3V_Pin, GPIO_PIN_RESET);
 800370e:	2388      	movs	r3, #136	; 0x88
 8003710:	0099      	lsls	r1, r3, #2
 8003712:	23a0      	movs	r3, #160	; 0xa0
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	2200      	movs	r2, #0
 8003718:	0018      	movs	r0, r3
 800371a:	f000 fd4e 	bl	80041ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <MX_GPIO_Init+0x168>)
 8003720:	2201      	movs	r2, #1
 8003722:	2101      	movs	r1, #1
 8003724:	0018      	movs	r0, r3
 8003726:	f000 fd48 	bl	80041ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYN_GPIO_Port, SYN_Pin, GPIO_PIN_SET);
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <MX_GPIO_Init+0x16c>)
 800372c:	2201      	movs	r2, #1
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fd42 	bl	80041ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	0192      	lsls	r2, r2, #6
 800373c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373e:	193b      	adds	r3, r7, r4
 8003740:	2200      	movs	r2, #0
 8003742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	193b      	adds	r3, r7, r4
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800374a:	193b      	adds	r3, r7, r4
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <MX_GPIO_Init+0x16c>)
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f000 fba9 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2220      	movs	r2, #32
 800375a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	2201      	movs	r2, #1
 8003760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	2202      	movs	r2, #2
 800376c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800376e:	193a      	adds	r2, r7, r4
 8003770:	23a0      	movs	r3, #160	; 0xa0
 8003772:	05db      	lsls	r3, r3, #23
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f000 fb96 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800377c:	193b      	adds	r3, r7, r4
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003782:	193b      	adds	r3, r7, r4
 8003784:	2201      	movs	r2, #1
 8003786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003794:	193b      	adds	r3, r7, r4
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <MX_GPIO_Init+0x168>)
 8003798:	0019      	movs	r1, r3
 800379a:	0010      	movs	r0, r2
 800379c:	f000 fb84 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT3_3V_Pin */
  GPIO_InitStruct.Pin = OUT3_3V_Pin;
 80037a0:	0021      	movs	r1, r4
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037aa:	000c      	movs	r4, r1
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	2201      	movs	r2, #1
 80037b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	2201      	movs	r2, #1
 80037b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUT3_3V_GPIO_Port, &GPIO_InitStruct);
 80037be:	193a      	adds	r2, r7, r4
 80037c0:	23a0      	movs	r3, #160	; 0xa0
 80037c2:	05db      	lsls	r3, r3, #23
 80037c4:	0011      	movs	r1, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 fb6e 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYN_Pin */
  GPIO_InitStruct.Pin = SYN_Pin;
 80037cc:	0021      	movs	r1, r4
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	2201      	movs	r2, #1
 80037d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SYN_GPIO_Port, &GPIO_InitStruct);
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	4a06      	ldr	r2, [pc, #24]	; (8003804 <MX_GPIO_Init+0x16c>)
 80037ea:	0019      	movs	r1, r3
 80037ec:	0010      	movs	r0, r2
 80037ee:	f000 fb5b 	bl	8003ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b00b      	add	sp, #44	; 0x2c
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000
 8003800:	50000400 	.word	0x50000400
 8003804:	50000800 	.word	0x50000800

08003808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800380c:	b672      	cpsid	i
}
 800380e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003810:	e7fe      	b.n	8003810 <Error_Handler+0x8>
	...

08003814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_MspInit+0x4c>)
 800381c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_MspInit+0x4c>)
 8003820:	2101      	movs	r1, #1
 8003822:	430a      	orrs	r2, r1
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_MspInit+0x4c>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_MspInit+0x4c>)
 8003834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_MspInit+0x4c>)
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	0549      	lsls	r1, r1, #21
 800383c:	430a      	orrs	r2, r1
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_MspInit+0x4c>)
 8003842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	055b      	lsls	r3, r3, #21
 8003848:	4013      	ands	r3, r2
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800384e:	23c0      	movs	r3, #192	; 0xc0
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fa5e 	bl	8003d14 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b08b      	sub	sp, #44	; 0x2c
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	2414      	movs	r4, #20
 800386e:	193b      	adds	r3, r7, r4
 8003870:	0018      	movs	r0, r3
 8003872:	2314      	movs	r3, #20
 8003874:	001a      	movs	r2, r3
 8003876:	2100      	movs	r1, #0
 8003878:	f004 f8ba 	bl	80079f0 <memset>
  if(hspi->Instance==SPI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_SPI_MspInit+0x8c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d130      	bne.n	80038e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003886:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 8003888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0149      	lsls	r1, r1, #5
 8003890:	430a      	orrs	r2, r1
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 8003896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	015b      	lsls	r3, r3, #5
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	430a      	orrs	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_SPI_MspInit+0x90>)
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	2201      	movs	r2, #1
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80038ba:	0021      	movs	r1, r4
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	22c2      	movs	r2, #194	; 0xc2
 80038c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2202      	movs	r2, #2
 80038c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	2200      	movs	r2, #0
 80038d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	187a      	adds	r2, r7, r1
 80038dc:	23a0      	movs	r3, #160	; 0xa0
 80038de:	05db      	lsls	r3, r3, #23
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fae0 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b00b      	add	sp, #44	; 0x2c
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	40013000 	.word	0x40013000
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b09d      	sub	sp, #116	; 0x74
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	235c      	movs	r3, #92	; 0x5c
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	0018      	movs	r0, r3
 8003906:	2314      	movs	r3, #20
 8003908:	001a      	movs	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	f004 f870 	bl	80079f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003910:	2410      	movs	r4, #16
 8003912:	193b      	adds	r3, r7, r4
 8003914:	0018      	movs	r0, r3
 8003916:	234c      	movs	r3, #76	; 0x4c
 8003918:	001a      	movs	r2, r3
 800391a:	2100      	movs	r1, #0
 800391c:	f004 f868 	bl	80079f0 <memset>
  if(huart->Instance==USART2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <HAL_UART_MspInit+0xb8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d13e      	bne.n	80039a8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800392a:	193b      	adds	r3, r7, r4
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003930:	193b      	adds	r3, r7, r4
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003936:	193b      	adds	r3, r7, r4
 8003938:	0018      	movs	r0, r3
 800393a:	f001 f9b1 	bl	8004ca0 <HAL_RCCEx_PeriphCLKConfig>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d001      	beq.n	8003946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003942:	f7ff ff61 	bl	8003808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 8003948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	0289      	lsls	r1, r1, #10
 8003950:	430a      	orrs	r2, r1
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 8003956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	029b      	lsls	r3, r3, #10
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 8003964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 8003968:	2101      	movs	r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	635a      	str	r2, [r3, #52]	; 0x34
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_UART_MspInit+0xbc>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800397a:	215c      	movs	r1, #92	; 0x5c
 800397c:	187b      	adds	r3, r7, r1
 800397e:	220c      	movs	r2, #12
 8003980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2202      	movs	r2, #2
 8003986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2200      	movs	r2, #0
 8003992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2201      	movs	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399a:	187a      	adds	r2, r7, r1
 800399c:	23a0      	movs	r3, #160	; 0xa0
 800399e:	05db      	lsls	r3, r3, #23
 80039a0:	0011      	movs	r1, r2
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 fa80 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b01d      	add	sp, #116	; 0x74
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	40004400 	.word	0x40004400
 80039b4:	40021000 	.word	0x40021000

080039b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039bc:	e7fe      	b.n	80039bc <NMI_Handler+0x4>

080039be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c2:	e7fe      	b.n	80039c2 <HardFault_Handler+0x4>

080039c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039dc:	f000 f95a 	bl	8003c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	af00      	add	r7, sp, #0
  return 1;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_kill>:

int _kill(int pid, int sig)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039fc:	f004 f852 	bl	8007aa4 <__errno>
 8003a00:	0003      	movs	r3, r0
 8003a02:	2216      	movs	r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
  return -1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	425b      	negs	r3, r3
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b002      	add	sp, #8
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_exit>:

void _exit (int status)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	425a      	negs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0011      	movs	r1, r2
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7ff ffe5 	bl	80039f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a28:	e7fe      	b.n	8003a28 <_exit+0x16>

08003a2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e00a      	b.n	8003a52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a3c:	e000      	b.n	8003a40 <_read+0x16>
 8003a3e:	bf00      	nop
 8003a40:	0001      	movs	r1, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	60ba      	str	r2, [r7, #8]
 8003a48:	b2ca      	uxtb	r2, r1
 8003a4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbf0      	blt.n	8003a3c <_read+0x12>
  }

  return len;
 8003a5a:	687b      	ldr	r3, [r7, #4]
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b006      	add	sp, #24
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e009      	b.n	8003a8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	60ba      	str	r2, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	e000      	b.n	8003a84 <_write+0x20>
 8003a82:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	3301      	adds	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	dbf1      	blt.n	8003a76 <_write+0x12>
  }
  return len;
 8003a92:	687b      	ldr	r3, [r7, #4]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b006      	add	sp, #24
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_close>:

int _close(int file)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	425b      	negs	r3, r3
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0192      	lsls	r2, r2, #6
 8003ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_isatty>:

int _isatty(int file)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <_sbrk+0x5c>)
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <_sbrk+0x60>)
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <_sbrk+0x64>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <_sbrk+0x64>)
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <_sbrk+0x68>)
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <_sbrk+0x64>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d207      	bcs.n	8003b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b24:	f003 ffbe 	bl	8007aa4 <__errno>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	425b      	negs	r3, r3
 8003b32:	e009      	b.n	8003b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <_sbrk+0x64>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	18d2      	adds	r2, r2, r3
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <_sbrk+0x64>)
 8003b44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20024000 	.word	0x20024000
 8003b54:	00000400 	.word	0x00000400
 8003b58:	200003d8 	.word	0x200003d8
 8003b5c:	20000530 	.word	0x20000530

08003b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b6c:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b70:	f7ff fff6 	bl	8003b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b74:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b76:	490d      	ldr	r1, [pc, #52]	; (8003bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <LoopForever+0xe>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b7c:	e002      	b.n	8003b84 <LoopCopyDataInit>

08003b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b82:	3304      	adds	r3, #4

08003b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b88:	d3f9      	bcc.n	8003b7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b8c:	4c0a      	ldr	r4, [pc, #40]	; (8003bb8 <LoopForever+0x16>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b90:	e001      	b.n	8003b96 <LoopFillZerobss>

08003b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b94:	3204      	adds	r2, #4

08003b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b98:	d3fb      	bcc.n	8003b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b9a:	f003 ff89 	bl	8007ab0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b9e:	f7fe fe59 	bl	8002854 <main>

08003ba2 <LoopForever>:

LoopForever:
  b LoopForever
 8003ba2:	e7fe      	b.n	8003ba2 <LoopForever>
  ldr   r0, =_estack
 8003ba4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003bb0:	0800a2cc 	.word	0x0800a2cc
  ldr r2, =_sbss
 8003bb4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003bb8:	2000052c 	.word	0x2000052c

08003bbc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bbc:	e7fe      	b.n	8003bbc <ADC1_COMP_IRQHandler>
	...

08003bc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_Init+0x3c>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_Init+0x3c>)
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	0049      	lsls	r1, r1, #1
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f000 f810 	bl	8003c00 <HAL_InitTick>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d003      	beq.n	8003bec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003be4:	1dfb      	adds	r3, r7, #7
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e001      	b.n	8003bf0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003bec:	f7ff fe12 	bl	8003814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bf0:	1dfb      	adds	r3, r7, #7
 8003bf2:	781b      	ldrb	r3, [r3, #0]
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40022000 	.word	0x40022000

08003c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c08:	230f      	movs	r3, #15
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_InitTick+0x88>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02b      	beq.n	8003c70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_InitTick+0x8c>)
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_InitTick+0x88>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	0019      	movs	r1, r3
 8003c22:	23fa      	movs	r3, #250	; 0xfa
 8003c24:	0098      	lsls	r0, r3, #2
 8003c26:	f7fc fa89 	bl	800013c <__udivsi3>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	0020      	movs	r0, r4
 8003c30:	f7fc fa84 	bl	800013c <__udivsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 f929 	bl	8003e8e <HAL_SYSTICK_Config>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d112      	bne.n	8003c66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d80a      	bhi.n	8003c5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f908 	bl	8003e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_InitTick+0x90>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e00d      	b.n	8003c78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e008      	b.n	8003c78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c66:	230f      	movs	r3, #15
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e003      	b.n	8003c78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c70:	230f      	movs	r3, #15
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b005      	add	sp, #20
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	20000010 	.word	0x20000010
 8003c8c:	20000008 	.word	0x20000008
 8003c90:	2000000c 	.word	0x2000000c

08003c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_IncTick+0x1c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_IncTick+0x20>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	18d2      	adds	r2, r2, r3
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_IncTick+0x20>)
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	20000010 	.word	0x20000010
 8003cb4:	200003dc 	.word	0x200003dc

08003cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  return uwTick;
 8003cbc:	4b02      	ldr	r3, [pc, #8]	; (8003cc8 <HAL_GetTick+0x10>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	200003dc 	.word	0x200003dc

08003ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d005      	beq.n	8003cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_Delay+0x44>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	001a      	movs	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	f7ff ffe0 	bl	8003cb8 <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d8f7      	bhi.n	8003cf4 <HAL_Delay+0x28>
  {
  }
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	20000010 	.word	0x20000010

08003d14 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	fffff9ff 	.word	0xfffff9ff

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	0002      	movs	r2, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	1dfb      	adds	r3, r7, #7
 8003d4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d4e:	1dfb      	adds	r3, r7, #7
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b7f      	cmp	r3, #127	; 0x7f
 8003d54:	d828      	bhi.n	8003da8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d56:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <__NVIC_SetPriority+0xd4>)
 8003d58:	1dfb      	adds	r3, r7, #7
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	33c0      	adds	r3, #192	; 0xc0
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	589b      	ldr	r3, [r3, r2]
 8003d66:	1dfa      	adds	r2, r7, #7
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	400a      	ands	r2, r1
 8003d70:	00d2      	lsls	r2, r2, #3
 8003d72:	21ff      	movs	r1, #255	; 0xff
 8003d74:	4091      	lsls	r1, r2
 8003d76:	000a      	movs	r2, r1
 8003d78:	43d2      	mvns	r2, r2
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	401a      	ands	r2, r3
 8003d86:	1dfb      	adds	r3, r7, #7
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	4003      	ands	r3, r0
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d94:	481f      	ldr	r0, [pc, #124]	; (8003e14 <__NVIC_SetPriority+0xd4>)
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	33c0      	adds	r3, #192	; 0xc0
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003da6:	e031      	b.n	8003e0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <__NVIC_SetPriority+0xd8>)
 8003daa:	1dfb      	adds	r3, r7, #7
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	0019      	movs	r1, r3
 8003db0:	230f      	movs	r3, #15
 8003db2:	400b      	ands	r3, r1
 8003db4:	3b08      	subs	r3, #8
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3306      	adds	r3, #6
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	1dfa      	adds	r2, r7, #7
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	2203      	movs	r2, #3
 8003dca:	400a      	ands	r2, r1
 8003dcc:	00d2      	lsls	r2, r2, #3
 8003dce:	21ff      	movs	r1, #255	; 0xff
 8003dd0:	4091      	lsls	r1, r2
 8003dd2:	000a      	movs	r2, r1
 8003dd4:	43d2      	mvns	r2, r2
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	401a      	ands	r2, r3
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	0018      	movs	r0, r3
 8003de8:	2303      	movs	r3, #3
 8003dea:	4003      	ands	r3, r0
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df0:	4809      	ldr	r0, [pc, #36]	; (8003e18 <__NVIC_SetPriority+0xd8>)
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	001c      	movs	r4, r3
 8003df8:	230f      	movs	r3, #15
 8003dfa:	4023      	ands	r3, r4
 8003dfc:	3b08      	subs	r3, #8
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	430a      	orrs	r2, r1
 8003e02:	3306      	adds	r3, #6
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	18c3      	adds	r3, r0, r3
 8003e08:	3304      	adds	r3, #4
 8003e0a:	601a      	str	r2, [r3, #0]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b003      	add	sp, #12
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	e000e100 	.word	0xe000e100
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	045b      	lsls	r3, r3, #17
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d301      	bcc.n	8003e34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e30:	2301      	movs	r3, #1
 8003e32:	e010      	b.n	8003e56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <SysTick_Config+0x44>)
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	425b      	negs	r3, r3
 8003e40:	2103      	movs	r1, #3
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff ff7c 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <SysTick_Config+0x44>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <SysTick_Config+0x44>)
 8003e50:	2207      	movs	r2, #7
 8003e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	e000e010 	.word	0xe000e010

08003e64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	210f      	movs	r1, #15
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	1c02      	adds	r2, r0, #0
 8003e74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff ff5d 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff ffbf 	bl	8003e1c <SysTick_Config>
 8003e9e:	0003      	movs	r3, r0
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb6:	e14d      	b.n	8004154 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4091      	lsls	r1, r2
 8003ec2:	000a      	movs	r2, r1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <HAL_GPIO_Init+0x28>
 8003ece:	e13e      	b.n	800414e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x40>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	0013      	movs	r3, r2
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	43da      	mvns	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	2201      	movs	r2, #1
 8003f36:	401a      	ands	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	43da      	mvns	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	58d3      	ldr	r3, [r2, r3]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2107      	movs	r1, #7
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	0092      	lsls	r2, r2, #2
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	43da      	mvns	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	23c0      	movs	r3, #192	; 0xc0
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	4013      	ands	r3, r2
 8004018:	d100      	bne.n	800401c <HAL_GPIO_Init+0x174>
 800401a:	e098      	b.n	800414e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800401c:	4a53      	ldr	r2, [pc, #332]	; (800416c <HAL_GPIO_Init+0x2c4>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3318      	adds	r3, #24
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	589b      	ldr	r3, [r3, r2]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2203      	movs	r2, #3
 800402e:	4013      	ands	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	220f      	movs	r2, #15
 8004034:	409a      	lsls	r2, r3
 8004036:	0013      	movs	r3, r2
 8004038:	43da      	mvns	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	23a0      	movs	r3, #160	; 0xa0
 8004044:	05db      	lsls	r3, r3, #23
 8004046:	429a      	cmp	r2, r3
 8004048:	d019      	beq.n	800407e <HAL_GPIO_Init+0x1d6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a48      	ldr	r2, [pc, #288]	; (8004170 <HAL_GPIO_Init+0x2c8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_GPIO_Init+0x1d2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a47      	ldr	r2, [pc, #284]	; (8004174 <HAL_GPIO_Init+0x2cc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00d      	beq.n	8004076 <HAL_GPIO_Init+0x1ce>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a46      	ldr	r2, [pc, #280]	; (8004178 <HAL_GPIO_Init+0x2d0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <HAL_GPIO_Init+0x1ca>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a45      	ldr	r2, [pc, #276]	; (800417c <HAL_GPIO_Init+0x2d4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_GPIO_Init+0x1c6>
 800406a:	2304      	movs	r3, #4
 800406c:	e008      	b.n	8004080 <HAL_GPIO_Init+0x1d8>
 800406e:	2305      	movs	r3, #5
 8004070:	e006      	b.n	8004080 <HAL_GPIO_Init+0x1d8>
 8004072:	2303      	movs	r3, #3
 8004074:	e004      	b.n	8004080 <HAL_GPIO_Init+0x1d8>
 8004076:	2302      	movs	r3, #2
 8004078:	e002      	b.n	8004080 <HAL_GPIO_Init+0x1d8>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_GPIO_Init+0x1d8>
 800407e:	2300      	movs	r3, #0
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	2103      	movs	r1, #3
 8004084:	400a      	ands	r2, r1
 8004086:	00d2      	lsls	r2, r2, #3
 8004088:	4093      	lsls	r3, r2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004090:	4936      	ldr	r1, [pc, #216]	; (800416c <HAL_GPIO_Init+0x2c4>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3318      	adds	r3, #24
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_GPIO_Init+0x2c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43da      	mvns	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	035b      	lsls	r3, r3, #13
 80040b6:	4013      	ands	r3, r2
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_GPIO_Init+0x2c4>)
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_GPIO_Init+0x2c4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	039b      	lsls	r3, r3, #14
 80040e0:	4013      	ands	r3, r2
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ec:	4b1f      	ldr	r3, [pc, #124]	; (800416c <HAL_GPIO_Init+0x2c4>)
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_GPIO_Init+0x2c4>)
 80040f4:	2384      	movs	r3, #132	; 0x84
 80040f6:	58d3      	ldr	r3, [r2, r3]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	4013      	ands	r3, r2
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004118:	4914      	ldr	r1, [pc, #80]	; (800416c <HAL_GPIO_Init+0x2c4>)
 800411a:	2284      	movs	r2, #132	; 0x84
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <HAL_GPIO_Init+0x2c4>)
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	58d3      	ldr	r3, [r2, r3]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43da      	mvns	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	025b      	lsls	r3, r3, #9
 800413a:	4013      	ands	r3, r2
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004146:	4909      	ldr	r1, [pc, #36]	; (800416c <HAL_GPIO_Init+0x2c4>)
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3301      	adds	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	40da      	lsrs	r2, r3
 800415c:	1e13      	subs	r3, r2, #0
 800415e:	d000      	beq.n	8004162 <HAL_GPIO_Init+0x2ba>
 8004160:	e6aa      	b.n	8003eb8 <HAL_GPIO_Init+0x10>
  }
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b006      	add	sp, #24
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021800 	.word	0x40021800
 8004170:	50000400 	.word	0x50000400
 8004174:	50000800 	.word	0x50000800
 8004178:	50000c00 	.word	0x50000c00
 800417c:	50001000 	.word	0x50001000

08004180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	000a      	movs	r2, r1
 800418a:	1cbb      	adds	r3, r7, #2
 800418c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	1cba      	adds	r2, r7, #2
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	4013      	ands	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800419a:	230f      	movs	r3, #15
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	e003      	b.n	80041ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a4:	230f      	movs	r3, #15
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80041ac:	230f      	movs	r3, #15
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	781b      	ldrb	r3, [r3, #0]
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	0008      	movs	r0, r1
 80041c4:	0011      	movs	r1, r2
 80041c6:	1cbb      	adds	r3, r7, #2
 80041c8:	1c02      	adds	r2, r0, #0
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	1c7b      	adds	r3, r7, #1
 80041ce:	1c0a      	adds	r2, r1, #0
 80041d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d2:	1c7b      	adds	r3, r7, #1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041da:	1cbb      	adds	r3, r7, #2
 80041dc:	881a      	ldrh	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041e2:	e003      	b.n	80041ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041e4:	1cbb      	adds	r3, r7, #2
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d11f      	bne.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	0013      	movs	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	189b      	adds	r3, r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4912      	ldr	r1, [pc, #72]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004226:	0018      	movs	r0, r3
 8004228:	f7fb ff88 	bl	800013c <__udivsi3>
 800422c:	0003      	movs	r3, r0
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004232:	e008      	b.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b01      	subs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e001      	b.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e009      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	401a      	ands	r2, r3
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	429a      	cmp	r2, r3
 8004256:	d0ed      	beq.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40007000 	.word	0x40007000
 8004268:	fffff9ff 	.word	0xfffff9ff
 800426c:	20000008 	.word	0x20000008
 8004270:	000f4240 	.word	0x000f4240

08004274 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <LL_RCC_GetAPB1Prescaler+0x14>)
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	23e0      	movs	r3, #224	; 0xe0
 800427e:	01db      	lsls	r3, r3, #7
 8004280:	4013      	ands	r3, r2
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000

0800428c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f000 fb50 	bl	8004940 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2201      	movs	r2, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	d100      	bne.n	80042ac <HAL_RCC_OscConfig+0x20>
 80042aa:	e07c      	b.n	80043a6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ac:	4bc3      	ldr	r3, [pc, #780]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2238      	movs	r2, #56	; 0x38
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b6:	4bc1      	ldr	r3, [pc, #772]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2203      	movs	r2, #3
 80042bc:	4013      	ands	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_OscConfig+0x40>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d002      	beq.n	80042d2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d10b      	bne.n	80042ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d2:	4bba      	ldr	r3, [pc, #744]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	4013      	ands	r3, r2
 80042dc:	d062      	beq.n	80043a4 <HAL_RCC_OscConfig+0x118>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d15e      	bne.n	80043a4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e32a      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	025b      	lsls	r3, r3, #9
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_OscConfig+0x7a>
 80042f6:	4bb1      	ldr	r3, [pc, #708]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4bb0      	ldr	r3, [pc, #704]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0249      	lsls	r1, r1, #9
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e020      	b.n	8004348 <HAL_RCC_OscConfig+0xbc>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	23a0      	movs	r3, #160	; 0xa0
 800430c:	02db      	lsls	r3, r3, #11
 800430e:	429a      	cmp	r2, r3
 8004310:	d10e      	bne.n	8004330 <HAL_RCC_OscConfig+0xa4>
 8004312:	4baa      	ldr	r3, [pc, #680]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4ba9      	ldr	r3, [pc, #676]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	02c9      	lsls	r1, r1, #11
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	4ba6      	ldr	r3, [pc, #664]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4ba5      	ldr	r3, [pc, #660]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	0249      	lsls	r1, r1, #9
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xbc>
 8004330:	4ba2      	ldr	r3, [pc, #648]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004336:	49a2      	ldr	r1, [pc, #648]	; (80045c0 <HAL_RCC_OscConfig+0x334>)
 8004338:	400a      	ands	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	4b9f      	ldr	r3, [pc, #636]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b9e      	ldr	r3, [pc, #632]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004342:	49a0      	ldr	r1, [pc, #640]	; (80045c4 <HAL_RCC_OscConfig+0x338>)
 8004344:	400a      	ands	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d014      	beq.n	800437a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7ff fcb2 	bl	8003cb8 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435a:	f7ff fcad 	bl	8003cb8 <HAL_GetTick>
 800435e:	0002      	movs	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	; 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e2e9      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436c:	4b93      	ldr	r3, [pc, #588]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	4013      	ands	r3, r2
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0xce>
 8004378:	e015      	b.n	80043a6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7ff fc9d 	bl	8003cb8 <HAL_GetTick>
 800437e:	0003      	movs	r3, r0
 8004380:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7ff fc98 	bl	8003cb8 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e2d4      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004396:	4b89      	ldr	r3, [pc, #548]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	4013      	ands	r3, r2
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0xf8>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2202      	movs	r2, #2
 80043ac:	4013      	ands	r3, r2
 80043ae:	d100      	bne.n	80043b2 <HAL_RCC_OscConfig+0x126>
 80043b0:	e099      	b.n	80044e6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b2:	4b82      	ldr	r3, [pc, #520]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2238      	movs	r2, #56	; 0x38
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043bc:	4b7f      	ldr	r3, [pc, #508]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2203      	movs	r2, #3
 80043c2:	4013      	ands	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_OscConfig+0x146>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d135      	bne.n	8004444 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d8:	4b78      	ldr	r3, [pc, #480]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4013      	ands	r3, r2
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x164>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e2a7      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b72      	ldr	r3, [pc, #456]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a74      	ldr	r2, [pc, #464]	; (80045c8 <HAL_RCC_OscConfig+0x33c>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	0019      	movs	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d112      	bne.n	8004432 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800440c:	4b6b      	ldr	r3, [pc, #428]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x340>)
 8004412:	4013      	ands	r3, r2
 8004414:	0019      	movs	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	4b68      	ldr	r3, [pc, #416]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004420:	4b66      	ldr	r3, [pc, #408]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0adb      	lsrs	r3, r3, #11
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_RCC_OscConfig+0x344>)
 800442c:	40da      	lsrs	r2, r3
 800442e:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_RCC_OscConfig+0x348>)
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004432:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <HAL_RCC_OscConfig+0x34c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff fbe2 	bl	8003c00 <HAL_InitTick>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d051      	beq.n	80044e4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e27d      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d030      	beq.n	80044ae <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800444c:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x340>)
 8004452:	4013      	ands	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004460:	4b56      	ldr	r3, [pc, #344]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b55      	ldr	r3, [pc, #340]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004466:	2180      	movs	r1, #128	; 0x80
 8004468:	0049      	lsls	r1, r1, #1
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7ff fc23 	bl	8003cb8 <HAL_GetTick>
 8004472:	0003      	movs	r3, r0
 8004474:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004478:	f7ff fc1e 	bl	8003cb8 <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e25a      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4013      	ands	r3, r2
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b49      	ldr	r3, [pc, #292]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4a4b      	ldr	r2, [pc, #300]	; (80045c8 <HAL_RCC_OscConfig+0x33c>)
 800449c:	4013      	ands	r3, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	021a      	lsls	r2, r3, #8
 80044a6:	4b45      	ldr	r3, [pc, #276]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e01b      	b.n	80044e6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b42      	ldr	r3, [pc, #264]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044b4:	4949      	ldr	r1, [pc, #292]	; (80045dc <HAL_RCC_OscConfig+0x350>)
 80044b6:	400a      	ands	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7ff fbfd 	bl	8003cb8 <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c4:	f7ff fbf8 	bl	8003cb8 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e234      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4013      	ands	r3, r2
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x238>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2208      	movs	r2, #8
 80044ec:	4013      	ands	r3, r2
 80044ee:	d047      	beq.n	8004580 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044f0:	4b32      	ldr	r3, [pc, #200]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2238      	movs	r2, #56	; 0x38
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b18      	cmp	r3, #24
 80044fa:	d10a      	bne.n	8004512 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	2202      	movs	r2, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d03c      	beq.n	8004580 <HAL_RCC_OscConfig+0x2f4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d138      	bne.n	8004580 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e216      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 800451c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800451e:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7ff fbc7 	bl	8003cb8 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7ff fbc2 	bl	8003cb8 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1fe      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	2202      	movs	r2, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d0f1      	beq.n	8004530 <HAL_RCC_OscConfig+0x2a4>
 800454c:	e018      	b.n	8004580 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004550:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004554:	2101      	movs	r1, #1
 8004556:	438a      	bics	r2, r1
 8004558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7ff fbad 	bl	8003cb8 <HAL_GetTick>
 800455e:	0003      	movs	r3, r0
 8004560:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7ff fba8 	bl	8003cb8 <HAL_GetTick>
 8004568:	0002      	movs	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1e4      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	2202      	movs	r2, #2
 800457c:	4013      	ands	r3, r2
 800457e:	d1f1      	bne.n	8004564 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2204      	movs	r2, #4
 8004586:	4013      	ands	r3, r2
 8004588:	d100      	bne.n	800458c <HAL_RCC_OscConfig+0x300>
 800458a:	e0c7      	b.n	800471c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458c:	231f      	movs	r3, #31
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2238      	movs	r2, #56	; 0x38
 800459a:	4013      	ands	r3, r2
 800459c:	2b20      	cmp	r3, #32
 800459e:	d11f      	bne.n	80045e0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_OscConfig+0x330>)
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	d100      	bne.n	80045ac <HAL_RCC_OscConfig+0x320>
 80045aa:	e0b7      	b.n	800471c <HAL_RCC_OscConfig+0x490>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d000      	beq.n	80045b6 <HAL_RCC_OscConfig+0x32a>
 80045b4:	e0b2      	b.n	800471c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1c2      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	40021000 	.word	0x40021000
 80045c0:	fffeffff 	.word	0xfffeffff
 80045c4:	fffbffff 	.word	0xfffbffff
 80045c8:	ffff80ff 	.word	0xffff80ff
 80045cc:	ffffc7ff 	.word	0xffffc7ff
 80045d0:	00f42400 	.word	0x00f42400
 80045d4:	20000008 	.word	0x20000008
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e0:	4bb5      	ldr	r3, [pc, #724]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80045e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	055b      	lsls	r3, r3, #21
 80045e8:	4013      	ands	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_OscConfig+0x364>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x366>
 80045f0:	2300      	movs	r3, #0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	4bb0      	ldr	r3, [pc, #704]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80045f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fa:	4baf      	ldr	r3, [pc, #700]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	0549      	lsls	r1, r1, #21
 8004600:	430a      	orrs	r2, r1
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
 8004604:	4bac      	ldr	r3, [pc, #688]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	055b      	lsls	r3, r3, #21
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004612:	231f      	movs	r3, #31
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	4ba8      	ldr	r3, [pc, #672]	; (80048bc <HAL_RCC_OscConfig+0x630>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d11a      	bne.n	800465c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004626:	4ba5      	ldr	r3, [pc, #660]	; (80048bc <HAL_RCC_OscConfig+0x630>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4ba4      	ldr	r3, [pc, #656]	; (80048bc <HAL_RCC_OscConfig+0x630>)
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	0049      	lsls	r1, r1, #1
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004634:	f7ff fb40 	bl	8003cb8 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7ff fb3b 	bl	8003cb8 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e177      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	4b9a      	ldr	r3, [pc, #616]	; (80048bc <HAL_RCC_OscConfig+0x630>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x3e6>
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004668:	4b93      	ldr	r3, [pc, #588]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800466a:	2101      	movs	r1, #1
 800466c:	430a      	orrs	r2, r1
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004670:	e01c      	b.n	80046ac <HAL_RCC_OscConfig+0x420>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b05      	cmp	r3, #5
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x408>
 800467a:	4b8f      	ldr	r3, [pc, #572]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800467c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800467e:	4b8e      	ldr	r3, [pc, #568]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004680:	2104      	movs	r1, #4
 8004682:	430a      	orrs	r2, r1
 8004684:	65da      	str	r2, [r3, #92]	; 0x5c
 8004686:	4b8c      	ldr	r3, [pc, #560]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800468a:	4b8b      	ldr	r3, [pc, #556]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800468c:	2101      	movs	r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0x420>
 8004694:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004698:	4b87      	ldr	r3, [pc, #540]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800469a:	2101      	movs	r1, #1
 800469c:	438a      	bics	r2, r1
 800469e:	65da      	str	r2, [r3, #92]	; 0x5c
 80046a0:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80046a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046a4:	4b84      	ldr	r3, [pc, #528]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80046a6:	2104      	movs	r1, #4
 80046a8:	438a      	bics	r2, r1
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d014      	beq.n	80046de <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7ff fb00 	bl	8003cb8 <HAL_GetTick>
 80046b8:	0003      	movs	r3, r0
 80046ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046bc:	e009      	b.n	80046d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7ff fafb 	bl	8003cb8 <HAL_GetTick>
 80046c2:	0002      	movs	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	4a7d      	ldr	r2, [pc, #500]	; (80048c0 <HAL_RCC_OscConfig+0x634>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e136      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d2:	4b79      	ldr	r3, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x432>
 80046dc:	e013      	b.n	8004706 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7ff faeb 	bl	8003cb8 <HAL_GetTick>
 80046e2:	0003      	movs	r3, r0
 80046e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046e6:	e009      	b.n	80046fc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7ff fae6 	bl	8003cb8 <HAL_GetTick>
 80046ec:	0002      	movs	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a73      	ldr	r2, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x634>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e121      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	2202      	movs	r2, #2
 8004702:	4013      	ands	r3, r2
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004706:	231f      	movs	r3, #31
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004716:	496b      	ldr	r1, [pc, #428]	; (80048c4 <HAL_RCC_OscConfig+0x638>)
 8004718:	400a      	ands	r2, r1
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2220      	movs	r2, #32
 8004722:	4013      	ands	r3, r2
 8004724:	d039      	beq.n	800479a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800472e:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	03c9      	lsls	r1, r1, #15
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7ff fabc 	bl	8003cb8 <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004746:	f7ff fab7 	bl	8003cb8 <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0f3      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004758:	4b57      	ldr	r3, [pc, #348]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	4013      	ands	r3, r2
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x4ba>
 8004764:	e019      	b.n	800479a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004766:	4b54      	ldr	r3, [pc, #336]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800476c:	4956      	ldr	r1, [pc, #344]	; (80048c8 <HAL_RCC_OscConfig+0x63c>)
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7ff faa1 	bl	8003cb8 <HAL_GetTick>
 8004776:	0003      	movs	r3, r0
 8004778:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477c:	f7ff fa9c 	bl	8003cb8 <HAL_GetTick>
 8004780:	0002      	movs	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0d8      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800478e:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	4013      	ands	r3, r2
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d100      	bne.n	80047a4 <HAL_RCC_OscConfig+0x518>
 80047a2:	e0cc      	b.n	800493e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2238      	movs	r2, #56	; 0x38
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d100      	bne.n	80047b2 <HAL_RCC_OscConfig+0x526>
 80047b0:	e07b      	b.n	80048aa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d156      	bne.n	8004868 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80047c0:	4942      	ldr	r1, [pc, #264]	; (80048cc <HAL_RCC_OscConfig+0x640>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7ff fa77 	bl	8003cb8 <HAL_GetTick>
 80047ca:	0003      	movs	r3, r0
 80047cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7ff fa72 	bl	8003cb8 <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0ae      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	049b      	lsls	r3, r3, #18
 80047ea:	4013      	ands	r3, r2
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ee:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <HAL_RCC_OscConfig+0x644>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	431a      	orrs	r2, r3
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800481e:	430a      	orrs	r2, r1
 8004820:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	0449      	lsls	r1, r1, #17
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	0549      	lsls	r1, r1, #21
 800483a:	430a      	orrs	r2, r1
 800483c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7ff fa3b 	bl	8003cb8 <HAL_GetTick>
 8004842:	0003      	movs	r3, r0
 8004844:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7ff fa36 	bl	8003cb8 <HAL_GetTick>
 800484c:	0002      	movs	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e072      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	049b      	lsls	r3, r3, #18
 8004862:	4013      	ands	r3, r2
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x5bc>
 8004866:	e06a      	b.n	800493e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800486e:	4917      	ldr	r1, [pc, #92]	; (80048cc <HAL_RCC_OscConfig+0x640>)
 8004870:	400a      	ands	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7ff fa20 	bl	8003cb8 <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7ff fa1b 	bl	8003cb8 <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e057      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	049b      	lsls	r3, r3, #18
 8004898:	4013      	ands	r3, r2
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_OscConfig+0x62c>)
 80048a2:	490c      	ldr	r1, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x648>)
 80048a4:	400a      	ands	r2, r1
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e049      	b.n	800493e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d112      	bne.n	80048d8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e044      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
 80048c0:	00001388 	.word	0x00001388
 80048c4:	efffffff 	.word	0xefffffff
 80048c8:	ffbfffff 	.word	0xffbfffff
 80048cc:	feffffff 	.word	0xfeffffff
 80048d0:	11c1808c 	.word	0x11c1808c
 80048d4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x6bc>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2203      	movs	r2, #3
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d126      	bne.n	800493a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2270      	movs	r2, #112	; 0x70
 80048f0:	401a      	ands	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d11f      	bne.n	800493a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	23fe      	movs	r3, #254	; 0xfe
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	401a      	ands	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d116      	bne.n	800493a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	23f8      	movs	r3, #248	; 0xf8
 8004910:	039b      	lsls	r3, r3, #14
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d10e      	bne.n	800493a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	23e0      	movs	r3, #224	; 0xe0
 8004920:	051b      	lsls	r3, r3, #20
 8004922:	401a      	ands	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	0f5b      	lsrs	r3, r3, #29
 8004930:	075a      	lsls	r2, r3, #29
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b008      	add	sp, #32
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0e9      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2207      	movs	r2, #7
 8004966:	4013      	ands	r3, r2
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d91e      	bls.n	80049ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2207      	movs	r2, #7
 8004974:	4393      	bics	r3, r2
 8004976:	0019      	movs	r1, r3
 8004978:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004980:	f7ff f99a 	bl	8003cb8 <HAL_GetTick>
 8004984:	0003      	movs	r3, r0
 8004986:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004988:	e009      	b.n	800499e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498a:	f7ff f995 	bl	8003cb8 <HAL_GetTick>
 800498e:	0002      	movs	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <HAL_RCC_ClockConfig+0x1f4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0ca      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800499e:	4b67      	ldr	r3, [pc, #412]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2207      	movs	r2, #7
 80049a4:	4013      	ands	r3, r2
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1ee      	bne.n	800498a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2202      	movs	r2, #2
 80049b2:	4013      	ands	r3, r2
 80049b4:	d015      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2204      	movs	r2, #4
 80049bc:	4013      	ands	r3, r2
 80049be:	d006      	beq.n	80049ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80049c0:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 80049c6:	21e0      	movs	r1, #224	; 0xe0
 80049c8:	01c9      	lsls	r1, r1, #7
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ce:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	4a5d      	ldr	r2, [pc, #372]	; (8004b48 <HAL_RCC_ClockConfig+0x1fc>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	4013      	ands	r3, r2
 80049ea:	d057      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	4013      	ands	r3, r2
 80049fe:	d12b      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e097      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0c:	4b4d      	ldr	r3, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	049b      	lsls	r3, r3, #18
 8004a14:	4013      	ands	r3, r2
 8004a16:	d11f      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e08b      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e07f      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3c:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d108      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e074      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4e:	2202      	movs	r2, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e06d      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a58:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	4393      	bics	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7ff f924 	bl	8003cb8 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a74:	e009      	b.n	8004a8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a76:	f7ff f91f 	bl	8003cb8 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <HAL_RCC_ClockConfig+0x1f4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e054      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2238      	movs	r2, #56	; 0x38
 8004a90:	401a      	ands	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1ec      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d21e      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2207      	movs	r2, #7
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004abc:	f7ff f8fc 	bl	8003cb8 <HAL_GetTick>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ac4:	e009      	b.n	8004ada <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac6:	f7ff f8f7 	bl	8003cb8 <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_RCC_ClockConfig+0x1f4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e02c      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ada:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2207      	movs	r2, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1ee      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2204      	movs	r2, #4
 8004aee:	4013      	ands	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004af2:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <HAL_RCC_ClockConfig+0x200>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b06:	f000 f829 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b0a:	0001      	movs	r1, r0
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	220f      	movs	r2, #15
 8004b14:	401a      	ands	r2, r3
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x204>)
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	58d3      	ldr	r3, [r2, r3]
 8004b1c:	221f      	movs	r2, #31
 8004b1e:	4013      	ands	r3, r2
 8004b20:	000a      	movs	r2, r1
 8004b22:	40da      	lsrs	r2, r3
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x208>)
 8004b26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_ClockConfig+0x20c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f867 	bl	8003c00 <HAL_InitTick>
 8004b32:	0003      	movs	r3, r0
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	00001388 	.word	0x00001388
 8004b44:	40021000 	.word	0x40021000
 8004b48:	fffff0ff 	.word	0xfffff0ff
 8004b4c:	ffff8fff 	.word	0xffff8fff
 8004b50:	08009ec4 	.word	0x08009ec4
 8004b54:	20000008 	.word	0x20000008
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b62:	4b3c      	ldr	r3, [pc, #240]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2238      	movs	r2, #56	; 0x38
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d10f      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	0adb      	lsrs	r3, r3, #11
 8004b72:	2207      	movs	r2, #7
 8004b74:	4013      	ands	r3, r2
 8004b76:	2201      	movs	r2, #1
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	4835      	ldr	r0, [pc, #212]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b82:	f7fb fadb 	bl	800013c <__udivsi3>
 8004b86:	0003      	movs	r3, r0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e05d      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2238      	movs	r2, #56	; 0x38
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b98:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x100>)
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e054      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2238      	movs	r2, #56	; 0x38
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d138      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004baa:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	2207      	movs	r2, #7
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	4824      	ldr	r0, [pc, #144]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x100>)
 8004bcc:	f7fb fab6 	bl	800013c <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	227f      	movs	r2, #127	; 0x7f
 8004bdc:	4013      	ands	r3, r2
 8004bde:	434b      	muls	r3, r1
 8004be0:	617b      	str	r3, [r7, #20]
        break;
 8004be2:	e00d      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	481c      	ldr	r0, [pc, #112]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004be8:	f7fb faa8 	bl	800013c <__udivsi3>
 8004bec:	0003      	movs	r3, r0
 8004bee:	0019      	movs	r1, r3
 8004bf0:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	227f      	movs	r2, #127	; 0x7f
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	434b      	muls	r3, r1
 8004bfc:	617b      	str	r3, [r7, #20]
        break;
 8004bfe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0f5b      	lsrs	r3, r3, #29
 8004c06:	2207      	movs	r2, #7
 8004c08:	4013      	ands	r3, r2
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f7fb fa93 	bl	800013c <__udivsi3>
 8004c16:	0003      	movs	r3, r0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e015      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2238      	movs	r2, #56	; 0x38
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d103      	bne.n	8004c30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2238      	movs	r2, #56	; 0x38
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b18      	cmp	r3, #24
 8004c3a:	d103      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c3c:	23fa      	movs	r3, #250	; 0xfa
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e001      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c48:	693b      	ldr	r3, [r7, #16]
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	40021000 	.word	0x40021000
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	20000008 	.word	0x20000008

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b5b0      	push	{r4, r5, r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c78:	f7ff fff2 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c7c:	0004      	movs	r4, r0
 8004c7e:	f7ff faf9 	bl	8004274 <LL_RCC_GetAPB1Prescaler>
 8004c82:	0003      	movs	r3, r0
 8004c84:	0b1a      	lsrs	r2, r3, #12
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c88:	0092      	lsls	r2, r2, #2
 8004c8a:	58d3      	ldr	r3, [r2, r3]
 8004c8c:	221f      	movs	r2, #31
 8004c8e:	4013      	ands	r3, r2
 8004c90:	40dc      	lsrs	r4, r3
 8004c92:	0023      	movs	r3, r4
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bdb0      	pop	{r4, r5, r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	08009f04 	.word	0x08009f04

08004ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004ca8:	2313      	movs	r3, #19
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb0:	2312      	movs	r3, #18
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	029b      	lsls	r3, r3, #10
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004cc4:	e0ad      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	2011      	movs	r0, #17
 8004cc8:	183b      	adds	r3, r7, r0
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	055b      	lsls	r3, r3, #21
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d110      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ce0:	2180      	movs	r1, #128	; 0x80
 8004ce2:	0549      	lsls	r1, r1, #21
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ce8:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	055b      	lsls	r3, r3, #21
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfc:	4b3c      	ldr	r3, [pc, #240]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004d02:	2180      	movs	r1, #128	; 0x80
 8004d04:	0049      	lsls	r1, r1, #1
 8004d06:	430a      	orrs	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0a:	f7fe ffd5 	bl	8003cb8 <HAL_GetTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d12:	e00b      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d14:	f7fe ffd0 	bl	8003cb8 <HAL_GetTick>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d904      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d22:	2313      	movs	r3, #19
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2203      	movs	r2, #3
 8004d28:	701a      	strb	r2, [r3, #0]
        break;
 8004d2a:	e005      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2c:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d0ed      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d38:	2313      	movs	r3, #19
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d15e      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d42:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d46:	23c0      	movs	r3, #192	; 0xc0
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d019      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d014      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d5e:	4b23      	ldr	r3, [pc, #140]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d68:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0249      	lsls	r1, r1, #9
 8004d72:	430a      	orrs	r2, r1
 8004d74:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d7c:	491e      	ldr	r1, [pc, #120]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004d7e:	400a      	ands	r2, r1
 8004d80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d82:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fe ff92 	bl	8003cb8 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d98:	e00c      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fe ff8d 	bl	8003cb8 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d904      	bls.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004daa:	2313      	movs	r3, #19
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	2203      	movs	r2, #3
 8004db0:	701a      	strb	r2, [r3, #0]
            break;
 8004db2:	e004      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	2202      	movs	r2, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d0ed      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004dbe:	2313      	movs	r3, #19
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ddc:	e016      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dde:	2312      	movs	r3, #18
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	2213      	movs	r2, #19
 8004de4:	18ba      	adds	r2, r7, r2
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e00f      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
 8004df4:	fffffcff 	.word	0xfffffcff
 8004df8:	fffeffff 	.word	0xfffeffff
 8004dfc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	2312      	movs	r3, #18
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2213      	movs	r2, #19
 8004e06:	18ba      	adds	r2, r7, r2
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e0c:	2311      	movs	r3, #17
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4bb6      	ldr	r3, [pc, #728]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1a:	4bb5      	ldr	r3, [pc, #724]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e1c:	49b5      	ldr	r1, [pc, #724]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2c:	4bb0      	ldr	r3, [pc, #704]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	2203      	movs	r2, #3
 8004e32:	4393      	bics	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4bad      	ldr	r3, [pc, #692]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2202      	movs	r2, #2
 8004e46:	4013      	ands	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e4a:	4ba9      	ldr	r3, [pc, #676]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	220c      	movs	r2, #12
 8004e50:	4393      	bics	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4ba5      	ldr	r3, [pc, #660]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2204      	movs	r2, #4
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e68:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2230      	movs	r2, #48	; 0x30
 8004e6e:	4393      	bics	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b9e      	ldr	r3, [pc, #632]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2210      	movs	r2, #16
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e86:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	4a9b      	ldr	r2, [pc, #620]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	4b96      	ldr	r3, [pc, #600]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	015b      	lsls	r3, r3, #5
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004ea6:	4b92      	ldr	r3, [pc, #584]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	4a94      	ldr	r2, [pc, #592]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	4b8e      	ldr	r3, [pc, #568]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec6:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	4a8d      	ldr	r2, [pc, #564]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed4:	4b86      	ldr	r3, [pc, #536]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ee6:	4b82      	ldr	r3, [pc, #520]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	4a86      	ldr	r2, [pc, #536]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4b7e      	ldr	r3, [pc, #504]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2220      	movs	r2, #32
 8004f00:	4013      	ands	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f04:	4b7a      	ldr	r3, [pc, #488]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	4a7f      	ldr	r2, [pc, #508]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	4b77      	ldr	r3, [pc, #476]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f14:	430a      	orrs	r2, r1
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2240      	movs	r2, #64	; 0x40
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f22:	4b73      	ldr	r3, [pc, #460]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	4a79      	ldr	r2, [pc, #484]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d015      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f42:	4b6b      	ldr	r3, [pc, #428]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	0899      	lsrs	r1, r3, #2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	4b68      	ldr	r3, [pc, #416]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f50:	430a      	orrs	r2, r1
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	05db      	lsls	r3, r3, #23
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f60:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	4b62      	ldr	r3, [pc, #392]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	0249      	lsls	r1, r1, #9
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	4013      	ands	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	2240      	movs	r2, #64	; 0x40
 8004f80:	4393      	bics	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	039b      	lsls	r3, r3, #14
 8004f96:	4013      	ands	r3, r2
 8004f98:	d016      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f9a:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	4a5c      	ldr	r2, [pc, #368]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa8:	4b51      	ldr	r3, [pc, #324]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004faa:	430a      	orrs	r2, r1
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	03db      	lsls	r3, r3, #15
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004fba:	4b4d      	ldr	r3, [pc, #308]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc0:	2180      	movs	r1, #128	; 0x80
 8004fc2:	0449      	lsls	r1, r1, #17
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	03db      	lsls	r3, r3, #15
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d016      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe2:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	045b      	lsls	r3, r3, #17
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d106      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	0449      	lsls	r1, r1, #17
 8004ffe:	430a      	orrs	r2, r1
 8005000:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	4013      	ands	r3, r2
 800500c:	d014      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800500e:	4b38      	ldr	r3, [pc, #224]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	2203      	movs	r2, #3
 8005014:	4393      	bics	r3, r2
 8005016:	0019      	movs	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501e:	430a      	orrs	r2, r1
 8005020:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800502a:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	0249      	lsls	r1, r1, #9
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	019b      	lsls	r3, r3, #6
 8005040:	4013      	ands	r3, r2
 8005042:	d014      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	220c      	movs	r2, #12
 800504a:	4393      	bics	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005054:	430a      	orrs	r2, r1
 8005056:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b04      	cmp	r3, #4
 800505e:	d106      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	0249      	lsls	r1, r1, #9
 800506a:	430a      	orrs	r2, r1
 800506c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	045b      	lsls	r3, r3, #17
 8005076:	4013      	ands	r3, r2
 8005078:	d016      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	4a22      	ldr	r2, [pc, #136]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800508a:	430a      	orrs	r2, r1
 800508c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	429a      	cmp	r2, r3
 8005098:	d106      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	0449      	lsls	r1, r1, #17
 80050a4:	430a      	orrs	r2, r1
 80050a6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	049b      	lsls	r3, r3, #18
 80050b0:	4013      	ands	r3, r2
 80050b2:	d016      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	0019      	movs	r1, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050c4:	430a      	orrs	r2, r1
 80050c6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d106      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	0449      	lsls	r1, r1, #17
 80050de:	430a      	orrs	r2, r1
 80050e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80050e2:	2312      	movs	r3, #18
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	781b      	ldrb	r3, [r3, #0]
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40021000 	.word	0x40021000
 80050f4:	efffffff 	.word	0xefffffff
 80050f8:	fffff3ff 	.word	0xfffff3ff
 80050fc:	fffffcff 	.word	0xfffffcff
 8005100:	fff3ffff 	.word	0xfff3ffff
 8005104:	ffcfffff 	.word	0xffcfffff
 8005108:	ffffcfff 	.word	0xffffcfff
 800510c:	ffff3fff 	.word	0xffff3fff
 8005110:	ffbfffff 	.word	0xffbfffff
 8005114:	feffffff 	.word	0xfeffffff

08005118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0a8      	b.n	800527c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	2382      	movs	r3, #130	; 0x82
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	429a      	cmp	r2, r3
 800513c:	d009      	beq.n	8005152 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	61da      	str	r2, [r3, #28]
 8005144:	e005      	b.n	8005152 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	225d      	movs	r2, #93	; 0x5d
 800515c:	5c9b      	ldrb	r3, [r3, r2]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	225c      	movs	r2, #92	; 0x5c
 8005168:	2100      	movs	r1, #0
 800516a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0018      	movs	r0, r3
 8005170:	f7fe fb78 	bl	8003864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	225d      	movs	r2, #93	; 0x5d
 8005178:	2102      	movs	r1, #2
 800517a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2140      	movs	r1, #64	; 0x40
 8005188:	438a      	bics	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	23e0      	movs	r3, #224	; 0xe0
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	429a      	cmp	r2, r3
 8005196:	d902      	bls.n	800519e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e002      	b.n	80051a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	015b      	lsls	r3, r3, #5
 80051a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	23f0      	movs	r3, #240	; 0xf0
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d008      	beq.n	80051c2 <HAL_SPI_Init+0xaa>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	23e0      	movs	r3, #224	; 0xe0
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	2382      	movs	r3, #130	; 0x82
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	401a      	ands	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6899      	ldr	r1, [r3, #8]
 80051d0:	2384      	movs	r3, #132	; 0x84
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	400b      	ands	r3, r1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2102      	movs	r1, #2
 80051de:	400b      	ands	r3, r1
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2101      	movs	r1, #1
 80051e8:	400b      	ands	r3, r1
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6999      	ldr	r1, [r3, #24]
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	400b      	ands	r3, r1
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2138      	movs	r1, #56	; 0x38
 80051fe:	400b      	ands	r3, r1
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	400b      	ands	r3, r1
 800520a:	431a      	orrs	r2, r3
 800520c:	0011      	movs	r1, r2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	401a      	ands	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	2204      	movs	r2, #4
 8005228:	401a      	ands	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2110      	movs	r1, #16
 8005230:	400b      	ands	r3, r1
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	2108      	movs	r1, #8
 800523a:	400b      	ands	r3, r1
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68d9      	ldr	r1, [r3, #12]
 8005242:	23f0      	movs	r3, #240	; 0xf0
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	400b      	ands	r3, r1
 8005248:	431a      	orrs	r2, r3
 800524a:	0011      	movs	r1, r2
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	015b      	lsls	r3, r3, #5
 8005252:	401a      	ands	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4907      	ldr	r1, [pc, #28]	; (8005284 <HAL_SPI_Init+0x16c>)
 8005268:	400a      	ands	r2, r1
 800526a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	225d      	movs	r2, #93	; 0x5d
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b004      	add	sp, #16
 8005282:	bd80      	pop	{r7, pc}
 8005284:	fffff7ff 	.word	0xfffff7ff

08005288 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	1dbb      	adds	r3, r7, #6
 8005296:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005298:	231f      	movs	r3, #31
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	225c      	movs	r2, #92	; 0x5c
 80052a4:	5c9b      	ldrb	r3, [r3, r2]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Transmit+0x26>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e147      	b.n	800553e <HAL_SPI_Transmit+0x2b6>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	225c      	movs	r2, #92	; 0x5c
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b6:	f7fe fcff 	bl	8003cb8 <HAL_GetTick>
 80052ba:	0003      	movs	r3, r0
 80052bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052be:	2316      	movs	r3, #22
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	1dba      	adds	r2, r7, #6
 80052c4:	8812      	ldrh	r2, [r2, #0]
 80052c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	225d      	movs	r2, #93	; 0x5d
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d004      	beq.n	80052de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80052d4:	231f      	movs	r3, #31
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	2202      	movs	r2, #2
 80052da:	701a      	strb	r2, [r3, #0]
    goto error;
 80052dc:	e128      	b.n	8005530 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_SPI_Transmit+0x64>
 80052e4:	1dbb      	adds	r3, r7, #6
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80052ec:	231f      	movs	r3, #31
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80052f4:	e11c      	b.n	8005530 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	225d      	movs	r2, #93	; 0x5d
 80052fa:	2103      	movs	r1, #3
 80052fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1dba      	adds	r2, r7, #6
 800530e:	8812      	ldrh	r2, [r2, #0]
 8005310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1dba      	adds	r2, r7, #6
 8005316:	8812      	ldrh	r2, [r2, #0]
 8005318:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2244      	movs	r2, #68	; 0x44
 8005324:	2100      	movs	r1, #0
 8005326:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2246      	movs	r2, #70	; 0x46
 800532c:	2100      	movs	r1, #0
 800532e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	429a      	cmp	r2, r3
 8005346:	d110      	bne.n	800536a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2140      	movs	r1, #64	; 0x40
 8005354:	438a      	bics	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	01c9      	lsls	r1, r1, #7
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2240      	movs	r2, #64	; 0x40
 8005372:	4013      	ands	r3, r2
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d007      	beq.n	8005388 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2140      	movs	r1, #64	; 0x40
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	23e0      	movs	r3, #224	; 0xe0
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	429a      	cmp	r2, r3
 8005392:	d952      	bls.n	800543a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <HAL_SPI_Transmit+0x11e>
 800539c:	2316      	movs	r3, #22
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d143      	bne.n	800542e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	881a      	ldrh	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053ca:	e030      	b.n	800542e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2202      	movs	r2, #2
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d112      	bne.n	8005400 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fe:	e016      	b.n	800542e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005400:	f7fe fc5a 	bl	8003cb8 <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d802      	bhi.n	8005416 <HAL_SPI_Transmit+0x18e>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	d102      	bne.n	800541c <HAL_SPI_Transmit+0x194>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d108      	bne.n	800542e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	231f      	movs	r3, #31
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2203      	movs	r2, #3
 8005422:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	225d      	movs	r2, #93	; 0x5d
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]
          goto error;
 800542c:	e080      	b.n	8005530 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1c9      	bne.n	80053cc <HAL_SPI_Transmit+0x144>
 8005438:	e053      	b.n	80054e2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_SPI_Transmit+0x1c4>
 8005442:	2316      	movs	r3, #22
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d145      	bne.n	80054d8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005472:	e031      	b.n	80054d8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2202      	movs	r2, #2
 800547c:	4013      	ands	r3, r2
 800547e:	2b02      	cmp	r3, #2
 8005480:	d113      	bne.n	80054aa <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	7812      	ldrb	r2, [r2, #0]
 800548e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a8:	e016      	b.n	80054d8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054aa:	f7fe fc05 	bl	8003cb8 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d802      	bhi.n	80054c0 <HAL_SPI_Transmit+0x238>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Transmit+0x23e>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d108      	bne.n	80054d8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80054c6:	231f      	movs	r3, #31
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2203      	movs	r2, #3
 80054cc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	225d      	movs	r2, #93	; 0x5d
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]
          goto error;
 80054d6:	e02b      	b.n	8005530 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1c8      	bne.n	8005474 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fcef 	bl	8005ecc <SPI_EndRxTxTransaction>
 80054ee:	1e03      	subs	r3, r0, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800551e:	231f      	movs	r3, #31
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e003      	b.n	8005530 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	225d      	movs	r2, #93	; 0x5d
 800552c:	2101      	movs	r1, #1
 800552e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	225c      	movs	r2, #92	; 0x5c
 8005534:	2100      	movs	r1, #0
 8005536:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005538:	231f      	movs	r3, #31
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	781b      	ldrb	r3, [r3, #0]
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b008      	add	sp, #32
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005558:	2117      	movs	r1, #23
 800555a:	187b      	adds	r3, r7, r1
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	225d      	movs	r2, #93	; 0x5d
 8005564:	5c9b      	ldrb	r3, [r3, r2]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	d003      	beq.n	8005574 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2202      	movs	r2, #2
 8005570:	701a      	strb	r2, [r3, #0]
    goto error;
 8005572:	e12b      	b.n	80057cc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	2382      	movs	r3, #130	; 0x82
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	429a      	cmp	r2, r3
 800557e:	d113      	bne.n	80055a8 <HAL_SPI_Receive+0x60>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	225d      	movs	r2, #93	; 0x5d
 800558c:	2104      	movs	r1, #4
 800558e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005590:	1dbb      	adds	r3, r7, #6
 8005592:	881c      	ldrh	r4, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	0023      	movs	r3, r4
 80055a0:	f000 f924 	bl	80057ec <HAL_SPI_TransmitReceive>
 80055a4:	0003      	movs	r3, r0
 80055a6:	e118      	b.n	80057da <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	225c      	movs	r2, #92	; 0x5c
 80055ac:	5c9b      	ldrb	r3, [r3, r2]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_SPI_Receive+0x6e>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e111      	b.n	80057da <HAL_SPI_Receive+0x292>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	225c      	movs	r2, #92	; 0x5c
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055be:	f7fe fb7b 	bl	8003cb8 <HAL_GetTick>
 80055c2:	0003      	movs	r3, r0
 80055c4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_SPI_Receive+0x8c>
 80055cc:	1dbb      	adds	r3, r7, #6
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80055d4:	2317      	movs	r3, #23
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
    goto error;
 80055dc:	e0f6      	b.n	80057cc <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	225d      	movs	r2, #93	; 0x5d
 80055e2:	2104      	movs	r1, #4
 80055e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1dba      	adds	r2, r7, #6
 80055f6:	2144      	movs	r1, #68	; 0x44
 80055f8:	8812      	ldrh	r2, [r2, #0]
 80055fa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1dba      	adds	r2, r7, #6
 8005600:	2146      	movs	r1, #70	; 0x46
 8005602:	8812      	ldrh	r2, [r2, #0]
 8005604:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	23e0      	movs	r3, #224	; 0xe0
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	429a      	cmp	r2, r3
 800562e:	d908      	bls.n	8005642 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	496a      	ldr	r1, [pc, #424]	; (80057e4 <HAL_SPI_Receive+0x29c>)
 800563c:	400a      	ands	r2, r1
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e008      	b.n	8005654 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	0149      	lsls	r1, r1, #5
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	429a      	cmp	r2, r3
 800565e:	d10f      	bne.n	8005680 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2140      	movs	r1, #64	; 0x40
 800566c:	438a      	bics	r2, r1
 800566e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	495b      	ldr	r1, [pc, #364]	; (80057e8 <HAL_SPI_Receive+0x2a0>)
 800567c:	400a      	ands	r2, r1
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	4013      	ands	r3, r2
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d007      	beq.n	800569e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	23e0      	movs	r3, #224	; 0xe0
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d900      	bls.n	80056ac <HAL_SPI_Receive+0x164>
 80056aa:	e071      	b.n	8005790 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ac:	e035      	b.n	800571a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2201      	movs	r2, #1
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d117      	bne.n	80056ec <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	001a      	movs	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2246      	movs	r2, #70	; 0x46
 80056dc:	5a9b      	ldrh	r3, [r3, r2]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b299      	uxth	r1, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2246      	movs	r2, #70	; 0x46
 80056e8:	5299      	strh	r1, [r3, r2]
 80056ea:	e016      	b.n	800571a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ec:	f7fe fae4 	bl	8003cb8 <HAL_GetTick>
 80056f0:	0002      	movs	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d802      	bhi.n	8005702 <HAL_SPI_Receive+0x1ba>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	d102      	bne.n	8005708 <HAL_SPI_Receive+0x1c0>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8005708:	2317      	movs	r3, #23
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2203      	movs	r2, #3
 800570e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	225d      	movs	r2, #93	; 0x5d
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]
          goto error;
 8005718:	e058      	b.n	80057cc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2246      	movs	r2, #70	; 0x46
 800571e:	5a9b      	ldrh	r3, [r3, r2]
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c3      	bne.n	80056ae <HAL_SPI_Receive+0x166>
 8005726:	e039      	b.n	800579c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2201      	movs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	2b01      	cmp	r3, #1
 8005734:	d115      	bne.n	8005762 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2246      	movs	r2, #70	; 0x46
 8005752:	5a9b      	ldrh	r3, [r3, r2]
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b299      	uxth	r1, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2246      	movs	r2, #70	; 0x46
 800575e:	5299      	strh	r1, [r3, r2]
 8005760:	e016      	b.n	8005790 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005762:	f7fe faa9 	bl	8003cb8 <HAL_GetTick>
 8005766:	0002      	movs	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d802      	bhi.n	8005778 <HAL_SPI_Receive+0x230>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	d102      	bne.n	800577e <HAL_SPI_Receive+0x236>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800577e:	2317      	movs	r3, #23
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2203      	movs	r2, #3
 8005784:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	225d      	movs	r2, #93	; 0x5d
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
          goto error;
 800578e:	e01d      	b.n	80057cc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2246      	movs	r2, #70	; 0x46
 8005794:	5a9b      	ldrh	r3, [r3, r2]
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1c5      	bne.n	8005728 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 fb34 	bl	8005e10 <SPI_EndRxTransaction>
 80057a8:	1e03      	subs	r3, r0, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80057ba:	2317      	movs	r3, #23
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e003      	b.n	80057cc <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	225d      	movs	r2, #93	; 0x5d
 80057c8:	2101      	movs	r1, #1
 80057ca:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	225c      	movs	r2, #92	; 0x5c
 80057d0:	2100      	movs	r1, #0
 80057d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057d4:	2317      	movs	r3, #23
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	781b      	ldrb	r3, [r3, #0]
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b007      	add	sp, #28
 80057e0:	bd90      	pop	{r4, r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	ffffefff 	.word	0xffffefff
 80057e8:	ffffbfff 	.word	0xffffbfff

080057ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	001a      	movs	r2, r3
 80057fa:	1cbb      	adds	r3, r7, #2
 80057fc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005802:	2323      	movs	r3, #35	; 0x23
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	225c      	movs	r2, #92	; 0x5c
 800580e:	5c9b      	ldrb	r3, [r3, r2]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x2c>
 8005814:	2302      	movs	r3, #2
 8005816:	e1c4      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x3b6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	225c      	movs	r2, #92	; 0x5c
 800581c:	2101      	movs	r1, #1
 800581e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005820:	f7fe fa4a 	bl	8003cb8 <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005828:	201b      	movs	r0, #27
 800582a:	183b      	adds	r3, r7, r0
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	215d      	movs	r1, #93	; 0x5d
 8005830:	5c52      	ldrb	r2, [r2, r1]
 8005832:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800583a:	2312      	movs	r3, #18
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	1cba      	adds	r2, r7, #2
 8005840:	8812      	ldrh	r2, [r2, #0]
 8005842:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005844:	183b      	adds	r3, r7, r0
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d011      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x84>
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	2382      	movs	r3, #130	; 0x82
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	429a      	cmp	r2, r3
 8005854:	d107      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x7a>
 800585e:	183b      	adds	r3, r7, r0
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b04      	cmp	r3, #4
 8005864:	d004      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005866:	2323      	movs	r3, #35	; 0x23
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2202      	movs	r2, #2
 800586c:	701a      	strb	r2, [r3, #0]
    goto error;
 800586e:	e191      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d006      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x98>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x98>
 800587c:	1cbb      	adds	r3, r7, #2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005884:	2323      	movs	r3, #35	; 0x23
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
    goto error;
 800588c:	e182      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	225d      	movs	r2, #93	; 0x5d
 8005892:	5c9b      	ldrb	r3, [r3, r2]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	225d      	movs	r2, #93	; 0x5d
 800589e:	2105      	movs	r1, #5
 80058a0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1cba      	adds	r2, r7, #2
 80058b2:	2146      	movs	r1, #70	; 0x46
 80058b4:	8812      	ldrh	r2, [r2, #0]
 80058b6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1cba      	adds	r2, r7, #2
 80058bc:	2144      	movs	r1, #68	; 0x44
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1cba      	adds	r2, r7, #2
 80058cc:	8812      	ldrh	r2, [r2, #0]
 80058ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1cba      	adds	r2, r7, #2
 80058d4:	8812      	ldrh	r2, [r2, #0]
 80058d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	23e0      	movs	r3, #224	; 0xe0
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d908      	bls.n	8005902 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	49ac      	ldr	r1, [pc, #688]	; (8005bac <HAL_SPI_TransmitReceive+0x3c0>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e008      	b.n	8005914 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	0149      	lsls	r1, r1, #5
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	4013      	ands	r3, r2
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d007      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2140      	movs	r1, #64	; 0x40
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	23e0      	movs	r3, #224	; 0xe0
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	429a      	cmp	r2, r3
 800593c:	d800      	bhi.n	8005940 <HAL_SPI_TransmitReceive+0x154>
 800593e:	e083      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x168>
 8005948:	2312      	movs	r3, #18
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d000      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x168>
 8005952:	e06d      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005978:	e05a      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2202      	movs	r2, #2
 8005982:	4013      	ands	r3, r2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1d4>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x1d4>
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2201      	movs	r2, #1
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d11c      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x21c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2246      	movs	r2, #70	; 0x46
 80059d2:	5a9b      	ldrh	r3, [r3, r2]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	b292      	uxth	r2, r2
 80059e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2246      	movs	r2, #70	; 0x46
 80059f6:	5a9b      	ldrh	r3, [r3, r2]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b299      	uxth	r1, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2246      	movs	r2, #70	; 0x46
 8005a02:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a08:	f7fe f956 	bl	8003cb8 <HAL_GetTick>
 8005a0c:	0002      	movs	r2, r0
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d80b      	bhi.n	8005a30 <HAL_SPI_TransmitReceive+0x244>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	d008      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005a1e:	2323      	movs	r3, #35	; 0x23
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2203      	movs	r2, #3
 8005a24:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	225d      	movs	r2, #93	; 0x5d
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	5499      	strb	r1, [r3, r2]
        goto error;
 8005a2e:	e0b1      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d19f      	bne.n	800597a <HAL_SPI_TransmitReceive+0x18e>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2246      	movs	r2, #70	; 0x46
 8005a3e:	5a9b      	ldrh	r3, [r3, r2]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d199      	bne.n	800597a <HAL_SPI_TransmitReceive+0x18e>
 8005a46:	e089      	b.n	8005b5c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x270>
 8005a50:	2312      	movs	r3, #18
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d000      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x270>
 8005a5a:	e074      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a82:	e060      	b.n	8005b46 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d11c      	bne.n	8005acc <HAL_SPI_TransmitReceive+0x2e0>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x2e0>
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d114      	bne.n	8005acc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	7812      	ldrb	r2, [r2, #0]
 8005aae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d11e      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x32c>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2246      	movs	r2, #70	; 0x46
 8005ade:	5a9b      	ldrh	r3, [r3, r2]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	001a      	movs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2246      	movs	r2, #70	; 0x46
 8005b06:	5a9b      	ldrh	r3, [r3, r2]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b299      	uxth	r1, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2246      	movs	r2, #70	; 0x46
 8005b12:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b14:	2301      	movs	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b18:	f7fe f8ce 	bl	8003cb8 <HAL_GetTick>
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d802      	bhi.n	8005b2e <HAL_SPI_TransmitReceive+0x342>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x348>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8005b34:	2323      	movs	r3, #35	; 0x23
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	2203      	movs	r2, #3
 8005b3a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	225d      	movs	r2, #93	; 0x5d
 8005b40:	2101      	movs	r1, #1
 8005b42:	5499      	strb	r1, [r3, r2]
        goto error;
 8005b44:	e026      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d199      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x298>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2246      	movs	r2, #70	; 0x46
 8005b54:	5a9b      	ldrh	r3, [r3, r2]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d193      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f000 f9b2 	bl	8005ecc <SPI_EndRxTxTransaction>
 8005b68:	1e03      	subs	r3, r0, #0
 8005b6a:	d006      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005b6c:	2323      	movs	r3, #35	; 0x23
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005b82:	2323      	movs	r3, #35	; 0x23
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e003      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	225d      	movs	r2, #93	; 0x5d
 8005b90:	2101      	movs	r1, #1
 8005b92:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	225c      	movs	r2, #92	; 0x5c
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b9c:	2323      	movs	r3, #35	; 0x23
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	781b      	ldrb	r3, [r3, #0]
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b00a      	add	sp, #40	; 0x28
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	ffffefff 	.word	0xffffefff

08005bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	1dfb      	adds	r3, r7, #7
 8005bbe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bc0:	f7fe f87a 	bl	8003cb8 <HAL_GetTick>
 8005bc4:	0002      	movs	r2, r0
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	18d3      	adds	r3, r2, r3
 8005bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bd0:	f7fe f872 	bl	8003cb8 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bd8:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	015b      	lsls	r3, r3, #5
 8005bde:	0d1b      	lsrs	r3, r3, #20
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	4353      	muls	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be6:	e058      	b.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	d055      	beq.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bee:	f7fe f863 	bl	8003cb8 <HAL_GetTick>
 8005bf2:	0002      	movs	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d902      	bls.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d142      	bne.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	21e0      	movs	r1, #224	; 0xe0
 8005c10:	438a      	bics	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	2382      	movs	r3, #130	; 0x82
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d113      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d005      	beq.n	8005c38 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d107      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2140      	movs	r1, #64	; 0x40
 8005c44:	438a      	bics	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	019b      	lsls	r3, r3, #6
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d110      	bne.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	491a      	ldr	r1, [pc, #104]	; (8005cc8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	0189      	lsls	r1, r1, #6
 8005c72:	430a      	orrs	r2, r1
 8005c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	225d      	movs	r2, #93	; 0x5d
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	225c      	movs	r2, #92	; 0x5c
 8005c82:	2100      	movs	r1, #0
 8005c84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e017      	b.n	8005cba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	425a      	negs	r2, r3
 8005caa:	4153      	adcs	r3, r2
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	001a      	movs	r2, r3
 8005cb0:	1dfb      	adds	r3, r7, #7
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d197      	bne.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b008      	add	sp, #32
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20000008 	.word	0x20000008
 8005cc8:	ffffdfff 	.word	0xffffdfff

08005ccc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cda:	2317      	movs	r3, #23
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ce2:	f7fd ffe9 	bl	8003cb8 <HAL_GetTick>
 8005ce6:	0002      	movs	r2, r0
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	18d3      	adds	r3, r2, r3
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005cf2:	f7fd ffe1 	bl	8003cb8 <HAL_GetTick>
 8005cf6:	0003      	movs	r3, r0
 8005cf8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	0013      	movs	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	189b      	adds	r3, r3, r2
 8005d0c:	00da      	lsls	r2, r3, #3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	0d1b      	lsrs	r3, r3, #20
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	4353      	muls	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d18:	e068      	b.n	8005dec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	23c0      	movs	r3, #192	; 0xc0
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d10a      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d107      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	2117      	movs	r1, #23
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	d055      	beq.n	8005dec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d40:	f7fd ffba 	bl	8003cb8 <HAL_GetTick>
 8005d44:	0002      	movs	r2, r0
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d902      	bls.n	8005d56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d142      	bne.n	8005ddc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	21e0      	movs	r1, #224	; 0xe0
 8005d62:	438a      	bics	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	2382      	movs	r3, #130	; 0x82
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d113      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d005      	beq.n	8005d8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d107      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	438a      	bics	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d110      	bne.n	8005dc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4916      	ldr	r1, [pc, #88]	; (8005e0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005db2:	400a      	ands	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	0189      	lsls	r1, r1, #6
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	225d      	movs	r2, #93	; 0x5d
 8005dcc:	2101      	movs	r1, #1
 8005dce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	225c      	movs	r2, #92	; 0x5c
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e010      	b.n	8005dfe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d18e      	bne.n	8005d1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b00a      	add	sp, #40	; 0x28
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	20000008 	.word	0x20000008
 8005e0c:	ffffdfff 	.word	0xffffdfff

08005e10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	2382      	movs	r3, #130	; 0x82
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d113      	bne.n	8005e50 <SPI_EndRxTransaction+0x40>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d005      	beq.n	8005e40 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d107      	bne.n	8005e50 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2140      	movs	r1, #64	; 0x40
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	0013      	movs	r3, r2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	f7ff fea7 	bl	8005bb0 <SPI_WaitFlagStateUntilTimeout>
 8005e62:	1e03      	subs	r3, r0, #0
 8005e64:	d007      	beq.n	8005e76 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e026      	b.n	8005ec4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	2382      	movs	r3, #130	; 0x82
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d11f      	bne.n	8005ec2 <SPI_EndRxTransaction+0xb2>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d005      	beq.n	8005e9a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d113      	bne.n	8005ec2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	23c0      	movs	r3, #192	; 0xc0
 8005e9e:	00d9      	lsls	r1, r3, #3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	0013      	movs	r3, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f7ff ff0f 	bl	8005ccc <SPI_WaitFifoStateUntilTimeout>
 8005eae:	1e03      	subs	r3, r0, #0
 8005eb0:	d007      	beq.n	8005ec2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e000      	b.n	8005ec4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	23c0      	movs	r3, #192	; 0xc0
 8005edc:	0159      	lsls	r1, r3, #5
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f7ff fef0 	bl	8005ccc <SPI_WaitFifoStateUntilTimeout>
 8005eec:	1e03      	subs	r3, r0, #0
 8005eee:	d007      	beq.n	8005f00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e027      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	0013      	movs	r3, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2180      	movs	r1, #128	; 0x80
 8005f0e:	f7ff fe4f 	bl	8005bb0 <SPI_WaitFlagStateUntilTimeout>
 8005f12:	1e03      	subs	r3, r0, #0
 8005f14:	d007      	beq.n	8005f26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e014      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	23c0      	movs	r3, #192	; 0xc0
 8005f2a:	00d9      	lsls	r1, r3, #3
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	0013      	movs	r3, r2
 8005f34:	2200      	movs	r2, #0
 8005f36:	f7ff fec9 	bl	8005ccc <SPI_WaitFifoStateUntilTimeout>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d007      	beq.n	8005f4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f42:	2220      	movs	r2, #32
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e000      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b004      	add	sp, #16
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e046      	b.n	8005ff8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2288      	movs	r2, #136	; 0x88
 8005f6e:	589b      	ldr	r3, [r3, r2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2284      	movs	r2, #132	; 0x84
 8005f78:	2100      	movs	r1, #0
 8005f7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7fd fcba 	bl	80038f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2288      	movs	r2, #136	; 0x88
 8005f88:	2124      	movs	r1, #36	; 0x24
 8005f8a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2101      	movs	r1, #1
 8005f98:	438a      	bics	r2, r1
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fc26 	bl	80067f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 f8cc 	bl	800614c <UART_SetConfig>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e01c      	b.n	8005ff8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	490d      	ldr	r1, [pc, #52]	; (8006000 <HAL_UART_Init+0xa8>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	212a      	movs	r1, #42	; 0x2a
 8005fda:	438a      	bics	r2, r1
 8005fdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	430a      	orrs	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 fcb5 	bl	8006960 <UART_CheckIdleState>
 8005ff6:	0003      	movs	r3, r0
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	ffffb7ff 	.word	0xffffb7ff

08006004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	; 0x28
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	1dbb      	adds	r3, r7, #6
 8006012:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2288      	movs	r2, #136	; 0x88
 8006018:	589b      	ldr	r3, [r3, r2]
 800601a:	2b20      	cmp	r3, #32
 800601c:	d000      	beq.n	8006020 <HAL_UART_Transmit+0x1c>
 800601e:	e090      	b.n	8006142 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_UART_Transmit+0x2a>
 8006026:	1dbb      	adds	r3, r7, #6
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e088      	b.n	8006144 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	015b      	lsls	r3, r3, #5
 800603a:	429a      	cmp	r2, r3
 800603c:	d109      	bne.n	8006052 <HAL_UART_Transmit+0x4e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d105      	bne.n	8006052 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2201      	movs	r2, #1
 800604a:	4013      	ands	r3, r2
 800604c:	d001      	beq.n	8006052 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e078      	b.n	8006144 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2290      	movs	r2, #144	; 0x90
 8006056:	2100      	movs	r1, #0
 8006058:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2288      	movs	r2, #136	; 0x88
 800605e:	2121      	movs	r1, #33	; 0x21
 8006060:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006062:	f7fd fe29 	bl	8003cb8 <HAL_GetTick>
 8006066:	0003      	movs	r3, r0
 8006068:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1dba      	adds	r2, r7, #6
 800606e:	2154      	movs	r1, #84	; 0x54
 8006070:	8812      	ldrh	r2, [r2, #0]
 8006072:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1dba      	adds	r2, r7, #6
 8006078:	2156      	movs	r1, #86	; 0x56
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	015b      	lsls	r3, r3, #5
 8006086:	429a      	cmp	r2, r3
 8006088:	d108      	bne.n	800609c <HAL_UART_Transmit+0x98>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e003      	b.n	80060a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060a4:	e030      	b.n	8006108 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	0013      	movs	r3, r2
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	f000 fcfe 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2288      	movs	r2, #136	; 0x88
 80060c0:	2120      	movs	r1, #32
 80060c2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e03d      	b.n	8006144 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	001a      	movs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	05d2      	lsls	r2, r2, #23
 80060da:	0dd2      	lsrs	r2, r2, #23
 80060dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	3302      	adds	r3, #2
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	e007      	b.n	80060f6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2256      	movs	r2, #86	; 0x56
 80060fa:	5a9b      	ldrh	r3, [r3, r2]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b299      	uxth	r1, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2256      	movs	r2, #86	; 0x56
 8006106:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2256      	movs	r2, #86	; 0x56
 800610c:	5a9b      	ldrh	r3, [r3, r2]
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1c8      	bne.n	80060a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0013      	movs	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	f000 fcc7 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2288      	movs	r2, #136	; 0x88
 800612e:	2120      	movs	r1, #32
 8006130:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e006      	b.n	8006144 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2288      	movs	r2, #136	; 0x88
 800613a:	2120      	movs	r1, #32
 800613c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	0018      	movs	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	b008      	add	sp, #32
 800614a:	bd80      	pop	{r7, pc}

0800614c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	b5b0      	push	{r4, r5, r7, lr}
 800614e:	b090      	sub	sp, #64	; 0x40
 8006150:	af00      	add	r7, sp, #0
 8006152:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006154:	231a      	movs	r3, #26
 8006156:	2220      	movs	r2, #32
 8006158:	189b      	adds	r3, r3, r2
 800615a:	19db      	adds	r3, r3, r7
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	431a      	orrs	r2, r3
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	431a      	orrs	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	4313      	orrs	r3, r2
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4ac1      	ldr	r2, [pc, #772]	; (8006484 <UART_SetConfig+0x338>)
 8006180:	4013      	ands	r3, r2
 8006182:	0019      	movs	r1, r3
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	430b      	orrs	r3, r1
 800618c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4abc      	ldr	r2, [pc, #752]	; (8006488 <UART_SetConfig+0x33c>)
 8006196:	4013      	ands	r3, r2
 8006198:	0018      	movs	r0, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	68d9      	ldr	r1, [r3, #12]
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	0003      	movs	r3, r0
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4ab6      	ldr	r2, [pc, #728]	; (800648c <UART_SetConfig+0x340>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d009      	beq.n	80061cc <UART_SetConfig+0x80>
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4ab4      	ldr	r2, [pc, #720]	; (8006490 <UART_SetConfig+0x344>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061c8:	4313      	orrs	r3, r2
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	4ab0      	ldr	r2, [pc, #704]	; (8006494 <UART_SetConfig+0x348>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	0019      	movs	r1, r3
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	430b      	orrs	r3, r1
 80061e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	220f      	movs	r2, #15
 80061ea:	4393      	bics	r3, r2
 80061ec:	0018      	movs	r0, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	0003      	movs	r3, r0
 80061f8:	430b      	orrs	r3, r1
 80061fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4aa5      	ldr	r2, [pc, #660]	; (8006498 <UART_SetConfig+0x34c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d131      	bne.n	800626a <UART_SetConfig+0x11e>
 8006206:	4ba5      	ldr	r3, [pc, #660]	; (800649c <UART_SetConfig+0x350>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	2203      	movs	r2, #3
 800620c:	4013      	ands	r3, r2
 800620e:	2b03      	cmp	r3, #3
 8006210:	d01d      	beq.n	800624e <UART_SetConfig+0x102>
 8006212:	d823      	bhi.n	800625c <UART_SetConfig+0x110>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d00c      	beq.n	8006232 <UART_SetConfig+0xe6>
 8006218:	d820      	bhi.n	800625c <UART_SetConfig+0x110>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <UART_SetConfig+0xd8>
 800621e:	2b01      	cmp	r3, #1
 8006220:	d00e      	beq.n	8006240 <UART_SetConfig+0xf4>
 8006222:	e01b      	b.n	800625c <UART_SetConfig+0x110>
 8006224:	231b      	movs	r3, #27
 8006226:	2220      	movs	r2, #32
 8006228:	189b      	adds	r3, r3, r2
 800622a:	19db      	adds	r3, r3, r7
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e154      	b.n	80064dc <UART_SetConfig+0x390>
 8006232:	231b      	movs	r3, #27
 8006234:	2220      	movs	r2, #32
 8006236:	189b      	adds	r3, r3, r2
 8006238:	19db      	adds	r3, r3, r7
 800623a:	2202      	movs	r2, #2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	e14d      	b.n	80064dc <UART_SetConfig+0x390>
 8006240:	231b      	movs	r3, #27
 8006242:	2220      	movs	r2, #32
 8006244:	189b      	adds	r3, r3, r2
 8006246:	19db      	adds	r3, r3, r7
 8006248:	2204      	movs	r2, #4
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	e146      	b.n	80064dc <UART_SetConfig+0x390>
 800624e:	231b      	movs	r3, #27
 8006250:	2220      	movs	r2, #32
 8006252:	189b      	adds	r3, r3, r2
 8006254:	19db      	adds	r3, r3, r7
 8006256:	2208      	movs	r2, #8
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e13f      	b.n	80064dc <UART_SetConfig+0x390>
 800625c:	231b      	movs	r3, #27
 800625e:	2220      	movs	r2, #32
 8006260:	189b      	adds	r3, r3, r2
 8006262:	19db      	adds	r3, r3, r7
 8006264:	2210      	movs	r2, #16
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	e138      	b.n	80064dc <UART_SetConfig+0x390>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a8c      	ldr	r2, [pc, #560]	; (80064a0 <UART_SetConfig+0x354>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d131      	bne.n	80062d8 <UART_SetConfig+0x18c>
 8006274:	4b89      	ldr	r3, [pc, #548]	; (800649c <UART_SetConfig+0x350>)
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	220c      	movs	r2, #12
 800627a:	4013      	ands	r3, r2
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d01d      	beq.n	80062bc <UART_SetConfig+0x170>
 8006280:	d823      	bhi.n	80062ca <UART_SetConfig+0x17e>
 8006282:	2b08      	cmp	r3, #8
 8006284:	d00c      	beq.n	80062a0 <UART_SetConfig+0x154>
 8006286:	d820      	bhi.n	80062ca <UART_SetConfig+0x17e>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <UART_SetConfig+0x146>
 800628c:	2b04      	cmp	r3, #4
 800628e:	d00e      	beq.n	80062ae <UART_SetConfig+0x162>
 8006290:	e01b      	b.n	80062ca <UART_SetConfig+0x17e>
 8006292:	231b      	movs	r3, #27
 8006294:	2220      	movs	r2, #32
 8006296:	189b      	adds	r3, r3, r2
 8006298:	19db      	adds	r3, r3, r7
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e11d      	b.n	80064dc <UART_SetConfig+0x390>
 80062a0:	231b      	movs	r3, #27
 80062a2:	2220      	movs	r2, #32
 80062a4:	189b      	adds	r3, r3, r2
 80062a6:	19db      	adds	r3, r3, r7
 80062a8:	2202      	movs	r2, #2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e116      	b.n	80064dc <UART_SetConfig+0x390>
 80062ae:	231b      	movs	r3, #27
 80062b0:	2220      	movs	r2, #32
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	19db      	adds	r3, r3, r7
 80062b6:	2204      	movs	r2, #4
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e10f      	b.n	80064dc <UART_SetConfig+0x390>
 80062bc:	231b      	movs	r3, #27
 80062be:	2220      	movs	r2, #32
 80062c0:	189b      	adds	r3, r3, r2
 80062c2:	19db      	adds	r3, r3, r7
 80062c4:	2208      	movs	r2, #8
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e108      	b.n	80064dc <UART_SetConfig+0x390>
 80062ca:	231b      	movs	r3, #27
 80062cc:	2220      	movs	r2, #32
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	19db      	adds	r3, r3, r7
 80062d2:	2210      	movs	r2, #16
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e101      	b.n	80064dc <UART_SetConfig+0x390>
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a71      	ldr	r2, [pc, #452]	; (80064a4 <UART_SetConfig+0x358>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d131      	bne.n	8006346 <UART_SetConfig+0x1fa>
 80062e2:	4b6e      	ldr	r3, [pc, #440]	; (800649c <UART_SetConfig+0x350>)
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	2230      	movs	r2, #48	; 0x30
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b30      	cmp	r3, #48	; 0x30
 80062ec:	d01d      	beq.n	800632a <UART_SetConfig+0x1de>
 80062ee:	d823      	bhi.n	8006338 <UART_SetConfig+0x1ec>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d00c      	beq.n	800630e <UART_SetConfig+0x1c2>
 80062f4:	d820      	bhi.n	8006338 <UART_SetConfig+0x1ec>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <UART_SetConfig+0x1b4>
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d00e      	beq.n	800631c <UART_SetConfig+0x1d0>
 80062fe:	e01b      	b.n	8006338 <UART_SetConfig+0x1ec>
 8006300:	231b      	movs	r3, #27
 8006302:	2220      	movs	r2, #32
 8006304:	189b      	adds	r3, r3, r2
 8006306:	19db      	adds	r3, r3, r7
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e0e6      	b.n	80064dc <UART_SetConfig+0x390>
 800630e:	231b      	movs	r3, #27
 8006310:	2220      	movs	r2, #32
 8006312:	189b      	adds	r3, r3, r2
 8006314:	19db      	adds	r3, r3, r7
 8006316:	2202      	movs	r2, #2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e0df      	b.n	80064dc <UART_SetConfig+0x390>
 800631c:	231b      	movs	r3, #27
 800631e:	2220      	movs	r2, #32
 8006320:	189b      	adds	r3, r3, r2
 8006322:	19db      	adds	r3, r3, r7
 8006324:	2204      	movs	r2, #4
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e0d8      	b.n	80064dc <UART_SetConfig+0x390>
 800632a:	231b      	movs	r3, #27
 800632c:	2220      	movs	r2, #32
 800632e:	189b      	adds	r3, r3, r2
 8006330:	19db      	adds	r3, r3, r7
 8006332:	2208      	movs	r2, #8
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e0d1      	b.n	80064dc <UART_SetConfig+0x390>
 8006338:	231b      	movs	r3, #27
 800633a:	2220      	movs	r2, #32
 800633c:	189b      	adds	r3, r3, r2
 800633e:	19db      	adds	r3, r3, r7
 8006340:	2210      	movs	r2, #16
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e0ca      	b.n	80064dc <UART_SetConfig+0x390>
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a57      	ldr	r2, [pc, #348]	; (80064a8 <UART_SetConfig+0x35c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d106      	bne.n	800635e <UART_SetConfig+0x212>
 8006350:	231b      	movs	r3, #27
 8006352:	2220      	movs	r2, #32
 8006354:	189b      	adds	r3, r3, r2
 8006356:	19db      	adds	r3, r3, r7
 8006358:	2200      	movs	r2, #0
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	e0be      	b.n	80064dc <UART_SetConfig+0x390>
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a52      	ldr	r2, [pc, #328]	; (80064ac <UART_SetConfig+0x360>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d106      	bne.n	8006376 <UART_SetConfig+0x22a>
 8006368:	231b      	movs	r3, #27
 800636a:	2220      	movs	r2, #32
 800636c:	189b      	adds	r3, r3, r2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e0b2      	b.n	80064dc <UART_SetConfig+0x390>
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <UART_SetConfig+0x364>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d106      	bne.n	800638e <UART_SetConfig+0x242>
 8006380:	231b      	movs	r3, #27
 8006382:	2220      	movs	r2, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	19db      	adds	r3, r3, r7
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e0a6      	b.n	80064dc <UART_SetConfig+0x390>
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a3e      	ldr	r2, [pc, #248]	; (800648c <UART_SetConfig+0x340>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d13e      	bne.n	8006416 <UART_SetConfig+0x2ca>
 8006398:	4b40      	ldr	r3, [pc, #256]	; (800649c <UART_SetConfig+0x350>)
 800639a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800639c:	23c0      	movs	r3, #192	; 0xc0
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4013      	ands	r3, r2
 80063a2:	22c0      	movs	r2, #192	; 0xc0
 80063a4:	0112      	lsls	r2, r2, #4
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d027      	beq.n	80063fa <UART_SetConfig+0x2ae>
 80063aa:	22c0      	movs	r2, #192	; 0xc0
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d82a      	bhi.n	8006408 <UART_SetConfig+0x2bc>
 80063b2:	2280      	movs	r2, #128	; 0x80
 80063b4:	0112      	lsls	r2, r2, #4
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d011      	beq.n	80063de <UART_SetConfig+0x292>
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	0112      	lsls	r2, r2, #4
 80063be:	4293      	cmp	r3, r2
 80063c0:	d822      	bhi.n	8006408 <UART_SetConfig+0x2bc>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <UART_SetConfig+0x284>
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	00d2      	lsls	r2, r2, #3
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00e      	beq.n	80063ec <UART_SetConfig+0x2a0>
 80063ce:	e01b      	b.n	8006408 <UART_SetConfig+0x2bc>
 80063d0:	231b      	movs	r3, #27
 80063d2:	2220      	movs	r2, #32
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	19db      	adds	r3, r3, r7
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e07e      	b.n	80064dc <UART_SetConfig+0x390>
 80063de:	231b      	movs	r3, #27
 80063e0:	2220      	movs	r2, #32
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	19db      	adds	r3, r3, r7
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e077      	b.n	80064dc <UART_SetConfig+0x390>
 80063ec:	231b      	movs	r3, #27
 80063ee:	2220      	movs	r2, #32
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	19db      	adds	r3, r3, r7
 80063f4:	2204      	movs	r2, #4
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e070      	b.n	80064dc <UART_SetConfig+0x390>
 80063fa:	231b      	movs	r3, #27
 80063fc:	2220      	movs	r2, #32
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	19db      	adds	r3, r3, r7
 8006402:	2208      	movs	r2, #8
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e069      	b.n	80064dc <UART_SetConfig+0x390>
 8006408:	231b      	movs	r3, #27
 800640a:	2220      	movs	r2, #32
 800640c:	189b      	adds	r3, r3, r2
 800640e:	19db      	adds	r3, r3, r7
 8006410:	2210      	movs	r2, #16
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	e062      	b.n	80064dc <UART_SetConfig+0x390>
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <UART_SetConfig+0x344>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d157      	bne.n	80064d0 <UART_SetConfig+0x384>
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <UART_SetConfig+0x350>)
 8006422:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006424:	23c0      	movs	r3, #192	; 0xc0
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4013      	ands	r3, r2
 800642a:	22c0      	movs	r2, #192	; 0xc0
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	4293      	cmp	r3, r2
 8006430:	d040      	beq.n	80064b4 <UART_SetConfig+0x368>
 8006432:	22c0      	movs	r2, #192	; 0xc0
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	4293      	cmp	r3, r2
 8006438:	d843      	bhi.n	80064c2 <UART_SetConfig+0x376>
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	0092      	lsls	r2, r2, #2
 800643e:	4293      	cmp	r3, r2
 8006440:	d011      	beq.n	8006466 <UART_SetConfig+0x31a>
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	0092      	lsls	r2, r2, #2
 8006446:	4293      	cmp	r3, r2
 8006448:	d83b      	bhi.n	80064c2 <UART_SetConfig+0x376>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <UART_SetConfig+0x30c>
 800644e:	2280      	movs	r2, #128	; 0x80
 8006450:	0052      	lsls	r2, r2, #1
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <UART_SetConfig+0x328>
 8006456:	e034      	b.n	80064c2 <UART_SetConfig+0x376>
 8006458:	231b      	movs	r3, #27
 800645a:	2220      	movs	r2, #32
 800645c:	189b      	adds	r3, r3, r2
 800645e:	19db      	adds	r3, r3, r7
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e03a      	b.n	80064dc <UART_SetConfig+0x390>
 8006466:	231b      	movs	r3, #27
 8006468:	2220      	movs	r2, #32
 800646a:	189b      	adds	r3, r3, r2
 800646c:	19db      	adds	r3, r3, r7
 800646e:	2202      	movs	r2, #2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e033      	b.n	80064dc <UART_SetConfig+0x390>
 8006474:	231b      	movs	r3, #27
 8006476:	2220      	movs	r2, #32
 8006478:	189b      	adds	r3, r3, r2
 800647a:	19db      	adds	r3, r3, r7
 800647c:	2204      	movs	r2, #4
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e02c      	b.n	80064dc <UART_SetConfig+0x390>
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	cfff69f3 	.word	0xcfff69f3
 8006488:	ffffcfff 	.word	0xffffcfff
 800648c:	40008000 	.word	0x40008000
 8006490:	40008400 	.word	0x40008400
 8006494:	11fff4ff 	.word	0x11fff4ff
 8006498:	40013800 	.word	0x40013800
 800649c:	40021000 	.word	0x40021000
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	40005000 	.word	0x40005000
 80064b0:	40013c00 	.word	0x40013c00
 80064b4:	231b      	movs	r3, #27
 80064b6:	2220      	movs	r2, #32
 80064b8:	189b      	adds	r3, r3, r2
 80064ba:	19db      	adds	r3, r3, r7
 80064bc:	2208      	movs	r2, #8
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e00c      	b.n	80064dc <UART_SetConfig+0x390>
 80064c2:	231b      	movs	r3, #27
 80064c4:	2220      	movs	r2, #32
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	19db      	adds	r3, r3, r7
 80064ca:	2210      	movs	r2, #16
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e005      	b.n	80064dc <UART_SetConfig+0x390>
 80064d0:	231b      	movs	r3, #27
 80064d2:	2220      	movs	r2, #32
 80064d4:	189b      	adds	r3, r3, r2
 80064d6:	19db      	adds	r3, r3, r7
 80064d8:	2210      	movs	r2, #16
 80064da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4ac1      	ldr	r2, [pc, #772]	; (80067e8 <UART_SetConfig+0x69c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d005      	beq.n	80064f2 <UART_SetConfig+0x3a6>
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4ac0      	ldr	r2, [pc, #768]	; (80067ec <UART_SetConfig+0x6a0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d000      	beq.n	80064f2 <UART_SetConfig+0x3a6>
 80064f0:	e093      	b.n	800661a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064f2:	231b      	movs	r3, #27
 80064f4:	2220      	movs	r2, #32
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	19db      	adds	r3, r3, r7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d015      	beq.n	800652c <UART_SetConfig+0x3e0>
 8006500:	dc18      	bgt.n	8006534 <UART_SetConfig+0x3e8>
 8006502:	2b04      	cmp	r3, #4
 8006504:	d00d      	beq.n	8006522 <UART_SetConfig+0x3d6>
 8006506:	dc15      	bgt.n	8006534 <UART_SetConfig+0x3e8>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <UART_SetConfig+0x3c6>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0x3d0>
 8006510:	e010      	b.n	8006534 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006512:	f7fe fbaf 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8006516:	0003      	movs	r3, r0
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4bb4      	ldr	r3, [pc, #720]	; (80067f0 <UART_SetConfig+0x6a4>)
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006520:	e011      	b.n	8006546 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fe fb1b 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8006526:	0003      	movs	r3, r0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800652a:	e00c      	b.n	8006546 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006532:	e008      	b.n	8006546 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006538:	231a      	movs	r3, #26
 800653a:	2220      	movs	r2, #32
 800653c:	189b      	adds	r3, r3, r2
 800653e:	19db      	adds	r3, r3, r7
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
        break;
 8006544:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	2b00      	cmp	r3, #0
 800654a:	d100      	bne.n	800654e <UART_SetConfig+0x402>
 800654c:	e135      	b.n	80067ba <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	4ba8      	ldr	r3, [pc, #672]	; (80067f4 <UART_SetConfig+0x6a8>)
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	5ad3      	ldrh	r3, [r2, r3]
 8006558:	0019      	movs	r1, r3
 800655a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800655c:	f7f9 fdee 	bl	800013c <__udivsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	0013      	movs	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	189b      	adds	r3, r3, r2
 800656e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006570:	429a      	cmp	r2, r3
 8006572:	d305      	bcc.n	8006580 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	429a      	cmp	r2, r3
 800657e:	d906      	bls.n	800658e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006580:	231a      	movs	r3, #26
 8006582:	2220      	movs	r2, #32
 8006584:	189b      	adds	r3, r3, r2
 8006586:	19db      	adds	r3, r3, r7
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e044      	b.n	8006618 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800659a:	4b96      	ldr	r3, [pc, #600]	; (80067f4 <UART_SetConfig+0x6a8>)
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	5ad3      	ldrh	r3, [r2, r3]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	69b8      	ldr	r0, [r7, #24]
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	f7f9 ff79 	bl	80004a4 <__aeabi_uldivmod>
 80065b2:	0002      	movs	r2, r0
 80065b4:	000b      	movs	r3, r1
 80065b6:	0e11      	lsrs	r1, r2, #24
 80065b8:	021d      	lsls	r5, r3, #8
 80065ba:	430d      	orrs	r5, r1
 80065bc:	0214      	lsls	r4, r2, #8
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	68b8      	ldr	r0, [r7, #8]
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	1900      	adds	r0, r0, r4
 80065d0:	4169      	adcs	r1, r5
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	2300      	movs	r3, #0
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f7f9 ff60 	bl	80004a4 <__aeabi_uldivmod>
 80065e4:	0002      	movs	r2, r0
 80065e6:	000b      	movs	r3, r1
 80065e8:	0013      	movs	r3, r2
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ee:	23c0      	movs	r3, #192	; 0xc0
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d309      	bcc.n	800660a <UART_SetConfig+0x4be>
 80065f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	035b      	lsls	r3, r3, #13
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d204      	bcs.n	800660a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e006      	b.n	8006618 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800660a:	231a      	movs	r3, #26
 800660c:	2220      	movs	r2, #32
 800660e:	189b      	adds	r3, r3, r2
 8006610:	19db      	adds	r3, r3, r7
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006616:	e0d0      	b.n	80067ba <UART_SetConfig+0x66e>
 8006618:	e0cf      	b.n	80067ba <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	429a      	cmp	r2, r3
 8006624:	d000      	beq.n	8006628 <UART_SetConfig+0x4dc>
 8006626:	e070      	b.n	800670a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006628:	231b      	movs	r3, #27
 800662a:	2220      	movs	r2, #32
 800662c:	189b      	adds	r3, r3, r2
 800662e:	19db      	adds	r3, r3, r7
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d015      	beq.n	8006662 <UART_SetConfig+0x516>
 8006636:	dc18      	bgt.n	800666a <UART_SetConfig+0x51e>
 8006638:	2b04      	cmp	r3, #4
 800663a:	d00d      	beq.n	8006658 <UART_SetConfig+0x50c>
 800663c:	dc15      	bgt.n	800666a <UART_SetConfig+0x51e>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <UART_SetConfig+0x4fc>
 8006642:	2b02      	cmp	r3, #2
 8006644:	d005      	beq.n	8006652 <UART_SetConfig+0x506>
 8006646:	e010      	b.n	800666a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fe fb14 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800664c:	0003      	movs	r3, r0
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006650:	e014      	b.n	800667c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006652:	4b67      	ldr	r3, [pc, #412]	; (80067f0 <UART_SetConfig+0x6a4>)
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006656:	e011      	b.n	800667c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006658:	f7fe fa80 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 800665c:	0003      	movs	r3, r0
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006660:	e00c      	b.n	800667c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006668:	e008      	b.n	800667c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800666e:	231a      	movs	r3, #26
 8006670:	2220      	movs	r2, #32
 8006672:	189b      	adds	r3, r3, r2
 8006674:	19db      	adds	r3, r3, r7
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
        break;
 800667a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	d100      	bne.n	8006684 <UART_SetConfig+0x538>
 8006682:	e09a      	b.n	80067ba <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006688:	4b5a      	ldr	r3, [pc, #360]	; (80067f4 <UART_SetConfig+0x6a8>)
 800668a:	0052      	lsls	r2, r2, #1
 800668c:	5ad3      	ldrh	r3, [r2, r3]
 800668e:	0019      	movs	r1, r3
 8006690:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006692:	f7f9 fd53 	bl	800013c <__udivsi3>
 8006696:	0003      	movs	r3, r0
 8006698:	005a      	lsls	r2, r3, #1
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	18d2      	adds	r2, r2, r3
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f7f9 fd47 	bl	800013c <__udivsi3>
 80066ae:	0003      	movs	r3, r0
 80066b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	2b0f      	cmp	r3, #15
 80066b6:	d921      	bls.n	80066fc <UART_SetConfig+0x5b0>
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	025b      	lsls	r3, r3, #9
 80066be:	429a      	cmp	r2, r3
 80066c0:	d21c      	bcs.n	80066fc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	200e      	movs	r0, #14
 80066c8:	2420      	movs	r4, #32
 80066ca:	1903      	adds	r3, r0, r4
 80066cc:	19db      	adds	r3, r3, r7
 80066ce:	210f      	movs	r1, #15
 80066d0:	438a      	bics	r2, r1
 80066d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2207      	movs	r2, #7
 80066dc:	4013      	ands	r3, r2
 80066de:	b299      	uxth	r1, r3
 80066e0:	1903      	adds	r3, r0, r4
 80066e2:	19db      	adds	r3, r3, r7
 80066e4:	1902      	adds	r2, r0, r4
 80066e6:	19d2      	adds	r2, r2, r7
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	1902      	adds	r2, r0, r4
 80066f4:	19d2      	adds	r2, r2, r7
 80066f6:	8812      	ldrh	r2, [r2, #0]
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	e05e      	b.n	80067ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80066fc:	231a      	movs	r3, #26
 80066fe:	2220      	movs	r2, #32
 8006700:	189b      	adds	r3, r3, r2
 8006702:	19db      	adds	r3, r3, r7
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e057      	b.n	80067ba <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800670a:	231b      	movs	r3, #27
 800670c:	2220      	movs	r2, #32
 800670e:	189b      	adds	r3, r3, r2
 8006710:	19db      	adds	r3, r3, r7
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d015      	beq.n	8006744 <UART_SetConfig+0x5f8>
 8006718:	dc18      	bgt.n	800674c <UART_SetConfig+0x600>
 800671a:	2b04      	cmp	r3, #4
 800671c:	d00d      	beq.n	800673a <UART_SetConfig+0x5ee>
 800671e:	dc15      	bgt.n	800674c <UART_SetConfig+0x600>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <UART_SetConfig+0x5de>
 8006724:	2b02      	cmp	r3, #2
 8006726:	d005      	beq.n	8006734 <UART_SetConfig+0x5e8>
 8006728:	e010      	b.n	800674c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800672a:	f7fe faa3 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800672e:	0003      	movs	r3, r0
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006732:	e014      	b.n	800675e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006734:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <UART_SetConfig+0x6a4>)
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006738:	e011      	b.n	800675e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673a:	f7fe fa0f 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 800673e:	0003      	movs	r3, r0
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006742:	e00c      	b.n	800675e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800674a:	e008      	b.n	800675e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006750:	231a      	movs	r3, #26
 8006752:	2220      	movs	r2, #32
 8006754:	189b      	adds	r3, r3, r2
 8006756:	19db      	adds	r3, r3, r7
 8006758:	2201      	movs	r2, #1
 800675a:	701a      	strb	r2, [r3, #0]
        break;
 800675c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	2b00      	cmp	r3, #0
 8006762:	d02a      	beq.n	80067ba <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006768:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <UART_SetConfig+0x6a8>)
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	5ad3      	ldrh	r3, [r2, r3]
 800676e:	0019      	movs	r1, r3
 8006770:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006772:	f7f9 fce3 	bl	800013c <__udivsi3>
 8006776:	0003      	movs	r3, r0
 8006778:	001a      	movs	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	18d2      	adds	r2, r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	0019      	movs	r1, r3
 8006788:	0010      	movs	r0, r2
 800678a:	f7f9 fcd7 	bl	800013c <__udivsi3>
 800678e:	0003      	movs	r3, r0
 8006790:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b0f      	cmp	r3, #15
 8006796:	d90a      	bls.n	80067ae <UART_SetConfig+0x662>
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	025b      	lsls	r3, r3, #9
 800679e:	429a      	cmp	r2, r3
 80067a0:	d205      	bcs.n	80067ae <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e005      	b.n	80067ba <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	231a      	movs	r3, #26
 80067b0:	2220      	movs	r2, #32
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	19db      	adds	r3, r3, r7
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	226a      	movs	r2, #106	; 0x6a
 80067be:	2101      	movs	r1, #1
 80067c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2268      	movs	r2, #104	; 0x68
 80067c6:	2101      	movs	r1, #1
 80067c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2200      	movs	r2, #0
 80067ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2200      	movs	r2, #0
 80067d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067d6:	231a      	movs	r3, #26
 80067d8:	2220      	movs	r2, #32
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	19db      	adds	r3, r3, r7
 80067de:	781b      	ldrb	r3, [r3, #0]
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b010      	add	sp, #64	; 0x40
 80067e6:	bdb0      	pop	{r4, r5, r7, pc}
 80067e8:	40008000 	.word	0x40008000
 80067ec:	40008400 	.word	0x40008400
 80067f0:	00f42400 	.word	0x00f42400
 80067f4:	08009f24 	.word	0x08009f24

080067f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	2208      	movs	r2, #8
 8006806:	4013      	ands	r3, r2
 8006808:	d00b      	beq.n	8006822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a4a      	ldr	r2, [pc, #296]	; (800693c <UART_AdvFeatureConfig+0x144>)
 8006812:	4013      	ands	r3, r2
 8006814:	0019      	movs	r1, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	2201      	movs	r2, #1
 8006828:	4013      	ands	r3, r2
 800682a:	d00b      	beq.n	8006844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4a43      	ldr	r2, [pc, #268]	; (8006940 <UART_AdvFeatureConfig+0x148>)
 8006834:	4013      	ands	r3, r2
 8006836:	0019      	movs	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	2202      	movs	r2, #2
 800684a:	4013      	ands	r3, r2
 800684c:	d00b      	beq.n	8006866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4a3b      	ldr	r2, [pc, #236]	; (8006944 <UART_AdvFeatureConfig+0x14c>)
 8006856:	4013      	ands	r3, r2
 8006858:	0019      	movs	r1, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	2204      	movs	r2, #4
 800686c:	4013      	ands	r3, r2
 800686e:	d00b      	beq.n	8006888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4a34      	ldr	r2, [pc, #208]	; (8006948 <UART_AdvFeatureConfig+0x150>)
 8006878:	4013      	ands	r3, r2
 800687a:	0019      	movs	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	2210      	movs	r2, #16
 800688e:	4013      	ands	r3, r2
 8006890:	d00b      	beq.n	80068aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4a2c      	ldr	r2, [pc, #176]	; (800694c <UART_AdvFeatureConfig+0x154>)
 800689a:	4013      	ands	r3, r2
 800689c:	0019      	movs	r1, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	2220      	movs	r2, #32
 80068b0:	4013      	ands	r3, r2
 80068b2:	d00b      	beq.n	80068cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	4a25      	ldr	r2, [pc, #148]	; (8006950 <UART_AdvFeatureConfig+0x158>)
 80068bc:	4013      	ands	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	2240      	movs	r2, #64	; 0x40
 80068d2:	4013      	ands	r3, r2
 80068d4:	d01d      	beq.n	8006912 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <UART_AdvFeatureConfig+0x15c>)
 80068de:	4013      	ands	r3, r2
 80068e0:	0019      	movs	r1, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	035b      	lsls	r3, r3, #13
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d10b      	bne.n	8006912 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a15      	ldr	r2, [pc, #84]	; (8006958 <UART_AdvFeatureConfig+0x160>)
 8006902:	4013      	ands	r3, r2
 8006904:	0019      	movs	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	4013      	ands	r3, r2
 800691a:	d00b      	beq.n	8006934 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4a0e      	ldr	r2, [pc, #56]	; (800695c <UART_AdvFeatureConfig+0x164>)
 8006924:	4013      	ands	r3, r2
 8006926:	0019      	movs	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	b002      	add	sp, #8
 800693a:	bd80      	pop	{r7, pc}
 800693c:	ffff7fff 	.word	0xffff7fff
 8006940:	fffdffff 	.word	0xfffdffff
 8006944:	fffeffff 	.word	0xfffeffff
 8006948:	fffbffff 	.word	0xfffbffff
 800694c:	ffffefff 	.word	0xffffefff
 8006950:	ffffdfff 	.word	0xffffdfff
 8006954:	ffefffff 	.word	0xffefffff
 8006958:	ff9fffff 	.word	0xff9fffff
 800695c:	fff7ffff 	.word	0xfff7ffff

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b092      	sub	sp, #72	; 0x48
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2290      	movs	r2, #144	; 0x90
 800696c:	2100      	movs	r1, #0
 800696e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006970:	f7fd f9a2 	bl	8003cb8 <HAL_GetTick>
 8006974:	0003      	movs	r3, r0
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2208      	movs	r2, #8
 8006980:	4013      	ands	r3, r2
 8006982:	2b08      	cmp	r3, #8
 8006984:	d12d      	bne.n	80069e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	2280      	movs	r2, #128	; 0x80
 800698a:	0391      	lsls	r1, r2, #14
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4a47      	ldr	r2, [pc, #284]	; (8006aac <UART_CheckIdleState+0x14c>)
 8006990:	9200      	str	r2, [sp, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	f000 f88e 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006998:	1e03      	subs	r3, r0, #0
 800699a:	d022      	beq.n	80069e2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a6:	2301      	movs	r3, #1
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2180      	movs	r1, #128	; 0x80
 80069be:	438a      	bics	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2288      	movs	r2, #136	; 0x88
 80069d2:	2120      	movs	r1, #32
 80069d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2284      	movs	r2, #132	; 0x84
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e060      	b.n	8006aa4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2204      	movs	r2, #4
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d146      	bne.n	8006a7e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f2:	2280      	movs	r2, #128	; 0x80
 80069f4:	03d1      	lsls	r1, r2, #15
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <UART_CheckIdleState+0x14c>)
 80069fa:	9200      	str	r2, [sp, #0]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f000 f859 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d03b      	beq.n	8006a7e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a06:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a10:	2301      	movs	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f383 8810 	msr	PRIMASK, r3
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4922      	ldr	r1, [pc, #136]	; (8006ab0 <UART_CheckIdleState+0x150>)
 8006a28:	400a      	ands	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f383 8810 	msr	PRIMASK, r3
}
 8006a36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a38:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30
 8006a42:	2301      	movs	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2101      	movs	r1, #1
 8006a5a:	438a      	bics	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	228c      	movs	r2, #140	; 0x8c
 8006a6e:	2120      	movs	r1, #32
 8006a70:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2284      	movs	r2, #132	; 0x84
 8006a76:	2100      	movs	r1, #0
 8006a78:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e012      	b.n	8006aa4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2288      	movs	r2, #136	; 0x88
 8006a82:	2120      	movs	r1, #32
 8006a84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	228c      	movs	r2, #140	; 0x8c
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2284      	movs	r2, #132	; 0x84
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b010      	add	sp, #64	; 0x40
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	01ffffff 	.word	0x01ffffff
 8006ab0:	fffffedf 	.word	0xfffffedf

08006ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	1dfb      	adds	r3, r7, #7
 8006ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac4:	e051      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	d04e      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006acc:	f7fd f8f4 	bl	8003cb8 <HAL_GetTick>
 8006ad0:	0002      	movs	r2, r0
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e051      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2204      	movs	r2, #4
 8006aee:	4013      	ands	r3, r2
 8006af0:	d03b      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b80      	cmp	r3, #128	; 0x80
 8006af6:	d038      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d035      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	2208      	movs	r2, #8
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d111      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	0018      	movs	r0, r3
 8006b18:	f000 f83c 	bl	8006b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2290      	movs	r2, #144	; 0x90
 8006b20:	2108      	movs	r1, #8
 8006b22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2284      	movs	r2, #132	; 0x84
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e02c      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d112      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 f81f 	bl	8006b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2290      	movs	r2, #144	; 0x90
 8006b5a:	2120      	movs	r1, #32
 8006b5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2284      	movs	r2, #132	; 0x84
 8006b62:	2100      	movs	r1, #0
 8006b64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e00f      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	4013      	ands	r3, r2
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	425a      	negs	r2, r3
 8006b7a:	4153      	adcs	r3, r2
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	001a      	movs	r2, r3
 8006b80:	1dfb      	adds	r3, r7, #7
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d09e      	beq.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b004      	add	sp, #16
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	; 0x38
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ba2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4926      	ldr	r1, [pc, #152]	; (8006c58 <UART_EndRxTransfer+0xc4>)
 8006bbe:	400a      	ands	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	f383 8810 	msr	PRIMASK, r3
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bce:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd8:	2301      	movs	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	f383 8810 	msr	PRIMASK, r3
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	491b      	ldr	r1, [pc, #108]	; (8006c5c <UART_EndRxTransfer+0xc8>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f383 8810 	msr	PRIMASK, r3
}
 8006bfe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d118      	bne.n	8006c3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c08:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c12:	2301      	movs	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2110      	movs	r1, #16
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f383 8810 	msr	PRIMASK, r3
}
 8006c38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	228c      	movs	r2, #140	; 0x8c
 8006c3e:	2120      	movs	r1, #32
 8006c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b00e      	add	sp, #56	; 0x38
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	fffffedf 	.word	0xfffffedf
 8006c5c:	effffffe 	.word	0xeffffffe

08006c60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2284      	movs	r2, #132	; 0x84
 8006c6c:	5c9b      	ldrb	r3, [r3, r2]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e027      	b.n	8006cc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2284      	movs	r2, #132	; 0x84
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2288      	movs	r2, #136	; 0x88
 8006c82:	2124      	movs	r1, #36	; 0x24
 8006c84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2101      	movs	r1, #1
 8006c9a:	438a      	bics	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a0b      	ldr	r2, [pc, #44]	; (8006cd0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2288      	movs	r2, #136	; 0x88
 8006cb8:	2120      	movs	r1, #32
 8006cba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2284      	movs	r2, #132	; 0x84
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	dfffffff 	.word	0xdfffffff

08006cd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2284      	movs	r2, #132	; 0x84
 8006ce2:	5c9b      	ldrb	r3, [r3, r2]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e02e      	b.n	8006d4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2284      	movs	r2, #132	; 0x84
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2288      	movs	r2, #136	; 0x88
 8006cf8:	2124      	movs	r1, #36	; 0x24
 8006cfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	438a      	bics	r2, r1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	08d9      	lsrs	r1, r3, #3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f000 f854 	bl	8006dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2288      	movs	r2, #136	; 0x88
 8006d3c:	2120      	movs	r1, #32
 8006d3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2284      	movs	r2, #132	; 0x84
 8006d44:	2100      	movs	r1, #0
 8006d46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b004      	add	sp, #16
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2284      	movs	r2, #132	; 0x84
 8006d62:	5c9b      	ldrb	r3, [r3, r2]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e02f      	b.n	8006dcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2284      	movs	r2, #132	; 0x84
 8006d70:	2101      	movs	r1, #1
 8006d72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2288      	movs	r2, #136	; 0x88
 8006d78:	2124      	movs	r1, #36	; 0x24
 8006d7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2101      	movs	r1, #1
 8006d90:	438a      	bics	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	4a0e      	ldr	r2, [pc, #56]	; (8006dd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	0019      	movs	r1, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	0018      	movs	r0, r3
 8006dae:	f000 f813 	bl	8006dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2288      	movs	r2, #136	; 0x88
 8006dbe:	2120      	movs	r1, #32
 8006dc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2284      	movs	r2, #132	; 0x84
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b004      	add	sp, #16
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	f1ffffff 	.word	0xf1ffffff

08006dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d108      	bne.n	8006dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	226a      	movs	r2, #106	; 0x6a
 8006dec:	2101      	movs	r1, #1
 8006dee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2268      	movs	r2, #104	; 0x68
 8006df4:	2101      	movs	r1, #1
 8006df6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006df8:	e043      	b.n	8006e82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dfa:	260f      	movs	r6, #15
 8006dfc:	19bb      	adds	r3, r7, r6
 8006dfe:	2208      	movs	r2, #8
 8006e00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e02:	200e      	movs	r0, #14
 8006e04:	183b      	adds	r3, r7, r0
 8006e06:	2208      	movs	r2, #8
 8006e08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	0e5b      	lsrs	r3, r3, #25
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	240d      	movs	r4, #13
 8006e16:	193b      	adds	r3, r7, r4
 8006e18:	2107      	movs	r1, #7
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	0f5b      	lsrs	r3, r3, #29
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	250c      	movs	r5, #12
 8006e2a:	197b      	adds	r3, r7, r5
 8006e2c:	2107      	movs	r1, #7
 8006e2e:	400a      	ands	r2, r1
 8006e30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e32:	183b      	adds	r3, r7, r0
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	197a      	adds	r2, r7, r5
 8006e38:	7812      	ldrb	r2, [r2, #0]
 8006e3a:	4914      	ldr	r1, [pc, #80]	; (8006e8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006e3c:	5c8a      	ldrb	r2, [r1, r2]
 8006e3e:	435a      	muls	r2, r3
 8006e40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e42:	197b      	adds	r3, r7, r5
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	f7f9 fa00 	bl	8000250 <__divsi3>
 8006e50:	0003      	movs	r3, r0
 8006e52:	b299      	uxth	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	226a      	movs	r2, #106	; 0x6a
 8006e58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e5a:	19bb      	adds	r3, r7, r6
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	193a      	adds	r2, r7, r4
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	490a      	ldr	r1, [pc, #40]	; (8006e8c <UARTEx_SetNbDataToProcess+0xb4>)
 8006e64:	5c8a      	ldrb	r2, [r1, r2]
 8006e66:	435a      	muls	r2, r3
 8006e68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e6a:	193b      	adds	r3, r7, r4
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e72:	0019      	movs	r1, r3
 8006e74:	f7f9 f9ec 	bl	8000250 <__divsi3>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	b299      	uxth	r1, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2268      	movs	r2, #104	; 0x68
 8006e80:	5299      	strh	r1, [r3, r2]
}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	46bd      	mov	sp, r7
 8006e86:	b005      	add	sp, #20
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	08009f3c 	.word	0x08009f3c
 8006e90:	08009f44 	.word	0x08009f44

08006e94 <__cvt>:
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	001e      	movs	r6, r3
 8006e98:	2300      	movs	r3, #0
 8006e9a:	0014      	movs	r4, r2
 8006e9c:	b08b      	sub	sp, #44	; 0x2c
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	da04      	bge.n	8006eac <__cvt+0x18>
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	0609      	lsls	r1, r1, #24
 8006ea6:	1873      	adds	r3, r6, r1
 8006ea8:	001e      	movs	r6, r3
 8006eaa:	232d      	movs	r3, #45	; 0x2d
 8006eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006eae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006eb0:	7013      	strb	r3, [r2, #0]
 8006eb2:	2320      	movs	r3, #32
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	439f      	bics	r7, r3
 8006eb8:	2f46      	cmp	r7, #70	; 0x46
 8006eba:	d007      	beq.n	8006ecc <__cvt+0x38>
 8006ebc:	003b      	movs	r3, r7
 8006ebe:	3b45      	subs	r3, #69	; 0x45
 8006ec0:	4259      	negs	r1, r3
 8006ec2:	414b      	adcs	r3, r1
 8006ec4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	18cb      	adds	r3, r1, r3
 8006eca:	9310      	str	r3, [sp, #64]	; 0x40
 8006ecc:	ab09      	add	r3, sp, #36	; 0x24
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	ab08      	add	r3, sp, #32
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed6:	9200      	str	r2, [sp, #0]
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006edc:	0022      	movs	r2, r4
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	0033      	movs	r3, r6
 8006ee2:	f000 fea7 	bl	8007c34 <_dtoa_r>
 8006ee6:	0005      	movs	r5, r0
 8006ee8:	2f47      	cmp	r7, #71	; 0x47
 8006eea:	d102      	bne.n	8006ef2 <__cvt+0x5e>
 8006eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eee:	07db      	lsls	r3, r3, #31
 8006ef0:	d528      	bpl.n	8006f44 <__cvt+0xb0>
 8006ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ef4:	18eb      	adds	r3, r5, r3
 8006ef6:	9307      	str	r3, [sp, #28]
 8006ef8:	2f46      	cmp	r7, #70	; 0x46
 8006efa:	d114      	bne.n	8006f26 <__cvt+0x92>
 8006efc:	782b      	ldrb	r3, [r5, #0]
 8006efe:	2b30      	cmp	r3, #48	; 0x30
 8006f00:	d10c      	bne.n	8006f1c <__cvt+0x88>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	0020      	movs	r0, r4
 8006f08:	0031      	movs	r1, r6
 8006f0a:	f7f9 fa9d 	bl	8000448 <__aeabi_dcmpeq>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d104      	bne.n	8006f1c <__cvt+0x88>
 8006f12:	2301      	movs	r3, #1
 8006f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f1e:	9a07      	ldr	r2, [sp, #28]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	18d3      	adds	r3, r2, r3
 8006f24:	9307      	str	r3, [sp, #28]
 8006f26:	2200      	movs	r2, #0
 8006f28:	2300      	movs	r3, #0
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	0031      	movs	r1, r6
 8006f2e:	f7f9 fa8b 	bl	8000448 <__aeabi_dcmpeq>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d001      	beq.n	8006f3a <__cvt+0xa6>
 8006f36:	9b07      	ldr	r3, [sp, #28]
 8006f38:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3a:	2230      	movs	r2, #48	; 0x30
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	9907      	ldr	r1, [sp, #28]
 8006f40:	428b      	cmp	r3, r1
 8006f42:	d306      	bcc.n	8006f52 <__cvt+0xbe>
 8006f44:	0028      	movs	r0, r5
 8006f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f4a:	1b5b      	subs	r3, r3, r5
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	b00b      	add	sp, #44	; 0x2c
 8006f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	9109      	str	r1, [sp, #36]	; 0x24
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e7f0      	b.n	8006f3c <__cvt+0xa8>

08006f5a <__exponent>:
 8006f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5c:	1c83      	adds	r3, r0, #2
 8006f5e:	b087      	sub	sp, #28
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	0005      	movs	r5, r0
 8006f64:	000c      	movs	r4, r1
 8006f66:	232b      	movs	r3, #43	; 0x2b
 8006f68:	7002      	strb	r2, [r0, #0]
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	da01      	bge.n	8006f72 <__exponent+0x18>
 8006f6e:	424c      	negs	r4, r1
 8006f70:	3302      	adds	r3, #2
 8006f72:	706b      	strb	r3, [r5, #1]
 8006f74:	2c09      	cmp	r4, #9
 8006f76:	dd2f      	ble.n	8006fd8 <__exponent+0x7e>
 8006f78:	270a      	movs	r7, #10
 8006f7a:	ab04      	add	r3, sp, #16
 8006f7c:	1dde      	adds	r6, r3, #7
 8006f7e:	0020      	movs	r0, r4
 8006f80:	0039      	movs	r1, r7
 8006f82:	9601      	str	r6, [sp, #4]
 8006f84:	f7f9 fa4a 	bl	800041c <__aeabi_idivmod>
 8006f88:	3e01      	subs	r6, #1
 8006f8a:	3130      	adds	r1, #48	; 0x30
 8006f8c:	0020      	movs	r0, r4
 8006f8e:	7031      	strb	r1, [r6, #0]
 8006f90:	0039      	movs	r1, r7
 8006f92:	9402      	str	r4, [sp, #8]
 8006f94:	f7f9 f95c 	bl	8000250 <__divsi3>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	0004      	movs	r4, r0
 8006f9c:	2b63      	cmp	r3, #99	; 0x63
 8006f9e:	dcee      	bgt.n	8006f7e <__exponent+0x24>
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	3430      	adds	r4, #48	; 0x30
 8006fa4:	1e9a      	subs	r2, r3, #2
 8006fa6:	0013      	movs	r3, r2
 8006fa8:	9903      	ldr	r1, [sp, #12]
 8006faa:	7014      	strb	r4, [r2, #0]
 8006fac:	a804      	add	r0, sp, #16
 8006fae:	3007      	adds	r0, #7
 8006fb0:	4298      	cmp	r0, r3
 8006fb2:	d80c      	bhi.n	8006fce <__exponent+0x74>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4282      	cmp	r2, r0
 8006fb8:	d804      	bhi.n	8006fc4 <__exponent+0x6a>
 8006fba:	aa04      	add	r2, sp, #16
 8006fbc:	3309      	adds	r3, #9
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	9a01      	ldr	r2, [sp, #4]
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	9a03      	ldr	r2, [sp, #12]
 8006fc6:	18d3      	adds	r3, r2, r3
 8006fc8:	1b58      	subs	r0, r3, r5
 8006fca:	b007      	add	sp, #28
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	7818      	ldrb	r0, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	7008      	strb	r0, [r1, #0]
 8006fd4:	3101      	adds	r1, #1
 8006fd6:	e7e9      	b.n	8006fac <__exponent+0x52>
 8006fd8:	2330      	movs	r3, #48	; 0x30
 8006fda:	3430      	adds	r4, #48	; 0x30
 8006fdc:	70ab      	strb	r3, [r5, #2]
 8006fde:	70ec      	strb	r4, [r5, #3]
 8006fe0:	1d2b      	adds	r3, r5, #4
 8006fe2:	e7f1      	b.n	8006fc8 <__exponent+0x6e>

08006fe4 <_printf_float>:
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	b095      	sub	sp, #84	; 0x54
 8006fe8:	000c      	movs	r4, r1
 8006fea:	9208      	str	r2, [sp, #32]
 8006fec:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	0007      	movs	r7, r0
 8006ff2:	f000 fd05 	bl	8007a00 <_localeconv_r>
 8006ff6:	6803      	ldr	r3, [r0, #0]
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8006ffc:	f7f9 f882 	bl	8000104 <strlen>
 8007000:	2300      	movs	r3, #0
 8007002:	9312      	str	r3, [sp, #72]	; 0x48
 8007004:	7e23      	ldrb	r3, [r4, #24]
 8007006:	2207      	movs	r2, #7
 8007008:	930a      	str	r3, [sp, #40]	; 0x28
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	900d      	str	r0, [sp, #52]	; 0x34
 800700e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	05c9      	lsls	r1, r1, #23
 8007016:	d547      	bpl.n	80070a8 <_printf_float+0xc4>
 8007018:	189b      	adds	r3, r3, r2
 800701a:	4393      	bics	r3, r2
 800701c:	001a      	movs	r2, r3
 800701e:	3208      	adds	r2, #8
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	681e      	ldr	r6, [r3, #0]
 8007024:	685d      	ldr	r5, [r3, #4]
 8007026:	0032      	movs	r2, r6
 8007028:	002b      	movs	r3, r5
 800702a:	64a2      	str	r2, [r4, #72]	; 0x48
 800702c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800702e:	2201      	movs	r2, #1
 8007030:	006b      	lsls	r3, r5, #1
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	930e      	str	r3, [sp, #56]	; 0x38
 8007036:	0030      	movs	r0, r6
 8007038:	4bab      	ldr	r3, [pc, #684]	; (80072e8 <_printf_float+0x304>)
 800703a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800703c:	4252      	negs	r2, r2
 800703e:	f7fb fa67 	bl	8002510 <__aeabi_dcmpun>
 8007042:	2800      	cmp	r0, #0
 8007044:	d132      	bne.n	80070ac <_printf_float+0xc8>
 8007046:	2201      	movs	r2, #1
 8007048:	0030      	movs	r0, r6
 800704a:	4ba7      	ldr	r3, [pc, #668]	; (80072e8 <_printf_float+0x304>)
 800704c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800704e:	4252      	negs	r2, r2
 8007050:	f7f9 fa0a 	bl	8000468 <__aeabi_dcmple>
 8007054:	2800      	cmp	r0, #0
 8007056:	d129      	bne.n	80070ac <_printf_float+0xc8>
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	0030      	movs	r0, r6
 800705e:	0029      	movs	r1, r5
 8007060:	f7f9 f9f8 	bl	8000454 <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d003      	beq.n	8007070 <_printf_float+0x8c>
 8007068:	0023      	movs	r3, r4
 800706a:	222d      	movs	r2, #45	; 0x2d
 800706c:	3343      	adds	r3, #67	; 0x43
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007072:	4d9e      	ldr	r5, [pc, #632]	; (80072ec <_printf_float+0x308>)
 8007074:	2b47      	cmp	r3, #71	; 0x47
 8007076:	d900      	bls.n	800707a <_printf_float+0x96>
 8007078:	4d9d      	ldr	r5, [pc, #628]	; (80072f0 <_printf_float+0x30c>)
 800707a:	2303      	movs	r3, #3
 800707c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	439a      	bics	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	930b      	str	r3, [sp, #44]	; 0x2c
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	0021      	movs	r1, r4
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	0038      	movs	r0, r7
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	aa13      	add	r2, sp, #76	; 0x4c
 8007096:	f000 f9fb 	bl	8007490 <_printf_common>
 800709a:	3001      	adds	r0, #1
 800709c:	d000      	beq.n	80070a0 <_printf_float+0xbc>
 800709e:	e0a3      	b.n	80071e8 <_printf_float+0x204>
 80070a0:	2001      	movs	r0, #1
 80070a2:	4240      	negs	r0, r0
 80070a4:	b015      	add	sp, #84	; 0x54
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a8:	3307      	adds	r3, #7
 80070aa:	e7b6      	b.n	800701a <_printf_float+0x36>
 80070ac:	0032      	movs	r2, r6
 80070ae:	002b      	movs	r3, r5
 80070b0:	0030      	movs	r0, r6
 80070b2:	0029      	movs	r1, r5
 80070b4:	f7fb fa2c 	bl	8002510 <__aeabi_dcmpun>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d00b      	beq.n	80070d4 <_printf_float+0xf0>
 80070bc:	2d00      	cmp	r5, #0
 80070be:	da03      	bge.n	80070c8 <_printf_float+0xe4>
 80070c0:	0023      	movs	r3, r4
 80070c2:	222d      	movs	r2, #45	; 0x2d
 80070c4:	3343      	adds	r3, #67	; 0x43
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	4d8a      	ldr	r5, [pc, #552]	; (80072f4 <_printf_float+0x310>)
 80070cc:	2b47      	cmp	r3, #71	; 0x47
 80070ce:	d9d4      	bls.n	800707a <_printf_float+0x96>
 80070d0:	4d89      	ldr	r5, [pc, #548]	; (80072f8 <_printf_float+0x314>)
 80070d2:	e7d2      	b.n	800707a <_printf_float+0x96>
 80070d4:	2220      	movs	r2, #32
 80070d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	4391      	bics	r1, r2
 80070dc:	910e      	str	r1, [sp, #56]	; 0x38
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	d14a      	bne.n	8007178 <_printf_float+0x194>
 80070e2:	3307      	adds	r3, #7
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4313      	orrs	r3, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	9206      	str	r2, [sp, #24]
 80070f2:	aa12      	add	r2, sp, #72	; 0x48
 80070f4:	9205      	str	r2, [sp, #20]
 80070f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	9204      	str	r2, [sp, #16]
 80070fc:	aa11      	add	r2, sp, #68	; 0x44
 80070fe:	9203      	str	r2, [sp, #12]
 8007100:	2223      	movs	r2, #35	; 0x23
 8007102:	a908      	add	r1, sp, #32
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	6863      	ldr	r3, [r4, #4]
 8007108:	1852      	adds	r2, r2, r1
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	0032      	movs	r2, r6
 8007110:	002b      	movs	r3, r5
 8007112:	0038      	movs	r0, r7
 8007114:	f7ff febe 	bl	8006e94 <__cvt>
 8007118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800711a:	0005      	movs	r5, r0
 800711c:	2b47      	cmp	r3, #71	; 0x47
 800711e:	d109      	bne.n	8007134 <_printf_float+0x150>
 8007120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007122:	1cda      	adds	r2, r3, #3
 8007124:	db02      	blt.n	800712c <_printf_float+0x148>
 8007126:	6862      	ldr	r2, [r4, #4]
 8007128:	4293      	cmp	r3, r2
 800712a:	dd49      	ble.n	80071c0 <_printf_float+0x1dc>
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	3b02      	subs	r3, #2
 8007130:	b2db      	uxtb	r3, r3
 8007132:	930a      	str	r3, [sp, #40]	; 0x28
 8007134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007136:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007138:	2b65      	cmp	r3, #101	; 0x65
 800713a:	d824      	bhi.n	8007186 <_printf_float+0x1a2>
 800713c:	0020      	movs	r0, r4
 800713e:	001a      	movs	r2, r3
 8007140:	3901      	subs	r1, #1
 8007142:	3050      	adds	r0, #80	; 0x50
 8007144:	9111      	str	r1, [sp, #68]	; 0x44
 8007146:	f7ff ff08 	bl	8006f5a <__exponent>
 800714a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800714c:	900b      	str	r0, [sp, #44]	; 0x2c
 800714e:	1813      	adds	r3, r2, r0
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	2a01      	cmp	r2, #1
 8007154:	dc02      	bgt.n	800715c <_printf_float+0x178>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	07d2      	lsls	r2, r2, #31
 800715a:	d501      	bpl.n	8007160 <_printf_float+0x17c>
 800715c:	3301      	adds	r3, #1
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	2323      	movs	r3, #35	; 0x23
 8007162:	aa08      	add	r2, sp, #32
 8007164:	189b      	adds	r3, r3, r2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d100      	bne.n	800716e <_printf_float+0x18a>
 800716c:	e78d      	b.n	800708a <_printf_float+0xa6>
 800716e:	0023      	movs	r3, r4
 8007170:	222d      	movs	r2, #45	; 0x2d
 8007172:	3343      	adds	r3, #67	; 0x43
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e788      	b.n	800708a <_printf_float+0xa6>
 8007178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800717a:	2a47      	cmp	r2, #71	; 0x47
 800717c:	d1b3      	bne.n	80070e6 <_printf_float+0x102>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1b1      	bne.n	80070e6 <_printf_float+0x102>
 8007182:	3301      	adds	r3, #1
 8007184:	e7ae      	b.n	80070e4 <_printf_float+0x100>
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	2b66      	cmp	r3, #102	; 0x66
 800718a:	d11b      	bne.n	80071c4 <_printf_float+0x1e0>
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	2900      	cmp	r1, #0
 8007190:	dd09      	ble.n	80071a6 <_printf_float+0x1c2>
 8007192:	6121      	str	r1, [r4, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d102      	bne.n	800719e <_printf_float+0x1ba>
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	07d2      	lsls	r2, r2, #31
 800719c:	d50b      	bpl.n	80071b6 <_printf_float+0x1d2>
 800719e:	3301      	adds	r3, #1
 80071a0:	185b      	adds	r3, r3, r1
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	e007      	b.n	80071b6 <_printf_float+0x1d2>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <_printf_float+0x1ce>
 80071aa:	2201      	movs	r2, #1
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	4211      	tst	r1, r2
 80071b0:	d000      	beq.n	80071b4 <_printf_float+0x1d0>
 80071b2:	1c9a      	adds	r2, r3, #2
 80071b4:	6122      	str	r2, [r4, #16]
 80071b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80071ba:	2300      	movs	r3, #0
 80071bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80071be:	e7cf      	b.n	8007160 <_printf_float+0x17c>
 80071c0:	2367      	movs	r3, #103	; 0x67
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071c8:	4299      	cmp	r1, r3
 80071ca:	db06      	blt.n	80071da <_printf_float+0x1f6>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	6121      	str	r1, [r4, #16]
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d5f0      	bpl.n	80071b6 <_printf_float+0x1d2>
 80071d4:	3101      	adds	r1, #1
 80071d6:	6121      	str	r1, [r4, #16]
 80071d8:	e7ed      	b.n	80071b6 <_printf_float+0x1d2>
 80071da:	2201      	movs	r2, #1
 80071dc:	2900      	cmp	r1, #0
 80071de:	dc01      	bgt.n	80071e4 <_printf_float+0x200>
 80071e0:	1892      	adds	r2, r2, r2
 80071e2:	1a52      	subs	r2, r2, r1
 80071e4:	189b      	adds	r3, r3, r2
 80071e6:	e7dc      	b.n	80071a2 <_printf_float+0x1be>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	0553      	lsls	r3, r2, #21
 80071ec:	d408      	bmi.n	8007200 <_printf_float+0x21c>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	002a      	movs	r2, r5
 80071f2:	0038      	movs	r0, r7
 80071f4:	9908      	ldr	r1, [sp, #32]
 80071f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071f8:	47a8      	blx	r5
 80071fa:	3001      	adds	r0, #1
 80071fc:	d12a      	bne.n	8007254 <_printf_float+0x270>
 80071fe:	e74f      	b.n	80070a0 <_printf_float+0xbc>
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	2b65      	cmp	r3, #101	; 0x65
 8007204:	d800      	bhi.n	8007208 <_printf_float+0x224>
 8007206:	e0ec      	b.n	80073e2 <_printf_float+0x3fe>
 8007208:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800720a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800720c:	2200      	movs	r2, #0
 800720e:	2300      	movs	r3, #0
 8007210:	f7f9 f91a 	bl	8000448 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d034      	beq.n	8007282 <_printf_float+0x29e>
 8007218:	2301      	movs	r3, #1
 800721a:	0038      	movs	r0, r7
 800721c:	4a37      	ldr	r2, [pc, #220]	; (80072fc <_printf_float+0x318>)
 800721e:	9908      	ldr	r1, [sp, #32]
 8007220:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007222:	47a8      	blx	r5
 8007224:	3001      	adds	r0, #1
 8007226:	d100      	bne.n	800722a <_printf_float+0x246>
 8007228:	e73a      	b.n	80070a0 <_printf_float+0xbc>
 800722a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800722c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800722e:	429a      	cmp	r2, r3
 8007230:	db02      	blt.n	8007238 <_printf_float+0x254>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	07db      	lsls	r3, r3, #31
 8007236:	d50d      	bpl.n	8007254 <_printf_float+0x270>
 8007238:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800723a:	0038      	movs	r0, r7
 800723c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800723e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007240:	9908      	ldr	r1, [sp, #32]
 8007242:	47a8      	blx	r5
 8007244:	2500      	movs	r5, #0
 8007246:	3001      	adds	r0, #1
 8007248:	d100      	bne.n	800724c <_printf_float+0x268>
 800724a:	e729      	b.n	80070a0 <_printf_float+0xbc>
 800724c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800724e:	3b01      	subs	r3, #1
 8007250:	42ab      	cmp	r3, r5
 8007252:	dc0a      	bgt.n	800726a <_printf_float+0x286>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	079b      	lsls	r3, r3, #30
 8007258:	d500      	bpl.n	800725c <_printf_float+0x278>
 800725a:	e116      	b.n	800748a <_printf_float+0x4a6>
 800725c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	4298      	cmp	r0, r3
 8007262:	db00      	blt.n	8007266 <_printf_float+0x282>
 8007264:	e71e      	b.n	80070a4 <_printf_float+0xc0>
 8007266:	0018      	movs	r0, r3
 8007268:	e71c      	b.n	80070a4 <_printf_float+0xc0>
 800726a:	0022      	movs	r2, r4
 800726c:	2301      	movs	r3, #1
 800726e:	0038      	movs	r0, r7
 8007270:	9908      	ldr	r1, [sp, #32]
 8007272:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007274:	321a      	adds	r2, #26
 8007276:	47b0      	blx	r6
 8007278:	3001      	adds	r0, #1
 800727a:	d100      	bne.n	800727e <_printf_float+0x29a>
 800727c:	e710      	b.n	80070a0 <_printf_float+0xbc>
 800727e:	3501      	adds	r5, #1
 8007280:	e7e4      	b.n	800724c <_printf_float+0x268>
 8007282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc3b      	bgt.n	8007300 <_printf_float+0x31c>
 8007288:	2301      	movs	r3, #1
 800728a:	0038      	movs	r0, r7
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <_printf_float+0x318>)
 800728e:	9908      	ldr	r1, [sp, #32]
 8007290:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007292:	47b0      	blx	r6
 8007294:	3001      	adds	r0, #1
 8007296:	d100      	bne.n	800729a <_printf_float+0x2b6>
 8007298:	e702      	b.n	80070a0 <_printf_float+0xbc>
 800729a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800729c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800729e:	4313      	orrs	r3, r2
 80072a0:	d102      	bne.n	80072a8 <_printf_float+0x2c4>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	07db      	lsls	r3, r3, #31
 80072a6:	d5d5      	bpl.n	8007254 <_printf_float+0x270>
 80072a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072aa:	0038      	movs	r0, r7
 80072ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ae:	9908      	ldr	r1, [sp, #32]
 80072b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072b2:	47b0      	blx	r6
 80072b4:	2300      	movs	r3, #0
 80072b6:	3001      	adds	r0, #1
 80072b8:	d100      	bne.n	80072bc <_printf_float+0x2d8>
 80072ba:	e6f1      	b.n	80070a0 <_printf_float+0xbc>
 80072bc:	930a      	str	r3, [sp, #40]	; 0x28
 80072be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c2:	425b      	negs	r3, r3
 80072c4:	4293      	cmp	r3, r2
 80072c6:	dc01      	bgt.n	80072cc <_printf_float+0x2e8>
 80072c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ca:	e791      	b.n	80071f0 <_printf_float+0x20c>
 80072cc:	0022      	movs	r2, r4
 80072ce:	2301      	movs	r3, #1
 80072d0:	0038      	movs	r0, r7
 80072d2:	9908      	ldr	r1, [sp, #32]
 80072d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072d6:	321a      	adds	r2, #26
 80072d8:	47b0      	blx	r6
 80072da:	3001      	adds	r0, #1
 80072dc:	d100      	bne.n	80072e0 <_printf_float+0x2fc>
 80072de:	e6df      	b.n	80070a0 <_printf_float+0xbc>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	3301      	adds	r3, #1
 80072e4:	e7ea      	b.n	80072bc <_printf_float+0x2d8>
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	7fefffff 	.word	0x7fefffff
 80072ec:	08009f4c 	.word	0x08009f4c
 80072f0:	08009f50 	.word	0x08009f50
 80072f4:	08009f54 	.word	0x08009f54
 80072f8:	08009f58 	.word	0x08009f58
 80072fc:	08009f5c 	.word	0x08009f5c
 8007300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007304:	920a      	str	r2, [sp, #40]	; 0x28
 8007306:	429a      	cmp	r2, r3
 8007308:	dd00      	ble.n	800730c <_printf_float+0x328>
 800730a:	930a      	str	r3, [sp, #40]	; 0x28
 800730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	dc3d      	bgt.n	800738e <_printf_float+0x3aa>
 8007312:	2300      	movs	r3, #0
 8007314:	930e      	str	r3, [sp, #56]	; 0x38
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	43db      	mvns	r3, r3
 800731a:	17db      	asrs	r3, r3, #31
 800731c:	930f      	str	r3, [sp, #60]	; 0x3c
 800731e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007322:	930b      	str	r3, [sp, #44]	; 0x2c
 8007324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007326:	4013      	ands	r3, r2
 8007328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732e:	4293      	cmp	r3, r2
 8007330:	dc36      	bgt.n	80073a0 <_printf_float+0x3bc>
 8007332:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007336:	429a      	cmp	r2, r3
 8007338:	db40      	blt.n	80073bc <_printf_float+0x3d8>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	07db      	lsls	r3, r3, #31
 800733e:	d43d      	bmi.n	80073bc <_printf_float+0x3d8>
 8007340:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007342:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007346:	1af3      	subs	r3, r6, r3
 8007348:	1ab6      	subs	r6, r6, r2
 800734a:	429e      	cmp	r6, r3
 800734c:	dd00      	ble.n	8007350 <_printf_float+0x36c>
 800734e:	001e      	movs	r6, r3
 8007350:	2e00      	cmp	r6, #0
 8007352:	dc3c      	bgt.n	80073ce <_printf_float+0x3ea>
 8007354:	2300      	movs	r3, #0
 8007356:	930a      	str	r3, [sp, #40]	; 0x28
 8007358:	43f3      	mvns	r3, r6
 800735a:	17db      	asrs	r3, r3, #31
 800735c:	930b      	str	r3, [sp, #44]	; 0x2c
 800735e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007362:	1a9b      	subs	r3, r3, r2
 8007364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007366:	4032      	ands	r2, r6
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	4293      	cmp	r3, r2
 800736e:	dc00      	bgt.n	8007372 <_printf_float+0x38e>
 8007370:	e770      	b.n	8007254 <_printf_float+0x270>
 8007372:	0022      	movs	r2, r4
 8007374:	2301      	movs	r3, #1
 8007376:	0038      	movs	r0, r7
 8007378:	9908      	ldr	r1, [sp, #32]
 800737a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800737c:	321a      	adds	r2, #26
 800737e:	47a8      	blx	r5
 8007380:	3001      	adds	r0, #1
 8007382:	d100      	bne.n	8007386 <_printf_float+0x3a2>
 8007384:	e68c      	b.n	80070a0 <_printf_float+0xbc>
 8007386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007388:	3301      	adds	r3, #1
 800738a:	930a      	str	r3, [sp, #40]	; 0x28
 800738c:	e7e7      	b.n	800735e <_printf_float+0x37a>
 800738e:	002a      	movs	r2, r5
 8007390:	0038      	movs	r0, r7
 8007392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007394:	9908      	ldr	r1, [sp, #32]
 8007396:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007398:	47b0      	blx	r6
 800739a:	3001      	adds	r0, #1
 800739c:	d1b9      	bne.n	8007312 <_printf_float+0x32e>
 800739e:	e67f      	b.n	80070a0 <_printf_float+0xbc>
 80073a0:	0022      	movs	r2, r4
 80073a2:	2301      	movs	r3, #1
 80073a4:	0038      	movs	r0, r7
 80073a6:	9908      	ldr	r1, [sp, #32]
 80073a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073aa:	321a      	adds	r2, #26
 80073ac:	47b0      	blx	r6
 80073ae:	3001      	adds	r0, #1
 80073b0:	d100      	bne.n	80073b4 <_printf_float+0x3d0>
 80073b2:	e675      	b.n	80070a0 <_printf_float+0xbc>
 80073b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b6:	3301      	adds	r3, #1
 80073b8:	930e      	str	r3, [sp, #56]	; 0x38
 80073ba:	e7b0      	b.n	800731e <_printf_float+0x33a>
 80073bc:	0038      	movs	r0, r7
 80073be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c2:	9908      	ldr	r1, [sp, #32]
 80073c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073c6:	47b0      	blx	r6
 80073c8:	3001      	adds	r0, #1
 80073ca:	d1b9      	bne.n	8007340 <_printf_float+0x35c>
 80073cc:	e668      	b.n	80070a0 <_printf_float+0xbc>
 80073ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d0:	0038      	movs	r0, r7
 80073d2:	18ea      	adds	r2, r5, r3
 80073d4:	9908      	ldr	r1, [sp, #32]
 80073d6:	0033      	movs	r3, r6
 80073d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073da:	47a8      	blx	r5
 80073dc:	3001      	adds	r0, #1
 80073de:	d1b9      	bne.n	8007354 <_printf_float+0x370>
 80073e0:	e65e      	b.n	80070a0 <_printf_float+0xbc>
 80073e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	dc02      	bgt.n	80073ee <_printf_float+0x40a>
 80073e8:	2301      	movs	r3, #1
 80073ea:	421a      	tst	r2, r3
 80073ec:	d03a      	beq.n	8007464 <_printf_float+0x480>
 80073ee:	2301      	movs	r3, #1
 80073f0:	002a      	movs	r2, r5
 80073f2:	0038      	movs	r0, r7
 80073f4:	9908      	ldr	r1, [sp, #32]
 80073f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073f8:	47b0      	blx	r6
 80073fa:	3001      	adds	r0, #1
 80073fc:	d100      	bne.n	8007400 <_printf_float+0x41c>
 80073fe:	e64f      	b.n	80070a0 <_printf_float+0xbc>
 8007400:	0038      	movs	r0, r7
 8007402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007406:	9908      	ldr	r1, [sp, #32]
 8007408:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800740a:	47b0      	blx	r6
 800740c:	3001      	adds	r0, #1
 800740e:	d100      	bne.n	8007412 <_printf_float+0x42e>
 8007410:	e646      	b.n	80070a0 <_printf_float+0xbc>
 8007412:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007414:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007418:	2200      	movs	r2, #0
 800741a:	001e      	movs	r6, r3
 800741c:	2300      	movs	r3, #0
 800741e:	f7f9 f813 	bl	8000448 <__aeabi_dcmpeq>
 8007422:	2800      	cmp	r0, #0
 8007424:	d11c      	bne.n	8007460 <_printf_float+0x47c>
 8007426:	0033      	movs	r3, r6
 8007428:	1c6a      	adds	r2, r5, #1
 800742a:	3b01      	subs	r3, #1
 800742c:	0038      	movs	r0, r7
 800742e:	9908      	ldr	r1, [sp, #32]
 8007430:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007432:	47a8      	blx	r5
 8007434:	3001      	adds	r0, #1
 8007436:	d10f      	bne.n	8007458 <_printf_float+0x474>
 8007438:	e632      	b.n	80070a0 <_printf_float+0xbc>
 800743a:	0022      	movs	r2, r4
 800743c:	2301      	movs	r3, #1
 800743e:	0038      	movs	r0, r7
 8007440:	9908      	ldr	r1, [sp, #32]
 8007442:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007444:	321a      	adds	r2, #26
 8007446:	47b0      	blx	r6
 8007448:	3001      	adds	r0, #1
 800744a:	d100      	bne.n	800744e <_printf_float+0x46a>
 800744c:	e628      	b.n	80070a0 <_printf_float+0xbc>
 800744e:	3501      	adds	r5, #1
 8007450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007452:	3b01      	subs	r3, #1
 8007454:	42ab      	cmp	r3, r5
 8007456:	dcf0      	bgt.n	800743a <_printf_float+0x456>
 8007458:	0022      	movs	r2, r4
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	3250      	adds	r2, #80	; 0x50
 800745e:	e6c8      	b.n	80071f2 <_printf_float+0x20e>
 8007460:	2500      	movs	r5, #0
 8007462:	e7f5      	b.n	8007450 <_printf_float+0x46c>
 8007464:	002a      	movs	r2, r5
 8007466:	e7e1      	b.n	800742c <_printf_float+0x448>
 8007468:	0022      	movs	r2, r4
 800746a:	2301      	movs	r3, #1
 800746c:	0038      	movs	r0, r7
 800746e:	9908      	ldr	r1, [sp, #32]
 8007470:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007472:	3219      	adds	r2, #25
 8007474:	47b0      	blx	r6
 8007476:	3001      	adds	r0, #1
 8007478:	d100      	bne.n	800747c <_printf_float+0x498>
 800747a:	e611      	b.n	80070a0 <_printf_float+0xbc>
 800747c:	3501      	adds	r5, #1
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	42ab      	cmp	r3, r5
 8007486:	dcef      	bgt.n	8007468 <_printf_float+0x484>
 8007488:	e6e8      	b.n	800725c <_printf_float+0x278>
 800748a:	2500      	movs	r5, #0
 800748c:	e7f7      	b.n	800747e <_printf_float+0x49a>
 800748e:	46c0      	nop			; (mov r8, r8)

08007490 <_printf_common>:
 8007490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007492:	0016      	movs	r6, r2
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	688a      	ldr	r2, [r1, #8]
 8007498:	690b      	ldr	r3, [r1, #16]
 800749a:	000c      	movs	r4, r1
 800749c:	9000      	str	r0, [sp, #0]
 800749e:	4293      	cmp	r3, r2
 80074a0:	da00      	bge.n	80074a4 <_printf_common+0x14>
 80074a2:	0013      	movs	r3, r2
 80074a4:	0022      	movs	r2, r4
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	3243      	adds	r2, #67	; 0x43
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	d001      	beq.n	80074b4 <_printf_common+0x24>
 80074b0:	3301      	adds	r3, #1
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	069b      	lsls	r3, r3, #26
 80074b8:	d502      	bpl.n	80074c0 <_printf_common+0x30>
 80074ba:	6833      	ldr	r3, [r6, #0]
 80074bc:	3302      	adds	r3, #2
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	2306      	movs	r3, #6
 80074c4:	0015      	movs	r5, r2
 80074c6:	401d      	ands	r5, r3
 80074c8:	421a      	tst	r2, r3
 80074ca:	d027      	beq.n	800751c <_printf_common+0x8c>
 80074cc:	0023      	movs	r3, r4
 80074ce:	3343      	adds	r3, #67	; 0x43
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	1e5a      	subs	r2, r3, #1
 80074d4:	4193      	sbcs	r3, r2
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	0692      	lsls	r2, r2, #26
 80074da:	d430      	bmi.n	800753e <_printf_common+0xae>
 80074dc:	0022      	movs	r2, r4
 80074de:	9901      	ldr	r1, [sp, #4]
 80074e0:	9800      	ldr	r0, [sp, #0]
 80074e2:	9d08      	ldr	r5, [sp, #32]
 80074e4:	3243      	adds	r2, #67	; 0x43
 80074e6:	47a8      	blx	r5
 80074e8:	3001      	adds	r0, #1
 80074ea:	d025      	beq.n	8007538 <_printf_common+0xa8>
 80074ec:	2206      	movs	r2, #6
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	2500      	movs	r5, #0
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d105      	bne.n	8007504 <_printf_common+0x74>
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	68e5      	ldr	r5, [r4, #12]
 80074fc:	1aed      	subs	r5, r5, r3
 80074fe:	43eb      	mvns	r3, r5
 8007500:	17db      	asrs	r3, r3, #31
 8007502:	401d      	ands	r5, r3
 8007504:	68a3      	ldr	r3, [r4, #8]
 8007506:	6922      	ldr	r2, [r4, #16]
 8007508:	4293      	cmp	r3, r2
 800750a:	dd01      	ble.n	8007510 <_printf_common+0x80>
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	18ed      	adds	r5, r5, r3
 8007510:	2600      	movs	r6, #0
 8007512:	42b5      	cmp	r5, r6
 8007514:	d120      	bne.n	8007558 <_printf_common+0xc8>
 8007516:	2000      	movs	r0, #0
 8007518:	e010      	b.n	800753c <_printf_common+0xac>
 800751a:	3501      	adds	r5, #1
 800751c:	68e3      	ldr	r3, [r4, #12]
 800751e:	6832      	ldr	r2, [r6, #0]
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	42ab      	cmp	r3, r5
 8007524:	ddd2      	ble.n	80074cc <_printf_common+0x3c>
 8007526:	0022      	movs	r2, r4
 8007528:	2301      	movs	r3, #1
 800752a:	9901      	ldr	r1, [sp, #4]
 800752c:	9800      	ldr	r0, [sp, #0]
 800752e:	9f08      	ldr	r7, [sp, #32]
 8007530:	3219      	adds	r2, #25
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	d1f0      	bne.n	800751a <_printf_common+0x8a>
 8007538:	2001      	movs	r0, #1
 800753a:	4240      	negs	r0, r0
 800753c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800753e:	2030      	movs	r0, #48	; 0x30
 8007540:	18e1      	adds	r1, r4, r3
 8007542:	3143      	adds	r1, #67	; 0x43
 8007544:	7008      	strb	r0, [r1, #0]
 8007546:	0021      	movs	r1, r4
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	3145      	adds	r1, #69	; 0x45
 800754c:	7809      	ldrb	r1, [r1, #0]
 800754e:	18a2      	adds	r2, r4, r2
 8007550:	3243      	adds	r2, #67	; 0x43
 8007552:	3302      	adds	r3, #2
 8007554:	7011      	strb	r1, [r2, #0]
 8007556:	e7c1      	b.n	80074dc <_printf_common+0x4c>
 8007558:	0022      	movs	r2, r4
 800755a:	2301      	movs	r3, #1
 800755c:	9901      	ldr	r1, [sp, #4]
 800755e:	9800      	ldr	r0, [sp, #0]
 8007560:	9f08      	ldr	r7, [sp, #32]
 8007562:	321a      	adds	r2, #26
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d0e6      	beq.n	8007538 <_printf_common+0xa8>
 800756a:	3601      	adds	r6, #1
 800756c:	e7d1      	b.n	8007512 <_printf_common+0x82>
	...

08007570 <_printf_i>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b08b      	sub	sp, #44	; 0x2c
 8007574:	9206      	str	r2, [sp, #24]
 8007576:	000a      	movs	r2, r1
 8007578:	3243      	adds	r2, #67	; 0x43
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	9005      	str	r0, [sp, #20]
 800757e:	9204      	str	r2, [sp, #16]
 8007580:	7e0a      	ldrb	r2, [r1, #24]
 8007582:	000c      	movs	r4, r1
 8007584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007586:	2a78      	cmp	r2, #120	; 0x78
 8007588:	d809      	bhi.n	800759e <_printf_i+0x2e>
 800758a:	2a62      	cmp	r2, #98	; 0x62
 800758c:	d80b      	bhi.n	80075a6 <_printf_i+0x36>
 800758e:	2a00      	cmp	r2, #0
 8007590:	d100      	bne.n	8007594 <_printf_i+0x24>
 8007592:	e0be      	b.n	8007712 <_printf_i+0x1a2>
 8007594:	497c      	ldr	r1, [pc, #496]	; (8007788 <_printf_i+0x218>)
 8007596:	9103      	str	r1, [sp, #12]
 8007598:	2a58      	cmp	r2, #88	; 0x58
 800759a:	d100      	bne.n	800759e <_printf_i+0x2e>
 800759c:	e093      	b.n	80076c6 <_printf_i+0x156>
 800759e:	0026      	movs	r6, r4
 80075a0:	3642      	adds	r6, #66	; 0x42
 80075a2:	7032      	strb	r2, [r6, #0]
 80075a4:	e022      	b.n	80075ec <_printf_i+0x7c>
 80075a6:	0010      	movs	r0, r2
 80075a8:	3863      	subs	r0, #99	; 0x63
 80075aa:	2815      	cmp	r0, #21
 80075ac:	d8f7      	bhi.n	800759e <_printf_i+0x2e>
 80075ae:	f7f8 fdbb 	bl	8000128 <__gnu_thumb1_case_shi>
 80075b2:	0016      	.short	0x0016
 80075b4:	fff6001f 	.word	0xfff6001f
 80075b8:	fff6fff6 	.word	0xfff6fff6
 80075bc:	001ffff6 	.word	0x001ffff6
 80075c0:	fff6fff6 	.word	0xfff6fff6
 80075c4:	fff6fff6 	.word	0xfff6fff6
 80075c8:	003600a3 	.word	0x003600a3
 80075cc:	fff60083 	.word	0xfff60083
 80075d0:	00b4fff6 	.word	0x00b4fff6
 80075d4:	0036fff6 	.word	0x0036fff6
 80075d8:	fff6fff6 	.word	0xfff6fff6
 80075dc:	0087      	.short	0x0087
 80075de:	0026      	movs	r6, r4
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	3642      	adds	r6, #66	; 0x42
 80075e4:	1d11      	adds	r1, r2, #4
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	6813      	ldr	r3, [r2, #0]
 80075ea:	7033      	strb	r3, [r6, #0]
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0a2      	b.n	8007736 <_printf_i+0x1c6>
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	6809      	ldr	r1, [r1, #0]
 80075f4:	1d02      	adds	r2, r0, #4
 80075f6:	060d      	lsls	r5, r1, #24
 80075f8:	d50b      	bpl.n	8007612 <_printf_i+0xa2>
 80075fa:	6805      	ldr	r5, [r0, #0]
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	2d00      	cmp	r5, #0
 8007600:	da03      	bge.n	800760a <_printf_i+0x9a>
 8007602:	232d      	movs	r3, #45	; 0x2d
 8007604:	9a04      	ldr	r2, [sp, #16]
 8007606:	426d      	negs	r5, r5
 8007608:	7013      	strb	r3, [r2, #0]
 800760a:	4b5f      	ldr	r3, [pc, #380]	; (8007788 <_printf_i+0x218>)
 800760c:	270a      	movs	r7, #10
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	e01b      	b.n	800764a <_printf_i+0xda>
 8007612:	6805      	ldr	r5, [r0, #0]
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	0649      	lsls	r1, r1, #25
 8007618:	d5f1      	bpl.n	80075fe <_printf_i+0x8e>
 800761a:	b22d      	sxth	r5, r5
 800761c:	e7ef      	b.n	80075fe <_printf_i+0x8e>
 800761e:	680d      	ldr	r5, [r1, #0]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	1d08      	adds	r0, r1, #4
 8007624:	6018      	str	r0, [r3, #0]
 8007626:	062e      	lsls	r6, r5, #24
 8007628:	d501      	bpl.n	800762e <_printf_i+0xbe>
 800762a:	680d      	ldr	r5, [r1, #0]
 800762c:	e003      	b.n	8007636 <_printf_i+0xc6>
 800762e:	066d      	lsls	r5, r5, #25
 8007630:	d5fb      	bpl.n	800762a <_printf_i+0xba>
 8007632:	680d      	ldr	r5, [r1, #0]
 8007634:	b2ad      	uxth	r5, r5
 8007636:	4b54      	ldr	r3, [pc, #336]	; (8007788 <_printf_i+0x218>)
 8007638:	2708      	movs	r7, #8
 800763a:	9303      	str	r3, [sp, #12]
 800763c:	2a6f      	cmp	r2, #111	; 0x6f
 800763e:	d000      	beq.n	8007642 <_printf_i+0xd2>
 8007640:	3702      	adds	r7, #2
 8007642:	0023      	movs	r3, r4
 8007644:	2200      	movs	r2, #0
 8007646:	3343      	adds	r3, #67	; 0x43
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	db03      	blt.n	800765a <_printf_i+0xea>
 8007652:	2104      	movs	r1, #4
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	438a      	bics	r2, r1
 8007658:	6022      	str	r2, [r4, #0]
 800765a:	2d00      	cmp	r5, #0
 800765c:	d102      	bne.n	8007664 <_printf_i+0xf4>
 800765e:	9e04      	ldr	r6, [sp, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00c      	beq.n	800767e <_printf_i+0x10e>
 8007664:	9e04      	ldr	r6, [sp, #16]
 8007666:	0028      	movs	r0, r5
 8007668:	0039      	movs	r1, r7
 800766a:	f7f8 fded 	bl	8000248 <__aeabi_uidivmod>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3e01      	subs	r6, #1
 8007672:	5c5b      	ldrb	r3, [r3, r1]
 8007674:	7033      	strb	r3, [r6, #0]
 8007676:	002b      	movs	r3, r5
 8007678:	0005      	movs	r5, r0
 800767a:	429f      	cmp	r7, r3
 800767c:	d9f3      	bls.n	8007666 <_printf_i+0xf6>
 800767e:	2f08      	cmp	r7, #8
 8007680:	d109      	bne.n	8007696 <_printf_i+0x126>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	07db      	lsls	r3, r3, #31
 8007686:	d506      	bpl.n	8007696 <_printf_i+0x126>
 8007688:	6862      	ldr	r2, [r4, #4]
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	dc02      	bgt.n	8007696 <_printf_i+0x126>
 8007690:	2330      	movs	r3, #48	; 0x30
 8007692:	3e01      	subs	r6, #1
 8007694:	7033      	strb	r3, [r6, #0]
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	1b9b      	subs	r3, r3, r6
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	0021      	movs	r1, r4
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	9b06      	ldr	r3, [sp, #24]
 80076a6:	aa09      	add	r2, sp, #36	; 0x24
 80076a8:	f7ff fef2 	bl	8007490 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d147      	bne.n	8007740 <_printf_i+0x1d0>
 80076b0:	2001      	movs	r0, #1
 80076b2:	4240      	negs	r0, r0
 80076b4:	b00b      	add	sp, #44	; 0x2c
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b8:	2220      	movs	r2, #32
 80076ba:	6809      	ldr	r1, [r1, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	2278      	movs	r2, #120	; 0x78
 80076c2:	4932      	ldr	r1, [pc, #200]	; (800778c <_printf_i+0x21c>)
 80076c4:	9103      	str	r1, [sp, #12]
 80076c6:	0021      	movs	r1, r4
 80076c8:	3145      	adds	r1, #69	; 0x45
 80076ca:	700a      	strb	r2, [r1, #0]
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	c920      	ldmia	r1!, {r5}
 80076d2:	0610      	lsls	r0, r2, #24
 80076d4:	d402      	bmi.n	80076dc <_printf_i+0x16c>
 80076d6:	0650      	lsls	r0, r2, #25
 80076d8:	d500      	bpl.n	80076dc <_printf_i+0x16c>
 80076da:	b2ad      	uxth	r5, r5
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	07d3      	lsls	r3, r2, #31
 80076e0:	d502      	bpl.n	80076e8 <_printf_i+0x178>
 80076e2:	2320      	movs	r3, #32
 80076e4:	4313      	orrs	r3, r2
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	2710      	movs	r7, #16
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d1a9      	bne.n	8007642 <_printf_i+0xd2>
 80076ee:	2220      	movs	r2, #32
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	4393      	bics	r3, r2
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	e7a4      	b.n	8007642 <_printf_i+0xd2>
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	680d      	ldr	r5, [r1, #0]
 80076fc:	1d10      	adds	r0, r2, #4
 80076fe:	6949      	ldr	r1, [r1, #20]
 8007700:	6018      	str	r0, [r3, #0]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	062e      	lsls	r6, r5, #24
 8007706:	d501      	bpl.n	800770c <_printf_i+0x19c>
 8007708:	6019      	str	r1, [r3, #0]
 800770a:	e002      	b.n	8007712 <_printf_i+0x1a2>
 800770c:	066d      	lsls	r5, r5, #25
 800770e:	d5fb      	bpl.n	8007708 <_printf_i+0x198>
 8007710:	8019      	strh	r1, [r3, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	9e04      	ldr	r6, [sp, #16]
 8007716:	6123      	str	r3, [r4, #16]
 8007718:	e7c0      	b.n	800769c <_printf_i+0x12c>
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	1d11      	adds	r1, r2, #4
 800771e:	6019      	str	r1, [r3, #0]
 8007720:	6816      	ldr	r6, [r2, #0]
 8007722:	2100      	movs	r1, #0
 8007724:	0030      	movs	r0, r6
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	f000 f9e9 	bl	8007afe <memchr>
 800772c:	2800      	cmp	r0, #0
 800772e:	d001      	beq.n	8007734 <_printf_i+0x1c4>
 8007730:	1b80      	subs	r0, r0, r6
 8007732:	6060      	str	r0, [r4, #4]
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2300      	movs	r3, #0
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	7013      	strb	r3, [r2, #0]
 800773e:	e7ad      	b.n	800769c <_printf_i+0x12c>
 8007740:	0032      	movs	r2, r6
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	9906      	ldr	r1, [sp, #24]
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	9d07      	ldr	r5, [sp, #28]
 800774a:	47a8      	blx	r5
 800774c:	3001      	adds	r0, #1
 800774e:	d0af      	beq.n	80076b0 <_printf_i+0x140>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	079b      	lsls	r3, r3, #30
 8007754:	d415      	bmi.n	8007782 <_printf_i+0x212>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	68e0      	ldr	r0, [r4, #12]
 800775a:	4298      	cmp	r0, r3
 800775c:	daaa      	bge.n	80076b4 <_printf_i+0x144>
 800775e:	0018      	movs	r0, r3
 8007760:	e7a8      	b.n	80076b4 <_printf_i+0x144>
 8007762:	0022      	movs	r2, r4
 8007764:	2301      	movs	r3, #1
 8007766:	9906      	ldr	r1, [sp, #24]
 8007768:	9805      	ldr	r0, [sp, #20]
 800776a:	9e07      	ldr	r6, [sp, #28]
 800776c:	3219      	adds	r2, #25
 800776e:	47b0      	blx	r6
 8007770:	3001      	adds	r0, #1
 8007772:	d09d      	beq.n	80076b0 <_printf_i+0x140>
 8007774:	3501      	adds	r5, #1
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	42ab      	cmp	r3, r5
 800777e:	dcf0      	bgt.n	8007762 <_printf_i+0x1f2>
 8007780:	e7e9      	b.n	8007756 <_printf_i+0x1e6>
 8007782:	2500      	movs	r5, #0
 8007784:	e7f7      	b.n	8007776 <_printf_i+0x206>
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	08009f5e 	.word	0x08009f5e
 800778c:	08009f6f 	.word	0x08009f6f

08007790 <std>:
 8007790:	2300      	movs	r3, #0
 8007792:	b510      	push	{r4, lr}
 8007794:	0004      	movs	r4, r0
 8007796:	6003      	str	r3, [r0, #0]
 8007798:	6043      	str	r3, [r0, #4]
 800779a:	6083      	str	r3, [r0, #8]
 800779c:	8181      	strh	r1, [r0, #12]
 800779e:	6643      	str	r3, [r0, #100]	; 0x64
 80077a0:	81c2      	strh	r2, [r0, #14]
 80077a2:	6103      	str	r3, [r0, #16]
 80077a4:	6143      	str	r3, [r0, #20]
 80077a6:	6183      	str	r3, [r0, #24]
 80077a8:	0019      	movs	r1, r3
 80077aa:	2208      	movs	r2, #8
 80077ac:	305c      	adds	r0, #92	; 0x5c
 80077ae:	f000 f91f 	bl	80079f0 <memset>
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <std+0x50>)
 80077b4:	6224      	str	r4, [r4, #32]
 80077b6:	6263      	str	r3, [r4, #36]	; 0x24
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <std+0x54>)
 80077ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <std+0x58>)
 80077be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <std+0x5c>)
 80077c2:	6323      	str	r3, [r4, #48]	; 0x30
 80077c4:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <std+0x60>)
 80077c6:	429c      	cmp	r4, r3
 80077c8:	d005      	beq.n	80077d6 <std+0x46>
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <std+0x64>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d002      	beq.n	80077d6 <std+0x46>
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <std+0x68>)
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d103      	bne.n	80077de <std+0x4e>
 80077d6:	0020      	movs	r0, r4
 80077d8:	3058      	adds	r0, #88	; 0x58
 80077da:	f000 f98d 	bl	8007af8 <__retarget_lock_init_recursive>
 80077de:	bd10      	pop	{r4, pc}
 80077e0:	08007959 	.word	0x08007959
 80077e4:	08007981 	.word	0x08007981
 80077e8:	080079b9 	.word	0x080079b9
 80077ec:	080079e5 	.word	0x080079e5
 80077f0:	200003e0 	.word	0x200003e0
 80077f4:	20000448 	.word	0x20000448
 80077f8:	200004b0 	.word	0x200004b0

080077fc <stdio_exit_handler>:
 80077fc:	b510      	push	{r4, lr}
 80077fe:	4a03      	ldr	r2, [pc, #12]	; (800780c <stdio_exit_handler+0x10>)
 8007800:	4903      	ldr	r1, [pc, #12]	; (8007810 <stdio_exit_handler+0x14>)
 8007802:	4804      	ldr	r0, [pc, #16]	; (8007814 <stdio_exit_handler+0x18>)
 8007804:	f000 f86c 	bl	80078e0 <_fwalk_sglue>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	20000014 	.word	0x20000014
 8007810:	0800956d 	.word	0x0800956d
 8007814:	20000020 	.word	0x20000020

08007818 <cleanup_stdio>:
 8007818:	6841      	ldr	r1, [r0, #4]
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <cleanup_stdio+0x30>)
 800781c:	b510      	push	{r4, lr}
 800781e:	0004      	movs	r4, r0
 8007820:	4299      	cmp	r1, r3
 8007822:	d001      	beq.n	8007828 <cleanup_stdio+0x10>
 8007824:	f001 fea2 	bl	800956c <_fflush_r>
 8007828:	68a1      	ldr	r1, [r4, #8]
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <cleanup_stdio+0x34>)
 800782c:	4299      	cmp	r1, r3
 800782e:	d002      	beq.n	8007836 <cleanup_stdio+0x1e>
 8007830:	0020      	movs	r0, r4
 8007832:	f001 fe9b 	bl	800956c <_fflush_r>
 8007836:	68e1      	ldr	r1, [r4, #12]
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <cleanup_stdio+0x38>)
 800783a:	4299      	cmp	r1, r3
 800783c:	d002      	beq.n	8007844 <cleanup_stdio+0x2c>
 800783e:	0020      	movs	r0, r4
 8007840:	f001 fe94 	bl	800956c <_fflush_r>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	200003e0 	.word	0x200003e0
 800784c:	20000448 	.word	0x20000448
 8007850:	200004b0 	.word	0x200004b0

08007854 <global_stdio_init.part.0>:
 8007854:	b510      	push	{r4, lr}
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <global_stdio_init.part.0+0x28>)
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <global_stdio_init.part.0+0x2c>)
 800785a:	2104      	movs	r1, #4
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	4809      	ldr	r0, [pc, #36]	; (8007884 <global_stdio_init.part.0+0x30>)
 8007860:	2200      	movs	r2, #0
 8007862:	f7ff ff95 	bl	8007790 <std>
 8007866:	2201      	movs	r2, #1
 8007868:	2109      	movs	r1, #9
 800786a:	4807      	ldr	r0, [pc, #28]	; (8007888 <global_stdio_init.part.0+0x34>)
 800786c:	f7ff ff90 	bl	8007790 <std>
 8007870:	2202      	movs	r2, #2
 8007872:	2112      	movs	r1, #18
 8007874:	4805      	ldr	r0, [pc, #20]	; (800788c <global_stdio_init.part.0+0x38>)
 8007876:	f7ff ff8b 	bl	8007790 <std>
 800787a:	bd10      	pop	{r4, pc}
 800787c:	20000518 	.word	0x20000518
 8007880:	080077fd 	.word	0x080077fd
 8007884:	200003e0 	.word	0x200003e0
 8007888:	20000448 	.word	0x20000448
 800788c:	200004b0 	.word	0x200004b0

08007890 <__sfp_lock_acquire>:
 8007890:	b510      	push	{r4, lr}
 8007892:	4802      	ldr	r0, [pc, #8]	; (800789c <__sfp_lock_acquire+0xc>)
 8007894:	f000 f931 	bl	8007afa <__retarget_lock_acquire_recursive>
 8007898:	bd10      	pop	{r4, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	20000521 	.word	0x20000521

080078a0 <__sfp_lock_release>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4802      	ldr	r0, [pc, #8]	; (80078ac <__sfp_lock_release+0xc>)
 80078a4:	f000 f92a 	bl	8007afc <__retarget_lock_release_recursive>
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	20000521 	.word	0x20000521

080078b0 <__sinit>:
 80078b0:	b510      	push	{r4, lr}
 80078b2:	0004      	movs	r4, r0
 80078b4:	f7ff ffec 	bl	8007890 <__sfp_lock_acquire>
 80078b8:	6a23      	ldr	r3, [r4, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <__sinit+0x14>
 80078be:	f7ff ffef 	bl	80078a0 <__sfp_lock_release>
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <__sinit+0x28>)
 80078c6:	6223      	str	r3, [r4, #32]
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__sinit+0x2c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1f6      	bne.n	80078be <__sinit+0xe>
 80078d0:	f7ff ffc0 	bl	8007854 <global_stdio_init.part.0>
 80078d4:	e7f3      	b.n	80078be <__sinit+0xe>
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	08007819 	.word	0x08007819
 80078dc:	20000518 	.word	0x20000518

080078e0 <_fwalk_sglue>:
 80078e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e2:	0014      	movs	r4, r2
 80078e4:	2600      	movs	r6, #0
 80078e6:	9000      	str	r0, [sp, #0]
 80078e8:	9101      	str	r1, [sp, #4]
 80078ea:	68a5      	ldr	r5, [r4, #8]
 80078ec:	6867      	ldr	r7, [r4, #4]
 80078ee:	3f01      	subs	r7, #1
 80078f0:	d504      	bpl.n	80078fc <_fwalk_sglue+0x1c>
 80078f2:	6824      	ldr	r4, [r4, #0]
 80078f4:	2c00      	cmp	r4, #0
 80078f6:	d1f8      	bne.n	80078ea <_fwalk_sglue+0xa>
 80078f8:	0030      	movs	r0, r6
 80078fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078fc:	89ab      	ldrh	r3, [r5, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d908      	bls.n	8007914 <_fwalk_sglue+0x34>
 8007902:	220e      	movs	r2, #14
 8007904:	5eab      	ldrsh	r3, [r5, r2]
 8007906:	3301      	adds	r3, #1
 8007908:	d004      	beq.n	8007914 <_fwalk_sglue+0x34>
 800790a:	0029      	movs	r1, r5
 800790c:	9800      	ldr	r0, [sp, #0]
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	4798      	blx	r3
 8007912:	4306      	orrs	r6, r0
 8007914:	3568      	adds	r5, #104	; 0x68
 8007916:	e7ea      	b.n	80078ee <_fwalk_sglue+0xe>

08007918 <siprintf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b500      	push	{lr}
 800791c:	490b      	ldr	r1, [pc, #44]	; (800794c <siprintf+0x34>)
 800791e:	b09c      	sub	sp, #112	; 0x70
 8007920:	ab1d      	add	r3, sp, #116	; 0x74
 8007922:	9002      	str	r0, [sp, #8]
 8007924:	9006      	str	r0, [sp, #24]
 8007926:	9107      	str	r1, [sp, #28]
 8007928:	9104      	str	r1, [sp, #16]
 800792a:	4809      	ldr	r0, [pc, #36]	; (8007950 <siprintf+0x38>)
 800792c:	4909      	ldr	r1, [pc, #36]	; (8007954 <siprintf+0x3c>)
 800792e:	cb04      	ldmia	r3!, {r2}
 8007930:	9105      	str	r1, [sp, #20]
 8007932:	6800      	ldr	r0, [r0, #0]
 8007934:	a902      	add	r1, sp, #8
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	f001 fc8e 	bl	8009258 <_svfiprintf_r>
 800793c:	2200      	movs	r2, #0
 800793e:	9b02      	ldr	r3, [sp, #8]
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	b01c      	add	sp, #112	; 0x70
 8007944:	bc08      	pop	{r3}
 8007946:	b003      	add	sp, #12
 8007948:	4718      	bx	r3
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	7fffffff 	.word	0x7fffffff
 8007950:	2000006c 	.word	0x2000006c
 8007954:	ffff0208 	.word	0xffff0208

08007958 <__sread>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	000c      	movs	r4, r1
 800795c:	250e      	movs	r5, #14
 800795e:	5f49      	ldrsh	r1, [r1, r5]
 8007960:	f000 f878 	bl	8007a54 <_read_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	db03      	blt.n	8007970 <__sread+0x18>
 8007968:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800796a:	181b      	adds	r3, r3, r0
 800796c:	6563      	str	r3, [r4, #84]	; 0x54
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	4a02      	ldr	r2, [pc, #8]	; (800797c <__sread+0x24>)
 8007974:	4013      	ands	r3, r2
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	e7f9      	b.n	800796e <__sread+0x16>
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	ffffefff 	.word	0xffffefff

08007980 <__swrite>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	001f      	movs	r7, r3
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	0005      	movs	r5, r0
 8007988:	000c      	movs	r4, r1
 800798a:	0016      	movs	r6, r2
 800798c:	05db      	lsls	r3, r3, #23
 800798e:	d505      	bpl.n	800799c <__swrite+0x1c>
 8007990:	230e      	movs	r3, #14
 8007992:	5ec9      	ldrsh	r1, [r1, r3]
 8007994:	2200      	movs	r2, #0
 8007996:	2302      	movs	r3, #2
 8007998:	f000 f848 	bl	8007a2c <_lseek_r>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <__swrite+0x34>)
 80079a0:	0028      	movs	r0, r5
 80079a2:	4013      	ands	r3, r2
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	0032      	movs	r2, r6
 80079a8:	230e      	movs	r3, #14
 80079aa:	5ee1      	ldrsh	r1, [r4, r3]
 80079ac:	003b      	movs	r3, r7
 80079ae:	f000 f865 	bl	8007a7c <_write_r>
 80079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b4:	ffffefff 	.word	0xffffefff

080079b8 <__sseek>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	000c      	movs	r4, r1
 80079bc:	250e      	movs	r5, #14
 80079be:	5f49      	ldrsh	r1, [r1, r5]
 80079c0:	f000 f834 	bl	8007a2c <_lseek_r>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	d103      	bne.n	80079d2 <__sseek+0x1a>
 80079ca:	4a05      	ldr	r2, [pc, #20]	; (80079e0 <__sseek+0x28>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	2280      	movs	r2, #128	; 0x80
 80079d4:	0152      	lsls	r2, r2, #5
 80079d6:	4313      	orrs	r3, r2
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	6560      	str	r0, [r4, #84]	; 0x54
 80079dc:	e7f8      	b.n	80079d0 <__sseek+0x18>
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	ffffefff 	.word	0xffffefff

080079e4 <__sclose>:
 80079e4:	b510      	push	{r4, lr}
 80079e6:	230e      	movs	r3, #14
 80079e8:	5ec9      	ldrsh	r1, [r1, r3]
 80079ea:	f000 f80d 	bl	8007a08 <_close_r>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <memset>:
 80079f0:	0003      	movs	r3, r0
 80079f2:	1882      	adds	r2, r0, r2
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d100      	bne.n	80079fa <memset+0xa>
 80079f8:	4770      	bx	lr
 80079fa:	7019      	strb	r1, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	e7f9      	b.n	80079f4 <memset+0x4>

08007a00 <_localeconv_r>:
 8007a00:	4800      	ldr	r0, [pc, #0]	; (8007a04 <_localeconv_r+0x4>)
 8007a02:	4770      	bx	lr
 8007a04:	20000160 	.word	0x20000160

08007a08 <_close_r>:
 8007a08:	2300      	movs	r3, #0
 8007a0a:	b570      	push	{r4, r5, r6, lr}
 8007a0c:	4d06      	ldr	r5, [pc, #24]	; (8007a28 <_close_r+0x20>)
 8007a0e:	0004      	movs	r4, r0
 8007a10:	0008      	movs	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fc f842 	bl	8003a9c <_close>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d103      	bne.n	8007a24 <_close_r+0x1c>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d000      	beq.n	8007a24 <_close_r+0x1c>
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	2000051c 	.word	0x2000051c

08007a2c <_lseek_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	0004      	movs	r4, r0
 8007a30:	0008      	movs	r0, r1
 8007a32:	0011      	movs	r1, r2
 8007a34:	001a      	movs	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d05      	ldr	r5, [pc, #20]	; (8007a50 <_lseek_r+0x24>)
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7fc f84f 	bl	8003ade <_lseek>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d103      	bne.n	8007a4c <_lseek_r+0x20>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d000      	beq.n	8007a4c <_lseek_r+0x20>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	2000051c 	.word	0x2000051c

08007a54 <_read_r>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	0004      	movs	r4, r0
 8007a58:	0008      	movs	r0, r1
 8007a5a:	0011      	movs	r1, r2
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4d05      	ldr	r5, [pc, #20]	; (8007a78 <_read_r+0x24>)
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	f7fb ffe1 	bl	8003a2a <_read>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d103      	bne.n	8007a74 <_read_r+0x20>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d000      	beq.n	8007a74 <_read_r+0x20>
 8007a72:	6023      	str	r3, [r4, #0]
 8007a74:	bd70      	pop	{r4, r5, r6, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	2000051c 	.word	0x2000051c

08007a7c <_write_r>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	0004      	movs	r4, r0
 8007a80:	0008      	movs	r0, r1
 8007a82:	0011      	movs	r1, r2
 8007a84:	001a      	movs	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	4d05      	ldr	r5, [pc, #20]	; (8007aa0 <_write_r+0x24>)
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fb ffea 	bl	8003a64 <_write>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d103      	bne.n	8007a9c <_write_r+0x20>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d000      	beq.n	8007a9c <_write_r+0x20>
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	2000051c 	.word	0x2000051c

08007aa4 <__errno>:
 8007aa4:	4b01      	ldr	r3, [pc, #4]	; (8007aac <__errno+0x8>)
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	4770      	bx	lr
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	2000006c 	.word	0x2000006c

08007ab0 <__libc_init_array>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x38>)
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	; (8007aec <__libc_init_array+0x3c>)
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	42a6      	cmp	r6, r4
 8007abe:	d109      	bne.n	8007ad4 <__libc_init_array+0x24>
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	f002 f923 	bl	8009d0c <_init>
 8007ac6:	4c0a      	ldr	r4, [pc, #40]	; (8007af0 <__libc_init_array+0x40>)
 8007ac8:	4d0a      	ldr	r5, [pc, #40]	; (8007af4 <__libc_init_array+0x44>)
 8007aca:	1b64      	subs	r4, r4, r5
 8007acc:	10a4      	asrs	r4, r4, #2
 8007ace:	42a6      	cmp	r6, r4
 8007ad0:	d105      	bne.n	8007ade <__libc_init_array+0x2e>
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	00b3      	lsls	r3, r6, #2
 8007ad6:	58eb      	ldr	r3, [r5, r3]
 8007ad8:	4798      	blx	r3
 8007ada:	3601      	adds	r6, #1
 8007adc:	e7ee      	b.n	8007abc <__libc_init_array+0xc>
 8007ade:	00b3      	lsls	r3, r6, #2
 8007ae0:	58eb      	ldr	r3, [r5, r3]
 8007ae2:	4798      	blx	r3
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	e7f2      	b.n	8007ace <__libc_init_array+0x1e>
 8007ae8:	0800a2c4 	.word	0x0800a2c4
 8007aec:	0800a2c4 	.word	0x0800a2c4
 8007af0:	0800a2c8 	.word	0x0800a2c8
 8007af4:	0800a2c4 	.word	0x0800a2c4

08007af8 <__retarget_lock_init_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_acquire_recursive>:
 8007afa:	4770      	bx	lr

08007afc <__retarget_lock_release_recursive>:
 8007afc:	4770      	bx	lr

08007afe <memchr>:
 8007afe:	b2c9      	uxtb	r1, r1
 8007b00:	1882      	adds	r2, r0, r2
 8007b02:	4290      	cmp	r0, r2
 8007b04:	d101      	bne.n	8007b0a <memchr+0xc>
 8007b06:	2000      	movs	r0, #0
 8007b08:	4770      	bx	lr
 8007b0a:	7803      	ldrb	r3, [r0, #0]
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	d0fb      	beq.n	8007b08 <memchr+0xa>
 8007b10:	3001      	adds	r0, #1
 8007b12:	e7f6      	b.n	8007b02 <memchr+0x4>

08007b14 <quorem>:
 8007b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b16:	6902      	ldr	r2, [r0, #16]
 8007b18:	690b      	ldr	r3, [r1, #16]
 8007b1a:	b089      	sub	sp, #36	; 0x24
 8007b1c:	0007      	movs	r7, r0
 8007b1e:	9104      	str	r1, [sp, #16]
 8007b20:	2000      	movs	r0, #0
 8007b22:	429a      	cmp	r2, r3
 8007b24:	db69      	blt.n	8007bfa <quorem+0xe6>
 8007b26:	3b01      	subs	r3, #1
 8007b28:	009c      	lsls	r4, r3, #2
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	000b      	movs	r3, r1
 8007b2e:	3314      	adds	r3, #20
 8007b30:	9306      	str	r3, [sp, #24]
 8007b32:	191b      	adds	r3, r3, r4
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	003b      	movs	r3, r7
 8007b38:	3314      	adds	r3, #20
 8007b3a:	9303      	str	r3, [sp, #12]
 8007b3c:	191c      	adds	r4, r3, r4
 8007b3e:	9b05      	ldr	r3, [sp, #20]
 8007b40:	6826      	ldr	r6, [r4, #0]
 8007b42:	681d      	ldr	r5, [r3, #0]
 8007b44:	0030      	movs	r0, r6
 8007b46:	3501      	adds	r5, #1
 8007b48:	0029      	movs	r1, r5
 8007b4a:	f7f8 faf7 	bl	800013c <__udivsi3>
 8007b4e:	9002      	str	r0, [sp, #8]
 8007b50:	42ae      	cmp	r6, r5
 8007b52:	d329      	bcc.n	8007ba8 <quorem+0x94>
 8007b54:	9b06      	ldr	r3, [sp, #24]
 8007b56:	2600      	movs	r6, #0
 8007b58:	469c      	mov	ip, r3
 8007b5a:	9d03      	ldr	r5, [sp, #12]
 8007b5c:	9606      	str	r6, [sp, #24]
 8007b5e:	4662      	mov	r2, ip
 8007b60:	ca08      	ldmia	r2!, {r3}
 8007b62:	6828      	ldr	r0, [r5, #0]
 8007b64:	4694      	mov	ip, r2
 8007b66:	9a02      	ldr	r2, [sp, #8]
 8007b68:	b299      	uxth	r1, r3
 8007b6a:	4351      	muls	r1, r2
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	4353      	muls	r3, r2
 8007b70:	1989      	adds	r1, r1, r6
 8007b72:	0c0a      	lsrs	r2, r1, #16
 8007b74:	189b      	adds	r3, r3, r2
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	0c1e      	lsrs	r6, r3, #16
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	b282      	uxth	r2, r0
 8007b7e:	18d2      	adds	r2, r2, r3
 8007b80:	466b      	mov	r3, sp
 8007b82:	b289      	uxth	r1, r1
 8007b84:	8b9b      	ldrh	r3, [r3, #28]
 8007b86:	1a52      	subs	r2, r2, r1
 8007b88:	0c01      	lsrs	r1, r0, #16
 8007b8a:	1ac9      	subs	r1, r1, r3
 8007b8c:	1413      	asrs	r3, r2, #16
 8007b8e:	18cb      	adds	r3, r1, r3
 8007b90:	1419      	asrs	r1, r3, #16
 8007b92:	b292      	uxth	r2, r2
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	4313      	orrs	r3, r2
 8007b98:	c508      	stmia	r5!, {r3}
 8007b9a:	9b05      	ldr	r3, [sp, #20]
 8007b9c:	9106      	str	r1, [sp, #24]
 8007b9e:	4563      	cmp	r3, ip
 8007ba0:	d2dd      	bcs.n	8007b5e <quorem+0x4a>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d030      	beq.n	8007c0a <quorem+0xf6>
 8007ba8:	0038      	movs	r0, r7
 8007baa:	9904      	ldr	r1, [sp, #16]
 8007bac:	f001 f9de 	bl	8008f6c <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	db21      	blt.n	8007bf8 <quorem+0xe4>
 8007bb4:	0038      	movs	r0, r7
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	9c04      	ldr	r4, [sp, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	9302      	str	r3, [sp, #8]
 8007bc0:	3014      	adds	r0, #20
 8007bc2:	3414      	adds	r4, #20
 8007bc4:	6803      	ldr	r3, [r0, #0]
 8007bc6:	cc02      	ldmia	r4!, {r1}
 8007bc8:	b29d      	uxth	r5, r3
 8007bca:	19ad      	adds	r5, r5, r6
 8007bcc:	b28a      	uxth	r2, r1
 8007bce:	1aaa      	subs	r2, r5, r2
 8007bd0:	0c09      	lsrs	r1, r1, #16
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	1a5b      	subs	r3, r3, r1
 8007bd6:	1411      	asrs	r1, r2, #16
 8007bd8:	185b      	adds	r3, r3, r1
 8007bda:	141e      	asrs	r6, r3, #16
 8007bdc:	b292      	uxth	r2, r2
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	4313      	orrs	r3, r2
 8007be2:	c008      	stmia	r0!, {r3}
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d2ec      	bcs.n	8007bc4 <quorem+0xb0>
 8007bea:	9b01      	ldr	r3, [sp, #4]
 8007bec:	9a03      	ldr	r2, [sp, #12]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	18d3      	adds	r3, r2, r3
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d015      	beq.n	8007c24 <quorem+0x110>
 8007bf8:	9802      	ldr	r0, [sp, #8]
 8007bfa:	b009      	add	sp, #36	; 0x24
 8007bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d106      	bne.n	8007c12 <quorem+0xfe>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	3c04      	subs	r4, #4
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	d3f5      	bcc.n	8007bfe <quorem+0xea>
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	e7c7      	b.n	8007ba8 <quorem+0x94>
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d106      	bne.n	8007c2c <quorem+0x118>
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	3a01      	subs	r2, #1
 8007c22:	9201      	str	r2, [sp, #4]
 8007c24:	9a03      	ldr	r2, [sp, #12]
 8007c26:	3b04      	subs	r3, #4
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d3f5      	bcc.n	8007c18 <quorem+0x104>
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	e7e2      	b.n	8007bf8 <quorem+0xe4>
	...

08007c34 <_dtoa_r>:
 8007c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c36:	0014      	movs	r4, r2
 8007c38:	001d      	movs	r5, r3
 8007c3a:	69c6      	ldr	r6, [r0, #28]
 8007c3c:	b09d      	sub	sp, #116	; 0x74
 8007c3e:	9408      	str	r4, [sp, #32]
 8007c40:	9509      	str	r5, [sp, #36]	; 0x24
 8007c42:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8007c44:	9004      	str	r0, [sp, #16]
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d10f      	bne.n	8007c6a <_dtoa_r+0x36>
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f000 fe4a 	bl	80088e4 <malloc>
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	1e02      	subs	r2, r0, #0
 8007c54:	61d8      	str	r0, [r3, #28]
 8007c56:	d104      	bne.n	8007c62 <_dtoa_r+0x2e>
 8007c58:	21ef      	movs	r1, #239	; 0xef
 8007c5a:	4bc6      	ldr	r3, [pc, #792]	; (8007f74 <_dtoa_r+0x340>)
 8007c5c:	48c6      	ldr	r0, [pc, #792]	; (8007f78 <_dtoa_r+0x344>)
 8007c5e:	f001 fcdf 	bl	8009620 <__assert_func>
 8007c62:	6046      	str	r6, [r0, #4]
 8007c64:	6086      	str	r6, [r0, #8]
 8007c66:	6006      	str	r6, [r0, #0]
 8007c68:	60c6      	str	r6, [r0, #12]
 8007c6a:	9b04      	ldr	r3, [sp, #16]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	2900      	cmp	r1, #0
 8007c72:	d00b      	beq.n	8007c8c <_dtoa_r+0x58>
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	2301      	movs	r3, #1
 8007c78:	4093      	lsls	r3, r2
 8007c7a:	604a      	str	r2, [r1, #4]
 8007c7c:	608b      	str	r3, [r1, #8]
 8007c7e:	9804      	ldr	r0, [sp, #16]
 8007c80:	f000 ff32 	bl	8008ae8 <_Bfree>
 8007c84:	2200      	movs	r2, #0
 8007c86:	9b04      	ldr	r3, [sp, #16]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	da1e      	bge.n	8007cce <_dtoa_r+0x9a>
 8007c90:	2301      	movs	r3, #1
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	006b      	lsls	r3, r5, #1
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c9c:	4bb7      	ldr	r3, [pc, #732]	; (8007f7c <_dtoa_r+0x348>)
 8007c9e:	4ab7      	ldr	r2, [pc, #732]	; (8007f7c <_dtoa_r+0x348>)
 8007ca0:	403b      	ands	r3, r7
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d116      	bne.n	8007cd4 <_dtoa_r+0xa0>
 8007ca6:	4bb6      	ldr	r3, [pc, #728]	; (8007f80 <_dtoa_r+0x34c>)
 8007ca8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	033b      	lsls	r3, r7, #12
 8007cae:	0b1b      	lsrs	r3, r3, #12
 8007cb0:	4323      	orrs	r3, r4
 8007cb2:	d101      	bne.n	8007cb8 <_dtoa_r+0x84>
 8007cb4:	f000 fdb5 	bl	8008822 <_dtoa_r+0xbee>
 8007cb8:	4bb2      	ldr	r3, [pc, #712]	; (8007f84 <_dtoa_r+0x350>)
 8007cba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cbc:	9306      	str	r3, [sp, #24]
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	d002      	beq.n	8007cc8 <_dtoa_r+0x94>
 8007cc2:	4bb1      	ldr	r3, [pc, #708]	; (8007f88 <_dtoa_r+0x354>)
 8007cc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	9806      	ldr	r0, [sp, #24]
 8007cca:	b01d      	add	sp, #116	; 0x74
 8007ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cce:	2300      	movs	r3, #0
 8007cd0:	603b      	str	r3, [r7, #0]
 8007cd2:	e7e2      	b.n	8007c9a <_dtoa_r+0x66>
 8007cd4:	9a08      	ldr	r2, [sp, #32]
 8007cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd8:	9210      	str	r2, [sp, #64]	; 0x40
 8007cda:	9311      	str	r3, [sp, #68]	; 0x44
 8007cdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007cde:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f7f8 fbb0 	bl	8000448 <__aeabi_dcmpeq>
 8007ce8:	1e06      	subs	r6, r0, #0
 8007cea:	d009      	beq.n	8007d00 <_dtoa_r+0xcc>
 8007cec:	2301      	movs	r3, #1
 8007cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	4ba6      	ldr	r3, [pc, #664]	; (8007f8c <_dtoa_r+0x358>)
 8007cf4:	9306      	str	r3, [sp, #24]
 8007cf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0e5      	beq.n	8007cc8 <_dtoa_r+0x94>
 8007cfc:	4ba4      	ldr	r3, [pc, #656]	; (8007f90 <_dtoa_r+0x35c>)
 8007cfe:	e7e1      	b.n	8007cc4 <_dtoa_r+0x90>
 8007d00:	ab1a      	add	r3, sp, #104	; 0x68
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	9804      	ldr	r0, [sp, #16]
 8007d0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d0e:	f001 f9e1 	bl	80090d4 <__d2b>
 8007d12:	007a      	lsls	r2, r7, #1
 8007d14:	9005      	str	r0, [sp, #20]
 8007d16:	0d52      	lsrs	r2, r2, #21
 8007d18:	d100      	bne.n	8007d1c <_dtoa_r+0xe8>
 8007d1a:	e07b      	b.n	8007e14 <_dtoa_r+0x1e0>
 8007d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d1e:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d20:	0319      	lsls	r1, r3, #12
 8007d22:	4b9c      	ldr	r3, [pc, #624]	; (8007f94 <_dtoa_r+0x360>)
 8007d24:	0b09      	lsrs	r1, r1, #12
 8007d26:	430b      	orrs	r3, r1
 8007d28:	499b      	ldr	r1, [pc, #620]	; (8007f98 <_dtoa_r+0x364>)
 8007d2a:	1857      	adds	r7, r2, r1
 8007d2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d30:	0019      	movs	r1, r3
 8007d32:	2200      	movs	r2, #0
 8007d34:	4b99      	ldr	r3, [pc, #612]	; (8007f9c <_dtoa_r+0x368>)
 8007d36:	f7fa f869 	bl	8001e0c <__aeabi_dsub>
 8007d3a:	4a99      	ldr	r2, [pc, #612]	; (8007fa0 <_dtoa_r+0x36c>)
 8007d3c:	4b99      	ldr	r3, [pc, #612]	; (8007fa4 <_dtoa_r+0x370>)
 8007d3e:	f7f9 fda3 	bl	8001888 <__aeabi_dmul>
 8007d42:	4a99      	ldr	r2, [pc, #612]	; (8007fa8 <_dtoa_r+0x374>)
 8007d44:	4b99      	ldr	r3, [pc, #612]	; (8007fac <_dtoa_r+0x378>)
 8007d46:	f7f8 fe45 	bl	80009d4 <__aeabi_dadd>
 8007d4a:	0004      	movs	r4, r0
 8007d4c:	0038      	movs	r0, r7
 8007d4e:	000d      	movs	r5, r1
 8007d50:	f7fa fc32 	bl	80025b8 <__aeabi_i2d>
 8007d54:	4a96      	ldr	r2, [pc, #600]	; (8007fb0 <_dtoa_r+0x37c>)
 8007d56:	4b97      	ldr	r3, [pc, #604]	; (8007fb4 <_dtoa_r+0x380>)
 8007d58:	f7f9 fd96 	bl	8001888 <__aeabi_dmul>
 8007d5c:	0002      	movs	r2, r0
 8007d5e:	000b      	movs	r3, r1
 8007d60:	0020      	movs	r0, r4
 8007d62:	0029      	movs	r1, r5
 8007d64:	f7f8 fe36 	bl	80009d4 <__aeabi_dadd>
 8007d68:	0004      	movs	r4, r0
 8007d6a:	000d      	movs	r5, r1
 8007d6c:	f7fa fbee 	bl	800254c <__aeabi_d2iz>
 8007d70:	2200      	movs	r2, #0
 8007d72:	9003      	str	r0, [sp, #12]
 8007d74:	2300      	movs	r3, #0
 8007d76:	0020      	movs	r0, r4
 8007d78:	0029      	movs	r1, r5
 8007d7a:	f7f8 fb6b 	bl	8000454 <__aeabi_dcmplt>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d00b      	beq.n	8007d9a <_dtoa_r+0x166>
 8007d82:	9803      	ldr	r0, [sp, #12]
 8007d84:	f7fa fc18 	bl	80025b8 <__aeabi_i2d>
 8007d88:	002b      	movs	r3, r5
 8007d8a:	0022      	movs	r2, r4
 8007d8c:	f7f8 fb5c 	bl	8000448 <__aeabi_dcmpeq>
 8007d90:	4243      	negs	r3, r0
 8007d92:	4158      	adcs	r0, r3
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	1a1b      	subs	r3, r3, r0
 8007d98:	9303      	str	r3, [sp, #12]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9316      	str	r3, [sp, #88]	; 0x58
 8007d9e:	9b03      	ldr	r3, [sp, #12]
 8007da0:	2b16      	cmp	r3, #22
 8007da2:	d810      	bhi.n	8007dc6 <_dtoa_r+0x192>
 8007da4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007da6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007da8:	9a03      	ldr	r2, [sp, #12]
 8007daa:	4b83      	ldr	r3, [pc, #524]	; (8007fb8 <_dtoa_r+0x384>)
 8007dac:	00d2      	lsls	r2, r2, #3
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f7f8 fb4e 	bl	8000454 <__aeabi_dcmplt>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d047      	beq.n	8007e4c <_dtoa_r+0x218>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9316      	str	r3, [sp, #88]	; 0x58
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007dca:	920a      	str	r2, [sp, #40]	; 0x28
 8007dcc:	1bdb      	subs	r3, r3, r7
 8007dce:	1e5a      	subs	r2, r3, #1
 8007dd0:	d53e      	bpl.n	8007e50 <_dtoa_r+0x21c>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd8:	2300      	movs	r3, #0
 8007dda:	930c      	str	r3, [sp, #48]	; 0x30
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	db38      	blt.n	8007e54 <_dtoa_r+0x220>
 8007de2:	9a03      	ldr	r2, [sp, #12]
 8007de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de6:	4694      	mov	ip, r2
 8007de8:	4463      	add	r3, ip
 8007dea:	930c      	str	r3, [sp, #48]	; 0x30
 8007dec:	2300      	movs	r3, #0
 8007dee:	9213      	str	r2, [sp, #76]	; 0x4c
 8007df0:	930d      	str	r3, [sp, #52]	; 0x34
 8007df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007df4:	2401      	movs	r4, #1
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d867      	bhi.n	8007eca <_dtoa_r+0x296>
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	dd02      	ble.n	8007e04 <_dtoa_r+0x1d0>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	3b04      	subs	r3, #4
 8007e02:	9322      	str	r3, [sp, #136]	; 0x88
 8007e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e06:	1e98      	subs	r0, r3, #2
 8007e08:	2803      	cmp	r0, #3
 8007e0a:	d867      	bhi.n	8007edc <_dtoa_r+0x2a8>
 8007e0c:	f7f8 f982 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007e10:	5b383a2b 	.word	0x5b383a2b
 8007e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e16:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007e18:	18f6      	adds	r6, r6, r3
 8007e1a:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <_dtoa_r+0x388>)
 8007e1c:	18f2      	adds	r2, r6, r3
 8007e1e:	2a20      	cmp	r2, #32
 8007e20:	dd0f      	ble.n	8007e42 <_dtoa_r+0x20e>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	409f      	lsls	r7, r3
 8007e28:	4b65      	ldr	r3, [pc, #404]	; (8007fc0 <_dtoa_r+0x38c>)
 8007e2a:	0038      	movs	r0, r7
 8007e2c:	18f3      	adds	r3, r6, r3
 8007e2e:	40dc      	lsrs	r4, r3
 8007e30:	4320      	orrs	r0, r4
 8007e32:	f7fa fbf1 	bl	8002618 <__aeabi_ui2d>
 8007e36:	2201      	movs	r2, #1
 8007e38:	4b62      	ldr	r3, [pc, #392]	; (8007fc4 <_dtoa_r+0x390>)
 8007e3a:	1e77      	subs	r7, r6, #1
 8007e3c:	18cb      	adds	r3, r1, r3
 8007e3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e40:	e776      	b.n	8007d30 <_dtoa_r+0xfc>
 8007e42:	2320      	movs	r3, #32
 8007e44:	0020      	movs	r0, r4
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	4098      	lsls	r0, r3
 8007e4a:	e7f2      	b.n	8007e32 <_dtoa_r+0x1fe>
 8007e4c:	9016      	str	r0, [sp, #88]	; 0x58
 8007e4e:	e7ba      	b.n	8007dc6 <_dtoa_r+0x192>
 8007e50:	920c      	str	r2, [sp, #48]	; 0x30
 8007e52:	e7c3      	b.n	8007ddc <_dtoa_r+0x1a8>
 8007e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e56:	9a03      	ldr	r2, [sp, #12]
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5c:	4253      	negs	r3, r2
 8007e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e60:	2300      	movs	r3, #0
 8007e62:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e64:	e7c5      	b.n	8007df2 <_dtoa_r+0x1be>
 8007e66:	2300      	movs	r3, #0
 8007e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dc13      	bgt.n	8007e9c <_dtoa_r+0x268>
 8007e74:	2301      	movs	r3, #1
 8007e76:	001a      	movs	r2, r3
 8007e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e7a:	9307      	str	r3, [sp, #28]
 8007e7c:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e7e:	e00d      	b.n	8007e9c <_dtoa_r+0x268>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e7f1      	b.n	8007e68 <_dtoa_r+0x234>
 8007e84:	2300      	movs	r3, #0
 8007e86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e8a:	4694      	mov	ip, r2
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	4463      	add	r3, ip
 8007e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e92:	3301      	adds	r3, #1
 8007e94:	9307      	str	r3, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dc00      	bgt.n	8007e9c <_dtoa_r+0x268>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9a04      	ldr	r2, [sp, #16]
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	69d0      	ldr	r0, [r2, #28]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	0015      	movs	r5, r2
 8007ea6:	3514      	adds	r5, #20
 8007ea8:	429d      	cmp	r5, r3
 8007eaa:	d91b      	bls.n	8007ee4 <_dtoa_r+0x2b0>
 8007eac:	6041      	str	r1, [r0, #4]
 8007eae:	9804      	ldr	r0, [sp, #16]
 8007eb0:	f000 fdd6 	bl	8008a60 <_Balloc>
 8007eb4:	9006      	str	r0, [sp, #24]
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d117      	bne.n	8007eea <_dtoa_r+0x2b6>
 8007eba:	21b0      	movs	r1, #176	; 0xb0
 8007ebc:	4b42      	ldr	r3, [pc, #264]	; (8007fc8 <_dtoa_r+0x394>)
 8007ebe:	482e      	ldr	r0, [pc, #184]	; (8007f78 <_dtoa_r+0x344>)
 8007ec0:	9a06      	ldr	r2, [sp, #24]
 8007ec2:	31ff      	adds	r1, #255	; 0xff
 8007ec4:	e6cb      	b.n	8007c5e <_dtoa_r+0x2a>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7dd      	b.n	8007e86 <_dtoa_r+0x252>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	940f      	str	r4, [sp, #60]	; 0x3c
 8007ece:	9322      	str	r3, [sp, #136]	; 0x88
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	3313      	adds	r3, #19
 8007eda:	e7cf      	b.n	8007e7c <_dtoa_r+0x248>
 8007edc:	2301      	movs	r3, #1
 8007ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ee0:	3b02      	subs	r3, #2
 8007ee2:	e7f6      	b.n	8007ed2 <_dtoa_r+0x29e>
 8007ee4:	3101      	adds	r1, #1
 8007ee6:	0052      	lsls	r2, r2, #1
 8007ee8:	e7dc      	b.n	8007ea4 <_dtoa_r+0x270>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	9a06      	ldr	r2, [sp, #24]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	9b07      	ldr	r3, [sp, #28]
 8007ef4:	2b0e      	cmp	r3, #14
 8007ef6:	d900      	bls.n	8007efa <_dtoa_r+0x2c6>
 8007ef8:	e0e5      	b.n	80080c6 <_dtoa_r+0x492>
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d100      	bne.n	8007f00 <_dtoa_r+0x2cc>
 8007efe:	e0e2      	b.n	80080c6 <_dtoa_r+0x492>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	dd64      	ble.n	8007fd0 <_dtoa_r+0x39c>
 8007f06:	210f      	movs	r1, #15
 8007f08:	9a03      	ldr	r2, [sp, #12]
 8007f0a:	4b2b      	ldr	r3, [pc, #172]	; (8007fb8 <_dtoa_r+0x384>)
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	00d2      	lsls	r2, r2, #3
 8007f10:	189b      	adds	r3, r3, r2
 8007f12:	681e      	ldr	r6, [r3, #0]
 8007f14:	685f      	ldr	r7, [r3, #4]
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	2402      	movs	r4, #2
 8007f1a:	111d      	asrs	r5, r3, #4
 8007f1c:	05db      	lsls	r3, r3, #23
 8007f1e:	d50a      	bpl.n	8007f36 <_dtoa_r+0x302>
 8007f20:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <_dtoa_r+0x398>)
 8007f22:	400d      	ands	r5, r1
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f2c:	f7f9 f8b2 	bl	8001094 <__aeabi_ddiv>
 8007f30:	9008      	str	r0, [sp, #32]
 8007f32:	9109      	str	r1, [sp, #36]	; 0x24
 8007f34:	3401      	adds	r4, #1
 8007f36:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <_dtoa_r+0x398>)
 8007f38:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	d108      	bne.n	8007f50 <_dtoa_r+0x31c>
 8007f3e:	9808      	ldr	r0, [sp, #32]
 8007f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f42:	0032      	movs	r2, r6
 8007f44:	003b      	movs	r3, r7
 8007f46:	f7f9 f8a5 	bl	8001094 <__aeabi_ddiv>
 8007f4a:	9008      	str	r0, [sp, #32]
 8007f4c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f4e:	e05a      	b.n	8008006 <_dtoa_r+0x3d2>
 8007f50:	2301      	movs	r3, #1
 8007f52:	421d      	tst	r5, r3
 8007f54:	d009      	beq.n	8007f6a <_dtoa_r+0x336>
 8007f56:	18e4      	adds	r4, r4, r3
 8007f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5a:	0030      	movs	r0, r6
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	0039      	movs	r1, r7
 8007f62:	f7f9 fc91 	bl	8001888 <__aeabi_dmul>
 8007f66:	0006      	movs	r6, r0
 8007f68:	000f      	movs	r7, r1
 8007f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f6c:	106d      	asrs	r5, r5, #1
 8007f6e:	3308      	adds	r3, #8
 8007f70:	e7e2      	b.n	8007f38 <_dtoa_r+0x304>
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	08009f8d 	.word	0x08009f8d
 8007f78:	08009fa4 	.word	0x08009fa4
 8007f7c:	7ff00000 	.word	0x7ff00000
 8007f80:	0000270f 	.word	0x0000270f
 8007f84:	08009f89 	.word	0x08009f89
 8007f88:	08009f8c 	.word	0x08009f8c
 8007f8c:	08009f5c 	.word	0x08009f5c
 8007f90:	08009f5d 	.word	0x08009f5d
 8007f94:	3ff00000 	.word	0x3ff00000
 8007f98:	fffffc01 	.word	0xfffffc01
 8007f9c:	3ff80000 	.word	0x3ff80000
 8007fa0:	636f4361 	.word	0x636f4361
 8007fa4:	3fd287a7 	.word	0x3fd287a7
 8007fa8:	8b60c8b3 	.word	0x8b60c8b3
 8007fac:	3fc68a28 	.word	0x3fc68a28
 8007fb0:	509f79fb 	.word	0x509f79fb
 8007fb4:	3fd34413 	.word	0x3fd34413
 8007fb8:	0800a090 	.word	0x0800a090
 8007fbc:	00000432 	.word	0x00000432
 8007fc0:	00000412 	.word	0x00000412
 8007fc4:	fe100000 	.word	0xfe100000
 8007fc8:	08009ffc 	.word	0x08009ffc
 8007fcc:	0800a068 	.word	0x0800a068
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	2402      	movs	r4, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <_dtoa_r+0x3d2>
 8007fd8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007fda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fdc:	220f      	movs	r2, #15
 8007fde:	425d      	negs	r5, r3
 8007fe0:	402a      	ands	r2, r5
 8007fe2:	4bdd      	ldr	r3, [pc, #884]	; (8008358 <_dtoa_r+0x724>)
 8007fe4:	00d2      	lsls	r2, r2, #3
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f7f9 fc4c 	bl	8001888 <__aeabi_dmul>
 8007ff0:	2701      	movs	r7, #1
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9008      	str	r0, [sp, #32]
 8007ff6:	9109      	str	r1, [sp, #36]	; 0x24
 8007ff8:	4ed8      	ldr	r6, [pc, #864]	; (800835c <_dtoa_r+0x728>)
 8007ffa:	112d      	asrs	r5, r5, #4
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	d000      	beq.n	8008002 <_dtoa_r+0x3ce>
 8008000:	e091      	b.n	8008126 <_dtoa_r+0x4f2>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1a1      	bne.n	8007f4a <_dtoa_r+0x316>
 8008006:	9e08      	ldr	r6, [sp, #32]
 8008008:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800800a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800800c:	2b00      	cmp	r3, #0
 800800e:	d100      	bne.n	8008012 <_dtoa_r+0x3de>
 8008010:	e094      	b.n	800813c <_dtoa_r+0x508>
 8008012:	2200      	movs	r2, #0
 8008014:	0030      	movs	r0, r6
 8008016:	0039      	movs	r1, r7
 8008018:	4bd1      	ldr	r3, [pc, #836]	; (8008360 <_dtoa_r+0x72c>)
 800801a:	f7f8 fa1b 	bl	8000454 <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d100      	bne.n	8008024 <_dtoa_r+0x3f0>
 8008022:	e08b      	b.n	800813c <_dtoa_r+0x508>
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d100      	bne.n	800802c <_dtoa_r+0x3f8>
 800802a:	e087      	b.n	800813c <_dtoa_r+0x508>
 800802c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	dd45      	ble.n	80080be <_dtoa_r+0x48a>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	3b01      	subs	r3, #1
 8008038:	930e      	str	r3, [sp, #56]	; 0x38
 800803a:	0030      	movs	r0, r6
 800803c:	4bc9      	ldr	r3, [pc, #804]	; (8008364 <_dtoa_r+0x730>)
 800803e:	0039      	movs	r1, r7
 8008040:	f7f9 fc22 	bl	8001888 <__aeabi_dmul>
 8008044:	9008      	str	r0, [sp, #32]
 8008046:	9109      	str	r1, [sp, #36]	; 0x24
 8008048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804a:	3401      	adds	r4, #1
 800804c:	0020      	movs	r0, r4
 800804e:	9e08      	ldr	r6, [sp, #32]
 8008050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008052:	9312      	str	r3, [sp, #72]	; 0x48
 8008054:	f7fa fab0 	bl	80025b8 <__aeabi_i2d>
 8008058:	0032      	movs	r2, r6
 800805a:	003b      	movs	r3, r7
 800805c:	f7f9 fc14 	bl	8001888 <__aeabi_dmul>
 8008060:	2200      	movs	r2, #0
 8008062:	4bc1      	ldr	r3, [pc, #772]	; (8008368 <_dtoa_r+0x734>)
 8008064:	f7f8 fcb6 	bl	80009d4 <__aeabi_dadd>
 8008068:	4ac0      	ldr	r2, [pc, #768]	; (800836c <_dtoa_r+0x738>)
 800806a:	9014      	str	r0, [sp, #80]	; 0x50
 800806c:	9115      	str	r1, [sp, #84]	; 0x54
 800806e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008070:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008072:	4694      	mov	ip, r2
 8008074:	9308      	str	r3, [sp, #32]
 8008076:	9409      	str	r4, [sp, #36]	; 0x24
 8008078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800807a:	4463      	add	r3, ip
 800807c:	9318      	str	r3, [sp, #96]	; 0x60
 800807e:	9309      	str	r3, [sp, #36]	; 0x24
 8008080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008082:	2b00      	cmp	r3, #0
 8008084:	d15e      	bne.n	8008144 <_dtoa_r+0x510>
 8008086:	2200      	movs	r2, #0
 8008088:	4bb9      	ldr	r3, [pc, #740]	; (8008370 <_dtoa_r+0x73c>)
 800808a:	0030      	movs	r0, r6
 800808c:	0039      	movs	r1, r7
 800808e:	f7f9 febd 	bl	8001e0c <__aeabi_dsub>
 8008092:	9a08      	ldr	r2, [sp, #32]
 8008094:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008096:	0004      	movs	r4, r0
 8008098:	000d      	movs	r5, r1
 800809a:	f7f8 f9ef 	bl	800047c <__aeabi_dcmpgt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d000      	beq.n	80080a4 <_dtoa_r+0x470>
 80080a2:	e2b3      	b.n	800860c <_dtoa_r+0x9d8>
 80080a4:	48b3      	ldr	r0, [pc, #716]	; (8008374 <_dtoa_r+0x740>)
 80080a6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80080a8:	4684      	mov	ip, r0
 80080aa:	4461      	add	r1, ip
 80080ac:	000b      	movs	r3, r1
 80080ae:	0020      	movs	r0, r4
 80080b0:	0029      	movs	r1, r5
 80080b2:	9a08      	ldr	r2, [sp, #32]
 80080b4:	f7f8 f9ce 	bl	8000454 <__aeabi_dcmplt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d000      	beq.n	80080be <_dtoa_r+0x48a>
 80080bc:	e2a3      	b.n	8008606 <_dtoa_r+0x9d2>
 80080be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	9409      	str	r4, [sp, #36]	; 0x24
 80080c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da00      	bge.n	80080ce <_dtoa_r+0x49a>
 80080cc:	e179      	b.n	80083c2 <_dtoa_r+0x78e>
 80080ce:	9a03      	ldr	r2, [sp, #12]
 80080d0:	2a0e      	cmp	r2, #14
 80080d2:	dd00      	ble.n	80080d6 <_dtoa_r+0x4a2>
 80080d4:	e175      	b.n	80083c2 <_dtoa_r+0x78e>
 80080d6:	4ba0      	ldr	r3, [pc, #640]	; (8008358 <_dtoa_r+0x724>)
 80080d8:	00d2      	lsls	r2, r2, #3
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	681e      	ldr	r6, [r3, #0]
 80080de:	685f      	ldr	r7, [r3, #4]
 80080e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	db00      	blt.n	80080e8 <_dtoa_r+0x4b4>
 80080e6:	e0e5      	b.n	80082b4 <_dtoa_r+0x680>
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	dd00      	ble.n	80080f0 <_dtoa_r+0x4bc>
 80080ee:	e0e1      	b.n	80082b4 <_dtoa_r+0x680>
 80080f0:	d000      	beq.n	80080f4 <_dtoa_r+0x4c0>
 80080f2:	e288      	b.n	8008606 <_dtoa_r+0x9d2>
 80080f4:	2200      	movs	r2, #0
 80080f6:	0030      	movs	r0, r6
 80080f8:	0039      	movs	r1, r7
 80080fa:	4b9d      	ldr	r3, [pc, #628]	; (8008370 <_dtoa_r+0x73c>)
 80080fc:	f7f9 fbc4 	bl	8001888 <__aeabi_dmul>
 8008100:	9a08      	ldr	r2, [sp, #32]
 8008102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008104:	f7f8 f9c4 	bl	8000490 <__aeabi_dcmpge>
 8008108:	9e07      	ldr	r6, [sp, #28]
 800810a:	0037      	movs	r7, r6
 800810c:	2800      	cmp	r0, #0
 800810e:	d000      	beq.n	8008112 <_dtoa_r+0x4de>
 8008110:	e25f      	b.n	80085d2 <_dtoa_r+0x99e>
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	3301      	adds	r3, #1
 8008118:	9308      	str	r3, [sp, #32]
 800811a:	2331      	movs	r3, #49	; 0x31
 800811c:	7013      	strb	r3, [r2, #0]
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	e25a      	b.n	80085dc <_dtoa_r+0x9a8>
 8008126:	423d      	tst	r5, r7
 8008128:	d005      	beq.n	8008136 <_dtoa_r+0x502>
 800812a:	6832      	ldr	r2, [r6, #0]
 800812c:	6873      	ldr	r3, [r6, #4]
 800812e:	f7f9 fbab 	bl	8001888 <__aeabi_dmul>
 8008132:	003b      	movs	r3, r7
 8008134:	3401      	adds	r4, #1
 8008136:	106d      	asrs	r5, r5, #1
 8008138:	3608      	adds	r6, #8
 800813a:	e75f      	b.n	8007ffc <_dtoa_r+0x3c8>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	930e      	str	r3, [sp, #56]	; 0x38
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	e783      	b.n	800804c <_dtoa_r+0x418>
 8008144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008146:	4b84      	ldr	r3, [pc, #528]	; (8008358 <_dtoa_r+0x724>)
 8008148:	3a01      	subs	r2, #1
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800814e:	189b      	adds	r3, r3, r2
 8008150:	9c08      	ldr	r4, [sp, #32]
 8008152:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2900      	cmp	r1, #0
 800815a:	d051      	beq.n	8008200 <_dtoa_r+0x5cc>
 800815c:	2000      	movs	r0, #0
 800815e:	4986      	ldr	r1, [pc, #536]	; (8008378 <_dtoa_r+0x744>)
 8008160:	f7f8 ff98 	bl	8001094 <__aeabi_ddiv>
 8008164:	0022      	movs	r2, r4
 8008166:	002b      	movs	r3, r5
 8008168:	f7f9 fe50 	bl	8001e0c <__aeabi_dsub>
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	0004      	movs	r4, r0
 8008170:	4694      	mov	ip, r2
 8008172:	000d      	movs	r5, r1
 8008174:	9b06      	ldr	r3, [sp, #24]
 8008176:	9314      	str	r3, [sp, #80]	; 0x50
 8008178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800817a:	4463      	add	r3, ip
 800817c:	9318      	str	r3, [sp, #96]	; 0x60
 800817e:	0039      	movs	r1, r7
 8008180:	0030      	movs	r0, r6
 8008182:	f7fa f9e3 	bl	800254c <__aeabi_d2iz>
 8008186:	9012      	str	r0, [sp, #72]	; 0x48
 8008188:	f7fa fa16 	bl	80025b8 <__aeabi_i2d>
 800818c:	0002      	movs	r2, r0
 800818e:	000b      	movs	r3, r1
 8008190:	0030      	movs	r0, r6
 8008192:	0039      	movs	r1, r7
 8008194:	f7f9 fe3a 	bl	8001e0c <__aeabi_dsub>
 8008198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800819a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800819c:	3301      	adds	r3, #1
 800819e:	9308      	str	r3, [sp, #32]
 80081a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081a2:	0006      	movs	r6, r0
 80081a4:	3330      	adds	r3, #48	; 0x30
 80081a6:	7013      	strb	r3, [r2, #0]
 80081a8:	0022      	movs	r2, r4
 80081aa:	002b      	movs	r3, r5
 80081ac:	000f      	movs	r7, r1
 80081ae:	f7f8 f951 	bl	8000454 <__aeabi_dcmplt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d174      	bne.n	80082a0 <_dtoa_r+0x66c>
 80081b6:	0032      	movs	r2, r6
 80081b8:	003b      	movs	r3, r7
 80081ba:	2000      	movs	r0, #0
 80081bc:	4968      	ldr	r1, [pc, #416]	; (8008360 <_dtoa_r+0x72c>)
 80081be:	f7f9 fe25 	bl	8001e0c <__aeabi_dsub>
 80081c2:	0022      	movs	r2, r4
 80081c4:	002b      	movs	r3, r5
 80081c6:	f7f8 f945 	bl	8000454 <__aeabi_dcmplt>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d000      	beq.n	80081d0 <_dtoa_r+0x59c>
 80081ce:	e0d7      	b.n	8008380 <_dtoa_r+0x74c>
 80081d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80081d2:	9a08      	ldr	r2, [sp, #32]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d100      	bne.n	80081da <_dtoa_r+0x5a6>
 80081d8:	e771      	b.n	80080be <_dtoa_r+0x48a>
 80081da:	2200      	movs	r2, #0
 80081dc:	0020      	movs	r0, r4
 80081de:	0029      	movs	r1, r5
 80081e0:	4b60      	ldr	r3, [pc, #384]	; (8008364 <_dtoa_r+0x730>)
 80081e2:	f7f9 fb51 	bl	8001888 <__aeabi_dmul>
 80081e6:	4b5f      	ldr	r3, [pc, #380]	; (8008364 <_dtoa_r+0x730>)
 80081e8:	0004      	movs	r4, r0
 80081ea:	000d      	movs	r5, r1
 80081ec:	0030      	movs	r0, r6
 80081ee:	0039      	movs	r1, r7
 80081f0:	2200      	movs	r2, #0
 80081f2:	f7f9 fb49 	bl	8001888 <__aeabi_dmul>
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	0006      	movs	r6, r0
 80081fa:	000f      	movs	r7, r1
 80081fc:	9314      	str	r3, [sp, #80]	; 0x50
 80081fe:	e7be      	b.n	800817e <_dtoa_r+0x54a>
 8008200:	0020      	movs	r0, r4
 8008202:	0029      	movs	r1, r5
 8008204:	f7f9 fb40 	bl	8001888 <__aeabi_dmul>
 8008208:	9a06      	ldr	r2, [sp, #24]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	4694      	mov	ip, r2
 800820e:	9308      	str	r3, [sp, #32]
 8008210:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008212:	9014      	str	r0, [sp, #80]	; 0x50
 8008214:	9115      	str	r1, [sp, #84]	; 0x54
 8008216:	4463      	add	r3, ip
 8008218:	9319      	str	r3, [sp, #100]	; 0x64
 800821a:	0030      	movs	r0, r6
 800821c:	0039      	movs	r1, r7
 800821e:	f7fa f995 	bl	800254c <__aeabi_d2iz>
 8008222:	9018      	str	r0, [sp, #96]	; 0x60
 8008224:	f7fa f9c8 	bl	80025b8 <__aeabi_i2d>
 8008228:	0002      	movs	r2, r0
 800822a:	000b      	movs	r3, r1
 800822c:	0030      	movs	r0, r6
 800822e:	0039      	movs	r1, r7
 8008230:	f7f9 fdec 	bl	8001e0c <__aeabi_dsub>
 8008234:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	3630      	adds	r6, #48	; 0x30
 800823a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800823c:	701e      	strb	r6, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	0004      	movs	r4, r0
 8008242:	000d      	movs	r5, r1
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	4293      	cmp	r3, r2
 8008248:	d12d      	bne.n	80082a6 <_dtoa_r+0x672>
 800824a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800824c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800824e:	9a06      	ldr	r2, [sp, #24]
 8008250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008252:	4694      	mov	ip, r2
 8008254:	4463      	add	r3, ip
 8008256:	2200      	movs	r2, #0
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	4b47      	ldr	r3, [pc, #284]	; (8008378 <_dtoa_r+0x744>)
 800825c:	f7f8 fbba 	bl	80009d4 <__aeabi_dadd>
 8008260:	0002      	movs	r2, r0
 8008262:	000b      	movs	r3, r1
 8008264:	0020      	movs	r0, r4
 8008266:	0029      	movs	r1, r5
 8008268:	f7f8 f908 	bl	800047c <__aeabi_dcmpgt>
 800826c:	2800      	cmp	r0, #0
 800826e:	d000      	beq.n	8008272 <_dtoa_r+0x63e>
 8008270:	e086      	b.n	8008380 <_dtoa_r+0x74c>
 8008272:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008276:	2000      	movs	r0, #0
 8008278:	493f      	ldr	r1, [pc, #252]	; (8008378 <_dtoa_r+0x744>)
 800827a:	f7f9 fdc7 	bl	8001e0c <__aeabi_dsub>
 800827e:	0002      	movs	r2, r0
 8008280:	000b      	movs	r3, r1
 8008282:	0020      	movs	r0, r4
 8008284:	0029      	movs	r1, r5
 8008286:	f7f8 f8e5 	bl	8000454 <__aeabi_dcmplt>
 800828a:	2800      	cmp	r0, #0
 800828c:	d100      	bne.n	8008290 <_dtoa_r+0x65c>
 800828e:	e716      	b.n	80080be <_dtoa_r+0x48a>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	001a      	movs	r2, r3
 8008294:	3a01      	subs	r2, #1
 8008296:	9208      	str	r2, [sp, #32]
 8008298:	7812      	ldrb	r2, [r2, #0]
 800829a:	2a30      	cmp	r2, #48	; 0x30
 800829c:	d0f8      	beq.n	8008290 <_dtoa_r+0x65c>
 800829e:	9308      	str	r3, [sp, #32]
 80082a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	e046      	b.n	8008334 <_dtoa_r+0x700>
 80082a6:	2200      	movs	r2, #0
 80082a8:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <_dtoa_r+0x730>)
 80082aa:	f7f9 faed 	bl	8001888 <__aeabi_dmul>
 80082ae:	0006      	movs	r6, r0
 80082b0:	000f      	movs	r7, r1
 80082b2:	e7b2      	b.n	800821a <_dtoa_r+0x5e6>
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	9a06      	ldr	r2, [sp, #24]
 80082b8:	930a      	str	r3, [sp, #40]	; 0x28
 80082ba:	9b07      	ldr	r3, [sp, #28]
 80082bc:	9c08      	ldr	r4, [sp, #32]
 80082be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082c0:	3b01      	subs	r3, #1
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c6:	0032      	movs	r2, r6
 80082c8:	003b      	movs	r3, r7
 80082ca:	0020      	movs	r0, r4
 80082cc:	0029      	movs	r1, r5
 80082ce:	f7f8 fee1 	bl	8001094 <__aeabi_ddiv>
 80082d2:	f7fa f93b 	bl	800254c <__aeabi_d2iz>
 80082d6:	9007      	str	r0, [sp, #28]
 80082d8:	f7fa f96e 	bl	80025b8 <__aeabi_i2d>
 80082dc:	0032      	movs	r2, r6
 80082de:	003b      	movs	r3, r7
 80082e0:	f7f9 fad2 	bl	8001888 <__aeabi_dmul>
 80082e4:	0002      	movs	r2, r0
 80082e6:	000b      	movs	r3, r1
 80082e8:	0020      	movs	r0, r4
 80082ea:	0029      	movs	r1, r5
 80082ec:	f7f9 fd8e 	bl	8001e0c <__aeabi_dsub>
 80082f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f2:	001a      	movs	r2, r3
 80082f4:	3201      	adds	r2, #1
 80082f6:	920a      	str	r2, [sp, #40]	; 0x28
 80082f8:	9208      	str	r2, [sp, #32]
 80082fa:	9a07      	ldr	r2, [sp, #28]
 80082fc:	3230      	adds	r2, #48	; 0x30
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008302:	429a      	cmp	r2, r3
 8008304:	d14f      	bne.n	80083a6 <_dtoa_r+0x772>
 8008306:	0002      	movs	r2, r0
 8008308:	000b      	movs	r3, r1
 800830a:	f7f8 fb63 	bl	80009d4 <__aeabi_dadd>
 800830e:	0032      	movs	r2, r6
 8008310:	003b      	movs	r3, r7
 8008312:	0004      	movs	r4, r0
 8008314:	000d      	movs	r5, r1
 8008316:	f7f8 f8b1 	bl	800047c <__aeabi_dcmpgt>
 800831a:	2800      	cmp	r0, #0
 800831c:	d12e      	bne.n	800837c <_dtoa_r+0x748>
 800831e:	0032      	movs	r2, r6
 8008320:	003b      	movs	r3, r7
 8008322:	0020      	movs	r0, r4
 8008324:	0029      	movs	r1, r5
 8008326:	f7f8 f88f 	bl	8000448 <__aeabi_dcmpeq>
 800832a:	2800      	cmp	r0, #0
 800832c:	d002      	beq.n	8008334 <_dtoa_r+0x700>
 800832e:	9b07      	ldr	r3, [sp, #28]
 8008330:	07de      	lsls	r6, r3, #31
 8008332:	d423      	bmi.n	800837c <_dtoa_r+0x748>
 8008334:	9905      	ldr	r1, [sp, #20]
 8008336:	9804      	ldr	r0, [sp, #16]
 8008338:	f000 fbd6 	bl	8008ae8 <_Bfree>
 800833c:	2300      	movs	r3, #0
 800833e:	9a08      	ldr	r2, [sp, #32]
 8008340:	7013      	strb	r3, [r2, #0]
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008346:	3301      	adds	r3, #1
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800834c:	2b00      	cmp	r3, #0
 800834e:	d100      	bne.n	8008352 <_dtoa_r+0x71e>
 8008350:	e4ba      	b.n	8007cc8 <_dtoa_r+0x94>
 8008352:	9a08      	ldr	r2, [sp, #32]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e4b7      	b.n	8007cc8 <_dtoa_r+0x94>
 8008358:	0800a090 	.word	0x0800a090
 800835c:	0800a068 	.word	0x0800a068
 8008360:	3ff00000 	.word	0x3ff00000
 8008364:	40240000 	.word	0x40240000
 8008368:	401c0000 	.word	0x401c0000
 800836c:	fcc00000 	.word	0xfcc00000
 8008370:	40140000 	.word	0x40140000
 8008374:	7cc00000 	.word	0x7cc00000
 8008378:	3fe00000 	.word	0x3fe00000
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	930e      	str	r3, [sp, #56]	; 0x38
 8008380:	9b08      	ldr	r3, [sp, #32]
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	3b01      	subs	r3, #1
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	2a39      	cmp	r2, #57	; 0x39
 800838a:	d108      	bne.n	800839e <_dtoa_r+0x76a>
 800838c:	9a06      	ldr	r2, [sp, #24]
 800838e:	429a      	cmp	r2, r3
 8008390:	d1f7      	bne.n	8008382 <_dtoa_r+0x74e>
 8008392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008394:	9906      	ldr	r1, [sp, #24]
 8008396:	3201      	adds	r2, #1
 8008398:	920e      	str	r2, [sp, #56]	; 0x38
 800839a:	2230      	movs	r2, #48	; 0x30
 800839c:	700a      	strb	r2, [r1, #0]
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	3201      	adds	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e77c      	b.n	80082a0 <_dtoa_r+0x66c>
 80083a6:	2200      	movs	r2, #0
 80083a8:	4ba9      	ldr	r3, [pc, #676]	; (8008650 <_dtoa_r+0xa1c>)
 80083aa:	f7f9 fa6d 	bl	8001888 <__aeabi_dmul>
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	0004      	movs	r4, r0
 80083b4:	000d      	movs	r5, r1
 80083b6:	f7f8 f847 	bl	8000448 <__aeabi_dcmpeq>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d100      	bne.n	80083c0 <_dtoa_r+0x78c>
 80083be:	e782      	b.n	80082c6 <_dtoa_r+0x692>
 80083c0:	e7b8      	b.n	8008334 <_dtoa_r+0x700>
 80083c2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80083c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80083c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	d012      	beq.n	80083f2 <_dtoa_r+0x7be>
 80083cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083ce:	2a01      	cmp	r2, #1
 80083d0:	dc6e      	bgt.n	80084b0 <_dtoa_r+0x87c>
 80083d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	d065      	beq.n	80084a4 <_dtoa_r+0x870>
 80083d8:	4a9e      	ldr	r2, [pc, #632]	; (8008654 <_dtoa_r+0xa20>)
 80083da:	189b      	adds	r3, r3, r2
 80083dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083de:	2101      	movs	r1, #1
 80083e0:	18d2      	adds	r2, r2, r3
 80083e2:	920a      	str	r2, [sp, #40]	; 0x28
 80083e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083e6:	9804      	ldr	r0, [sp, #16]
 80083e8:	18d3      	adds	r3, r2, r3
 80083ea:	930c      	str	r3, [sp, #48]	; 0x30
 80083ec:	f000 fc2c 	bl	8008c48 <__i2b>
 80083f0:	0007      	movs	r7, r0
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	d00e      	beq.n	8008414 <_dtoa_r+0x7e0>
 80083f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dd0b      	ble.n	8008414 <_dtoa_r+0x7e0>
 80083fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083fe:	0023      	movs	r3, r4
 8008400:	4294      	cmp	r4, r2
 8008402:	dd00      	ble.n	8008406 <_dtoa_r+0x7d2>
 8008404:	0013      	movs	r3, r2
 8008406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008408:	1ae4      	subs	r4, r4, r3
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	920a      	str	r2, [sp, #40]	; 0x28
 800840e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	930c      	str	r3, [sp, #48]	; 0x30
 8008414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01e      	beq.n	8008458 <_dtoa_r+0x824>
 800841a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05c      	beq.n	80084da <_dtoa_r+0x8a6>
 8008420:	2d00      	cmp	r5, #0
 8008422:	dd10      	ble.n	8008446 <_dtoa_r+0x812>
 8008424:	0039      	movs	r1, r7
 8008426:	002a      	movs	r2, r5
 8008428:	9804      	ldr	r0, [sp, #16]
 800842a:	f000 fcd5 	bl	8008dd8 <__pow5mult>
 800842e:	9a05      	ldr	r2, [sp, #20]
 8008430:	0001      	movs	r1, r0
 8008432:	0007      	movs	r7, r0
 8008434:	9804      	ldr	r0, [sp, #16]
 8008436:	f000 fc1f 	bl	8008c78 <__multiply>
 800843a:	0006      	movs	r6, r0
 800843c:	9905      	ldr	r1, [sp, #20]
 800843e:	9804      	ldr	r0, [sp, #16]
 8008440:	f000 fb52 	bl	8008ae8 <_Bfree>
 8008444:	9605      	str	r6, [sp, #20]
 8008446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008448:	1b5a      	subs	r2, r3, r5
 800844a:	42ab      	cmp	r3, r5
 800844c:	d004      	beq.n	8008458 <_dtoa_r+0x824>
 800844e:	9905      	ldr	r1, [sp, #20]
 8008450:	9804      	ldr	r0, [sp, #16]
 8008452:	f000 fcc1 	bl	8008dd8 <__pow5mult>
 8008456:	9005      	str	r0, [sp, #20]
 8008458:	2101      	movs	r1, #1
 800845a:	9804      	ldr	r0, [sp, #16]
 800845c:	f000 fbf4 	bl	8008c48 <__i2b>
 8008460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008462:	0006      	movs	r6, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd3a      	ble.n	80084de <_dtoa_r+0x8aa>
 8008468:	001a      	movs	r2, r3
 800846a:	0001      	movs	r1, r0
 800846c:	9804      	ldr	r0, [sp, #16]
 800846e:	f000 fcb3 	bl	8008dd8 <__pow5mult>
 8008472:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008474:	0006      	movs	r6, r0
 8008476:	2500      	movs	r5, #0
 8008478:	2b01      	cmp	r3, #1
 800847a:	dc38      	bgt.n	80084ee <_dtoa_r+0x8ba>
 800847c:	2500      	movs	r5, #0
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	42ab      	cmp	r3, r5
 8008482:	d130      	bne.n	80084e6 <_dtoa_r+0x8b2>
 8008484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008486:	031b      	lsls	r3, r3, #12
 8008488:	42ab      	cmp	r3, r5
 800848a:	d12c      	bne.n	80084e6 <_dtoa_r+0x8b2>
 800848c:	4b72      	ldr	r3, [pc, #456]	; (8008658 <_dtoa_r+0xa24>)
 800848e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008490:	4213      	tst	r3, r2
 8008492:	d028      	beq.n	80084e6 <_dtoa_r+0x8b2>
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	3501      	adds	r5, #1
 8008498:	3301      	adds	r3, #1
 800849a:	930a      	str	r3, [sp, #40]	; 0x28
 800849c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800849e:	3301      	adds	r3, #1
 80084a0:	930c      	str	r3, [sp, #48]	; 0x30
 80084a2:	e020      	b.n	80084e6 <_dtoa_r+0x8b2>
 80084a4:	2336      	movs	r3, #54	; 0x36
 80084a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80084aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	e795      	b.n	80083dc <_dtoa_r+0x7a8>
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	1e5d      	subs	r5, r3, #1
 80084b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b6:	42ab      	cmp	r3, r5
 80084b8:	db07      	blt.n	80084ca <_dtoa_r+0x896>
 80084ba:	1b5d      	subs	r5, r3, r5
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da8b      	bge.n	80083dc <_dtoa_r+0x7a8>
 80084c4:	1ae4      	subs	r4, r4, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	e788      	b.n	80083dc <_dtoa_r+0x7a8>
 80084ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ce:	1aeb      	subs	r3, r5, r3
 80084d0:	18d3      	adds	r3, r2, r3
 80084d2:	950d      	str	r5, [sp, #52]	; 0x34
 80084d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80084d6:	2500      	movs	r5, #0
 80084d8:	e7f0      	b.n	80084bc <_dtoa_r+0x888>
 80084da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084dc:	e7b7      	b.n	800844e <_dtoa_r+0x81a>
 80084de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084e0:	2500      	movs	r5, #0
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	ddca      	ble.n	800847c <_dtoa_r+0x848>
 80084e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084e8:	2001      	movs	r0, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <_dtoa_r+0x8cc>
 80084ee:	6933      	ldr	r3, [r6, #16]
 80084f0:	3303      	adds	r3, #3
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	18f3      	adds	r3, r6, r3
 80084f6:	6858      	ldr	r0, [r3, #4]
 80084f8:	f000 fb5e 	bl	8008bb8 <__hi0bits>
 80084fc:	2320      	movs	r3, #32
 80084fe:	1a18      	subs	r0, r3, r0
 8008500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008502:	1818      	adds	r0, r3, r0
 8008504:	0002      	movs	r2, r0
 8008506:	231f      	movs	r3, #31
 8008508:	401a      	ands	r2, r3
 800850a:	4218      	tst	r0, r3
 800850c:	d047      	beq.n	800859e <_dtoa_r+0x96a>
 800850e:	3301      	adds	r3, #1
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	2b04      	cmp	r3, #4
 8008514:	dd3f      	ble.n	8008596 <_dtoa_r+0x962>
 8008516:	231c      	movs	r3, #28
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800851c:	18e4      	adds	r4, r4, r3
 800851e:	18d2      	adds	r2, r2, r3
 8008520:	920a      	str	r2, [sp, #40]	; 0x28
 8008522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008524:	18d3      	adds	r3, r2, r3
 8008526:	930c      	str	r3, [sp, #48]	; 0x30
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	dd05      	ble.n	800853a <_dtoa_r+0x906>
 800852e:	001a      	movs	r2, r3
 8008530:	9905      	ldr	r1, [sp, #20]
 8008532:	9804      	ldr	r0, [sp, #16]
 8008534:	f000 fcac 	bl	8008e90 <__lshift>
 8008538:	9005      	str	r0, [sp, #20]
 800853a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800853c:	2b00      	cmp	r3, #0
 800853e:	dd05      	ble.n	800854c <_dtoa_r+0x918>
 8008540:	0031      	movs	r1, r6
 8008542:	001a      	movs	r2, r3
 8008544:	9804      	ldr	r0, [sp, #16]
 8008546:	f000 fca3 	bl	8008e90 <__lshift>
 800854a:	0006      	movs	r6, r0
 800854c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800854e:	2b00      	cmp	r3, #0
 8008550:	d027      	beq.n	80085a2 <_dtoa_r+0x96e>
 8008552:	0031      	movs	r1, r6
 8008554:	9805      	ldr	r0, [sp, #20]
 8008556:	f000 fd09 	bl	8008f6c <__mcmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	da21      	bge.n	80085a2 <_dtoa_r+0x96e>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	220a      	movs	r2, #10
 8008562:	3b01      	subs	r3, #1
 8008564:	9303      	str	r3, [sp, #12]
 8008566:	9905      	ldr	r1, [sp, #20]
 8008568:	2300      	movs	r3, #0
 800856a:	9804      	ldr	r0, [sp, #16]
 800856c:	f000 fae0 	bl	8008b30 <__multadd>
 8008570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008572:	9005      	str	r0, [sp, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d100      	bne.n	800857a <_dtoa_r+0x946>
 8008578:	e15d      	b.n	8008836 <_dtoa_r+0xc02>
 800857a:	2300      	movs	r3, #0
 800857c:	0039      	movs	r1, r7
 800857e:	220a      	movs	r2, #10
 8008580:	9804      	ldr	r0, [sp, #16]
 8008582:	f000 fad5 	bl	8008b30 <__multadd>
 8008586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008588:	0007      	movs	r7, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc49      	bgt.n	8008622 <_dtoa_r+0x9ee>
 800858e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008590:	2b02      	cmp	r3, #2
 8008592:	dc0e      	bgt.n	80085b2 <_dtoa_r+0x97e>
 8008594:	e045      	b.n	8008622 <_dtoa_r+0x9ee>
 8008596:	2b04      	cmp	r3, #4
 8008598:	d0c6      	beq.n	8008528 <_dtoa_r+0x8f4>
 800859a:	331c      	adds	r3, #28
 800859c:	e7bd      	b.n	800851a <_dtoa_r+0x8e6>
 800859e:	0013      	movs	r3, r2
 80085a0:	e7fb      	b.n	800859a <_dtoa_r+0x966>
 80085a2:	9b07      	ldr	r3, [sp, #28]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc36      	bgt.n	8008616 <_dtoa_r+0x9e2>
 80085a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	dd33      	ble.n	8008616 <_dtoa_r+0x9e2>
 80085ae:	9b07      	ldr	r3, [sp, #28]
 80085b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <_dtoa_r+0x99e>
 80085b8:	0031      	movs	r1, r6
 80085ba:	2205      	movs	r2, #5
 80085bc:	9804      	ldr	r0, [sp, #16]
 80085be:	f000 fab7 	bl	8008b30 <__multadd>
 80085c2:	0006      	movs	r6, r0
 80085c4:	0001      	movs	r1, r0
 80085c6:	9805      	ldr	r0, [sp, #20]
 80085c8:	f000 fcd0 	bl	8008f6c <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dd00      	ble.n	80085d2 <_dtoa_r+0x99e>
 80085d0:	e59f      	b.n	8008112 <_dtoa_r+0x4de>
 80085d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085d4:	43db      	mvns	r3, r3
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	9b06      	ldr	r3, [sp, #24]
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	2500      	movs	r5, #0
 80085de:	0031      	movs	r1, r6
 80085e0:	9804      	ldr	r0, [sp, #16]
 80085e2:	f000 fa81 	bl	8008ae8 <_Bfree>
 80085e6:	2f00      	cmp	r7, #0
 80085e8:	d100      	bne.n	80085ec <_dtoa_r+0x9b8>
 80085ea:	e6a3      	b.n	8008334 <_dtoa_r+0x700>
 80085ec:	2d00      	cmp	r5, #0
 80085ee:	d005      	beq.n	80085fc <_dtoa_r+0x9c8>
 80085f0:	42bd      	cmp	r5, r7
 80085f2:	d003      	beq.n	80085fc <_dtoa_r+0x9c8>
 80085f4:	0029      	movs	r1, r5
 80085f6:	9804      	ldr	r0, [sp, #16]
 80085f8:	f000 fa76 	bl	8008ae8 <_Bfree>
 80085fc:	0039      	movs	r1, r7
 80085fe:	9804      	ldr	r0, [sp, #16]
 8008600:	f000 fa72 	bl	8008ae8 <_Bfree>
 8008604:	e696      	b.n	8008334 <_dtoa_r+0x700>
 8008606:	2600      	movs	r6, #0
 8008608:	0037      	movs	r7, r6
 800860a:	e7e2      	b.n	80085d2 <_dtoa_r+0x99e>
 800860c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800860e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	0037      	movs	r7, r6
 8008614:	e57d      	b.n	8008112 <_dtoa_r+0x4de>
 8008616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d100      	bne.n	800861e <_dtoa_r+0x9ea>
 800861c:	e0c3      	b.n	80087a6 <_dtoa_r+0xb72>
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	930b      	str	r3, [sp, #44]	; 0x2c
 8008622:	2c00      	cmp	r4, #0
 8008624:	dd05      	ble.n	8008632 <_dtoa_r+0x9fe>
 8008626:	0039      	movs	r1, r7
 8008628:	0022      	movs	r2, r4
 800862a:	9804      	ldr	r0, [sp, #16]
 800862c:	f000 fc30 	bl	8008e90 <__lshift>
 8008630:	0007      	movs	r7, r0
 8008632:	0038      	movs	r0, r7
 8008634:	2d00      	cmp	r5, #0
 8008636:	d024      	beq.n	8008682 <_dtoa_r+0xa4e>
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	9804      	ldr	r0, [sp, #16]
 800863c:	f000 fa10 	bl	8008a60 <_Balloc>
 8008640:	1e04      	subs	r4, r0, #0
 8008642:	d111      	bne.n	8008668 <_dtoa_r+0xa34>
 8008644:	0022      	movs	r2, r4
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <_dtoa_r+0xa28>)
 8008648:	4805      	ldr	r0, [pc, #20]	; (8008660 <_dtoa_r+0xa2c>)
 800864a:	4906      	ldr	r1, [pc, #24]	; (8008664 <_dtoa_r+0xa30>)
 800864c:	f7ff fb07 	bl	8007c5e <_dtoa_r+0x2a>
 8008650:	40240000 	.word	0x40240000
 8008654:	00000433 	.word	0x00000433
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	08009ffc 	.word	0x08009ffc
 8008660:	08009fa4 	.word	0x08009fa4
 8008664:	000002ef 	.word	0x000002ef
 8008668:	0039      	movs	r1, r7
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	310c      	adds	r1, #12
 800866e:	3202      	adds	r2, #2
 8008670:	0092      	lsls	r2, r2, #2
 8008672:	300c      	adds	r0, #12
 8008674:	f000 ffca 	bl	800960c <memcpy>
 8008678:	2201      	movs	r2, #1
 800867a:	0021      	movs	r1, r4
 800867c:	9804      	ldr	r0, [sp, #16]
 800867e:	f000 fc07 	bl	8008e90 <__lshift>
 8008682:	9b06      	ldr	r3, [sp, #24]
 8008684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008686:	9307      	str	r3, [sp, #28]
 8008688:	3b01      	subs	r3, #1
 800868a:	189b      	adds	r3, r3, r2
 800868c:	2201      	movs	r2, #1
 800868e:	003d      	movs	r5, r7
 8008690:	0007      	movs	r7, r0
 8008692:	930e      	str	r3, [sp, #56]	; 0x38
 8008694:	9b08      	ldr	r3, [sp, #32]
 8008696:	4013      	ands	r3, r2
 8008698:	930d      	str	r3, [sp, #52]	; 0x34
 800869a:	0031      	movs	r1, r6
 800869c:	9805      	ldr	r0, [sp, #20]
 800869e:	f7ff fa39 	bl	8007b14 <quorem>
 80086a2:	0029      	movs	r1, r5
 80086a4:	0004      	movs	r4, r0
 80086a6:	900b      	str	r0, [sp, #44]	; 0x2c
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	f000 fc5f 	bl	8008f6c <__mcmp>
 80086ae:	003a      	movs	r2, r7
 80086b0:	900c      	str	r0, [sp, #48]	; 0x30
 80086b2:	0031      	movs	r1, r6
 80086b4:	9804      	ldr	r0, [sp, #16]
 80086b6:	f000 fc75 	bl	8008fa4 <__mdiff>
 80086ba:	2201      	movs	r2, #1
 80086bc:	68c3      	ldr	r3, [r0, #12]
 80086be:	3430      	adds	r4, #48	; 0x30
 80086c0:	9008      	str	r0, [sp, #32]
 80086c2:	920a      	str	r2, [sp, #40]	; 0x28
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <_dtoa_r+0xa9e>
 80086c8:	0001      	movs	r1, r0
 80086ca:	9805      	ldr	r0, [sp, #20]
 80086cc:	f000 fc4e 	bl	8008f6c <__mcmp>
 80086d0:	900a      	str	r0, [sp, #40]	; 0x28
 80086d2:	9908      	ldr	r1, [sp, #32]
 80086d4:	9804      	ldr	r0, [sp, #16]
 80086d6:	f000 fa07 	bl	8008ae8 <_Bfree>
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086de:	3301      	adds	r3, #1
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086e4:	4313      	orrs	r3, r2
 80086e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086e8:	4313      	orrs	r3, r2
 80086ea:	d109      	bne.n	8008700 <_dtoa_r+0xacc>
 80086ec:	2c39      	cmp	r4, #57	; 0x39
 80086ee:	d022      	beq.n	8008736 <_dtoa_r+0xb02>
 80086f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd01      	ble.n	80086fa <_dtoa_r+0xac6>
 80086f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086f8:	3431      	adds	r4, #49	; 0x31
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	701c      	strb	r4, [r3, #0]
 80086fe:	e76e      	b.n	80085de <_dtoa_r+0x9aa>
 8008700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008702:	2b00      	cmp	r3, #0
 8008704:	db04      	blt.n	8008710 <_dtoa_r+0xadc>
 8008706:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008708:	4313      	orrs	r3, r2
 800870a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800870c:	4313      	orrs	r3, r2
 800870e:	d11e      	bne.n	800874e <_dtoa_r+0xb1a>
 8008710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	ddf1      	ble.n	80086fa <_dtoa_r+0xac6>
 8008716:	9905      	ldr	r1, [sp, #20]
 8008718:	2201      	movs	r2, #1
 800871a:	9804      	ldr	r0, [sp, #16]
 800871c:	f000 fbb8 	bl	8008e90 <__lshift>
 8008720:	0031      	movs	r1, r6
 8008722:	9005      	str	r0, [sp, #20]
 8008724:	f000 fc22 	bl	8008f6c <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	dc02      	bgt.n	8008732 <_dtoa_r+0xafe>
 800872c:	d1e5      	bne.n	80086fa <_dtoa_r+0xac6>
 800872e:	07e3      	lsls	r3, r4, #31
 8008730:	d5e3      	bpl.n	80086fa <_dtoa_r+0xac6>
 8008732:	2c39      	cmp	r4, #57	; 0x39
 8008734:	d1df      	bne.n	80086f6 <_dtoa_r+0xac2>
 8008736:	2339      	movs	r3, #57	; 0x39
 8008738:	9a07      	ldr	r2, [sp, #28]
 800873a:	7013      	strb	r3, [r2, #0]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	9308      	str	r3, [sp, #32]
 8008740:	3b01      	subs	r3, #1
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	2a39      	cmp	r2, #57	; 0x39
 8008746:	d063      	beq.n	8008810 <_dtoa_r+0xbdc>
 8008748:	3201      	adds	r2, #1
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	e747      	b.n	80085de <_dtoa_r+0x9aa>
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	2b00      	cmp	r3, #0
 8008752:	dd03      	ble.n	800875c <_dtoa_r+0xb28>
 8008754:	2c39      	cmp	r4, #57	; 0x39
 8008756:	d0ee      	beq.n	8008736 <_dtoa_r+0xb02>
 8008758:	3401      	adds	r4, #1
 800875a:	e7ce      	b.n	80086fa <_dtoa_r+0xac6>
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	9a07      	ldr	r2, [sp, #28]
 8008760:	701c      	strb	r4, [r3, #0]
 8008762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008764:	4293      	cmp	r3, r2
 8008766:	d03e      	beq.n	80087e6 <_dtoa_r+0xbb2>
 8008768:	2300      	movs	r3, #0
 800876a:	220a      	movs	r2, #10
 800876c:	9905      	ldr	r1, [sp, #20]
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	f000 f9de 	bl	8008b30 <__multadd>
 8008774:	2300      	movs	r3, #0
 8008776:	9005      	str	r0, [sp, #20]
 8008778:	220a      	movs	r2, #10
 800877a:	0029      	movs	r1, r5
 800877c:	9804      	ldr	r0, [sp, #16]
 800877e:	42bd      	cmp	r5, r7
 8008780:	d106      	bne.n	8008790 <_dtoa_r+0xb5c>
 8008782:	f000 f9d5 	bl	8008b30 <__multadd>
 8008786:	0005      	movs	r5, r0
 8008788:	0007      	movs	r7, r0
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	9307      	str	r3, [sp, #28]
 800878e:	e784      	b.n	800869a <_dtoa_r+0xa66>
 8008790:	f000 f9ce 	bl	8008b30 <__multadd>
 8008794:	0039      	movs	r1, r7
 8008796:	0005      	movs	r5, r0
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	9804      	ldr	r0, [sp, #16]
 800879e:	f000 f9c7 	bl	8008b30 <__multadd>
 80087a2:	0007      	movs	r7, r0
 80087a4:	e7f1      	b.n	800878a <_dtoa_r+0xb56>
 80087a6:	9b07      	ldr	r3, [sp, #28]
 80087a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087aa:	2500      	movs	r5, #0
 80087ac:	0031      	movs	r1, r6
 80087ae:	9805      	ldr	r0, [sp, #20]
 80087b0:	f7ff f9b0 	bl	8007b14 <quorem>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	3030      	adds	r0, #48	; 0x30
 80087b8:	5558      	strb	r0, [r3, r5]
 80087ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087bc:	3501      	adds	r5, #1
 80087be:	0004      	movs	r4, r0
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dd07      	ble.n	80087d4 <_dtoa_r+0xba0>
 80087c4:	2300      	movs	r3, #0
 80087c6:	220a      	movs	r2, #10
 80087c8:	9905      	ldr	r1, [sp, #20]
 80087ca:	9804      	ldr	r0, [sp, #16]
 80087cc:	f000 f9b0 	bl	8008b30 <__multadd>
 80087d0:	9005      	str	r0, [sp, #20]
 80087d2:	e7eb      	b.n	80087ac <_dtoa_r+0xb78>
 80087d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d6:	2301      	movs	r3, #1
 80087d8:	2a00      	cmp	r2, #0
 80087da:	dd00      	ble.n	80087de <_dtoa_r+0xbaa>
 80087dc:	0013      	movs	r3, r2
 80087de:	2500      	movs	r5, #0
 80087e0:	9a06      	ldr	r2, [sp, #24]
 80087e2:	18d3      	adds	r3, r2, r3
 80087e4:	9308      	str	r3, [sp, #32]
 80087e6:	9905      	ldr	r1, [sp, #20]
 80087e8:	2201      	movs	r2, #1
 80087ea:	9804      	ldr	r0, [sp, #16]
 80087ec:	f000 fb50 	bl	8008e90 <__lshift>
 80087f0:	0031      	movs	r1, r6
 80087f2:	9005      	str	r0, [sp, #20]
 80087f4:	f000 fbba 	bl	8008f6c <__mcmp>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	dc9f      	bgt.n	800873c <_dtoa_r+0xb08>
 80087fc:	d101      	bne.n	8008802 <_dtoa_r+0xbce>
 80087fe:	07e4      	lsls	r4, r4, #31
 8008800:	d49c      	bmi.n	800873c <_dtoa_r+0xb08>
 8008802:	9b08      	ldr	r3, [sp, #32]
 8008804:	9308      	str	r3, [sp, #32]
 8008806:	3b01      	subs	r3, #1
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	2a30      	cmp	r2, #48	; 0x30
 800880c:	d0fa      	beq.n	8008804 <_dtoa_r+0xbd0>
 800880e:	e6e6      	b.n	80085de <_dtoa_r+0x9aa>
 8008810:	9a06      	ldr	r2, [sp, #24]
 8008812:	429a      	cmp	r2, r3
 8008814:	d193      	bne.n	800873e <_dtoa_r+0xb0a>
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	2331      	movs	r3, #49	; 0x31
 800881e:	7013      	strb	r3, [r2, #0]
 8008820:	e6dd      	b.n	80085de <_dtoa_r+0x9aa>
 8008822:	4b09      	ldr	r3, [pc, #36]	; (8008848 <_dtoa_r+0xc14>)
 8008824:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008826:	9306      	str	r3, [sp, #24]
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <_dtoa_r+0xc18>)
 800882a:	2a00      	cmp	r2, #0
 800882c:	d001      	beq.n	8008832 <_dtoa_r+0xbfe>
 800882e:	f7ff fa49 	bl	8007cc4 <_dtoa_r+0x90>
 8008832:	f7ff fa49 	bl	8007cc8 <_dtoa_r+0x94>
 8008836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008838:	2b00      	cmp	r3, #0
 800883a:	dcb6      	bgt.n	80087aa <_dtoa_r+0xb76>
 800883c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800883e:	2b02      	cmp	r3, #2
 8008840:	dd00      	ble.n	8008844 <_dtoa_r+0xc10>
 8008842:	e6b6      	b.n	80085b2 <_dtoa_r+0x97e>
 8008844:	e7b1      	b.n	80087aa <_dtoa_r+0xb76>
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	08009f80 	.word	0x08009f80
 800884c:	08009f88 	.word	0x08009f88

08008850 <_free_r>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	0005      	movs	r5, r0
 8008854:	2900      	cmp	r1, #0
 8008856:	d010      	beq.n	800887a <_free_r+0x2a>
 8008858:	1f0c      	subs	r4, r1, #4
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	da00      	bge.n	8008862 <_free_r+0x12>
 8008860:	18e4      	adds	r4, r4, r3
 8008862:	0028      	movs	r0, r5
 8008864:	f000 f8ec 	bl	8008a40 <__malloc_lock>
 8008868:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <_free_r+0x90>)
 800886a:	6813      	ldr	r3, [r2, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <_free_r+0x2c>
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	6014      	str	r4, [r2, #0]
 8008874:	0028      	movs	r0, r5
 8008876:	f000 f8eb 	bl	8008a50 <__malloc_unlock>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	42a3      	cmp	r3, r4
 800887e:	d908      	bls.n	8008892 <_free_r+0x42>
 8008880:	6820      	ldr	r0, [r4, #0]
 8008882:	1821      	adds	r1, r4, r0
 8008884:	428b      	cmp	r3, r1
 8008886:	d1f3      	bne.n	8008870 <_free_r+0x20>
 8008888:	6819      	ldr	r1, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	1809      	adds	r1, r1, r0
 800888e:	6021      	str	r1, [r4, #0]
 8008890:	e7ee      	b.n	8008870 <_free_r+0x20>
 8008892:	001a      	movs	r2, r3
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <_free_r+0x4e>
 800889a:	42a3      	cmp	r3, r4
 800889c:	d9f9      	bls.n	8008892 <_free_r+0x42>
 800889e:	6811      	ldr	r1, [r2, #0]
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	42a0      	cmp	r0, r4
 80088a4:	d10b      	bne.n	80088be <_free_r+0x6e>
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1809      	adds	r1, r1, r0
 80088aa:	1850      	adds	r0, r2, r1
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	4283      	cmp	r3, r0
 80088b0:	d1e0      	bne.n	8008874 <_free_r+0x24>
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	1841      	adds	r1, r0, r1
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	6053      	str	r3, [r2, #4]
 80088bc:	e7da      	b.n	8008874 <_free_r+0x24>
 80088be:	42a0      	cmp	r0, r4
 80088c0:	d902      	bls.n	80088c8 <_free_r+0x78>
 80088c2:	230c      	movs	r3, #12
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	e7d5      	b.n	8008874 <_free_r+0x24>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	1821      	adds	r1, r4, r0
 80088cc:	428b      	cmp	r3, r1
 80088ce:	d103      	bne.n	80088d8 <_free_r+0x88>
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	1809      	adds	r1, r1, r0
 80088d6:	6021      	str	r1, [r4, #0]
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	6054      	str	r4, [r2, #4]
 80088dc:	e7ca      	b.n	8008874 <_free_r+0x24>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	20000524 	.word	0x20000524

080088e4 <malloc>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <malloc+0x10>)
 80088e8:	0001      	movs	r1, r0
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	f000 f826 	bl	800893c <_malloc_r>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	2000006c 	.word	0x2000006c

080088f8 <sbrk_aligned>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4e0f      	ldr	r6, [pc, #60]	; (8008938 <sbrk_aligned+0x40>)
 80088fc:	000d      	movs	r5, r1
 80088fe:	6831      	ldr	r1, [r6, #0]
 8008900:	0004      	movs	r4, r0
 8008902:	2900      	cmp	r1, #0
 8008904:	d102      	bne.n	800890c <sbrk_aligned+0x14>
 8008906:	f000 fe6f 	bl	80095e8 <_sbrk_r>
 800890a:	6030      	str	r0, [r6, #0]
 800890c:	0029      	movs	r1, r5
 800890e:	0020      	movs	r0, r4
 8008910:	f000 fe6a 	bl	80095e8 <_sbrk_r>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d00a      	beq.n	800892e <sbrk_aligned+0x36>
 8008918:	2303      	movs	r3, #3
 800891a:	1cc5      	adds	r5, r0, #3
 800891c:	439d      	bics	r5, r3
 800891e:	42a8      	cmp	r0, r5
 8008920:	d007      	beq.n	8008932 <sbrk_aligned+0x3a>
 8008922:	1a29      	subs	r1, r5, r0
 8008924:	0020      	movs	r0, r4
 8008926:	f000 fe5f 	bl	80095e8 <_sbrk_r>
 800892a:	3001      	adds	r0, #1
 800892c:	d101      	bne.n	8008932 <sbrk_aligned+0x3a>
 800892e:	2501      	movs	r5, #1
 8008930:	426d      	negs	r5, r5
 8008932:	0028      	movs	r0, r5
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	46c0      	nop			; (mov r8, r8)
 8008938:	20000528 	.word	0x20000528

0800893c <_malloc_r>:
 800893c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893e:	2203      	movs	r2, #3
 8008940:	1ccb      	adds	r3, r1, #3
 8008942:	4393      	bics	r3, r2
 8008944:	3308      	adds	r3, #8
 8008946:	0006      	movs	r6, r0
 8008948:	001f      	movs	r7, r3
 800894a:	2b0c      	cmp	r3, #12
 800894c:	d238      	bcs.n	80089c0 <_malloc_r+0x84>
 800894e:	270c      	movs	r7, #12
 8008950:	42b9      	cmp	r1, r7
 8008952:	d837      	bhi.n	80089c4 <_malloc_r+0x88>
 8008954:	0030      	movs	r0, r6
 8008956:	f000 f873 	bl	8008a40 <__malloc_lock>
 800895a:	4b38      	ldr	r3, [pc, #224]	; (8008a3c <_malloc_r+0x100>)
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	001c      	movs	r4, r3
 8008962:	2c00      	cmp	r4, #0
 8008964:	d133      	bne.n	80089ce <_malloc_r+0x92>
 8008966:	0039      	movs	r1, r7
 8008968:	0030      	movs	r0, r6
 800896a:	f7ff ffc5 	bl	80088f8 <sbrk_aligned>
 800896e:	0004      	movs	r4, r0
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d15e      	bne.n	8008a32 <_malloc_r+0xf6>
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	681c      	ldr	r4, [r3, #0]
 8008978:	0025      	movs	r5, r4
 800897a:	2d00      	cmp	r5, #0
 800897c:	d14e      	bne.n	8008a1c <_malloc_r+0xe0>
 800897e:	2c00      	cmp	r4, #0
 8008980:	d051      	beq.n	8008a26 <_malloc_r+0xea>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0029      	movs	r1, r5
 8008986:	18e3      	adds	r3, r4, r3
 8008988:	0030      	movs	r0, r6
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	f000 fe2c 	bl	80095e8 <_sbrk_r>
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	4283      	cmp	r3, r0
 8008994:	d147      	bne.n	8008a26 <_malloc_r+0xea>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	0030      	movs	r0, r6
 800899a:	1aff      	subs	r7, r7, r3
 800899c:	0039      	movs	r1, r7
 800899e:	f7ff ffab 	bl	80088f8 <sbrk_aligned>
 80089a2:	3001      	adds	r0, #1
 80089a4:	d03f      	beq.n	8008a26 <_malloc_r+0xea>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	19db      	adds	r3, r3, r7
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	9b00      	ldr	r3, [sp, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d040      	beq.n	8008a36 <_malloc_r+0xfa>
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	42a2      	cmp	r2, r4
 80089b8:	d133      	bne.n	8008a22 <_malloc_r+0xe6>
 80089ba:	2200      	movs	r2, #0
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	e014      	b.n	80089ea <_malloc_r+0xae>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dac5      	bge.n	8008950 <_malloc_r+0x14>
 80089c4:	230c      	movs	r3, #12
 80089c6:	2500      	movs	r5, #0
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	0028      	movs	r0, r5
 80089cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	1bc9      	subs	r1, r1, r7
 80089d2:	d420      	bmi.n	8008a16 <_malloc_r+0xda>
 80089d4:	290b      	cmp	r1, #11
 80089d6:	d918      	bls.n	8008a0a <_malloc_r+0xce>
 80089d8:	19e2      	adds	r2, r4, r7
 80089da:	6027      	str	r7, [r4, #0]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d112      	bne.n	8008a06 <_malloc_r+0xca>
 80089e0:	9b00      	ldr	r3, [sp, #0]
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	6011      	str	r1, [r2, #0]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	0030      	movs	r0, r6
 80089ec:	0025      	movs	r5, r4
 80089ee:	f000 f82f 	bl	8008a50 <__malloc_unlock>
 80089f2:	2207      	movs	r2, #7
 80089f4:	350b      	adds	r5, #11
 80089f6:	1d23      	adds	r3, r4, #4
 80089f8:	4395      	bics	r5, r2
 80089fa:	1aea      	subs	r2, r5, r3
 80089fc:	429d      	cmp	r5, r3
 80089fe:	d0e4      	beq.n	80089ca <_malloc_r+0x8e>
 8008a00:	1b5b      	subs	r3, r3, r5
 8008a02:	50a3      	str	r3, [r4, r2]
 8008a04:	e7e1      	b.n	80089ca <_malloc_r+0x8e>
 8008a06:	605a      	str	r2, [r3, #4]
 8008a08:	e7ec      	b.n	80089e4 <_malloc_r+0xa8>
 8008a0a:	6862      	ldr	r2, [r4, #4]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d1d5      	bne.n	80089bc <_malloc_r+0x80>
 8008a10:	9b00      	ldr	r3, [sp, #0]
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	e7e9      	b.n	80089ea <_malloc_r+0xae>
 8008a16:	0023      	movs	r3, r4
 8008a18:	6864      	ldr	r4, [r4, #4]
 8008a1a:	e7a2      	b.n	8008962 <_malloc_r+0x26>
 8008a1c:	002c      	movs	r4, r5
 8008a1e:	686d      	ldr	r5, [r5, #4]
 8008a20:	e7ab      	b.n	800897a <_malloc_r+0x3e>
 8008a22:	0013      	movs	r3, r2
 8008a24:	e7c4      	b.n	80089b0 <_malloc_r+0x74>
 8008a26:	230c      	movs	r3, #12
 8008a28:	0030      	movs	r0, r6
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	f000 f810 	bl	8008a50 <__malloc_unlock>
 8008a30:	e7cb      	b.n	80089ca <_malloc_r+0x8e>
 8008a32:	6027      	str	r7, [r4, #0]
 8008a34:	e7d9      	b.n	80089ea <_malloc_r+0xae>
 8008a36:	605b      	str	r3, [r3, #4]
 8008a38:	deff      	udf	#255	; 0xff
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	20000524 	.word	0x20000524

08008a40 <__malloc_lock>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	4802      	ldr	r0, [pc, #8]	; (8008a4c <__malloc_lock+0xc>)
 8008a44:	f7ff f859 	bl	8007afa <__retarget_lock_acquire_recursive>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	20000520 	.word	0x20000520

08008a50 <__malloc_unlock>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	4802      	ldr	r0, [pc, #8]	; (8008a5c <__malloc_unlock+0xc>)
 8008a54:	f7ff f852 	bl	8007afc <__retarget_lock_release_recursive>
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	20000520 	.word	0x20000520

08008a60 <_Balloc>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	69c5      	ldr	r5, [r0, #28]
 8008a64:	0006      	movs	r6, r0
 8008a66:	000c      	movs	r4, r1
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d10e      	bne.n	8008a8a <_Balloc+0x2a>
 8008a6c:	2010      	movs	r0, #16
 8008a6e:	f7ff ff39 	bl	80088e4 <malloc>
 8008a72:	1e02      	subs	r2, r0, #0
 8008a74:	61f0      	str	r0, [r6, #28]
 8008a76:	d104      	bne.n	8008a82 <_Balloc+0x22>
 8008a78:	216b      	movs	r1, #107	; 0x6b
 8008a7a:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <_Balloc+0x80>)
 8008a7c:	4819      	ldr	r0, [pc, #100]	; (8008ae4 <_Balloc+0x84>)
 8008a7e:	f000 fdcf 	bl	8009620 <__assert_func>
 8008a82:	6045      	str	r5, [r0, #4]
 8008a84:	6085      	str	r5, [r0, #8]
 8008a86:	6005      	str	r5, [r0, #0]
 8008a88:	60c5      	str	r5, [r0, #12]
 8008a8a:	69f5      	ldr	r5, [r6, #28]
 8008a8c:	68eb      	ldr	r3, [r5, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d013      	beq.n	8008aba <_Balloc+0x5a>
 8008a92:	69f3      	ldr	r3, [r6, #28]
 8008a94:	00a2      	lsls	r2, r4, #2
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	189b      	adds	r3, r3, r2
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d118      	bne.n	8008ad2 <_Balloc+0x72>
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	000d      	movs	r5, r1
 8008aa4:	40a5      	lsls	r5, r4
 8008aa6:	1d6a      	adds	r2, r5, #5
 8008aa8:	0030      	movs	r0, r6
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	f000 fdd6 	bl	800965c <_calloc_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d00c      	beq.n	8008ace <_Balloc+0x6e>
 8008ab4:	6044      	str	r4, [r0, #4]
 8008ab6:	6085      	str	r5, [r0, #8]
 8008ab8:	e00d      	b.n	8008ad6 <_Balloc+0x76>
 8008aba:	2221      	movs	r2, #33	; 0x21
 8008abc:	2104      	movs	r1, #4
 8008abe:	0030      	movs	r0, r6
 8008ac0:	f000 fdcc 	bl	800965c <_calloc_r>
 8008ac4:	69f3      	ldr	r3, [r6, #28]
 8008ac6:	60e8      	str	r0, [r5, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e1      	bne.n	8008a92 <_Balloc+0x32>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}
 8008ad2:	6802      	ldr	r2, [r0, #0]
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6103      	str	r3, [r0, #16]
 8008ada:	60c3      	str	r3, [r0, #12]
 8008adc:	e7f8      	b.n	8008ad0 <_Balloc+0x70>
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	08009f8d 	.word	0x08009f8d
 8008ae4:	0800a00d 	.word	0x0800a00d

08008ae8 <_Bfree>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	69c6      	ldr	r6, [r0, #28]
 8008aec:	0005      	movs	r5, r0
 8008aee:	000c      	movs	r4, r1
 8008af0:	2e00      	cmp	r6, #0
 8008af2:	d10e      	bne.n	8008b12 <_Bfree+0x2a>
 8008af4:	2010      	movs	r0, #16
 8008af6:	f7ff fef5 	bl	80088e4 <malloc>
 8008afa:	1e02      	subs	r2, r0, #0
 8008afc:	61e8      	str	r0, [r5, #28]
 8008afe:	d104      	bne.n	8008b0a <_Bfree+0x22>
 8008b00:	218f      	movs	r1, #143	; 0x8f
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <_Bfree+0x40>)
 8008b04:	4809      	ldr	r0, [pc, #36]	; (8008b2c <_Bfree+0x44>)
 8008b06:	f000 fd8b 	bl	8009620 <__assert_func>
 8008b0a:	6046      	str	r6, [r0, #4]
 8008b0c:	6086      	str	r6, [r0, #8]
 8008b0e:	6006      	str	r6, [r0, #0]
 8008b10:	60c6      	str	r6, [r0, #12]
 8008b12:	2c00      	cmp	r4, #0
 8008b14:	d007      	beq.n	8008b26 <_Bfree+0x3e>
 8008b16:	69eb      	ldr	r3, [r5, #28]
 8008b18:	6862      	ldr	r2, [r4, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	0092      	lsls	r2, r2, #2
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	601c      	str	r4, [r3, #0]
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	08009f8d 	.word	0x08009f8d
 8008b2c:	0800a00d 	.word	0x0800a00d

08008b30 <__multadd>:
 8008b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b32:	000e      	movs	r6, r1
 8008b34:	9001      	str	r0, [sp, #4]
 8008b36:	000c      	movs	r4, r1
 8008b38:	001d      	movs	r5, r3
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	690f      	ldr	r7, [r1, #16]
 8008b3e:	3614      	adds	r6, #20
 8008b40:	6833      	ldr	r3, [r6, #0]
 8008b42:	3001      	adds	r0, #1
 8008b44:	b299      	uxth	r1, r3
 8008b46:	4351      	muls	r1, r2
 8008b48:	0c1b      	lsrs	r3, r3, #16
 8008b4a:	4353      	muls	r3, r2
 8008b4c:	1949      	adds	r1, r1, r5
 8008b4e:	0c0d      	lsrs	r5, r1, #16
 8008b50:	195b      	adds	r3, r3, r5
 8008b52:	0c1d      	lsrs	r5, r3, #16
 8008b54:	b289      	uxth	r1, r1
 8008b56:	041b      	lsls	r3, r3, #16
 8008b58:	185b      	adds	r3, r3, r1
 8008b5a:	c608      	stmia	r6!, {r3}
 8008b5c:	4287      	cmp	r7, r0
 8008b5e:	dcef      	bgt.n	8008b40 <__multadd+0x10>
 8008b60:	2d00      	cmp	r5, #0
 8008b62:	d022      	beq.n	8008baa <__multadd+0x7a>
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	42bb      	cmp	r3, r7
 8008b68:	dc19      	bgt.n	8008b9e <__multadd+0x6e>
 8008b6a:	6861      	ldr	r1, [r4, #4]
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	3101      	adds	r1, #1
 8008b70:	f7ff ff76 	bl	8008a60 <_Balloc>
 8008b74:	1e06      	subs	r6, r0, #0
 8008b76:	d105      	bne.n	8008b84 <__multadd+0x54>
 8008b78:	0032      	movs	r2, r6
 8008b7a:	21ba      	movs	r1, #186	; 0xba
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <__multadd+0x80>)
 8008b7e:	480d      	ldr	r0, [pc, #52]	; (8008bb4 <__multadd+0x84>)
 8008b80:	f000 fd4e 	bl	8009620 <__assert_func>
 8008b84:	0021      	movs	r1, r4
 8008b86:	6922      	ldr	r2, [r4, #16]
 8008b88:	310c      	adds	r1, #12
 8008b8a:	3202      	adds	r2, #2
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	300c      	adds	r0, #12
 8008b90:	f000 fd3c 	bl	800960c <memcpy>
 8008b94:	0021      	movs	r1, r4
 8008b96:	9801      	ldr	r0, [sp, #4]
 8008b98:	f7ff ffa6 	bl	8008ae8 <_Bfree>
 8008b9c:	0034      	movs	r4, r6
 8008b9e:	1d3b      	adds	r3, r7, #4
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	18e3      	adds	r3, r4, r3
 8008ba4:	605d      	str	r5, [r3, #4]
 8008ba6:	1c7b      	adds	r3, r7, #1
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	0020      	movs	r0, r4
 8008bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	08009ffc 	.word	0x08009ffc
 8008bb4:	0800a00d 	.word	0x0800a00d

08008bb8 <__hi0bits>:
 8008bb8:	0003      	movs	r3, r0
 8008bba:	0c02      	lsrs	r2, r0, #16
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	4282      	cmp	r2, r0
 8008bc0:	d101      	bne.n	8008bc6 <__hi0bits+0xe>
 8008bc2:	041b      	lsls	r3, r3, #16
 8008bc4:	3010      	adds	r0, #16
 8008bc6:	0e1a      	lsrs	r2, r3, #24
 8008bc8:	d101      	bne.n	8008bce <__hi0bits+0x16>
 8008bca:	3008      	adds	r0, #8
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	0f1a      	lsrs	r2, r3, #28
 8008bd0:	d101      	bne.n	8008bd6 <__hi0bits+0x1e>
 8008bd2:	3004      	adds	r0, #4
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	0f9a      	lsrs	r2, r3, #30
 8008bd8:	d101      	bne.n	8008bde <__hi0bits+0x26>
 8008bda:	3002      	adds	r0, #2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	db03      	blt.n	8008bea <__hi0bits+0x32>
 8008be2:	3001      	adds	r0, #1
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	d400      	bmi.n	8008bea <__hi0bits+0x32>
 8008be8:	2020      	movs	r0, #32
 8008bea:	4770      	bx	lr

08008bec <__lo0bits>:
 8008bec:	6803      	ldr	r3, [r0, #0]
 8008bee:	0001      	movs	r1, r0
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	4010      	ands	r0, r2
 8008bf6:	4213      	tst	r3, r2
 8008bf8:	d00d      	beq.n	8008c16 <__lo0bits+0x2a>
 8008bfa:	3a06      	subs	r2, #6
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	4213      	tst	r3, r2
 8008c00:	d105      	bne.n	8008c0e <__lo0bits+0x22>
 8008c02:	3002      	adds	r0, #2
 8008c04:	4203      	tst	r3, r0
 8008c06:	d003      	beq.n	8008c10 <__lo0bits+0x24>
 8008c08:	40d3      	lsrs	r3, r2
 8008c0a:	0010      	movs	r0, r2
 8008c0c:	600b      	str	r3, [r1, #0]
 8008c0e:	4770      	bx	lr
 8008c10:	089b      	lsrs	r3, r3, #2
 8008c12:	600b      	str	r3, [r1, #0]
 8008c14:	e7fb      	b.n	8008c0e <__lo0bits+0x22>
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	d101      	bne.n	8008c20 <__lo0bits+0x34>
 8008c1c:	2010      	movs	r0, #16
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d101      	bne.n	8008c2a <__lo0bits+0x3e>
 8008c26:	3008      	adds	r0, #8
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	071a      	lsls	r2, r3, #28
 8008c2c:	d101      	bne.n	8008c32 <__lo0bits+0x46>
 8008c2e:	3004      	adds	r0, #4
 8008c30:	091b      	lsrs	r3, r3, #4
 8008c32:	079a      	lsls	r2, r3, #30
 8008c34:	d101      	bne.n	8008c3a <__lo0bits+0x4e>
 8008c36:	3002      	adds	r0, #2
 8008c38:	089b      	lsrs	r3, r3, #2
 8008c3a:	07da      	lsls	r2, r3, #31
 8008c3c:	d4e9      	bmi.n	8008c12 <__lo0bits+0x26>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	d1e6      	bne.n	8008c12 <__lo0bits+0x26>
 8008c44:	2020      	movs	r0, #32
 8008c46:	e7e2      	b.n	8008c0e <__lo0bits+0x22>

08008c48 <__i2b>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	000c      	movs	r4, r1
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	f7ff ff07 	bl	8008a60 <_Balloc>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d107      	bne.n	8008c66 <__i2b+0x1e>
 8008c56:	2146      	movs	r1, #70	; 0x46
 8008c58:	4c05      	ldr	r4, [pc, #20]	; (8008c70 <__i2b+0x28>)
 8008c5a:	0002      	movs	r2, r0
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <__i2b+0x2c>)
 8008c5e:	0020      	movs	r0, r4
 8008c60:	31ff      	adds	r1, #255	; 0xff
 8008c62:	f000 fcdd 	bl	8009620 <__assert_func>
 8008c66:	2301      	movs	r3, #1
 8008c68:	6144      	str	r4, [r0, #20]
 8008c6a:	6103      	str	r3, [r0, #16]
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	0800a00d 	.word	0x0800a00d
 8008c74:	08009ffc 	.word	0x08009ffc

08008c78 <__multiply>:
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	0015      	movs	r5, r2
 8008c7c:	690a      	ldr	r2, [r1, #16]
 8008c7e:	692b      	ldr	r3, [r5, #16]
 8008c80:	000c      	movs	r4, r1
 8008c82:	b08b      	sub	sp, #44	; 0x2c
 8008c84:	429a      	cmp	r2, r3
 8008c86:	da01      	bge.n	8008c8c <__multiply+0x14>
 8008c88:	002c      	movs	r4, r5
 8008c8a:	000d      	movs	r5, r1
 8008c8c:	6927      	ldr	r7, [r4, #16]
 8008c8e:	692e      	ldr	r6, [r5, #16]
 8008c90:	6861      	ldr	r1, [r4, #4]
 8008c92:	19bb      	adds	r3, r7, r6
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	19ba      	adds	r2, r7, r6
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	da00      	bge.n	8008ca0 <__multiply+0x28>
 8008c9e:	3101      	adds	r1, #1
 8008ca0:	f7ff fede 	bl	8008a60 <_Balloc>
 8008ca4:	9002      	str	r0, [sp, #8]
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d106      	bne.n	8008cb8 <__multiply+0x40>
 8008caa:	21b1      	movs	r1, #177	; 0xb1
 8008cac:	4b48      	ldr	r3, [pc, #288]	; (8008dd0 <__multiply+0x158>)
 8008cae:	4849      	ldr	r0, [pc, #292]	; (8008dd4 <__multiply+0x15c>)
 8008cb0:	9a02      	ldr	r2, [sp, #8]
 8008cb2:	0049      	lsls	r1, r1, #1
 8008cb4:	f000 fcb4 	bl	8009620 <__assert_func>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	3314      	adds	r3, #20
 8008cbe:	469c      	mov	ip, r3
 8008cc0:	19bb      	adds	r3, r7, r6
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4463      	add	r3, ip
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	4663      	mov	r3, ip
 8008cca:	9904      	ldr	r1, [sp, #16]
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	d32a      	bcc.n	8008d26 <__multiply+0xae>
 8008cd0:	0023      	movs	r3, r4
 8008cd2:	00bf      	lsls	r7, r7, #2
 8008cd4:	3314      	adds	r3, #20
 8008cd6:	3514      	adds	r5, #20
 8008cd8:	9308      	str	r3, [sp, #32]
 8008cda:	00b6      	lsls	r6, r6, #2
 8008cdc:	19db      	adds	r3, r3, r7
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	19ab      	adds	r3, r5, r6
 8008ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	9306      	str	r3, [sp, #24]
 8008ce8:	0023      	movs	r3, r4
 8008cea:	9a05      	ldr	r2, [sp, #20]
 8008cec:	3315      	adds	r3, #21
 8008cee:	9501      	str	r5, [sp, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d305      	bcc.n	8008d00 <__multiply+0x88>
 8008cf4:	1b13      	subs	r3, r2, r4
 8008cf6:	3b15      	subs	r3, #21
 8008cf8:	089b      	lsrs	r3, r3, #2
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	9306      	str	r3, [sp, #24]
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d310      	bcc.n	8008d2a <__multiply+0xb2>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd05      	ble.n	8008d1a <__multiply+0xa2>
 8008d0e:	9b04      	ldr	r3, [sp, #16]
 8008d10:	3b04      	subs	r3, #4
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d056      	beq.n	8008dc8 <__multiply+0x150>
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	9a03      	ldr	r2, [sp, #12]
 8008d1e:	0018      	movs	r0, r3
 8008d20:	611a      	str	r2, [r3, #16]
 8008d22:	b00b      	add	sp, #44	; 0x2c
 8008d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d26:	c304      	stmia	r3!, {r2}
 8008d28:	e7cf      	b.n	8008cca <__multiply+0x52>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	b280      	uxth	r0, r0
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d01e      	beq.n	8008d72 <__multiply+0xfa>
 8008d34:	4667      	mov	r7, ip
 8008d36:	2500      	movs	r5, #0
 8008d38:	9e08      	ldr	r6, [sp, #32]
 8008d3a:	ce02      	ldmia	r6!, {r1}
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	b28b      	uxth	r3, r1
 8008d42:	4343      	muls	r3, r0
 8008d44:	001a      	movs	r2, r3
 8008d46:	466b      	mov	r3, sp
 8008d48:	8b9b      	ldrh	r3, [r3, #28]
 8008d4a:	18d3      	adds	r3, r2, r3
 8008d4c:	195b      	adds	r3, r3, r5
 8008d4e:	0c0d      	lsrs	r5, r1, #16
 8008d50:	4345      	muls	r5, r0
 8008d52:	9a07      	ldr	r2, [sp, #28]
 8008d54:	0c11      	lsrs	r1, r2, #16
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	0c1a      	lsrs	r2, r3, #16
 8008d5a:	188a      	adds	r2, r1, r2
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	0c15      	lsrs	r5, r2, #16
 8008d60:	0412      	lsls	r2, r2, #16
 8008d62:	431a      	orrs	r2, r3
 8008d64:	9b05      	ldr	r3, [sp, #20]
 8008d66:	c704      	stmia	r7!, {r2}
 8008d68:	42b3      	cmp	r3, r6
 8008d6a:	d8e6      	bhi.n	8008d3a <__multiply+0xc2>
 8008d6c:	4663      	mov	r3, ip
 8008d6e:	9a06      	ldr	r2, [sp, #24]
 8008d70:	509d      	str	r5, [r3, r2]
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	0c00      	lsrs	r0, r0, #16
 8008d78:	d020      	beq.n	8008dbc <__multiply+0x144>
 8008d7a:	4663      	mov	r3, ip
 8008d7c:	0025      	movs	r5, r4
 8008d7e:	4661      	mov	r1, ip
 8008d80:	2700      	movs	r7, #0
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3514      	adds	r5, #20
 8008d86:	682a      	ldr	r2, [r5, #0]
 8008d88:	680e      	ldr	r6, [r1, #0]
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	4342      	muls	r2, r0
 8008d8e:	0c36      	lsrs	r6, r6, #16
 8008d90:	1992      	adds	r2, r2, r6
 8008d92:	19d2      	adds	r2, r2, r7
 8008d94:	0416      	lsls	r6, r2, #16
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	431e      	orrs	r6, r3
 8008d9a:	600e      	str	r6, [r1, #0]
 8008d9c:	cd40      	ldmia	r5!, {r6}
 8008d9e:	684b      	ldr	r3, [r1, #4]
 8008da0:	0c36      	lsrs	r6, r6, #16
 8008da2:	4346      	muls	r6, r0
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	0c12      	lsrs	r2, r2, #16
 8008da8:	18f3      	adds	r3, r6, r3
 8008daa:	189b      	adds	r3, r3, r2
 8008dac:	9a05      	ldr	r2, [sp, #20]
 8008dae:	0c1f      	lsrs	r7, r3, #16
 8008db0:	3104      	adds	r1, #4
 8008db2:	42aa      	cmp	r2, r5
 8008db4:	d8e7      	bhi.n	8008d86 <__multiply+0x10e>
 8008db6:	4662      	mov	r2, ip
 8008db8:	9906      	ldr	r1, [sp, #24]
 8008dba:	5053      	str	r3, [r2, r1]
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	449c      	add	ip, r3
 8008dc6:	e79b      	b.n	8008d00 <__multiply+0x88>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	e79b      	b.n	8008d08 <__multiply+0x90>
 8008dd0:	08009ffc 	.word	0x08009ffc
 8008dd4:	0800a00d 	.word	0x0800a00d

08008dd8 <__pow5mult>:
 8008dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dda:	2303      	movs	r3, #3
 8008ddc:	0015      	movs	r5, r2
 8008dde:	0007      	movs	r7, r0
 8008de0:	000e      	movs	r6, r1
 8008de2:	401a      	ands	r2, r3
 8008de4:	421d      	tst	r5, r3
 8008de6:	d008      	beq.n	8008dfa <__pow5mult+0x22>
 8008de8:	4925      	ldr	r1, [pc, #148]	; (8008e80 <__pow5mult+0xa8>)
 8008dea:	3a01      	subs	r2, #1
 8008dec:	0092      	lsls	r2, r2, #2
 8008dee:	5852      	ldr	r2, [r2, r1]
 8008df0:	2300      	movs	r3, #0
 8008df2:	0031      	movs	r1, r6
 8008df4:	f7ff fe9c 	bl	8008b30 <__multadd>
 8008df8:	0006      	movs	r6, r0
 8008dfa:	10ad      	asrs	r5, r5, #2
 8008dfc:	d03d      	beq.n	8008e7a <__pow5mult+0xa2>
 8008dfe:	69fc      	ldr	r4, [r7, #28]
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d10f      	bne.n	8008e24 <__pow5mult+0x4c>
 8008e04:	2010      	movs	r0, #16
 8008e06:	f7ff fd6d 	bl	80088e4 <malloc>
 8008e0a:	1e02      	subs	r2, r0, #0
 8008e0c:	61f8      	str	r0, [r7, #28]
 8008e0e:	d105      	bne.n	8008e1c <__pow5mult+0x44>
 8008e10:	21b4      	movs	r1, #180	; 0xb4
 8008e12:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <__pow5mult+0xac>)
 8008e14:	481c      	ldr	r0, [pc, #112]	; (8008e88 <__pow5mult+0xb0>)
 8008e16:	31ff      	adds	r1, #255	; 0xff
 8008e18:	f000 fc02 	bl	8009620 <__assert_func>
 8008e1c:	6044      	str	r4, [r0, #4]
 8008e1e:	6084      	str	r4, [r0, #8]
 8008e20:	6004      	str	r4, [r0, #0]
 8008e22:	60c4      	str	r4, [r0, #12]
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	689c      	ldr	r4, [r3, #8]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	d108      	bne.n	8008e40 <__pow5mult+0x68>
 8008e2e:	0038      	movs	r0, r7
 8008e30:	4916      	ldr	r1, [pc, #88]	; (8008e8c <__pow5mult+0xb4>)
 8008e32:	f7ff ff09 	bl	8008c48 <__i2b>
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	0004      	movs	r4, r0
 8008e3a:	6098      	str	r0, [r3, #8]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6003      	str	r3, [r0, #0]
 8008e40:	2301      	movs	r3, #1
 8008e42:	421d      	tst	r5, r3
 8008e44:	d00a      	beq.n	8008e5c <__pow5mult+0x84>
 8008e46:	0031      	movs	r1, r6
 8008e48:	0022      	movs	r2, r4
 8008e4a:	0038      	movs	r0, r7
 8008e4c:	f7ff ff14 	bl	8008c78 <__multiply>
 8008e50:	0031      	movs	r1, r6
 8008e52:	9001      	str	r0, [sp, #4]
 8008e54:	0038      	movs	r0, r7
 8008e56:	f7ff fe47 	bl	8008ae8 <_Bfree>
 8008e5a:	9e01      	ldr	r6, [sp, #4]
 8008e5c:	106d      	asrs	r5, r5, #1
 8008e5e:	d00c      	beq.n	8008e7a <__pow5mult+0xa2>
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d107      	bne.n	8008e76 <__pow5mult+0x9e>
 8008e66:	0022      	movs	r2, r4
 8008e68:	0021      	movs	r1, r4
 8008e6a:	0038      	movs	r0, r7
 8008e6c:	f7ff ff04 	bl	8008c78 <__multiply>
 8008e70:	2300      	movs	r3, #0
 8008e72:	6020      	str	r0, [r4, #0]
 8008e74:	6003      	str	r3, [r0, #0]
 8008e76:	0004      	movs	r4, r0
 8008e78:	e7e2      	b.n	8008e40 <__pow5mult+0x68>
 8008e7a:	0030      	movs	r0, r6
 8008e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	0800a158 	.word	0x0800a158
 8008e84:	08009f8d 	.word	0x08009f8d
 8008e88:	0800a00d 	.word	0x0800a00d
 8008e8c:	00000271 	.word	0x00000271

08008e90 <__lshift>:
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e92:	000c      	movs	r4, r1
 8008e94:	0017      	movs	r7, r2
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	1155      	asrs	r5, r2, #5
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	18eb      	adds	r3, r5, r3
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	6849      	ldr	r1, [r1, #4]
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	9004      	str	r0, [sp, #16]
 8008eaa:	9a01      	ldr	r2, [sp, #4]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	db10      	blt.n	8008ed2 <__lshift+0x42>
 8008eb0:	9804      	ldr	r0, [sp, #16]
 8008eb2:	f7ff fdd5 	bl	8008a60 <_Balloc>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	0002      	movs	r2, r0
 8008eba:	0006      	movs	r6, r0
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	3214      	adds	r2, #20
 8008ec0:	4298      	cmp	r0, r3
 8008ec2:	d10c      	bne.n	8008ede <__lshift+0x4e>
 8008ec4:	31df      	adds	r1, #223	; 0xdf
 8008ec6:	0032      	movs	r2, r6
 8008ec8:	4b26      	ldr	r3, [pc, #152]	; (8008f64 <__lshift+0xd4>)
 8008eca:	4827      	ldr	r0, [pc, #156]	; (8008f68 <__lshift+0xd8>)
 8008ecc:	31ff      	adds	r1, #255	; 0xff
 8008ece:	f000 fba7 	bl	8009620 <__assert_func>
 8008ed2:	3101      	adds	r1, #1
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	e7e8      	b.n	8008eaa <__lshift+0x1a>
 8008ed8:	0098      	lsls	r0, r3, #2
 8008eda:	5011      	str	r1, [r2, r0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	42ab      	cmp	r3, r5
 8008ee0:	dbfa      	blt.n	8008ed8 <__lshift+0x48>
 8008ee2:	43eb      	mvns	r3, r5
 8008ee4:	17db      	asrs	r3, r3, #31
 8008ee6:	401d      	ands	r5, r3
 8008ee8:	211f      	movs	r1, #31
 8008eea:	0023      	movs	r3, r4
 8008eec:	0038      	movs	r0, r7
 8008eee:	00ad      	lsls	r5, r5, #2
 8008ef0:	1955      	adds	r5, r2, r5
 8008ef2:	6922      	ldr	r2, [r4, #16]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	4008      	ands	r0, r1
 8008efa:	4684      	mov	ip, r0
 8008efc:	189a      	adds	r2, r3, r2
 8008efe:	420f      	tst	r7, r1
 8008f00:	d02a      	beq.n	8008f58 <__lshift+0xc8>
 8008f02:	3101      	adds	r1, #1
 8008f04:	1a09      	subs	r1, r1, r0
 8008f06:	9105      	str	r1, [sp, #20]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	9503      	str	r5, [sp, #12]
 8008f0c:	4667      	mov	r7, ip
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	40b8      	lsls	r0, r7
 8008f12:	4308      	orrs	r0, r1
 8008f14:	9903      	ldr	r1, [sp, #12]
 8008f16:	c101      	stmia	r1!, {r0}
 8008f18:	9103      	str	r1, [sp, #12]
 8008f1a:	9805      	ldr	r0, [sp, #20]
 8008f1c:	cb02      	ldmia	r3!, {r1}
 8008f1e:	40c1      	lsrs	r1, r0
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d8f3      	bhi.n	8008f0c <__lshift+0x7c>
 8008f24:	0020      	movs	r0, r4
 8008f26:	3015      	adds	r0, #21
 8008f28:	2304      	movs	r3, #4
 8008f2a:	4282      	cmp	r2, r0
 8008f2c:	d304      	bcc.n	8008f38 <__lshift+0xa8>
 8008f2e:	1b13      	subs	r3, r2, r4
 8008f30:	3b15      	subs	r3, #21
 8008f32:	089b      	lsrs	r3, r3, #2
 8008f34:	3301      	adds	r3, #1
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	50e9      	str	r1, [r5, r3]
 8008f3a:	2900      	cmp	r1, #0
 8008f3c:	d002      	beq.n	8008f44 <__lshift+0xb4>
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	3302      	adds	r3, #2
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	9804      	ldr	r0, [sp, #16]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	0021      	movs	r1, r4
 8008f4c:	6133      	str	r3, [r6, #16]
 8008f4e:	f7ff fdcb 	bl	8008ae8 <_Bfree>
 8008f52:	0030      	movs	r0, r6
 8008f54:	b007      	add	sp, #28
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f58:	cb02      	ldmia	r3!, {r1}
 8008f5a:	c502      	stmia	r5!, {r1}
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d8fb      	bhi.n	8008f58 <__lshift+0xc8>
 8008f60:	e7f0      	b.n	8008f44 <__lshift+0xb4>
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	08009ffc 	.word	0x08009ffc
 8008f68:	0800a00d 	.word	0x0800a00d

08008f6c <__mcmp>:
 8008f6c:	b530      	push	{r4, r5, lr}
 8008f6e:	690b      	ldr	r3, [r1, #16]
 8008f70:	6904      	ldr	r4, [r0, #16]
 8008f72:	0002      	movs	r2, r0
 8008f74:	1ae0      	subs	r0, r4, r3
 8008f76:	429c      	cmp	r4, r3
 8008f78:	d10e      	bne.n	8008f98 <__mcmp+0x2c>
 8008f7a:	3214      	adds	r2, #20
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	3114      	adds	r1, #20
 8008f80:	0014      	movs	r4, r2
 8008f82:	18c9      	adds	r1, r1, r3
 8008f84:	18d2      	adds	r2, r2, r3
 8008f86:	3a04      	subs	r2, #4
 8008f88:	3904      	subs	r1, #4
 8008f8a:	6815      	ldr	r5, [r2, #0]
 8008f8c:	680b      	ldr	r3, [r1, #0]
 8008f8e:	429d      	cmp	r5, r3
 8008f90:	d003      	beq.n	8008f9a <__mcmp+0x2e>
 8008f92:	2001      	movs	r0, #1
 8008f94:	429d      	cmp	r5, r3
 8008f96:	d303      	bcc.n	8008fa0 <__mcmp+0x34>
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	4294      	cmp	r4, r2
 8008f9c:	d3f3      	bcc.n	8008f86 <__mcmp+0x1a>
 8008f9e:	e7fb      	b.n	8008f98 <__mcmp+0x2c>
 8008fa0:	4240      	negs	r0, r0
 8008fa2:	e7f9      	b.n	8008f98 <__mcmp+0x2c>

08008fa4 <__mdiff>:
 8008fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa6:	000e      	movs	r6, r1
 8008fa8:	0007      	movs	r7, r0
 8008faa:	0011      	movs	r1, r2
 8008fac:	0030      	movs	r0, r6
 8008fae:	b087      	sub	sp, #28
 8008fb0:	0014      	movs	r4, r2
 8008fb2:	f7ff ffdb 	bl	8008f6c <__mcmp>
 8008fb6:	1e05      	subs	r5, r0, #0
 8008fb8:	d110      	bne.n	8008fdc <__mdiff+0x38>
 8008fba:	0001      	movs	r1, r0
 8008fbc:	0038      	movs	r0, r7
 8008fbe:	f7ff fd4f 	bl	8008a60 <_Balloc>
 8008fc2:	1e02      	subs	r2, r0, #0
 8008fc4:	d104      	bne.n	8008fd0 <__mdiff+0x2c>
 8008fc6:	4b3f      	ldr	r3, [pc, #252]	; (80090c4 <__mdiff+0x120>)
 8008fc8:	483f      	ldr	r0, [pc, #252]	; (80090c8 <__mdiff+0x124>)
 8008fca:	4940      	ldr	r1, [pc, #256]	; (80090cc <__mdiff+0x128>)
 8008fcc:	f000 fb28 	bl	8009620 <__assert_func>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	6145      	str	r5, [r0, #20]
 8008fd4:	6103      	str	r3, [r0, #16]
 8008fd6:	0010      	movs	r0, r2
 8008fd8:	b007      	add	sp, #28
 8008fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fdc:	2301      	movs	r3, #1
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	db04      	blt.n	8008fee <__mdiff+0x4a>
 8008fe4:	0023      	movs	r3, r4
 8008fe6:	0034      	movs	r4, r6
 8008fe8:	001e      	movs	r6, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	0038      	movs	r0, r7
 8008ff0:	6861      	ldr	r1, [r4, #4]
 8008ff2:	f7ff fd35 	bl	8008a60 <_Balloc>
 8008ff6:	1e02      	subs	r2, r0, #0
 8008ff8:	d103      	bne.n	8009002 <__mdiff+0x5e>
 8008ffa:	4b32      	ldr	r3, [pc, #200]	; (80090c4 <__mdiff+0x120>)
 8008ffc:	4832      	ldr	r0, [pc, #200]	; (80090c8 <__mdiff+0x124>)
 8008ffe:	4934      	ldr	r1, [pc, #208]	; (80090d0 <__mdiff+0x12c>)
 8009000:	e7e4      	b.n	8008fcc <__mdiff+0x28>
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	2700      	movs	r7, #0
 8009006:	60c3      	str	r3, [r0, #12]
 8009008:	6920      	ldr	r0, [r4, #16]
 800900a:	3414      	adds	r4, #20
 800900c:	0083      	lsls	r3, r0, #2
 800900e:	18e3      	adds	r3, r4, r3
 8009010:	0021      	movs	r1, r4
 8009012:	9401      	str	r4, [sp, #4]
 8009014:	0034      	movs	r4, r6
 8009016:	9302      	str	r3, [sp, #8]
 8009018:	6933      	ldr	r3, [r6, #16]
 800901a:	3414      	adds	r4, #20
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	18e3      	adds	r3, r4, r3
 8009020:	9303      	str	r3, [sp, #12]
 8009022:	0013      	movs	r3, r2
 8009024:	3314      	adds	r3, #20
 8009026:	469c      	mov	ip, r3
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	9104      	str	r1, [sp, #16]
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	cc02      	ldmia	r4!, {r1}
 8009030:	cb20      	ldmia	r3!, {r5}
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	b2ab      	uxth	r3, r5
 8009036:	19df      	adds	r7, r3, r7
 8009038:	b28b      	uxth	r3, r1
 800903a:	1afb      	subs	r3, r7, r3
 800903c:	0c09      	lsrs	r1, r1, #16
 800903e:	0c2d      	lsrs	r5, r5, #16
 8009040:	1a6d      	subs	r5, r5, r1
 8009042:	1419      	asrs	r1, r3, #16
 8009044:	1869      	adds	r1, r5, r1
 8009046:	b29b      	uxth	r3, r3
 8009048:	140f      	asrs	r7, r1, #16
 800904a:	0409      	lsls	r1, r1, #16
 800904c:	4319      	orrs	r1, r3
 800904e:	4663      	mov	r3, ip
 8009050:	c302      	stmia	r3!, {r1}
 8009052:	469c      	mov	ip, r3
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	42a3      	cmp	r3, r4
 8009058:	d8e8      	bhi.n	800902c <__mdiff+0x88>
 800905a:	0031      	movs	r1, r6
 800905c:	9c03      	ldr	r4, [sp, #12]
 800905e:	3115      	adds	r1, #21
 8009060:	2304      	movs	r3, #4
 8009062:	428c      	cmp	r4, r1
 8009064:	d304      	bcc.n	8009070 <__mdiff+0xcc>
 8009066:	1ba3      	subs	r3, r4, r6
 8009068:	3b15      	subs	r3, #21
 800906a:	089b      	lsrs	r3, r3, #2
 800906c:	3301      	adds	r3, #1
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	9901      	ldr	r1, [sp, #4]
 8009072:	18cd      	adds	r5, r1, r3
 8009074:	9905      	ldr	r1, [sp, #20]
 8009076:	002e      	movs	r6, r5
 8009078:	18cb      	adds	r3, r1, r3
 800907a:	469c      	mov	ip, r3
 800907c:	9902      	ldr	r1, [sp, #8]
 800907e:	428e      	cmp	r6, r1
 8009080:	d310      	bcc.n	80090a4 <__mdiff+0x100>
 8009082:	9e02      	ldr	r6, [sp, #8]
 8009084:	1ee9      	subs	r1, r5, #3
 8009086:	2400      	movs	r4, #0
 8009088:	428e      	cmp	r6, r1
 800908a:	d304      	bcc.n	8009096 <__mdiff+0xf2>
 800908c:	0031      	movs	r1, r6
 800908e:	3103      	adds	r1, #3
 8009090:	1b49      	subs	r1, r1, r5
 8009092:	0889      	lsrs	r1, r1, #2
 8009094:	008c      	lsls	r4, r1, #2
 8009096:	191b      	adds	r3, r3, r4
 8009098:	3b04      	subs	r3, #4
 800909a:	6819      	ldr	r1, [r3, #0]
 800909c:	2900      	cmp	r1, #0
 800909e:	d00f      	beq.n	80090c0 <__mdiff+0x11c>
 80090a0:	6110      	str	r0, [r2, #16]
 80090a2:	e798      	b.n	8008fd6 <__mdiff+0x32>
 80090a4:	ce02      	ldmia	r6!, {r1}
 80090a6:	b28c      	uxth	r4, r1
 80090a8:	19e4      	adds	r4, r4, r7
 80090aa:	0c0f      	lsrs	r7, r1, #16
 80090ac:	1421      	asrs	r1, r4, #16
 80090ae:	1879      	adds	r1, r7, r1
 80090b0:	b2a4      	uxth	r4, r4
 80090b2:	140f      	asrs	r7, r1, #16
 80090b4:	0409      	lsls	r1, r1, #16
 80090b6:	4321      	orrs	r1, r4
 80090b8:	4664      	mov	r4, ip
 80090ba:	c402      	stmia	r4!, {r1}
 80090bc:	46a4      	mov	ip, r4
 80090be:	e7dd      	b.n	800907c <__mdiff+0xd8>
 80090c0:	3801      	subs	r0, #1
 80090c2:	e7e9      	b.n	8009098 <__mdiff+0xf4>
 80090c4:	08009ffc 	.word	0x08009ffc
 80090c8:	0800a00d 	.word	0x0800a00d
 80090cc:	00000237 	.word	0x00000237
 80090d0:	00000245 	.word	0x00000245

080090d4 <__d2b>:
 80090d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d6:	2101      	movs	r1, #1
 80090d8:	0014      	movs	r4, r2
 80090da:	001d      	movs	r5, r3
 80090dc:	9f08      	ldr	r7, [sp, #32]
 80090de:	f7ff fcbf 	bl	8008a60 <_Balloc>
 80090e2:	1e06      	subs	r6, r0, #0
 80090e4:	d105      	bne.n	80090f2 <__d2b+0x1e>
 80090e6:	0032      	movs	r2, r6
 80090e8:	4b24      	ldr	r3, [pc, #144]	; (800917c <__d2b+0xa8>)
 80090ea:	4825      	ldr	r0, [pc, #148]	; (8009180 <__d2b+0xac>)
 80090ec:	4925      	ldr	r1, [pc, #148]	; (8009184 <__d2b+0xb0>)
 80090ee:	f000 fa97 	bl	8009620 <__assert_func>
 80090f2:	032b      	lsls	r3, r5, #12
 80090f4:	006d      	lsls	r5, r5, #1
 80090f6:	0b1b      	lsrs	r3, r3, #12
 80090f8:	0d6d      	lsrs	r5, r5, #21
 80090fa:	d125      	bne.n	8009148 <__d2b+0x74>
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	2c00      	cmp	r4, #0
 8009100:	d028      	beq.n	8009154 <__d2b+0x80>
 8009102:	4668      	mov	r0, sp
 8009104:	9400      	str	r4, [sp, #0]
 8009106:	f7ff fd71 	bl	8008bec <__lo0bits>
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	9900      	ldr	r1, [sp, #0]
 800910e:	2800      	cmp	r0, #0
 8009110:	d01e      	beq.n	8009150 <__d2b+0x7c>
 8009112:	2220      	movs	r2, #32
 8009114:	001c      	movs	r4, r3
 8009116:	1a12      	subs	r2, r2, r0
 8009118:	4094      	lsls	r4, r2
 800911a:	0022      	movs	r2, r4
 800911c:	40c3      	lsrs	r3, r0
 800911e:	430a      	orrs	r2, r1
 8009120:	6172      	str	r2, [r6, #20]
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	9c01      	ldr	r4, [sp, #4]
 8009126:	61b4      	str	r4, [r6, #24]
 8009128:	1e63      	subs	r3, r4, #1
 800912a:	419c      	sbcs	r4, r3
 800912c:	3401      	adds	r4, #1
 800912e:	6134      	str	r4, [r6, #16]
 8009130:	2d00      	cmp	r5, #0
 8009132:	d017      	beq.n	8009164 <__d2b+0x90>
 8009134:	2435      	movs	r4, #53	; 0x35
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <__d2b+0xb4>)
 8009138:	18ed      	adds	r5, r5, r3
 800913a:	182d      	adds	r5, r5, r0
 800913c:	603d      	str	r5, [r7, #0]
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	1a24      	subs	r4, r4, r0
 8009142:	601c      	str	r4, [r3, #0]
 8009144:	0030      	movs	r0, r6
 8009146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009148:	2280      	movs	r2, #128	; 0x80
 800914a:	0352      	lsls	r2, r2, #13
 800914c:	4313      	orrs	r3, r2
 800914e:	e7d5      	b.n	80090fc <__d2b+0x28>
 8009150:	6171      	str	r1, [r6, #20]
 8009152:	e7e7      	b.n	8009124 <__d2b+0x50>
 8009154:	a801      	add	r0, sp, #4
 8009156:	f7ff fd49 	bl	8008bec <__lo0bits>
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	2401      	movs	r4, #1
 800915e:	6173      	str	r3, [r6, #20]
 8009160:	3020      	adds	r0, #32
 8009162:	e7e4      	b.n	800912e <__d2b+0x5a>
 8009164:	4b09      	ldr	r3, [pc, #36]	; (800918c <__d2b+0xb8>)
 8009166:	18c0      	adds	r0, r0, r3
 8009168:	4b09      	ldr	r3, [pc, #36]	; (8009190 <__d2b+0xbc>)
 800916a:	6038      	str	r0, [r7, #0]
 800916c:	18e3      	adds	r3, r4, r3
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	18f3      	adds	r3, r6, r3
 8009172:	6958      	ldr	r0, [r3, #20]
 8009174:	f7ff fd20 	bl	8008bb8 <__hi0bits>
 8009178:	0164      	lsls	r4, r4, #5
 800917a:	e7e0      	b.n	800913e <__d2b+0x6a>
 800917c:	08009ffc 	.word	0x08009ffc
 8009180:	0800a00d 	.word	0x0800a00d
 8009184:	0000030f 	.word	0x0000030f
 8009188:	fffffbcd 	.word	0xfffffbcd
 800918c:	fffffbce 	.word	0xfffffbce
 8009190:	3fffffff 	.word	0x3fffffff

08009194 <__ssputs_r>:
 8009194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009196:	b085      	sub	sp, #20
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	9203      	str	r2, [sp, #12]
 800919c:	688e      	ldr	r6, [r1, #8]
 800919e:	9a01      	ldr	r2, [sp, #4]
 80091a0:	0007      	movs	r7, r0
 80091a2:	000c      	movs	r4, r1
 80091a4:	680b      	ldr	r3, [r1, #0]
 80091a6:	4296      	cmp	r6, r2
 80091a8:	d831      	bhi.n	800920e <__ssputs_r+0x7a>
 80091aa:	898a      	ldrh	r2, [r1, #12]
 80091ac:	2190      	movs	r1, #144	; 0x90
 80091ae:	00c9      	lsls	r1, r1, #3
 80091b0:	420a      	tst	r2, r1
 80091b2:	d029      	beq.n	8009208 <__ssputs_r+0x74>
 80091b4:	2003      	movs	r0, #3
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	1a5b      	subs	r3, r3, r1
 80091ba:	9302      	str	r3, [sp, #8]
 80091bc:	6963      	ldr	r3, [r4, #20]
 80091be:	4343      	muls	r3, r0
 80091c0:	0fdd      	lsrs	r5, r3, #31
 80091c2:	18ed      	adds	r5, r5, r3
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	9802      	ldr	r0, [sp, #8]
 80091c8:	3301      	adds	r3, #1
 80091ca:	181b      	adds	r3, r3, r0
 80091cc:	106d      	asrs	r5, r5, #1
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	d900      	bls.n	80091d4 <__ssputs_r+0x40>
 80091d2:	001d      	movs	r5, r3
 80091d4:	0552      	lsls	r2, r2, #21
 80091d6:	d529      	bpl.n	800922c <__ssputs_r+0x98>
 80091d8:	0029      	movs	r1, r5
 80091da:	0038      	movs	r0, r7
 80091dc:	f7ff fbae 	bl	800893c <_malloc_r>
 80091e0:	1e06      	subs	r6, r0, #0
 80091e2:	d02d      	beq.n	8009240 <__ssputs_r+0xac>
 80091e4:	9a02      	ldr	r2, [sp, #8]
 80091e6:	6921      	ldr	r1, [r4, #16]
 80091e8:	f000 fa10 	bl	800960c <memcpy>
 80091ec:	89a2      	ldrh	r2, [r4, #12]
 80091ee:	4b19      	ldr	r3, [pc, #100]	; (8009254 <__ssputs_r+0xc0>)
 80091f0:	401a      	ands	r2, r3
 80091f2:	2380      	movs	r3, #128	; 0x80
 80091f4:	4313      	orrs	r3, r2
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	6126      	str	r6, [r4, #16]
 80091fc:	18f6      	adds	r6, r6, r3
 80091fe:	6026      	str	r6, [r4, #0]
 8009200:	6165      	str	r5, [r4, #20]
 8009202:	9e01      	ldr	r6, [sp, #4]
 8009204:	1aed      	subs	r5, r5, r3
 8009206:	60a5      	str	r5, [r4, #8]
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	429e      	cmp	r6, r3
 800920c:	d900      	bls.n	8009210 <__ssputs_r+0x7c>
 800920e:	9e01      	ldr	r6, [sp, #4]
 8009210:	0032      	movs	r2, r6
 8009212:	9903      	ldr	r1, [sp, #12]
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	f000 f9d4 	bl	80095c2 <memmove>
 800921a:	2000      	movs	r0, #0
 800921c:	68a3      	ldr	r3, [r4, #8]
 800921e:	1b9b      	subs	r3, r3, r6
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	199b      	adds	r3, r3, r6
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	b005      	add	sp, #20
 800922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922c:	002a      	movs	r2, r5
 800922e:	0038      	movs	r0, r7
 8009230:	f000 fa53 	bl	80096da <_realloc_r>
 8009234:	1e06      	subs	r6, r0, #0
 8009236:	d1df      	bne.n	80091f8 <__ssputs_r+0x64>
 8009238:	0038      	movs	r0, r7
 800923a:	6921      	ldr	r1, [r4, #16]
 800923c:	f7ff fb08 	bl	8008850 <_free_r>
 8009240:	230c      	movs	r3, #12
 8009242:	2001      	movs	r0, #1
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	89a2      	ldrh	r2, [r4, #12]
 8009248:	3334      	adds	r3, #52	; 0x34
 800924a:	4313      	orrs	r3, r2
 800924c:	81a3      	strh	r3, [r4, #12]
 800924e:	4240      	negs	r0, r0
 8009250:	e7ea      	b.n	8009228 <__ssputs_r+0x94>
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	fffffb7f 	.word	0xfffffb7f

08009258 <_svfiprintf_r>:
 8009258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800925a:	b0a1      	sub	sp, #132	; 0x84
 800925c:	9003      	str	r0, [sp, #12]
 800925e:	001d      	movs	r5, r3
 8009260:	898b      	ldrh	r3, [r1, #12]
 8009262:	000f      	movs	r7, r1
 8009264:	0016      	movs	r6, r2
 8009266:	061b      	lsls	r3, r3, #24
 8009268:	d511      	bpl.n	800928e <_svfiprintf_r+0x36>
 800926a:	690b      	ldr	r3, [r1, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10e      	bne.n	800928e <_svfiprintf_r+0x36>
 8009270:	2140      	movs	r1, #64	; 0x40
 8009272:	f7ff fb63 	bl	800893c <_malloc_r>
 8009276:	6038      	str	r0, [r7, #0]
 8009278:	6138      	str	r0, [r7, #16]
 800927a:	2800      	cmp	r0, #0
 800927c:	d105      	bne.n	800928a <_svfiprintf_r+0x32>
 800927e:	230c      	movs	r3, #12
 8009280:	9a03      	ldr	r2, [sp, #12]
 8009282:	3801      	subs	r0, #1
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	b021      	add	sp, #132	; 0x84
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928a:	2340      	movs	r3, #64	; 0x40
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	2300      	movs	r3, #0
 8009290:	ac08      	add	r4, sp, #32
 8009292:	6163      	str	r3, [r4, #20]
 8009294:	3320      	adds	r3, #32
 8009296:	7663      	strb	r3, [r4, #25]
 8009298:	3310      	adds	r3, #16
 800929a:	76a3      	strb	r3, [r4, #26]
 800929c:	9507      	str	r5, [sp, #28]
 800929e:	0035      	movs	r5, r6
 80092a0:	782b      	ldrb	r3, [r5, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <_svfiprintf_r+0x52>
 80092a6:	2b25      	cmp	r3, #37	; 0x25
 80092a8:	d148      	bne.n	800933c <_svfiprintf_r+0xe4>
 80092aa:	1bab      	subs	r3, r5, r6
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	42b5      	cmp	r5, r6
 80092b0:	d00b      	beq.n	80092ca <_svfiprintf_r+0x72>
 80092b2:	0032      	movs	r2, r6
 80092b4:	0039      	movs	r1, r7
 80092b6:	9803      	ldr	r0, [sp, #12]
 80092b8:	f7ff ff6c 	bl	8009194 <__ssputs_r>
 80092bc:	3001      	adds	r0, #1
 80092be:	d100      	bne.n	80092c2 <_svfiprintf_r+0x6a>
 80092c0:	e0af      	b.n	8009422 <_svfiprintf_r+0x1ca>
 80092c2:	6963      	ldr	r3, [r4, #20]
 80092c4:	9a05      	ldr	r2, [sp, #20]
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	6163      	str	r3, [r4, #20]
 80092ca:	782b      	ldrb	r3, [r5, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d100      	bne.n	80092d2 <_svfiprintf_r+0x7a>
 80092d0:	e0a7      	b.n	8009422 <_svfiprintf_r+0x1ca>
 80092d2:	2201      	movs	r2, #1
 80092d4:	2300      	movs	r3, #0
 80092d6:	4252      	negs	r2, r2
 80092d8:	6062      	str	r2, [r4, #4]
 80092da:	a904      	add	r1, sp, #16
 80092dc:	3254      	adds	r2, #84	; 0x54
 80092de:	1852      	adds	r2, r2, r1
 80092e0:	1c6e      	adds	r6, r5, #1
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	60e3      	str	r3, [r4, #12]
 80092e6:	60a3      	str	r3, [r4, #8]
 80092e8:	7013      	strb	r3, [r2, #0]
 80092ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80092ec:	4b55      	ldr	r3, [pc, #340]	; (8009444 <_svfiprintf_r+0x1ec>)
 80092ee:	2205      	movs	r2, #5
 80092f0:	0018      	movs	r0, r3
 80092f2:	7831      	ldrb	r1, [r6, #0]
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	f7fe fc02 	bl	8007afe <memchr>
 80092fa:	1c75      	adds	r5, r6, #1
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d11f      	bne.n	8009340 <_svfiprintf_r+0xe8>
 8009300:	6822      	ldr	r2, [r4, #0]
 8009302:	06d3      	lsls	r3, r2, #27
 8009304:	d504      	bpl.n	8009310 <_svfiprintf_r+0xb8>
 8009306:	2353      	movs	r3, #83	; 0x53
 8009308:	a904      	add	r1, sp, #16
 800930a:	185b      	adds	r3, r3, r1
 800930c:	2120      	movs	r1, #32
 800930e:	7019      	strb	r1, [r3, #0]
 8009310:	0713      	lsls	r3, r2, #28
 8009312:	d504      	bpl.n	800931e <_svfiprintf_r+0xc6>
 8009314:	2353      	movs	r3, #83	; 0x53
 8009316:	a904      	add	r1, sp, #16
 8009318:	185b      	adds	r3, r3, r1
 800931a:	212b      	movs	r1, #43	; 0x2b
 800931c:	7019      	strb	r1, [r3, #0]
 800931e:	7833      	ldrb	r3, [r6, #0]
 8009320:	2b2a      	cmp	r3, #42	; 0x2a
 8009322:	d016      	beq.n	8009352 <_svfiprintf_r+0xfa>
 8009324:	0035      	movs	r5, r6
 8009326:	2100      	movs	r1, #0
 8009328:	200a      	movs	r0, #10
 800932a:	68e3      	ldr	r3, [r4, #12]
 800932c:	782a      	ldrb	r2, [r5, #0]
 800932e:	1c6e      	adds	r6, r5, #1
 8009330:	3a30      	subs	r2, #48	; 0x30
 8009332:	2a09      	cmp	r2, #9
 8009334:	d94e      	bls.n	80093d4 <_svfiprintf_r+0x17c>
 8009336:	2900      	cmp	r1, #0
 8009338:	d111      	bne.n	800935e <_svfiprintf_r+0x106>
 800933a:	e017      	b.n	800936c <_svfiprintf_r+0x114>
 800933c:	3501      	adds	r5, #1
 800933e:	e7af      	b.n	80092a0 <_svfiprintf_r+0x48>
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	1ac0      	subs	r0, r0, r3
 8009346:	2301      	movs	r3, #1
 8009348:	4083      	lsls	r3, r0
 800934a:	4313      	orrs	r3, r2
 800934c:	002e      	movs	r6, r5
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	e7cc      	b.n	80092ec <_svfiprintf_r+0x94>
 8009352:	9b07      	ldr	r3, [sp, #28]
 8009354:	1d19      	adds	r1, r3, #4
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	9107      	str	r1, [sp, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	db01      	blt.n	8009362 <_svfiprintf_r+0x10a>
 800935e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009360:	e004      	b.n	800936c <_svfiprintf_r+0x114>
 8009362:	425b      	negs	r3, r3
 8009364:	60e3      	str	r3, [r4, #12]
 8009366:	2302      	movs	r3, #2
 8009368:	4313      	orrs	r3, r2
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	782b      	ldrb	r3, [r5, #0]
 800936e:	2b2e      	cmp	r3, #46	; 0x2e
 8009370:	d10a      	bne.n	8009388 <_svfiprintf_r+0x130>
 8009372:	786b      	ldrb	r3, [r5, #1]
 8009374:	2b2a      	cmp	r3, #42	; 0x2a
 8009376:	d135      	bne.n	80093e4 <_svfiprintf_r+0x18c>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	3502      	adds	r5, #2
 800937c:	1d1a      	adds	r2, r3, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	9207      	str	r2, [sp, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	db2b      	blt.n	80093de <_svfiprintf_r+0x186>
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	4e2f      	ldr	r6, [pc, #188]	; (8009448 <_svfiprintf_r+0x1f0>)
 800938a:	2203      	movs	r2, #3
 800938c:	0030      	movs	r0, r6
 800938e:	7829      	ldrb	r1, [r5, #0]
 8009390:	f7fe fbb5 	bl	8007afe <memchr>
 8009394:	2800      	cmp	r0, #0
 8009396:	d006      	beq.n	80093a6 <_svfiprintf_r+0x14e>
 8009398:	2340      	movs	r3, #64	; 0x40
 800939a:	1b80      	subs	r0, r0, r6
 800939c:	4083      	lsls	r3, r0
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	3501      	adds	r5, #1
 80093a2:	4313      	orrs	r3, r2
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	7829      	ldrb	r1, [r5, #0]
 80093a8:	2206      	movs	r2, #6
 80093aa:	4828      	ldr	r0, [pc, #160]	; (800944c <_svfiprintf_r+0x1f4>)
 80093ac:	1c6e      	adds	r6, r5, #1
 80093ae:	7621      	strb	r1, [r4, #24]
 80093b0:	f7fe fba5 	bl	8007afe <memchr>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d03c      	beq.n	8009432 <_svfiprintf_r+0x1da>
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <_svfiprintf_r+0x1f8>)
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d125      	bne.n	800940a <_svfiprintf_r+0x1b2>
 80093be:	2207      	movs	r2, #7
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	3307      	adds	r3, #7
 80093c4:	4393      	bics	r3, r2
 80093c6:	3308      	adds	r3, #8
 80093c8:	9307      	str	r3, [sp, #28]
 80093ca:	6963      	ldr	r3, [r4, #20]
 80093cc:	9a04      	ldr	r2, [sp, #16]
 80093ce:	189b      	adds	r3, r3, r2
 80093d0:	6163      	str	r3, [r4, #20]
 80093d2:	e764      	b.n	800929e <_svfiprintf_r+0x46>
 80093d4:	4343      	muls	r3, r0
 80093d6:	0035      	movs	r5, r6
 80093d8:	2101      	movs	r1, #1
 80093da:	189b      	adds	r3, r3, r2
 80093dc:	e7a6      	b.n	800932c <_svfiprintf_r+0xd4>
 80093de:	2301      	movs	r3, #1
 80093e0:	425b      	negs	r3, r3
 80093e2:	e7d0      	b.n	8009386 <_svfiprintf_r+0x12e>
 80093e4:	2300      	movs	r3, #0
 80093e6:	200a      	movs	r0, #10
 80093e8:	001a      	movs	r2, r3
 80093ea:	3501      	adds	r5, #1
 80093ec:	6063      	str	r3, [r4, #4]
 80093ee:	7829      	ldrb	r1, [r5, #0]
 80093f0:	1c6e      	adds	r6, r5, #1
 80093f2:	3930      	subs	r1, #48	; 0x30
 80093f4:	2909      	cmp	r1, #9
 80093f6:	d903      	bls.n	8009400 <_svfiprintf_r+0x1a8>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0c5      	beq.n	8009388 <_svfiprintf_r+0x130>
 80093fc:	9209      	str	r2, [sp, #36]	; 0x24
 80093fe:	e7c3      	b.n	8009388 <_svfiprintf_r+0x130>
 8009400:	4342      	muls	r2, r0
 8009402:	0035      	movs	r5, r6
 8009404:	2301      	movs	r3, #1
 8009406:	1852      	adds	r2, r2, r1
 8009408:	e7f1      	b.n	80093ee <_svfiprintf_r+0x196>
 800940a:	aa07      	add	r2, sp, #28
 800940c:	9200      	str	r2, [sp, #0]
 800940e:	0021      	movs	r1, r4
 8009410:	003a      	movs	r2, r7
 8009412:	4b10      	ldr	r3, [pc, #64]	; (8009454 <_svfiprintf_r+0x1fc>)
 8009414:	9803      	ldr	r0, [sp, #12]
 8009416:	f7fd fde5 	bl	8006fe4 <_printf_float>
 800941a:	9004      	str	r0, [sp, #16]
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	3301      	adds	r3, #1
 8009420:	d1d3      	bne.n	80093ca <_svfiprintf_r+0x172>
 8009422:	89bb      	ldrh	r3, [r7, #12]
 8009424:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009426:	065b      	lsls	r3, r3, #25
 8009428:	d400      	bmi.n	800942c <_svfiprintf_r+0x1d4>
 800942a:	e72c      	b.n	8009286 <_svfiprintf_r+0x2e>
 800942c:	2001      	movs	r0, #1
 800942e:	4240      	negs	r0, r0
 8009430:	e729      	b.n	8009286 <_svfiprintf_r+0x2e>
 8009432:	aa07      	add	r2, sp, #28
 8009434:	9200      	str	r2, [sp, #0]
 8009436:	0021      	movs	r1, r4
 8009438:	003a      	movs	r2, r7
 800943a:	4b06      	ldr	r3, [pc, #24]	; (8009454 <_svfiprintf_r+0x1fc>)
 800943c:	9803      	ldr	r0, [sp, #12]
 800943e:	f7fe f897 	bl	8007570 <_printf_i>
 8009442:	e7ea      	b.n	800941a <_svfiprintf_r+0x1c2>
 8009444:	0800a164 	.word	0x0800a164
 8009448:	0800a16a 	.word	0x0800a16a
 800944c:	0800a16e 	.word	0x0800a16e
 8009450:	08006fe5 	.word	0x08006fe5
 8009454:	08009195 	.word	0x08009195

08009458 <__sflush_r>:
 8009458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800945a:	898b      	ldrh	r3, [r1, #12]
 800945c:	0005      	movs	r5, r0
 800945e:	000c      	movs	r4, r1
 8009460:	071a      	lsls	r2, r3, #28
 8009462:	d45c      	bmi.n	800951e <__sflush_r+0xc6>
 8009464:	684a      	ldr	r2, [r1, #4]
 8009466:	2a00      	cmp	r2, #0
 8009468:	dc04      	bgt.n	8009474 <__sflush_r+0x1c>
 800946a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800946c:	2a00      	cmp	r2, #0
 800946e:	dc01      	bgt.n	8009474 <__sflush_r+0x1c>
 8009470:	2000      	movs	r0, #0
 8009472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009474:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009476:	2f00      	cmp	r7, #0
 8009478:	d0fa      	beq.n	8009470 <__sflush_r+0x18>
 800947a:	2200      	movs	r2, #0
 800947c:	2080      	movs	r0, #128	; 0x80
 800947e:	682e      	ldr	r6, [r5, #0]
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	001a      	movs	r2, r3
 8009484:	0140      	lsls	r0, r0, #5
 8009486:	6a21      	ldr	r1, [r4, #32]
 8009488:	4002      	ands	r2, r0
 800948a:	4203      	tst	r3, r0
 800948c:	d034      	beq.n	80094f8 <__sflush_r+0xa0>
 800948e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	075b      	lsls	r3, r3, #29
 8009494:	d506      	bpl.n	80094a4 <__sflush_r+0x4c>
 8009496:	6863      	ldr	r3, [r4, #4]
 8009498:	1ac0      	subs	r0, r0, r3
 800949a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <__sflush_r+0x4c>
 80094a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094a2:	1ac0      	subs	r0, r0, r3
 80094a4:	0002      	movs	r2, r0
 80094a6:	2300      	movs	r3, #0
 80094a8:	0028      	movs	r0, r5
 80094aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80094ac:	6a21      	ldr	r1, [r4, #32]
 80094ae:	47b8      	blx	r7
 80094b0:	89a2      	ldrh	r2, [r4, #12]
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d106      	bne.n	80094c4 <__sflush_r+0x6c>
 80094b6:	6829      	ldr	r1, [r5, #0]
 80094b8:	291d      	cmp	r1, #29
 80094ba:	d82c      	bhi.n	8009516 <__sflush_r+0xbe>
 80094bc:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <__sflush_r+0x110>)
 80094be:	410b      	asrs	r3, r1
 80094c0:	07db      	lsls	r3, r3, #31
 80094c2:	d428      	bmi.n	8009516 <__sflush_r+0xbe>
 80094c4:	2300      	movs	r3, #0
 80094c6:	6063      	str	r3, [r4, #4]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	04d2      	lsls	r2, r2, #19
 80094ce:	d505      	bpl.n	80094dc <__sflush_r+0x84>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <__sflush_r+0x82>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d100      	bne.n	80094dc <__sflush_r+0x84>
 80094da:	6560      	str	r0, [r4, #84]	; 0x54
 80094dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094de:	602e      	str	r6, [r5, #0]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d0c5      	beq.n	8009470 <__sflush_r+0x18>
 80094e4:	0023      	movs	r3, r4
 80094e6:	3344      	adds	r3, #68	; 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__sflush_r+0x9a>
 80094ec:	0028      	movs	r0, r5
 80094ee:	f7ff f9af 	bl	8008850 <_free_r>
 80094f2:	2000      	movs	r0, #0
 80094f4:	6360      	str	r0, [r4, #52]	; 0x34
 80094f6:	e7bc      	b.n	8009472 <__sflush_r+0x1a>
 80094f8:	2301      	movs	r3, #1
 80094fa:	0028      	movs	r0, r5
 80094fc:	47b8      	blx	r7
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d1c6      	bne.n	8009490 <__sflush_r+0x38>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c3      	beq.n	8009490 <__sflush_r+0x38>
 8009508:	2b1d      	cmp	r3, #29
 800950a:	d001      	beq.n	8009510 <__sflush_r+0xb8>
 800950c:	2b16      	cmp	r3, #22
 800950e:	d101      	bne.n	8009514 <__sflush_r+0xbc>
 8009510:	602e      	str	r6, [r5, #0]
 8009512:	e7ad      	b.n	8009470 <__sflush_r+0x18>
 8009514:	89a2      	ldrh	r2, [r4, #12]
 8009516:	2340      	movs	r3, #64	; 0x40
 8009518:	4313      	orrs	r3, r2
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	e7a9      	b.n	8009472 <__sflush_r+0x1a>
 800951e:	690e      	ldr	r6, [r1, #16]
 8009520:	2e00      	cmp	r6, #0
 8009522:	d0a5      	beq.n	8009470 <__sflush_r+0x18>
 8009524:	680f      	ldr	r7, [r1, #0]
 8009526:	600e      	str	r6, [r1, #0]
 8009528:	1bba      	subs	r2, r7, r6
 800952a:	9201      	str	r2, [sp, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	079b      	lsls	r3, r3, #30
 8009530:	d100      	bne.n	8009534 <__sflush_r+0xdc>
 8009532:	694a      	ldr	r2, [r1, #20]
 8009534:	60a2      	str	r2, [r4, #8]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dd99      	ble.n	8009470 <__sflush_r+0x18>
 800953c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800953e:	0032      	movs	r2, r6
 8009540:	001f      	movs	r7, r3
 8009542:	0028      	movs	r0, r5
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	6a21      	ldr	r1, [r4, #32]
 8009548:	47b8      	blx	r7
 800954a:	2800      	cmp	r0, #0
 800954c:	dc06      	bgt.n	800955c <__sflush_r+0x104>
 800954e:	2340      	movs	r3, #64	; 0x40
 8009550:	2001      	movs	r0, #1
 8009552:	89a2      	ldrh	r2, [r4, #12]
 8009554:	4240      	negs	r0, r0
 8009556:	4313      	orrs	r3, r2
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	e78a      	b.n	8009472 <__sflush_r+0x1a>
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	1836      	adds	r6, r6, r0
 8009560:	1a1b      	subs	r3, r3, r0
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	e7e7      	b.n	8009536 <__sflush_r+0xde>
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	dfbffffe 	.word	0xdfbffffe

0800956c <_fflush_r>:
 800956c:	690b      	ldr	r3, [r1, #16]
 800956e:	b570      	push	{r4, r5, r6, lr}
 8009570:	0005      	movs	r5, r0
 8009572:	000c      	movs	r4, r1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <_fflush_r+0x12>
 8009578:	2500      	movs	r5, #0
 800957a:	0028      	movs	r0, r5
 800957c:	bd70      	pop	{r4, r5, r6, pc}
 800957e:	2800      	cmp	r0, #0
 8009580:	d004      	beq.n	800958c <_fflush_r+0x20>
 8009582:	6a03      	ldr	r3, [r0, #32]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <_fflush_r+0x20>
 8009588:	f7fe f992 	bl	80078b0 <__sinit>
 800958c:	220c      	movs	r2, #12
 800958e:	5ea3      	ldrsh	r3, [r4, r2]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d0f1      	beq.n	8009578 <_fflush_r+0xc>
 8009594:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009596:	07d2      	lsls	r2, r2, #31
 8009598:	d404      	bmi.n	80095a4 <_fflush_r+0x38>
 800959a:	059b      	lsls	r3, r3, #22
 800959c:	d402      	bmi.n	80095a4 <_fflush_r+0x38>
 800959e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a0:	f7fe faab 	bl	8007afa <__retarget_lock_acquire_recursive>
 80095a4:	0028      	movs	r0, r5
 80095a6:	0021      	movs	r1, r4
 80095a8:	f7ff ff56 	bl	8009458 <__sflush_r>
 80095ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ae:	0005      	movs	r5, r0
 80095b0:	07db      	lsls	r3, r3, #31
 80095b2:	d4e2      	bmi.n	800957a <_fflush_r+0xe>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	059b      	lsls	r3, r3, #22
 80095b8:	d4df      	bmi.n	800957a <_fflush_r+0xe>
 80095ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095bc:	f7fe fa9e 	bl	8007afc <__retarget_lock_release_recursive>
 80095c0:	e7db      	b.n	800957a <_fflush_r+0xe>

080095c2 <memmove>:
 80095c2:	b510      	push	{r4, lr}
 80095c4:	4288      	cmp	r0, r1
 80095c6:	d902      	bls.n	80095ce <memmove+0xc>
 80095c8:	188b      	adds	r3, r1, r2
 80095ca:	4298      	cmp	r0, r3
 80095cc:	d303      	bcc.n	80095d6 <memmove+0x14>
 80095ce:	2300      	movs	r3, #0
 80095d0:	e007      	b.n	80095e2 <memmove+0x20>
 80095d2:	5c8b      	ldrb	r3, [r1, r2]
 80095d4:	5483      	strb	r3, [r0, r2]
 80095d6:	3a01      	subs	r2, #1
 80095d8:	d2fb      	bcs.n	80095d2 <memmove+0x10>
 80095da:	bd10      	pop	{r4, pc}
 80095dc:	5ccc      	ldrb	r4, [r1, r3]
 80095de:	54c4      	strb	r4, [r0, r3]
 80095e0:	3301      	adds	r3, #1
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d1fa      	bne.n	80095dc <memmove+0x1a>
 80095e6:	e7f8      	b.n	80095da <memmove+0x18>

080095e8 <_sbrk_r>:
 80095e8:	2300      	movs	r3, #0
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_sbrk_r+0x20>)
 80095ee:	0004      	movs	r4, r0
 80095f0:	0008      	movs	r0, r1
 80095f2:	602b      	str	r3, [r5, #0]
 80095f4:	f7fa fa7e 	bl	8003af4 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d103      	bne.n	8009604 <_sbrk_r+0x1c>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d000      	beq.n	8009604 <_sbrk_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	2000051c 	.word	0x2000051c

0800960c <memcpy>:
 800960c:	2300      	movs	r3, #0
 800960e:	b510      	push	{r4, lr}
 8009610:	429a      	cmp	r2, r3
 8009612:	d100      	bne.n	8009616 <memcpy+0xa>
 8009614:	bd10      	pop	{r4, pc}
 8009616:	5ccc      	ldrb	r4, [r1, r3]
 8009618:	54c4      	strb	r4, [r0, r3]
 800961a:	3301      	adds	r3, #1
 800961c:	e7f8      	b.n	8009610 <memcpy+0x4>
	...

08009620 <__assert_func>:
 8009620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009622:	0014      	movs	r4, r2
 8009624:	001a      	movs	r2, r3
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <__assert_func+0x2c>)
 8009628:	0005      	movs	r5, r0
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	000e      	movs	r6, r1
 800962e:	68d8      	ldr	r0, [r3, #12]
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <__assert_func+0x30>)
 8009632:	2c00      	cmp	r4, #0
 8009634:	d101      	bne.n	800963a <__assert_func+0x1a>
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <__assert_func+0x34>)
 8009638:	001c      	movs	r4, r3
 800963a:	4907      	ldr	r1, [pc, #28]	; (8009658 <__assert_func+0x38>)
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	9402      	str	r4, [sp, #8]
 8009640:	002b      	movs	r3, r5
 8009642:	9600      	str	r6, [sp, #0]
 8009644:	f000 f886 	bl	8009754 <fiprintf>
 8009648:	f000 f894 	bl	8009774 <abort>
 800964c:	2000006c 	.word	0x2000006c
 8009650:	0800a17f 	.word	0x0800a17f
 8009654:	0800a1ba 	.word	0x0800a1ba
 8009658:	0800a18c 	.word	0x0800a18c

0800965c <_calloc_r>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	0c0b      	lsrs	r3, r1, #16
 8009660:	0c15      	lsrs	r5, r2, #16
 8009662:	2b00      	cmp	r3, #0
 8009664:	d11e      	bne.n	80096a4 <_calloc_r+0x48>
 8009666:	2d00      	cmp	r5, #0
 8009668:	d10c      	bne.n	8009684 <_calloc_r+0x28>
 800966a:	b289      	uxth	r1, r1
 800966c:	b294      	uxth	r4, r2
 800966e:	434c      	muls	r4, r1
 8009670:	0021      	movs	r1, r4
 8009672:	f7ff f963 	bl	800893c <_malloc_r>
 8009676:	1e05      	subs	r5, r0, #0
 8009678:	d01b      	beq.n	80096b2 <_calloc_r+0x56>
 800967a:	0022      	movs	r2, r4
 800967c:	2100      	movs	r1, #0
 800967e:	f7fe f9b7 	bl	80079f0 <memset>
 8009682:	e016      	b.n	80096b2 <_calloc_r+0x56>
 8009684:	1c2b      	adds	r3, r5, #0
 8009686:	1c0c      	adds	r4, r1, #0
 8009688:	b289      	uxth	r1, r1
 800968a:	b292      	uxth	r2, r2
 800968c:	434a      	muls	r2, r1
 800968e:	b2a1      	uxth	r1, r4
 8009690:	b29c      	uxth	r4, r3
 8009692:	434c      	muls	r4, r1
 8009694:	0c13      	lsrs	r3, r2, #16
 8009696:	18e4      	adds	r4, r4, r3
 8009698:	0c23      	lsrs	r3, r4, #16
 800969a:	d107      	bne.n	80096ac <_calloc_r+0x50>
 800969c:	0424      	lsls	r4, r4, #16
 800969e:	b292      	uxth	r2, r2
 80096a0:	4314      	orrs	r4, r2
 80096a2:	e7e5      	b.n	8009670 <_calloc_r+0x14>
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	d101      	bne.n	80096ac <_calloc_r+0x50>
 80096a8:	1c14      	adds	r4, r2, #0
 80096aa:	e7ed      	b.n	8009688 <_calloc_r+0x2c>
 80096ac:	230c      	movs	r3, #12
 80096ae:	2500      	movs	r5, #0
 80096b0:	6003      	str	r3, [r0, #0]
 80096b2:	0028      	movs	r0, r5
 80096b4:	bd70      	pop	{r4, r5, r6, pc}

080096b6 <__ascii_mbtowc>:
 80096b6:	b082      	sub	sp, #8
 80096b8:	2900      	cmp	r1, #0
 80096ba:	d100      	bne.n	80096be <__ascii_mbtowc+0x8>
 80096bc:	a901      	add	r1, sp, #4
 80096be:	1e10      	subs	r0, r2, #0
 80096c0:	d006      	beq.n	80096d0 <__ascii_mbtowc+0x1a>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d006      	beq.n	80096d4 <__ascii_mbtowc+0x1e>
 80096c6:	7813      	ldrb	r3, [r2, #0]
 80096c8:	600b      	str	r3, [r1, #0]
 80096ca:	7810      	ldrb	r0, [r2, #0]
 80096cc:	1e43      	subs	r3, r0, #1
 80096ce:	4198      	sbcs	r0, r3
 80096d0:	b002      	add	sp, #8
 80096d2:	4770      	bx	lr
 80096d4:	2002      	movs	r0, #2
 80096d6:	4240      	negs	r0, r0
 80096d8:	e7fa      	b.n	80096d0 <__ascii_mbtowc+0x1a>

080096da <_realloc_r>:
 80096da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096dc:	0007      	movs	r7, r0
 80096de:	000e      	movs	r6, r1
 80096e0:	0014      	movs	r4, r2
 80096e2:	2900      	cmp	r1, #0
 80096e4:	d105      	bne.n	80096f2 <_realloc_r+0x18>
 80096e6:	0011      	movs	r1, r2
 80096e8:	f7ff f928 	bl	800893c <_malloc_r>
 80096ec:	0005      	movs	r5, r0
 80096ee:	0028      	movs	r0, r5
 80096f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	d103      	bne.n	80096fe <_realloc_r+0x24>
 80096f6:	f7ff f8ab 	bl	8008850 <_free_r>
 80096fa:	0025      	movs	r5, r4
 80096fc:	e7f7      	b.n	80096ee <_realloc_r+0x14>
 80096fe:	f000 f840 	bl	8009782 <_malloc_usable_size_r>
 8009702:	9001      	str	r0, [sp, #4]
 8009704:	4284      	cmp	r4, r0
 8009706:	d803      	bhi.n	8009710 <_realloc_r+0x36>
 8009708:	0035      	movs	r5, r6
 800970a:	0843      	lsrs	r3, r0, #1
 800970c:	42a3      	cmp	r3, r4
 800970e:	d3ee      	bcc.n	80096ee <_realloc_r+0x14>
 8009710:	0021      	movs	r1, r4
 8009712:	0038      	movs	r0, r7
 8009714:	f7ff f912 	bl	800893c <_malloc_r>
 8009718:	1e05      	subs	r5, r0, #0
 800971a:	d0e8      	beq.n	80096ee <_realloc_r+0x14>
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	0022      	movs	r2, r4
 8009720:	429c      	cmp	r4, r3
 8009722:	d900      	bls.n	8009726 <_realloc_r+0x4c>
 8009724:	001a      	movs	r2, r3
 8009726:	0031      	movs	r1, r6
 8009728:	0028      	movs	r0, r5
 800972a:	f7ff ff6f 	bl	800960c <memcpy>
 800972e:	0031      	movs	r1, r6
 8009730:	0038      	movs	r0, r7
 8009732:	f7ff f88d 	bl	8008850 <_free_r>
 8009736:	e7da      	b.n	80096ee <_realloc_r+0x14>

08009738 <__ascii_wctomb>:
 8009738:	0003      	movs	r3, r0
 800973a:	1e08      	subs	r0, r1, #0
 800973c:	d005      	beq.n	800974a <__ascii_wctomb+0x12>
 800973e:	2aff      	cmp	r2, #255	; 0xff
 8009740:	d904      	bls.n	800974c <__ascii_wctomb+0x14>
 8009742:	228a      	movs	r2, #138	; 0x8a
 8009744:	2001      	movs	r0, #1
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	4240      	negs	r0, r0
 800974a:	4770      	bx	lr
 800974c:	2001      	movs	r0, #1
 800974e:	700a      	strb	r2, [r1, #0]
 8009750:	e7fb      	b.n	800974a <__ascii_wctomb+0x12>
	...

08009754 <fiprintf>:
 8009754:	b40e      	push	{r1, r2, r3}
 8009756:	b517      	push	{r0, r1, r2, r4, lr}
 8009758:	4c05      	ldr	r4, [pc, #20]	; (8009770 <fiprintf+0x1c>)
 800975a:	ab05      	add	r3, sp, #20
 800975c:	cb04      	ldmia	r3!, {r2}
 800975e:	0001      	movs	r1, r0
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f000 f83c 	bl	80097e0 <_vfiprintf_r>
 8009768:	bc1e      	pop	{r1, r2, r3, r4}
 800976a:	bc08      	pop	{r3}
 800976c:	b003      	add	sp, #12
 800976e:	4718      	bx	r3
 8009770:	2000006c 	.word	0x2000006c

08009774 <abort>:
 8009774:	2006      	movs	r0, #6
 8009776:	b510      	push	{r4, lr}
 8009778:	f000 fa1e 	bl	8009bb8 <raise>
 800977c:	2001      	movs	r0, #1
 800977e:	f7fa f948 	bl	8003a12 <_exit>

08009782 <_malloc_usable_size_r>:
 8009782:	1f0b      	subs	r3, r1, #4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	1f18      	subs	r0, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	da01      	bge.n	8009790 <_malloc_usable_size_r+0xe>
 800978c:	580b      	ldr	r3, [r1, r0]
 800978e:	18c0      	adds	r0, r0, r3
 8009790:	4770      	bx	lr

08009792 <__sfputc_r>:
 8009792:	6893      	ldr	r3, [r2, #8]
 8009794:	b510      	push	{r4, lr}
 8009796:	3b01      	subs	r3, #1
 8009798:	6093      	str	r3, [r2, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	da04      	bge.n	80097a8 <__sfputc_r+0x16>
 800979e:	6994      	ldr	r4, [r2, #24]
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	db07      	blt.n	80097b4 <__sfputc_r+0x22>
 80097a4:	290a      	cmp	r1, #10
 80097a6:	d005      	beq.n	80097b4 <__sfputc_r+0x22>
 80097a8:	6813      	ldr	r3, [r2, #0]
 80097aa:	1c58      	adds	r0, r3, #1
 80097ac:	6010      	str	r0, [r2, #0]
 80097ae:	7019      	strb	r1, [r3, #0]
 80097b0:	0008      	movs	r0, r1
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	f000 f930 	bl	8009a18 <__swbuf_r>
 80097b8:	0001      	movs	r1, r0
 80097ba:	e7f9      	b.n	80097b0 <__sfputc_r+0x1e>

080097bc <__sfputs_r>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	0006      	movs	r6, r0
 80097c0:	000f      	movs	r7, r1
 80097c2:	0014      	movs	r4, r2
 80097c4:	18d5      	adds	r5, r2, r3
 80097c6:	42ac      	cmp	r4, r5
 80097c8:	d101      	bne.n	80097ce <__sfputs_r+0x12>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e007      	b.n	80097de <__sfputs_r+0x22>
 80097ce:	7821      	ldrb	r1, [r4, #0]
 80097d0:	003a      	movs	r2, r7
 80097d2:	0030      	movs	r0, r6
 80097d4:	f7ff ffdd 	bl	8009792 <__sfputc_r>
 80097d8:	3401      	adds	r4, #1
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	d1f3      	bne.n	80097c6 <__sfputs_r+0xa>
 80097de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097e0 <_vfiprintf_r>:
 80097e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e2:	b0a1      	sub	sp, #132	; 0x84
 80097e4:	000f      	movs	r7, r1
 80097e6:	0015      	movs	r5, r2
 80097e8:	001e      	movs	r6, r3
 80097ea:	9003      	str	r0, [sp, #12]
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d004      	beq.n	80097fa <_vfiprintf_r+0x1a>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <_vfiprintf_r+0x1a>
 80097f6:	f7fe f85b 	bl	80078b0 <__sinit>
 80097fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097fc:	07db      	lsls	r3, r3, #31
 80097fe:	d405      	bmi.n	800980c <_vfiprintf_r+0x2c>
 8009800:	89bb      	ldrh	r3, [r7, #12]
 8009802:	059b      	lsls	r3, r3, #22
 8009804:	d402      	bmi.n	800980c <_vfiprintf_r+0x2c>
 8009806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009808:	f7fe f977 	bl	8007afa <__retarget_lock_acquire_recursive>
 800980c:	89bb      	ldrh	r3, [r7, #12]
 800980e:	071b      	lsls	r3, r3, #28
 8009810:	d502      	bpl.n	8009818 <_vfiprintf_r+0x38>
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d113      	bne.n	8009840 <_vfiprintf_r+0x60>
 8009818:	0039      	movs	r1, r7
 800981a:	9803      	ldr	r0, [sp, #12]
 800981c:	f000 f93e 	bl	8009a9c <__swsetup_r>
 8009820:	2800      	cmp	r0, #0
 8009822:	d00d      	beq.n	8009840 <_vfiprintf_r+0x60>
 8009824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d503      	bpl.n	8009832 <_vfiprintf_r+0x52>
 800982a:	2001      	movs	r0, #1
 800982c:	4240      	negs	r0, r0
 800982e:	b021      	add	sp, #132	; 0x84
 8009830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009832:	89bb      	ldrh	r3, [r7, #12]
 8009834:	059b      	lsls	r3, r3, #22
 8009836:	d4f8      	bmi.n	800982a <_vfiprintf_r+0x4a>
 8009838:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800983a:	f7fe f95f 	bl	8007afc <__retarget_lock_release_recursive>
 800983e:	e7f4      	b.n	800982a <_vfiprintf_r+0x4a>
 8009840:	2300      	movs	r3, #0
 8009842:	ac08      	add	r4, sp, #32
 8009844:	6163      	str	r3, [r4, #20]
 8009846:	3320      	adds	r3, #32
 8009848:	7663      	strb	r3, [r4, #25]
 800984a:	3310      	adds	r3, #16
 800984c:	76a3      	strb	r3, [r4, #26]
 800984e:	9607      	str	r6, [sp, #28]
 8009850:	002e      	movs	r6, r5
 8009852:	7833      	ldrb	r3, [r6, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <_vfiprintf_r+0x7c>
 8009858:	2b25      	cmp	r3, #37	; 0x25
 800985a:	d148      	bne.n	80098ee <_vfiprintf_r+0x10e>
 800985c:	1b73      	subs	r3, r6, r5
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	42ae      	cmp	r6, r5
 8009862:	d00b      	beq.n	800987c <_vfiprintf_r+0x9c>
 8009864:	002a      	movs	r2, r5
 8009866:	0039      	movs	r1, r7
 8009868:	9803      	ldr	r0, [sp, #12]
 800986a:	f7ff ffa7 	bl	80097bc <__sfputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	d100      	bne.n	8009874 <_vfiprintf_r+0x94>
 8009872:	e0af      	b.n	80099d4 <_vfiprintf_r+0x1f4>
 8009874:	6963      	ldr	r3, [r4, #20]
 8009876:	9a05      	ldr	r2, [sp, #20]
 8009878:	189b      	adds	r3, r3, r2
 800987a:	6163      	str	r3, [r4, #20]
 800987c:	7833      	ldrb	r3, [r6, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d100      	bne.n	8009884 <_vfiprintf_r+0xa4>
 8009882:	e0a7      	b.n	80099d4 <_vfiprintf_r+0x1f4>
 8009884:	2201      	movs	r2, #1
 8009886:	2300      	movs	r3, #0
 8009888:	4252      	negs	r2, r2
 800988a:	6062      	str	r2, [r4, #4]
 800988c:	a904      	add	r1, sp, #16
 800988e:	3254      	adds	r2, #84	; 0x54
 8009890:	1852      	adds	r2, r2, r1
 8009892:	1c75      	adds	r5, r6, #1
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	60e3      	str	r3, [r4, #12]
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	7013      	strb	r3, [r2, #0]
 800989c:	65a3      	str	r3, [r4, #88]	; 0x58
 800989e:	4b59      	ldr	r3, [pc, #356]	; (8009a04 <_vfiprintf_r+0x224>)
 80098a0:	2205      	movs	r2, #5
 80098a2:	0018      	movs	r0, r3
 80098a4:	7829      	ldrb	r1, [r5, #0]
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	f7fe f929 	bl	8007afe <memchr>
 80098ac:	1c6e      	adds	r6, r5, #1
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d11f      	bne.n	80098f2 <_vfiprintf_r+0x112>
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	06d3      	lsls	r3, r2, #27
 80098b6:	d504      	bpl.n	80098c2 <_vfiprintf_r+0xe2>
 80098b8:	2353      	movs	r3, #83	; 0x53
 80098ba:	a904      	add	r1, sp, #16
 80098bc:	185b      	adds	r3, r3, r1
 80098be:	2120      	movs	r1, #32
 80098c0:	7019      	strb	r1, [r3, #0]
 80098c2:	0713      	lsls	r3, r2, #28
 80098c4:	d504      	bpl.n	80098d0 <_vfiprintf_r+0xf0>
 80098c6:	2353      	movs	r3, #83	; 0x53
 80098c8:	a904      	add	r1, sp, #16
 80098ca:	185b      	adds	r3, r3, r1
 80098cc:	212b      	movs	r1, #43	; 0x2b
 80098ce:	7019      	strb	r1, [r3, #0]
 80098d0:	782b      	ldrb	r3, [r5, #0]
 80098d2:	2b2a      	cmp	r3, #42	; 0x2a
 80098d4:	d016      	beq.n	8009904 <_vfiprintf_r+0x124>
 80098d6:	002e      	movs	r6, r5
 80098d8:	2100      	movs	r1, #0
 80098da:	200a      	movs	r0, #10
 80098dc:	68e3      	ldr	r3, [r4, #12]
 80098de:	7832      	ldrb	r2, [r6, #0]
 80098e0:	1c75      	adds	r5, r6, #1
 80098e2:	3a30      	subs	r2, #48	; 0x30
 80098e4:	2a09      	cmp	r2, #9
 80098e6:	d94e      	bls.n	8009986 <_vfiprintf_r+0x1a6>
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d111      	bne.n	8009910 <_vfiprintf_r+0x130>
 80098ec:	e017      	b.n	800991e <_vfiprintf_r+0x13e>
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7af      	b.n	8009852 <_vfiprintf_r+0x72>
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	1ac0      	subs	r0, r0, r3
 80098f8:	2301      	movs	r3, #1
 80098fa:	4083      	lsls	r3, r0
 80098fc:	4313      	orrs	r3, r2
 80098fe:	0035      	movs	r5, r6
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	e7cc      	b.n	800989e <_vfiprintf_r+0xbe>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	1d19      	adds	r1, r3, #4
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	9107      	str	r1, [sp, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	db01      	blt.n	8009914 <_vfiprintf_r+0x134>
 8009910:	930b      	str	r3, [sp, #44]	; 0x2c
 8009912:	e004      	b.n	800991e <_vfiprintf_r+0x13e>
 8009914:	425b      	negs	r3, r3
 8009916:	60e3      	str	r3, [r4, #12]
 8009918:	2302      	movs	r3, #2
 800991a:	4313      	orrs	r3, r2
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	7833      	ldrb	r3, [r6, #0]
 8009920:	2b2e      	cmp	r3, #46	; 0x2e
 8009922:	d10a      	bne.n	800993a <_vfiprintf_r+0x15a>
 8009924:	7873      	ldrb	r3, [r6, #1]
 8009926:	2b2a      	cmp	r3, #42	; 0x2a
 8009928:	d135      	bne.n	8009996 <_vfiprintf_r+0x1b6>
 800992a:	9b07      	ldr	r3, [sp, #28]
 800992c:	3602      	adds	r6, #2
 800992e:	1d1a      	adds	r2, r3, #4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	9207      	str	r2, [sp, #28]
 8009934:	2b00      	cmp	r3, #0
 8009936:	db2b      	blt.n	8009990 <_vfiprintf_r+0x1b0>
 8009938:	9309      	str	r3, [sp, #36]	; 0x24
 800993a:	4d33      	ldr	r5, [pc, #204]	; (8009a08 <_vfiprintf_r+0x228>)
 800993c:	2203      	movs	r2, #3
 800993e:	0028      	movs	r0, r5
 8009940:	7831      	ldrb	r1, [r6, #0]
 8009942:	f7fe f8dc 	bl	8007afe <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d006      	beq.n	8009958 <_vfiprintf_r+0x178>
 800994a:	2340      	movs	r3, #64	; 0x40
 800994c:	1b40      	subs	r0, r0, r5
 800994e:	4083      	lsls	r3, r0
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	3601      	adds	r6, #1
 8009954:	4313      	orrs	r3, r2
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	7831      	ldrb	r1, [r6, #0]
 800995a:	2206      	movs	r2, #6
 800995c:	482b      	ldr	r0, [pc, #172]	; (8009a0c <_vfiprintf_r+0x22c>)
 800995e:	1c75      	adds	r5, r6, #1
 8009960:	7621      	strb	r1, [r4, #24]
 8009962:	f7fe f8cc 	bl	8007afe <memchr>
 8009966:	2800      	cmp	r0, #0
 8009968:	d043      	beq.n	80099f2 <_vfiprintf_r+0x212>
 800996a:	4b29      	ldr	r3, [pc, #164]	; (8009a10 <_vfiprintf_r+0x230>)
 800996c:	2b00      	cmp	r3, #0
 800996e:	d125      	bne.n	80099bc <_vfiprintf_r+0x1dc>
 8009970:	2207      	movs	r2, #7
 8009972:	9b07      	ldr	r3, [sp, #28]
 8009974:	3307      	adds	r3, #7
 8009976:	4393      	bics	r3, r2
 8009978:	3308      	adds	r3, #8
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	6963      	ldr	r3, [r4, #20]
 800997e:	9a04      	ldr	r2, [sp, #16]
 8009980:	189b      	adds	r3, r3, r2
 8009982:	6163      	str	r3, [r4, #20]
 8009984:	e764      	b.n	8009850 <_vfiprintf_r+0x70>
 8009986:	4343      	muls	r3, r0
 8009988:	002e      	movs	r6, r5
 800998a:	2101      	movs	r1, #1
 800998c:	189b      	adds	r3, r3, r2
 800998e:	e7a6      	b.n	80098de <_vfiprintf_r+0xfe>
 8009990:	2301      	movs	r3, #1
 8009992:	425b      	negs	r3, r3
 8009994:	e7d0      	b.n	8009938 <_vfiprintf_r+0x158>
 8009996:	2300      	movs	r3, #0
 8009998:	200a      	movs	r0, #10
 800999a:	001a      	movs	r2, r3
 800999c:	3601      	adds	r6, #1
 800999e:	6063      	str	r3, [r4, #4]
 80099a0:	7831      	ldrb	r1, [r6, #0]
 80099a2:	1c75      	adds	r5, r6, #1
 80099a4:	3930      	subs	r1, #48	; 0x30
 80099a6:	2909      	cmp	r1, #9
 80099a8:	d903      	bls.n	80099b2 <_vfiprintf_r+0x1d2>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c5      	beq.n	800993a <_vfiprintf_r+0x15a>
 80099ae:	9209      	str	r2, [sp, #36]	; 0x24
 80099b0:	e7c3      	b.n	800993a <_vfiprintf_r+0x15a>
 80099b2:	4342      	muls	r2, r0
 80099b4:	002e      	movs	r6, r5
 80099b6:	2301      	movs	r3, #1
 80099b8:	1852      	adds	r2, r2, r1
 80099ba:	e7f1      	b.n	80099a0 <_vfiprintf_r+0x1c0>
 80099bc:	aa07      	add	r2, sp, #28
 80099be:	9200      	str	r2, [sp, #0]
 80099c0:	0021      	movs	r1, r4
 80099c2:	003a      	movs	r2, r7
 80099c4:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <_vfiprintf_r+0x234>)
 80099c6:	9803      	ldr	r0, [sp, #12]
 80099c8:	f7fd fb0c 	bl	8006fe4 <_printf_float>
 80099cc:	9004      	str	r0, [sp, #16]
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	d1d3      	bne.n	800997c <_vfiprintf_r+0x19c>
 80099d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099d6:	07db      	lsls	r3, r3, #31
 80099d8:	d405      	bmi.n	80099e6 <_vfiprintf_r+0x206>
 80099da:	89bb      	ldrh	r3, [r7, #12]
 80099dc:	059b      	lsls	r3, r3, #22
 80099de:	d402      	bmi.n	80099e6 <_vfiprintf_r+0x206>
 80099e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80099e2:	f7fe f88b 	bl	8007afc <__retarget_lock_release_recursive>
 80099e6:	89bb      	ldrh	r3, [r7, #12]
 80099e8:	065b      	lsls	r3, r3, #25
 80099ea:	d500      	bpl.n	80099ee <_vfiprintf_r+0x20e>
 80099ec:	e71d      	b.n	800982a <_vfiprintf_r+0x4a>
 80099ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80099f0:	e71d      	b.n	800982e <_vfiprintf_r+0x4e>
 80099f2:	aa07      	add	r2, sp, #28
 80099f4:	9200      	str	r2, [sp, #0]
 80099f6:	0021      	movs	r1, r4
 80099f8:	003a      	movs	r2, r7
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <_vfiprintf_r+0x234>)
 80099fc:	9803      	ldr	r0, [sp, #12]
 80099fe:	f7fd fdb7 	bl	8007570 <_printf_i>
 8009a02:	e7e3      	b.n	80099cc <_vfiprintf_r+0x1ec>
 8009a04:	0800a164 	.word	0x0800a164
 8009a08:	0800a16a 	.word	0x0800a16a
 8009a0c:	0800a16e 	.word	0x0800a16e
 8009a10:	08006fe5 	.word	0x08006fe5
 8009a14:	080097bd 	.word	0x080097bd

08009a18 <__swbuf_r>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	0006      	movs	r6, r0
 8009a1c:	000d      	movs	r5, r1
 8009a1e:	0014      	movs	r4, r2
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d004      	beq.n	8009a2e <__swbuf_r+0x16>
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <__swbuf_r+0x16>
 8009a2a:	f7fd ff41 	bl	80078b0 <__sinit>
 8009a2e:	69a3      	ldr	r3, [r4, #24]
 8009a30:	60a3      	str	r3, [r4, #8]
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	071b      	lsls	r3, r3, #28
 8009a36:	d528      	bpl.n	8009a8a <__swbuf_r+0x72>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d025      	beq.n	8009a8a <__swbuf_r+0x72>
 8009a3e:	6923      	ldr	r3, [r4, #16]
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	b2ef      	uxtb	r7, r5
 8009a44:	1ac0      	subs	r0, r0, r3
 8009a46:	6963      	ldr	r3, [r4, #20]
 8009a48:	b2ed      	uxtb	r5, r5
 8009a4a:	4283      	cmp	r3, r0
 8009a4c:	dc05      	bgt.n	8009a5a <__swbuf_r+0x42>
 8009a4e:	0021      	movs	r1, r4
 8009a50:	0030      	movs	r0, r6
 8009a52:	f7ff fd8b 	bl	800956c <_fflush_r>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d11d      	bne.n	8009a96 <__swbuf_r+0x7e>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	60a3      	str	r3, [r4, #8]
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	701f      	strb	r7, [r3, #0]
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	4283      	cmp	r3, r0
 8009a6e:	d004      	beq.n	8009a7a <__swbuf_r+0x62>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	07db      	lsls	r3, r3, #31
 8009a74:	d507      	bpl.n	8009a86 <__swbuf_r+0x6e>
 8009a76:	2d0a      	cmp	r5, #10
 8009a78:	d105      	bne.n	8009a86 <__swbuf_r+0x6e>
 8009a7a:	0021      	movs	r1, r4
 8009a7c:	0030      	movs	r0, r6
 8009a7e:	f7ff fd75 	bl	800956c <_fflush_r>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d107      	bne.n	8009a96 <__swbuf_r+0x7e>
 8009a86:	0028      	movs	r0, r5
 8009a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8a:	0021      	movs	r1, r4
 8009a8c:	0030      	movs	r0, r6
 8009a8e:	f000 f805 	bl	8009a9c <__swsetup_r>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0d3      	beq.n	8009a3e <__swbuf_r+0x26>
 8009a96:	2501      	movs	r5, #1
 8009a98:	426d      	negs	r5, r5
 8009a9a:	e7f4      	b.n	8009a86 <__swbuf_r+0x6e>

08009a9c <__swsetup_r>:
 8009a9c:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <__swsetup_r+0xc4>)
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	0005      	movs	r5, r0
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	000c      	movs	r4, r1
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d004      	beq.n	8009ab4 <__swsetup_r+0x18>
 8009aaa:	6a03      	ldr	r3, [r0, #32]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <__swsetup_r+0x18>
 8009ab0:	f7fd fefe 	bl	80078b0 <__sinit>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	5ee2      	ldrsh	r2, [r4, r3]
 8009ab8:	b293      	uxth	r3, r2
 8009aba:	0711      	lsls	r1, r2, #28
 8009abc:	d423      	bmi.n	8009b06 <__swsetup_r+0x6a>
 8009abe:	06d9      	lsls	r1, r3, #27
 8009ac0:	d407      	bmi.n	8009ad2 <__swsetup_r+0x36>
 8009ac2:	2309      	movs	r3, #9
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	3337      	adds	r3, #55	; 0x37
 8009aca:	4313      	orrs	r3, r2
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	4240      	negs	r0, r0
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	075b      	lsls	r3, r3, #29
 8009ad4:	d513      	bpl.n	8009afe <__swsetup_r+0x62>
 8009ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d008      	beq.n	8009aee <__swsetup_r+0x52>
 8009adc:	0023      	movs	r3, r4
 8009ade:	3344      	adds	r3, #68	; 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__swsetup_r+0x4e>
 8009ae4:	0028      	movs	r0, r5
 8009ae6:	f7fe feb3 	bl	8008850 <_free_r>
 8009aea:	2300      	movs	r3, #0
 8009aec:	6363      	str	r3, [r4, #52]	; 0x34
 8009aee:	2224      	movs	r2, #36	; 0x24
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	4393      	bics	r3, r2
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	6063      	str	r3, [r4, #4]
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	2308      	movs	r3, #8
 8009b00:	89a2      	ldrh	r2, [r4, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10b      	bne.n	8009b24 <__swsetup_r+0x88>
 8009b0c:	21a0      	movs	r1, #160	; 0xa0
 8009b0e:	2280      	movs	r2, #128	; 0x80
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	0089      	lsls	r1, r1, #2
 8009b14:	0092      	lsls	r2, r2, #2
 8009b16:	400b      	ands	r3, r1
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d003      	beq.n	8009b24 <__swsetup_r+0x88>
 8009b1c:	0021      	movs	r1, r4
 8009b1e:	0028      	movs	r0, r5
 8009b20:	f000 f892 	bl	8009c48 <__smakebuf_r>
 8009b24:	220c      	movs	r2, #12
 8009b26:	5ea3      	ldrsh	r3, [r4, r2]
 8009b28:	2001      	movs	r0, #1
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	b299      	uxth	r1, r3
 8009b2e:	4002      	ands	r2, r0
 8009b30:	4203      	tst	r3, r0
 8009b32:	d00f      	beq.n	8009b54 <__swsetup_r+0xb8>
 8009b34:	2200      	movs	r2, #0
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	6962      	ldr	r2, [r4, #20]
 8009b3a:	4252      	negs	r2, r2
 8009b3c:	61a2      	str	r2, [r4, #24]
 8009b3e:	2000      	movs	r0, #0
 8009b40:	6922      	ldr	r2, [r4, #16]
 8009b42:	4282      	cmp	r2, r0
 8009b44:	d1c4      	bne.n	8009ad0 <__swsetup_r+0x34>
 8009b46:	0609      	lsls	r1, r1, #24
 8009b48:	d5c2      	bpl.n	8009ad0 <__swsetup_r+0x34>
 8009b4a:	2240      	movs	r2, #64	; 0x40
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	3801      	subs	r0, #1
 8009b52:	e7bd      	b.n	8009ad0 <__swsetup_r+0x34>
 8009b54:	0788      	lsls	r0, r1, #30
 8009b56:	d400      	bmi.n	8009b5a <__swsetup_r+0xbe>
 8009b58:	6962      	ldr	r2, [r4, #20]
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	e7ef      	b.n	8009b3e <__swsetup_r+0xa2>
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	2000006c 	.word	0x2000006c

08009b64 <_raise_r>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	0004      	movs	r4, r0
 8009b68:	000d      	movs	r5, r1
 8009b6a:	291f      	cmp	r1, #31
 8009b6c:	d904      	bls.n	8009b78 <_raise_r+0x14>
 8009b6e:	2316      	movs	r3, #22
 8009b70:	6003      	str	r3, [r0, #0]
 8009b72:	2001      	movs	r0, #1
 8009b74:	4240      	negs	r0, r0
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d004      	beq.n	8009b88 <_raise_r+0x24>
 8009b7e:	008a      	lsls	r2, r1, #2
 8009b80:	189b      	adds	r3, r3, r2
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d108      	bne.n	8009b9a <_raise_r+0x36>
 8009b88:	0020      	movs	r0, r4
 8009b8a:	f000 f831 	bl	8009bf0 <_getpid_r>
 8009b8e:	002a      	movs	r2, r5
 8009b90:	0001      	movs	r1, r0
 8009b92:	0020      	movs	r0, r4
 8009b94:	f000 f81a 	bl	8009bcc <_kill_r>
 8009b98:	e7ed      	b.n	8009b76 <_raise_r+0x12>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	d0ea      	beq.n	8009b76 <_raise_r+0x12>
 8009ba0:	1c51      	adds	r1, r2, #1
 8009ba2:	d103      	bne.n	8009bac <_raise_r+0x48>
 8009ba4:	2316      	movs	r3, #22
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	e7e4      	b.n	8009b76 <_raise_r+0x12>
 8009bac:	2400      	movs	r4, #0
 8009bae:	0028      	movs	r0, r5
 8009bb0:	601c      	str	r4, [r3, #0]
 8009bb2:	4790      	blx	r2
 8009bb4:	0020      	movs	r0, r4
 8009bb6:	e7de      	b.n	8009b76 <_raise_r+0x12>

08009bb8 <raise>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <raise+0x10>)
 8009bbc:	0001      	movs	r1, r0
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	f7ff ffd0 	bl	8009b64 <_raise_r>
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	2000006c 	.word	0x2000006c

08009bcc <_kill_r>:
 8009bcc:	2300      	movs	r3, #0
 8009bce:	b570      	push	{r4, r5, r6, lr}
 8009bd0:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_kill_r+0x20>)
 8009bd2:	0004      	movs	r4, r0
 8009bd4:	0008      	movs	r0, r1
 8009bd6:	0011      	movs	r1, r2
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	f7f9 ff0a 	bl	80039f2 <_kill>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	d103      	bne.n	8009bea <_kill_r+0x1e>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d000      	beq.n	8009bea <_kill_r+0x1e>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	2000051c 	.word	0x2000051c

08009bf0 <_getpid_r>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	f7f9 fef8 	bl	80039e6 <_getpid>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <__swhatbuf_r>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	000e      	movs	r6, r1
 8009bfc:	001d      	movs	r5, r3
 8009bfe:	230e      	movs	r3, #14
 8009c00:	5ec9      	ldrsh	r1, [r1, r3]
 8009c02:	0014      	movs	r4, r2
 8009c04:	b096      	sub	sp, #88	; 0x58
 8009c06:	2900      	cmp	r1, #0
 8009c08:	da0c      	bge.n	8009c24 <__swhatbuf_r+0x2c>
 8009c0a:	89b2      	ldrh	r2, [r6, #12]
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	0011      	movs	r1, r2
 8009c10:	4019      	ands	r1, r3
 8009c12:	421a      	tst	r2, r3
 8009c14:	d013      	beq.n	8009c3e <__swhatbuf_r+0x46>
 8009c16:	2100      	movs	r1, #0
 8009c18:	3b40      	subs	r3, #64	; 0x40
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	6029      	str	r1, [r5, #0]
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	b016      	add	sp, #88	; 0x58
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	466a      	mov	r2, sp
 8009c26:	f000 f84d 	bl	8009cc4 <_fstat_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	dbed      	blt.n	8009c0a <__swhatbuf_r+0x12>
 8009c2e:	23f0      	movs	r3, #240	; 0xf0
 8009c30:	9901      	ldr	r1, [sp, #4]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	4019      	ands	r1, r3
 8009c36:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <__swhatbuf_r+0x4c>)
 8009c38:	18c9      	adds	r1, r1, r3
 8009c3a:	424b      	negs	r3, r1
 8009c3c:	4159      	adcs	r1, r3
 8009c3e:	2380      	movs	r3, #128	; 0x80
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	e7ea      	b.n	8009c1a <__swhatbuf_r+0x22>
 8009c44:	ffffe000 	.word	0xffffe000

08009c48 <__smakebuf_r>:
 8009c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c4a:	2602      	movs	r6, #2
 8009c4c:	898b      	ldrh	r3, [r1, #12]
 8009c4e:	0005      	movs	r5, r0
 8009c50:	000c      	movs	r4, r1
 8009c52:	4233      	tst	r3, r6
 8009c54:	d006      	beq.n	8009c64 <__smakebuf_r+0x1c>
 8009c56:	0023      	movs	r3, r4
 8009c58:	3347      	adds	r3, #71	; 0x47
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	6123      	str	r3, [r4, #16]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	6163      	str	r3, [r4, #20]
 8009c62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009c64:	466a      	mov	r2, sp
 8009c66:	ab01      	add	r3, sp, #4
 8009c68:	f7ff ffc6 	bl	8009bf8 <__swhatbuf_r>
 8009c6c:	9900      	ldr	r1, [sp, #0]
 8009c6e:	0007      	movs	r7, r0
 8009c70:	0028      	movs	r0, r5
 8009c72:	f7fe fe63 	bl	800893c <_malloc_r>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d108      	bne.n	8009c8c <__smakebuf_r+0x44>
 8009c7a:	220c      	movs	r2, #12
 8009c7c:	5ea3      	ldrsh	r3, [r4, r2]
 8009c7e:	059a      	lsls	r2, r3, #22
 8009c80:	d4ef      	bmi.n	8009c62 <__smakebuf_r+0x1a>
 8009c82:	2203      	movs	r2, #3
 8009c84:	4393      	bics	r3, r2
 8009c86:	431e      	orrs	r6, r3
 8009c88:	81a6      	strh	r6, [r4, #12]
 8009c8a:	e7e4      	b.n	8009c56 <__smakebuf_r+0xe>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	89a2      	ldrh	r2, [r4, #12]
 8009c90:	6020      	str	r0, [r4, #0]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	6120      	str	r0, [r4, #16]
 8009c9a:	6163      	str	r3, [r4, #20]
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00c      	beq.n	8009cbc <__smakebuf_r+0x74>
 8009ca2:	0028      	movs	r0, r5
 8009ca4:	230e      	movs	r3, #14
 8009ca6:	5ee1      	ldrsh	r1, [r4, r3]
 8009ca8:	f000 f81e 	bl	8009ce8 <_isatty_r>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d005      	beq.n	8009cbc <__smakebuf_r+0x74>
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	89a2      	ldrh	r2, [r4, #12]
 8009cb4:	439a      	bics	r2, r3
 8009cb6:	3b02      	subs	r3, #2
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	433b      	orrs	r3, r7
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7ce      	b.n	8009c62 <__smakebuf_r+0x1a>

08009cc4 <_fstat_r>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	b570      	push	{r4, r5, r6, lr}
 8009cc8:	4d06      	ldr	r5, [pc, #24]	; (8009ce4 <_fstat_r+0x20>)
 8009cca:	0004      	movs	r4, r0
 8009ccc:	0008      	movs	r0, r1
 8009cce:	0011      	movs	r1, r2
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	f7f9 feed 	bl	8003ab0 <_fstat>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d103      	bne.n	8009ce2 <_fstat_r+0x1e>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d000      	beq.n	8009ce2 <_fstat_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	2000051c 	.word	0x2000051c

08009ce8 <_isatty_r>:
 8009ce8:	2300      	movs	r3, #0
 8009cea:	b570      	push	{r4, r5, r6, lr}
 8009cec:	4d06      	ldr	r5, [pc, #24]	; (8009d08 <_isatty_r+0x20>)
 8009cee:	0004      	movs	r4, r0
 8009cf0:	0008      	movs	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f9 feea 	bl	8003acc <_isatty>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d103      	bne.n	8009d04 <_isatty_r+0x1c>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d000      	beq.n	8009d04 <_isatty_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd70      	pop	{r4, r5, r6, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	2000051c 	.word	0x2000051c

08009d0c <_init>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr

08009d18 <_fini>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr
